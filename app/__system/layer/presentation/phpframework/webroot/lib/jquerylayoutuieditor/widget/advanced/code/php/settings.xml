<?xml version="1.0" encoding="UTF-8"?>
<widget>
	<label>PHP</label>
	<tag>php</tag>
	<settings>
		<create_widget_class>PHPWidget</create_widget_class>
	</settings>
	<menu_widget></menu_widget>
	<template_widget><![CDATA[
		<pre class="php-content"></pre>
	]]></template_widget>
	<properties></properties>
	<menu_css><![CDATA[
		.layout-ui-editor > .menu-widgets .menu-widget.menu-widget-php:before,
		  body > .menu-widget.menu-widget-php.ui-draggable-dragging:before {
			background-image:url('#widget_webroot_url#logo.svg');
		}
		
		.layout-ui-editor > .template-widgets > .widget-header.widget-header-php .options .props,
		   .layout-ui-editor > .template-widgets > .widget-header.widget-header-php .options .toggle {
			display:none !important;
		}
		
		.layout-ui-editor > .menu-settings.menu-settings-php .settings-id,
		   .layout-ui-editor > .menu-settings.menu-settings-php .settings-classes,
		   .layout-ui-editor > .menu-settings.menu-settings-php .settings-properties,
		   .layout-ui-editor > .menu-settings.menu-settings-php .settings-widget,
		   .layout-ui-editor > .menu-settings.menu-settings-php .settings-general,
		   .layout-ui-editor > .menu-settings.menu-settings-php .settings-dimension,
		   .layout-ui-editor > .menu-settings.menu-settings-php .settings-typography,
		   .layout-ui-editor > .menu-settings.menu-settings-php .settings-decorations,
		   .layout-ui-editor > .menu-settings.menu-settings-php .settings-events,
		   .layout-ui-editor > .menu-settings.menu-settings-php .settings-others,
		   .layout-ui-editor > .menu-settings.menu-settings-php .settings-extra,
			.layout-ui-editor > .menu-settings.menu-settings-php li.settings-tabs > ul > li.settings-tab-properties,
			.layout-ui-editor > .menu-settings.menu-settings-php li.settings-tabs > ul > li.settings-tab-widget,
			.layout-ui-editor > .menu-settings.menu-settings-php li.settings-tabs > ul > li.settings-tab-style,
			.layout-ui-editor > .menu-settings.menu-settings-php li.settings-tabs > ul > li.settings-tab-events,
			.layout-ui-editor > .menu-settings.menu-settings-php li.settings-tabs > ul > li.settings-tab-extra {
			display:none;
		}
		.layout-ui-editor > .menu-settings.menu-settings-php li.settings-tabs {
			margin-top:35px;
		}
		
		.layout-ui-editor > .menu-layers .group.group-php > ul {
			display:none !important;
		}
	]]></menu_css>
	<template_css><![CDATA[
		.template-widget.template-widget-php {
			margin:5px !important; /* !important is bc of the css when .borders is active */
			padding:5px !important; /* !important is bc of the css when .borders is active */
			border:1px solid #000 !important; /* !important is bc of the css when .borders is active */
			background-image:none !important; /* !important is bc of the css when .borders is active */
			border-radius:3px;
			background:#f7f7f7;
			color:#000;
			vertical-align:middle;
			display:block;
			word-break:break-all;
		}
		body > .droppable.borders .template-widget.template-widget-php:before {
			content:"";
			border:0;
			display:none;
		}
		
		.template-widget.template-widget-php > .php-content {
			margin:0 !important; /* !important is bc of the css when .borders is active */
			padding:0 !important; /* !important is bc of the css when .borders is active */
			border:0 !important; /* !important is bc of the css when .borders is active */
			background-image:none !important; /* !important is bc of the css when .borders is active */
			display:block;
			color:inherit;
			/*font-size:inherit;*/
			font-size:12px;
			font-family:-apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, "Noto Sans", sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji" !important;
			text-align:left;
			overflow:auto;
		}
		.template-widget.template-widget-php > .php-content:focus-visible {
			outline:none;
		}
		.template-widget.template-widget-php > .php-content::-webkit-scrollbar {
			width:5px;
			height:5px;
			background-color:transparent;
		}
		body > .droppable.borders .template-widget.template-widget-php > .php-content:before {
			content:"";
			border:0;
			display:none;
		}
	]]></template_css>
	<menu_js><![CDATA[
		function PHPWidget(ui_creator, menu_widget) {
			var me = this;
			me.on_drop_menu_widget_handlers = [];
			
			me.init = function() {
				menu_widget.attr({
					"data-on-parse-template-widget-html-func": ui_creator.obj_var_name + ".menu_widgets_objs.php.parseHtml",
					"data-on-clean-template-widget-html-func": ui_creator.obj_var_name + ".menu_widgets_objs.php.cleanHtml",
					"data-on-create-template-widget-func": ui_creator.obj_var_name + ".menu_widgets_objs.php.onCreateTemplateWidget",
					"data-on-drag-stop-func": ui_creator.obj_var_name + ".menu_widgets_objs.php.onDropMenuWidget",
				});
				
				menu_widget.removeAttr("data-on-clone-menu-widget-func");
			};
			
			me.parseHtml = function(html_element) {
				if (!html_element)
					return false;
				
				var node_name = html_element.nodeName.toLowerCase();
				
				//if html_element is <php> or <?> or <?=>
				if (/^\/?(php|\?|\?=)$/i.test(node_name))
					return true;
				
				//Otherwise if html_element was previously a template-widget-php node.
				//Note that if we call the recreateWidgetChildren or convertHtmlElementToWidget methods for this widget.parent(), when the html_element is already a widget (created previously), we need to be prepared to parse it and re-convert this html_element (which is already a widget) into a new widget. So we need to detect this cases with the following code:
				if (me.isRecreateWidget(html_element))
					return true;
				
				return false;
			};
			
			me.cleanHtml = function(html_element) {
				var widget = $(html_element);
				var text = widget.children(".php-content").html();
				text = text.replace(/&lt;/g, "<").replace(/&gt;/g, ">").replace(/<br>/g, "\n").replace(/&emsp;/g, "\t").replace(/&nbsp;/g, " ").replace(/&amp;/g, "&");
				
				//prepare prefix tabs by adding them
				var prefix = widget.data("prefix");
				
				if (prefix)
					text = text.replace(/\n/g, "\n" + prefix);
				
				//replace \u2003 which is a weird white space char that is created when we call '$(.php-content).html()' function and it converts the \t to this char.
				text = text.replace(/\u2003/g, "\t");
				
				//remove the weird chars from code, this is, in the php editor appears some red dots in the code, which means there some weird chars in the code.
				var eol_control_var = "#" + (Math.random() * 10000000) + "__SYSTEM_EOL_" + (Math.random() * 10000000) + "#";
				text = text.replace(/\n/g, eol_control_var);
				text = text.replace(/[^\x20-\x7E]/g, ''); //This will remove the end_lines too but I save them through the eol_control_var and then the MyHtmlBeautify.beautify will add them again
				var regex = new RegExp(eol_control_var, "g");
				text = text.replace(regex, "\n");
				
				//console.log(text);
				return text;
			};
			
			me.onCreateTemplateWidget = function(widget, html_element) {
				var php_content = widget.children(".php-content");
				var default_text = php_content.html();
				
				php_content.html(html_element ? "" : (default_text ? default_text : "&lt;? echo 'Via PHP code'; ?&gt;"));
				
				if (html_element) {
					var is_recreate = me.isRecreateWidget(html_element);
					var node_name = html_element.nodeName.toLowerCase();
					var j_html_element = $(html_element);
					var text = "";
					
					//if html_element was previously a template-widget-php node.
					//Note that if we call the recreateWidgetChildren or convertHtmlElementToWidget methods for this widget.parent(), when the html_element is already a widget (created previously), we need to be prepared to parse it and re-convert this html_element (which is already a widget) into a new widget. So we need to detect this cases with the following code:
					if (is_recreate) {
						text = j_html_element.children(".php-content").html();
						
						var prefix = j_html_element.data("prefix");
						widget.data("prefix", prefix);
						
						//check if properties are open for the old widget and if yes, open the properties for the new widget
						ui_creator.reloadOpenMenuSettingsIfOpenedWithOldWidget(j_html_element, widget, 1000);
					}
					else {
						text = html_element.textContent;
					
						if (/^\/?(php|\?|\?=)$/i.test(node_name)) //This is for the cases: <php> or <?> or <?=>
							text = '?php ' + text + ' ?';
						
						//prepare prefix tabs by removing the tabs that don't matter
						var m = text.match(/^\?(php|=|)\r?\n(\s+)/);
						
						if (m && m[2]) {
							var prefix = m[2];
							var regex = new RegExp("(\r?\n)" + prefix, "g");
							text = text.replace(regex, "$1");
							
							widget.data("prefix", prefix);
						}
						
						//remove first and last white spaces - trim code
						text = text.replace(/^\s+/g, "").replace(/\s+$/g, "");
						
						//prepare text
						text = '&lt;' + text.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/\n/g, "<br>").replace(/\t/g, "&emsp;").replace(/ /g, "&nbsp;") + '&gt;';
					}
					
					php_content.html(text);
					
					$(html_element).remove();
				}
				
				//prepare editable box
				widget.attr("contenteditable", "false");
				
				php_content.attr("contenteditable", "true")
					.keydown(function(e) {
						e.stopPropagation(); //otherwise if the user press ctrl+v to paste a string, it will call the ui_creator.TextSelection.options.on_create_node function which then will convert this widget into a normal html block widget, which will mess the layout.
						
						//avoids enter key to create unespected html elements. Only shift+enter keys are allowed.
						var is_shift = window.event ? window.event.shiftKey : e.shiftKey;
						
						if (e.keyCode === 13 && !is_shift) {
							ui_creator.showError("Please use Shift-enter keys instead...");
							return false;
						}
					})
					.mouseup(function(e) {
						//prevents that the TextSelection open the inline menu
						e.preventDefault();
						e.stopPropagation();
						
						ui_creator.TextSelection.hideMenu(); //we need this in case the TextSelection menu is open.
					})
					.blur(function(e) {
						if (typeof ui_creator.options.on_template_widgets_layout_changed_func == "function")
							ui_creator.options.on_template_widgets_layout_changed_func(null);
					});
				
				//only allows paste with text, discarding the html. Html is not allowed here.
				ui_creator.setPasteCallbackForOnlyText(php_content);
			};
			
			me.onDropMenuWidget = function(menu_widget, widget, event, ui_obj) {
				if (me.on_drop_menu_widget_handlers && me.on_drop_menu_widget_handlers.length > 0) {
					for (var i = 0; i < me.on_drop_menu_widget_handlers.length; i++) {
						var handler = me.on_drop_menu_widget_handlers[i];
						
						if (typeof handler == "function")
							handler(menu_widget, widget, event, ui_obj);
					}
				}
			};
			
			me.addOnDropMenuWidgetHandler = function(handler) {
				if (typeof handler == "function" && me.on_drop_menu_widget_handlers.indexOf(handler) == -1)
					me.on_drop_menu_widget_handlers.push(handler);
			};
			
			me.isRecreateWidget = function(html_element) {
				if (html_element) {
					var node_name = html_element.nodeName.toLowerCase();
					var j_html_element = $(html_element);
					
					if (node_name == "div" && j_html_element.hasClass("template-widget-php") && j_html_element.data("data-tag") == "php")
						return true;
					else if (node_name == "div" && j_html_element.children("pre.php-content").length == 1 && j_html_element.children().length == 1)
						return true;
				}
				
				return false;
			};
		}
	]]></menu_js>
</widget>
