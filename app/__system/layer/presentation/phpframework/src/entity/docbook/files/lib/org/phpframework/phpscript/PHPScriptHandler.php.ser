a:1:{s:16:"PHPScriptHandler";a:1:{s:7:"methods";a:10:{s:12:"parseContent";a:15:{s:4:"name";s:12:"parseContent";s:16:"start_line_index";i:6;s:17:"start_token_index";i:15;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:1;s:22:"start_args_token_index";i:22;s:20:"end_args_token_index";i:51;s:9:"arguments";a:4:{s:8:"$content";N;s:15:"&$external_vars";s:7:"array()";s:15:"&$return_values";s:7:"array()";s:28:"$ignore_undefined_vars_error";s:5:"false";}s:25:"start_brackets_line_index";i:6;s:26:"start_brackets_token_index";i:53;s:23:"end_brackets_line_index";i:180;s:24:"end_brackets_token_index";i:1435;s:14:"end_line_index";i:180;s:15:"end_token_index";i:1435;}s:27:"parseContentWithIncludeFile";a:20:{s:4:"name";s:27:"parseContentWithIncludeFile";s:16:"start_line_index";i:184;s:17:"start_token_index";i:1441;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:1;s:8:"comments";a:2:{i:0;s:12:"//Not tested";i:1;s:404:"//The difference between this method and the parseContent method, is that, if there is an error in some php statement of the $content, this method returns an empty result, because the error will be catched with no return string. Instead of the parseContent method, that executes each php statement separately returning the rest of the result and only giving error in the catched php statement with error.";}s:25:"start_comments_line_index";i:182;s:26:"start_comments_token_index";i:1437;s:23:"end_comments_line_index";i:183;s:24:"end_comments_token_index";i:1439;s:22:"start_args_token_index";i:1448;s:20:"end_args_token_index";i:1477;s:9:"arguments";a:4:{s:8:"$content";N;s:15:"&$external_vars";s:7:"array()";s:15:"&$return_values";s:7:"array()";s:28:"$ignore_undefined_vars_error";s:5:"false";}s:25:"start_brackets_line_index";i:184;s:26:"start_brackets_token_index";i:1479;s:23:"end_brackets_line_index";i:204;s:24:"end_brackets_token_index";i:1619;s:14:"end_line_index";i:204;s:15:"end_token_index";i:1619;}s:23:"getIncludedFilePathHtml";a:20:{s:4:"name";s:23:"getIncludedFilePathHtml";s:16:"start_line_index";i:207;s:17:"start_token_index";i:1623;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:1;s:8:"comments";a:1:{i:0;s:12:"//Not tested";}s:25:"start_comments_line_index";i:206;s:26:"start_comments_token_index";i:1621;s:23:"end_comments_line_index";i:206;s:24:"end_comments_token_index";i:1621;s:22:"start_args_token_index";i:1630;s:20:"end_args_token_index";i:1659;s:9:"arguments";a:4:{s:10:"$file_path";N;s:15:"&$external_vars";s:7:"array()";s:15:"&$return_values";s:7:"array()";s:28:"$ignore_undefined_vars_error";s:5:"false";}s:25:"start_brackets_line_index";i:207;s:26:"start_brackets_token_index";i:1661;s:23:"end_brackets_line_index";i:217;s:24:"end_brackets_token_index";i:1710;s:14:"end_line_index";i:217;s:15:"end_token_index";i:1710;}s:15:"includeFilePath";a:20:{s:4:"name";s:15:"includeFilePath";s:16:"start_line_index";i:220;s:17:"start_token_index";i:1714;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:1;s:8:"comments";a:1:{i:0;s:12:"//Not tested";}s:25:"start_comments_line_index";i:219;s:26:"start_comments_token_index";i:1712;s:23:"end_comments_line_index";i:219;s:24:"end_comments_token_index";i:1712;s:22:"start_args_token_index";i:1721;s:20:"end_args_token_index";i:1750;s:9:"arguments";a:4:{s:10:"$file_path";N;s:15:"&$external_vars";s:7:"array()";s:15:"&$return_values";s:7:"array()";s:28:"$ignore_undefined_vars_error";s:5:"false";}s:25:"start_brackets_line_index";i:220;s:26:"start_brackets_token_index";i:1752;s:23:"end_brackets_line_index";i:299;s:24:"end_brackets_token_index";i:2380;s:14:"end_line_index";i:299;s:15:"end_token_index";i:2380;}s:14:"isValidPHPCode";a:20:{s:4:"name";s:14:"isValidPHPCode";s:16:"start_line_index";i:330;s:17:"start_token_index";i:2384;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:1;s:8:"comments";a:1:{i:0;s:1276:"/* 
	   Note that the $code must be a valid php code without being wraped in the PHP TAGS, bc the $code will be executed through the eval.
	   
	   Valid code samples:
	   	$code = "''";
	   	$code = '""';
		$code = '$x[23][\'asd\'][ $x["as"] ]';
		$code = '${x[23][\'asd\'][ $x["as"] ]}';
		$code = '"{$x[23][\'asd\'][ $x[\'as\'] ]}"';
		$code = '"asa" . "as"';
		$code = "'asd'";
		$code = 'Bar::foo("as", 234) . jplpinto() . "{$x[23][\'as\'][$y]}" . foo';
		$code = '"{$x[23][\'as\'][$y]}"';
		$code = '"asa" . $x. "as"';
		$code = '"onClick=\"return openChannelArticles(this, event, \'#url#\', \'#label#\')\""';
		$code = '$asd . "{$asd[\'as\']}" . $d';
		$code = "true";
		$code = 'aasd_as'; //php thinks it is a defined var
		$code = 'ArticleService . insert'; //php thinks "ArticleService" is an defined var with an object and "insert" a method.
		$code = 'ArticleService -> insert'; //php thinks "ArticleService" is an defined var with an object and "insert" a method.
		$code = 'ArticleService :: insert'; //php thinks "ArticleService" is an defined var with an object and "insert" a method.
		
	   Invalid code samples:
	   	$code = "";
		$code = 'aasd as d asd a';
		$code = '#previous_html##label##next_html#';
		$code = 'aasd_{$d}as';
		$code = 'aasd_${d}as';
	*/";}s:25:"start_comments_line_index";i:301;s:26:"start_comments_token_index";i:2382;s:23:"end_comments_line_index";i:301;s:24:"end_comments_token_index";i:2382;s:22:"start_args_token_index";i:2391;s:20:"end_args_token_index";i:2397;s:9:"arguments";a:2:{s:5:"$code";N;s:15:"&$error_message";N;}s:25:"start_brackets_line_index";i:330;s:26:"start_brackets_token_index";i:2399;s:23:"end_brackets_line_index";i:361;s:24:"end_brackets_token_index";i:2626;s:14:"end_line_index";i:361;s:15:"end_token_index";i:2626;}s:18:"isValidPHPContents";a:20:{s:4:"name";s:18:"isValidPHPContents";s:16:"start_line_index";i:364;s:17:"start_token_index";i:2630;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:1;s:8:"comments";a:1:{i:0;s:101:"//Note that this function only check the php syntax. It needs the PhpParser library previous included";}s:25:"start_comments_line_index";i:363;s:26:"start_comments_token_index";i:2628;s:23:"end_comments_line_index";i:363;s:24:"end_comments_token_index";i:2628;s:22:"start_args_token_index";i:2637;s:20:"end_args_token_index";i:2647;s:9:"arguments";a:2:{s:9:"$contents";N;s:7:"&$error";s:4:"null";}s:25:"start_brackets_line_index";i:364;s:26:"start_brackets_token_index";i:2649;s:23:"end_brackets_line_index";i:400;s:24:"end_brackets_token_index";i:2868;s:14:"end_line_index";i:400;s:15:"end_token_index";i:2868;}s:19:"isValidPHPContents2";a:20:{s:4:"name";s:19:"isValidPHPContents2";s:16:"start_line_index";i:403;s:17:"start_token_index";i:2872;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:1;s:8:"comments";a:1:{i:0;s:214:"//The problem with this function is that it will execute the php code and we only wanted to check the php syntax. If we execute the PHP code will give erros bc there will be variables that will not be present here!";}s:25:"start_comments_line_index";i:402;s:26:"start_comments_token_index";i:2870;s:23:"end_comments_line_index";i:402;s:24:"end_comments_token_index";i:2870;s:22:"start_args_token_index";i:2879;s:20:"end_args_token_index";i:2889;s:9:"arguments";a:2:{s:9:"$contents";N;s:7:"&$error";s:4:"null";}s:25:"start_brackets_line_index";i:403;s:26:"start_brackets_token_index";i:2891;s:23:"end_brackets_line_index";i:444;s:24:"end_brackets_token_index";i:3170;s:14:"end_line_index";i:444;s:15:"end_token_index";i:3170;}s:24:"isValidPHPContentsViaUrl";a:20:{s:4:"name";s:24:"isValidPHPContentsViaUrl";s:16:"start_line_index";i:454;s:17:"start_token_index";i:3176;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:1;s:8:"comments";a:2:{i:0;s:433:"/*
	 * Send $code to the url page through curl and check if the answer is == 1. Othewise is not valid.
	 *
	 * The idea is to have a file that calls the isValidPHPContentsViaUrl which will call another file (via URL) which will include the php code and echo "1". The first file will check then the request's response and if it is == 1, the code is valid, otherwise it shows the error.
	 * 
	 * Note: this function is not tested.
	 */";i:1;s:214:"//The problem with this function is that it will execute the php code and we only wanted to check the php syntax. If we execute the PHP code will give erros bc there will be variables that will not be present here!";}s:25:"start_comments_line_index";i:446;s:26:"start_comments_token_index";i:3172;s:23:"end_comments_line_index";i:453;s:24:"end_comments_token_index";i:3174;s:22:"start_args_token_index";i:3183;s:20:"end_args_token_index";i:3203;s:9:"arguments";a:4:{s:4:"$url";N;s:9:"$contents";N;s:7:"&$error";s:4:"null";s:19:"$connection_timeout";s:1:"0";}s:25:"start_brackets_line_index";i:454;s:26:"start_brackets_token_index";i:3205;s:23:"end_brackets_line_index";i:493;s:24:"end_brackets_token_index";i:3597;s:14:"end_line_index";i:493;s:15:"end_token_index";i:3597;}s:32:"isValidPHPContentsViaCommandLine";a:20:{s:4:"name";s:32:"isValidPHPContentsViaCommandLine";s:16:"start_line_index";i:504;s:17:"start_token_index";i:3603;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:1;s:8:"comments";a:2:{i:0;s:889:"/* We strongly DON'T advise the use of this method bc it uses command line, and if a server has the php command line defined differently, this command line won't work, this is, if a server doesn't have the php in the /bin or /usr/bin we cannot simply do "php ...", we must use the full path "/usr/bin/php/". 
	 * Additionally this function doesn't work on windows.
	 * TRY TO AVOID THIS METHOD
	 * Instead you can use the the methods isValidPHPContents or printPHPContentsViaUrl + isValidPHPContentsViaUrl. 
	 * The idea is to have a file that calls the isValidPHPContentsViaUrl which will call another file (via URL) which will include the php code and echo "1". The first file will check then the request's response and if it is == 1, the code is valid, otherwise it shows the error.
	 * 
	 * Additionally note that the shell_exec function should be avoid bc has some security risks
	 */";i:1;s:48:"//$contents must be wrapped in the PHP TAGS (<?)";}s:25:"start_comments_line_index";i:495;s:26:"start_comments_token_index";i:3599;s:23:"end_comments_line_index";i:503;s:24:"end_comments_token_index";i:3601;s:22:"start_args_token_index";i:3610;s:20:"end_args_token_index";i:3620;s:9:"arguments";a:2:{s:9:"$contents";N;s:7:"&$error";s:4:"null";}s:25:"start_brackets_line_index";i:504;s:26:"start_brackets_token_index";i:3622;s:23:"end_brackets_line_index";i:553;s:24:"end_brackets_token_index";i:3904;s:14:"end_line_index";i:553;s:15:"end_token_index";i:3904;}s:22:"printPHPContentsViaUrl";a:19:{s:4:"name";s:22:"printPHPContentsViaUrl";s:16:"start_line_index";i:561;s:17:"start_token_index";i:3908;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:1;s:8:"comments";a:1:{i:0;s:404:"/*
	 * receives $code from POST, create a temp file with it, include file, catch all outputs and at the end returns "1". If echo 1 is the only thing printed, it means the code is correct.
	 * Note: this function should not return anything bc if there is a php syntax error, apache will stop executing the code at the "include" line and echo the php error.
	 * 
	 * Note: this function is not tested.
	 */";}s:25:"start_comments_line_index";i:555;s:26:"start_comments_token_index";i:3906;s:23:"end_comments_line_index";i:555;s:24:"end_comments_token_index";i:3906;s:22:"start_args_token_index";i:3915;s:20:"end_args_token_index";i:3916;s:25:"start_brackets_line_index";i:561;s:26:"start_brackets_token_index";i:3918;s:23:"end_brackets_line_index";i:580;s:24:"end_brackets_token_index";i:4075;s:14:"end_line_index";i:580;s:15:"end_token_index";i:4075;}}}}