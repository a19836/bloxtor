a:1:{s:16:"HashTagParameter";a:2:{s:7:"methods";a:4:{s:27:"existsHTMLHashTagParameters";a:20:{s:4:"name";s:27:"existsHTMLHashTagParameters";s:16:"start_line_index";i:55;s:17:"start_token_index";i:117;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:1;s:8:"comments";a:4:{i:0;s:644:"/*
	 * Note that some files contain the same regex than the HTML_HASH_TAG_PARAMETER_FULL_REGEX, but translated in javascript, this is:
	 *  - app/lib/org/phpframework/workflow/task/programming/common/webroot/js/PTLFieldsUtilObj.js
	 *  		/#([\w\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u024F\u1EBD\u1EBC"' \-\+\[\]\.\$]+)#/g
	 *  - app/__system/layer/presentation/common/webroot/vendor/myhtmlbeautify/MyHtmlBeautify.js
	 *  		/\{\s*(\\?)\s*(\$[\w\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u024F\u1EBD\u1EBC"' \-\+\[\]\.\$]+)\s*\}/g
	 *
	 * Which means that any changes in the HTML_HASH_TAG_PARAMETER_PARTIAL_REGEX should be updated in this other files too.
	 */";i:1;s:551:"/*
	 * Then there are other places with other regexes that we should play attention too:
	 *  - app/__system/layer/presentation/phpframework/src/util/CMSPresentationFormSettingsUIHandler.php
	 * 		/#([\w \-\+\.]+)#/iu
	 *
	 * Which means that any changes in the HTML_HASH_TAG_PARAMETER_PARTIAL_REGEX should be updated in this other files too, but with carefull, this is, in the case of the '/#([\w \-\+\.]+)#/iu' regex in CMSPresentationFormSettingsUIHandler.php, we only need to get the hash-tags-parameters with the characters: [, ], $, ' or ".
	 */";i:2;s:338:"/*
	 * To search if there are more places where #xxx# can be, please open your terminal and type:
	 * 	cd /var/www/html/phpframework/trunk
	 * 	grep -r "#" app/lib/org/phpframework/ app/__system/layer/presentation/phpframework/ | grep '\\w' | grep -v "/cache" | grep -v "/vendor/" | grep -v "/docbook/" | grep -v "\.ser$" | grep "\#"
	 */";i:3;s:71:"/*
	 * checks if exists hash-tag-parameters, like #foo#, in $text.
	 */";}s:25:"start_comments_line_index";i:28;s:26:"start_comments_token_index";i:109;s:23:"end_comments_line_index";i:54;s:24:"end_comments_token_index";i:115;s:22:"start_args_token_index";i:124;s:20:"end_args_token_index";i:126;s:9:"arguments";a:1:{s:5:"$text";N;}s:25:"start_brackets_line_index";i:55;s:26:"start_brackets_token_index";i:128;s:23:"end_brackets_line_index";i:59;s:24:"end_brackets_token_index";i:175;s:14:"end_line_index";i:59;s:15:"end_token_index";i:175;}s:38:"existsHTMLSuperGlobalHashTagParameters";a:20:{s:4:"name";s:38:"existsHTMLSuperGlobalHashTagParameters";s:16:"start_line_index";i:64;s:17:"start_token_index";i:179;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:1;s:8:"comments";a:1:{i:0;s:84:"/*
	 * checks if exists global-hash-tag-parameters, like #_GET[foo]#, in $text.
	 */";}s:25:"start_comments_line_index";i:61;s:26:"start_comments_token_index";i:177;s:23:"end_comments_line_index";i:63;s:24:"end_comments_token_index";i:177;s:22:"start_args_token_index";i:186;s:20:"end_args_token_index";i:188;s:9:"arguments";a:1:{s:5:"$text";N;}s:25:"start_brackets_line_index";i:64;s:26:"start_brackets_token_index";i:190;s:23:"end_brackets_line_index";i:68;s:24:"end_brackets_token_index";i:237;s:14:"end_line_index";i:68;s:15:"end_token_index";i:237;}s:38:"replaceHTMLHashTagParametersWithValues";a:20:{s:4:"name";s:38:"replaceHTMLHashTagParametersWithValues";s:16:"start_line_index";i:74;s:17:"start_token_index";i:241;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:1;s:8:"comments";a:1:{i:0;s:177:"/*
	 * replaces all hash-tag-parameters, like #foo#, in $text by the correspondent $values.
	 * $replace_by_filter could be an array with names or regexes or a regex string
	 */";}s:25:"start_comments_line_index";i:70;s:26:"start_comments_token_index";i:239;s:23:"end_comments_line_index";i:73;s:24:"end_comments_token_index";i:239;s:22:"start_args_token_index";i:248;s:20:"end_args_token_index";i:267;s:9:"arguments";a:4:{s:5:"$text";N;s:7:"$values";N;s:18:"$replace_by_filter";s:4:"null";s:20:"$replace_global_vars";s:4:"true";}s:25:"start_brackets_line_index";i:74;s:26:"start_brackets_token_index";i:269;s:23:"end_brackets_line_index";i:87;s:24:"end_brackets_token_index";i:357;s:14:"end_line_index";i:87;s:15:"end_token_index";i:357;}s:30:"getHTMLHashTagParametersValues";a:20:{s:4:"name";s:30:"getHTMLHashTagParametersValues";s:16:"start_line_index";i:93;s:17:"start_token_index";i:361;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:1;s:8:"comments";a:1:{i:0;s:143:"/*
	 * get all hash-tag-parameters, like #foo#, in $text.
	 * $replace_by_filter could be an array with names or regexes or a regex string
	 */";}s:25:"start_comments_line_index";i:89;s:26:"start_comments_token_index";i:359;s:23:"end_comments_line_index";i:92;s:24:"end_comments_token_index";i:359;s:22:"start_args_token_index";i:368;s:20:"end_args_token_index";i:391;s:9:"arguments";a:4:{s:5:"$text";N;s:18:"$replace_by_filter";s:4:"null";s:20:"$replace_global_vars";s:4:"true";s:16:"$values_var_name";s:8:""values"";}s:25:"start_brackets_line_index";i:93;s:26:"start_brackets_token_index";i:393;s:23:"end_brackets_line_index";i:192;s:24:"end_brackets_token_index";i:1280;s:14:"end_line_index";i:192;s:15:"end_token_index";i:1280;}}s:5:"props";a:6:{s:36:"SQL_HASH_TAG_PARAMETER_PARTIAL_REGEX";a:16:{s:4:"name";s:36:"SQL_HASH_TAG_PARAMETER_PARTIAL_REGEX";s:4:"type";s:6:"public";s:5:"value";s:22:""#([\w \-\+\.\>\<]+)#"";s:8:"var_type";s:6:"string";s:6:"static";b:0;s:8:"abstract";b:0;s:5:"const";b:1;s:16:"start_line_index";i:10;s:17:"start_token_index";i:11;s:14:"end_line_index";i:10;s:15:"end_token_index";i:18;s:8:"comments";a:1:{i:0;s:321:"/*
	 * Note that the SQL_HASH_TAG_PARAMETER_PARTIAL_REGEX is different from the HTML_HASH_TAG_PARAMETER_PARTIAL_REGEX. The SQL_HASH_TAG_PARAMETER_PARTIAL_REGEX does NOT allow calls like #foo[0]#. Only simple calls like #foo#!
	 * Otherwise the automatic creation of business logic and presentation UIs will NOT work!
	 */";}s:25:"start_comments_line_index";i:6;s:26:"start_comments_token_index";i:9;s:23:"end_comments_line_index";i:9;s:24:"end_comments_token_index";i:9;}s:33:"SQL_HASH_TAG_PARAMETER_FULL_REGEX";a:11:{s:4:"name";s:33:"SQL_HASH_TAG_PARAMETER_FULL_REGEX";s:4:"type";s:6:"public";s:5:"value";s:55:""/" . self::SQL_HASH_TAG_PARAMETER_PARTIAL_REGEX . "/u"";s:8:"var_type";s:6:"string";s:6:"static";b:0;s:8:"abstract";b:0;s:5:"const";b:1;s:16:"start_line_index";i:11;s:17:"start_token_index";i:20;s:14:"end_line_index";i:11;s:15:"end_token_index";i:37;}s:32:"HTML_TAG_PARAMETER_PARTIAL_REGEX";a:16:{s:4:"name";s:32:"HTML_TAG_PARAMETER_PARTIAL_REGEX";s:4:"type";s:6:"public";s:5:"value";s:31:""([\w\"' \-\+\[\]\.\\\$\\\\]+)"";s:8:"var_type";s:6:"string";s:6:"static";b:0;s:8:"abstract";b:0;s:5:"const";b:1;s:16:"start_line_index";i:23;s:17:"start_token_index";i:43;s:14:"end_line_index";i:23;s:15:"end_token_index";i:50;s:8:"comments";a:2:{i:0;s:71:"//'\w' means all words with '_' and '/u' means with accents and รง too.";i:1;s:732:"/*
	 * Do not add the /#([^#]+)#/ bc if the $value contains html with css it will the css colors with attributes, this is:
	 * 	.test1 {color:#000;}  .test2 {color:#000; background:#ccc; border:1px solid #000;} 
	 * Then the regex /#([^#]+)#/ will get the matches: ["#000;}  .test2 {color:#", "#ccc; border:1px solid #"], and this is not what we want.
	 *
	 * The correct regex is: /#([\w"' \-\+\[\]\.\\\$]+)#/u which means that includes accents and รง, this is, '\w' means all words with '_' and '/u' means with accents and รง too. '/u' converts unicode to accents chars.
	 *
	 * '\w' means all words with '_' and '/u' means with accents and รง too.
	 * The '\' in the regex is bc we want to parse the cases of #[\$idx][name]#
	 */";}s:25:"start_comments_line_index";i:11;s:26:"start_comments_token_index";i:39;s:23:"end_comments_line_index";i:22;s:24:"end_comments_token_index";i:41;}s:37:"HTML_HASH_TAG_PARAMETER_PARTIAL_REGEX";a:11:{s:4:"name";s:37:"HTML_HASH_TAG_PARAMETER_PARTIAL_REGEX";s:4:"type";s:6:"public";s:5:"value";s:50:""#" . self::HTML_TAG_PARAMETER_PARTIAL_REGEX . "#"";s:8:"var_type";s:6:"string";s:6:"static";b:0;s:8:"abstract";b:0;s:5:"const";b:1;s:16:"start_line_index";i:24;s:17:"start_token_index";i:52;s:14:"end_line_index";i:24;s:15:"end_token_index";i:69;}s:34:"HTML_HASH_TAG_PARAMETER_FULL_REGEX";a:11:{s:4:"name";s:34:"HTML_HASH_TAG_PARAMETER_FULL_REGEX";s:4:"type";s:6:"public";s:5:"value";s:56:""/" . self::HTML_HASH_TAG_PARAMETER_PARTIAL_REGEX . "/u"";s:8:"var_type";s:6:"string";s:6:"static";b:0;s:8:"abstract";b:0;s:5:"const";b:1;s:16:"start_line_index";i:25;s:17:"start_token_index";i:71;s:14:"end_line_index";i:25;s:15:"end_token_index";i:88;}s:47:"HTML_SUPER_GLOBAL_HASH_TAG_PARAMETER_FULL_REGEX";a:11:{s:4:"name";s:47:"HTML_SUPER_GLOBAL_HASH_TAG_PARAMETER_FULL_REGEX";s:4:"type";s:6:"public";s:5:"value";s:124:""/#(_GET|_POST|_REQUEST|_FILES|_COOKIE|_ENV|_SERVER|_SESSION|GLOBALS)(|\[" . self::HTML_TAG_PARAMETER_PARTIAL_REGEX . ")#/u"";s:8:"var_type";s:6:"string";s:6:"static";b:0;s:8:"abstract";b:0;s:5:"const";b:1;s:16:"start_line_index";i:26;s:17:"start_token_index";i:90;s:14:"end_line_index";i:26;s:15:"end_token_index";i:107;}}}}