a:1:{s:22:"CssAndJSFilesOptimizer";a:2:{s:7:"methods";a:4:{s:20:"getCssAndJSFilesHtml";a:20:{s:4:"name";s:20:"getCssAndJSFilesHtml";s:16:"start_line_index";i:34;s:17:"start_token_index";i:226;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:0;s:8:"comments";a:3:{i:0;s:210:"/*
	 * There are the following public methods:
	 * - getCssAndJSFilesHtml
	 * - prepareHtmlWithOptimizedCssAndJSFiles
	 * - prepareHtmlWithOptimizedCssAndJSFilesViaDomHandler: DEPRECATED. See bellow why...
	 */";i:1;s:31:"/* get Css And JS Files Html */";i:2;s:159:"//based on a array of css and js files, group them to only 1 file and return the correspondent html with that file. It minimizes the css and js contents too...";}s:25:"start_comments_line_index";i:24;s:26:"start_comments_token_index";i:220;s:23:"end_comments_line_index";i:34;s:24:"end_comments_token_index";i:224;s:22:"start_args_token_index";i:231;s:20:"end_args_token_index";i:236;s:9:"arguments";a:2:{s:10:"$css_files";N;s:9:"$js_files";N;}s:25:"start_brackets_line_index";i:34;s:26:"start_brackets_token_index";i:238;s:23:"end_brackets_line_index";i:168;s:24:"end_brackets_token_index";i:1230;s:14:"end_line_index";i:168;s:15:"end_token_index";i:1230;}s:37:"prepareHtmlWithOptimizedCssAndJSFiles";a:20:{s:4:"name";s:37:"prepareHtmlWithOptimizedCssAndJSFiles";s:16:"start_line_index";i:173;s:17:"start_token_index";i:1236;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:0;s:8:"comments";a:2:{i:0;s:63:"/* Html With Optimized Css And JS Files - parses with strpos */";i:1;s:125:"//parse html and get all styles and scripts. then check if they are call local files and if they are, group them into 1 file.";}s:25:"start_comments_line_index";i:170;s:26:"start_comments_token_index";i:1232;s:23:"end_comments_line_index";i:173;s:24:"end_comments_token_index";i:1234;s:22:"start_args_token_index";i:1241;s:20:"end_args_token_index";i:1250;s:9:"arguments";a:2:{s:5:"$html";N;s:11:"$cache_html";s:4:"true";}s:25:"start_brackets_line_index";i:173;s:26:"start_brackets_token_index";i:1252;s:23:"end_brackets_line_index";i:201;s:24:"end_brackets_token_index";i:1414;s:14:"end_line_index";i:201;s:15:"end_token_index";i:1414;}s:50:"prepareHtmlWithOptimizedCssAndJSFilesViaDomHandler";a:20:{s:4:"name";s:50:"prepareHtmlWithOptimizedCssAndJSFilesViaDomHandler";s:16:"start_line_index";i:631;s:17:"start_token_index";i:5364;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:0;s:8:"comments";a:3:{i:0;s:57:"/* Html With Optimized Css And JS Files Via DomHandler */";i:1;s:256:"//This method has a problem, thi is, if there is a javascript with the following code: "something".replace(/</g, "foo"), the returned html will be "something".replace(/, "foo"), which will break the javascript giving an error. TRY NOT TO USE THIS METHOD!!!";i:2;s:125:"//parse html and get all styles and scripts. then check if they are call local files and if they are, group them into 1 file.";}s:25:"start_comments_line_index";i:627;s:26:"start_comments_token_index";i:5358;s:23:"end_comments_line_index";i:631;s:24:"end_comments_token_index";i:5362;s:22:"start_args_token_index";i:5369;s:20:"end_args_token_index";i:5371;s:9:"arguments";a:1:{s:5:"$html";N;}s:25:"start_brackets_line_index";i:631;s:26:"start_brackets_token_index";i:5373;s:23:"end_brackets_line_index";i:649;s:24:"end_brackets_token_index";i:5484;s:14:"end_line_index";i:649;s:15:"end_token_index";i:5484;}s:25:"removeCommentsAndEndLines";a:20:{s:4:"name";s:25:"removeCommentsAndEndLines";s:16:"start_line_index";i:1196;s:17:"start_token_index";i:10120;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:1;s:8:"comments";a:1:{i:0;s:264:"//Note that this function cannot remove spaces bc in javascript if exists 'else if (...)' it will then replace by 'elseif(...)', which will give a javascript error. Same happens with end-lines which should be replaced by space, otherwise can happen the same thing!";}s:25:"start_comments_line_index";i:1195;s:26:"start_comments_token_index";i:10118;s:23:"end_comments_line_index";i:1196;s:24:"end_comments_token_index";i:10118;s:22:"start_args_token_index";i:10127;s:20:"end_args_token_index";i:10135;s:9:"arguments";a:3:{s:9:"$contents";N;s:8:"$options";N;s:5:"$type";N;}s:25:"start_brackets_line_index";i:1196;s:26:"start_brackets_token_index";i:10137;s:23:"end_brackets_line_index";i:1300;s:24:"end_brackets_token_index";i:11135;s:14:"end_line_index";i:1300;s:15:"end_token_index";i:11135;}}s:5:"props";a:2:{s:28:"CURL_CONNECTION_TIMEOUT_SECS";a:11:{s:4:"name";s:28:"CURL_CONNECTION_TIMEOUT_SECS";s:4:"type";s:6:"public";s:5:"value";s:2:"30";s:8:"var_type";s:0:"";s:6:"static";b:0;s:8:"abstract";b:0;s:5:"const";b:1;s:16:"start_line_index";i:5;s:17:"start_token_index";i:15;s:14:"end_line_index";i:5;s:15:"end_token_index";i:22;}s:28:"CURL_MAX_HOST_CHUNK_REQUESTS";a:16:{s:4:"name";s:28:"CURL_MAX_HOST_CHUNK_REQUESTS";s:4:"type";s:6:"public";s:5:"value";s:2:"10";s:8:"var_type";s:0:"";s:6:"static";b:0;s:8:"abstract";b:0;s:5:"const";b:1;s:16:"start_line_index";i:6;s:17:"start_token_index";i:26;s:14:"end_line_index";i:6;s:15:"end_token_index";i:33;s:8:"comments";a:1:{i:0;s:12:"//30 seconds";}s:25:"start_comments_line_index";i:5;s:26:"start_comments_token_index";i:24;s:23:"end_comments_line_index";i:6;s:24:"end_comments_token_index";i:24;}}}}