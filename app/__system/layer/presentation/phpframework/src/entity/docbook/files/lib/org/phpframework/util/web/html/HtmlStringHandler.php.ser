a:1:{s:17:"HtmlStringHandler";a:2:{s:7:"methods";a:10:{s:26:"convertElementsArrayToHtml";a:20:{s:4:"name";s:26:"convertElementsArrayToHtml";s:16:"start_line_index";i:18;s:17:"start_token_index";i:170;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:1;s:8:"comments";a:1:{i:0;s:237:"/*
	 * This method will be used by the $elements returned from the self::convertHtmlToElementsArray method.
	 * Basically passing an elements array as the first argument, this method creates the correspondent html for that array.
	 */";}s:25:"start_comments_line_index";i:14;s:26:"start_comments_token_index";i:168;s:23:"end_comments_line_index";i:14;s:24:"end_comments_token_index";i:168;s:22:"start_args_token_index";i:177;s:20:"end_args_token_index";i:200;s:9:"arguments";a:2:{s:9:"$elements";N;s:8:"$options";s:58:"array("trim" => false, "auto_close_missing_tags" => false)";}s:25:"start_brackets_line_index";i:18;s:26:"start_brackets_token_index";i:202;s:23:"end_brackets_line_index";i:51;s:24:"end_brackets_token_index";i:538;s:14:"end_line_index";i:51;s:15:"end_token_index";i:538;}s:26:"joinElementsArrayTextNodes";a:15:{s:4:"name";s:26:"joinElementsArrayTextNodes";s:16:"start_line_index";i:53;s:17:"start_token_index";i:540;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:1;s:22:"start_args_token_index";i:547;s:20:"end_args_token_index";i:549;s:9:"arguments";a:1:{s:9:"$elements";N;}s:25:"start_brackets_line_index";i:53;s:26:"start_brackets_token_index";i:551;s:23:"end_brackets_line_index";i:81;s:24:"end_brackets_token_index";i:824;s:14:"end_line_index";i:81;s:15:"end_token_index";i:824;}s:26:"convertHtmlToElementsArray";a:20:{s:4:"name";s:26:"convertHtmlToElementsArray";s:16:"start_line_index";i:164;s:17:"start_token_index";i:828;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:1;s:8:"comments";a:1:{i:0;s:2518:"/*
	 * convert a html string into an array of elements
	 * 
	 * Use this method carefully bc of the missing closing tags, this is, if there is any open tag that doesn't have its closing tag, there will be some cases where we will not closing it automatically correctly or making all the next elements as inner elements.
	 * This is, if a tag is not closed properly, one of the behaviours of the browsers and the DomDocument php class (according with the test that I did!), is to automatically close this tag without any inner html. Another behaviour would be to get the html until the end, depending of the tag type and the doctype... 
	 * Basically we try to replicate the Browsers behaviour, but couldn't do it for all cases, bc this process is very complicated, so USE THIS METHOD CAREFULLY!
	 *
	 * To test this method, execute the following code:
		$html = '
		<section>
			s1
			<article>
				a1
				<span>Some span bla</span>
				a2
				<i class="icon add">Add</i>
				a3
				
				<script>
					var foo = "</article>";
				</script>
				
			</article>
			
			<script>
				var foo = "<article><div>";
			</script>
			
			s2
			<div>
				d1
				<header>
					<input name="first_name" />
				<!--header-->
				d2 - Note that the header tag will be closed after this text and not before, as it shows in the comment! This is on purpose!
			</div>
			s3
			<ul>
				<li>li1</li>
				<li>li2<!--li-->
				
				<style>
					.foo {
						content: "</li><li>";
					}
				</style>
				
				<li>li3</li>
			</ul>
			<dl>
				<dt>Coffee</dt>
				<dd>Black hot drink<!--dd-->
				<dt>Milk<!--dt-->
				<dd>White cold drink</dd>
			</dl>
			<!--strong-->Bold text</strong>
		</section> ';
		
		$elements = HtmlStringHandler::convertHtmlToElementsArray($html);
		$new_html = HtmlStringHandler::convertElementsArrayToHtml($elements);
		echo "<pre>";print_r($elements);echo "\nNew html:$new_html";die();
	 *
	 * 
	 * or the code:
		$html = '
		</div>
	</div>
	<article>asds</article>
</section>
</body>';
		
		$elements = HtmlStringHandler::convertHtmlToElementsArray($html);
		$elements = HtmlStringHandler::joinElementsArrayTextNodes($elements);
		
		foreach ($elements as $idx => $element)
			if (is_array($element) && $element["nodeType"] == 1) //1 == is Element node
				unset($elements[$idx]);
		
		$new_html = HtmlStringHandler::convertElementsArrayToHtml($elements);
		echo "<pre>";print_r($elements);echo "\nNew html:$new_html";die();
	 */";}s:25:"start_comments_line_index";i:83;s:26:"start_comments_token_index";i:826;s:23:"end_comments_line_index";i:83;s:24:"end_comments_token_index";i:826;s:22:"start_args_token_index";i:835;s:20:"end_args_token_index";i:858;s:9:"arguments";a:2:{s:5:"$html";N;s:8:"$options";s:61:"array("force_no_closing_tag_to_end" => true, "trim" => false)";}s:25:"start_brackets_line_index";i:164;s:26:"start_brackets_token_index";i:860;s:23:"end_brackets_line_index";i:374;s:24:"end_brackets_token_index";i:2403;s:14:"end_line_index";i:374;s:15:"end_token_index";i:2403;}s:20:"getHtmlTagAttributes";a:20:{s:4:"name";s:20:"getHtmlTagAttributes";s:16:"start_line_index";i:377;s:17:"start_token_index";i:2407;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:1;s:8:"comments";a:1:{i:0;s:188:"//I can use the php DomDocument class, bc even if the Html is incomplete and not have closed tags, it doesn't matter, bc we only want to parse the html correspondent to the tag attributes.";}s:25:"start_comments_line_index";i:376;s:26:"start_comments_token_index";i:2405;s:23:"end_comments_line_index";i:376;s:24:"end_comments_token_index";i:2405;s:22:"start_args_token_index";i:2414;s:20:"end_args_token_index";i:2416;s:9:"arguments";a:1:{s:5:"$html";N;}s:25:"start_brackets_line_index";i:377;s:26:"start_brackets_token_index";i:2418;s:23:"end_brackets_line_index";i:401;s:24:"end_brackets_token_index";i:2598;s:14:"end_line_index";i:401;s:15:"end_token_index";i:2598;}s:29:"containsHtmlTagAttributeValue";a:15:{s:4:"name";s:29:"containsHtmlTagAttributeValue";s:16:"start_line_index";i:403;s:17:"start_token_index";i:2600;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:1;s:22:"start_args_token_index";i:2607;s:20:"end_args_token_index";i:2622;s:9:"arguments";a:4:{s:5:"$html";N;s:10:"$attr_name";N;s:11:"$attr_value";N;s:15:"$case_sensitive";s:5:"false";}s:25:"start_brackets_line_index";i:403;s:26:"start_brackets_token_index";i:2624;s:23:"end_brackets_line_index";i:411;s:24:"end_brackets_token_index";i:2715;s:14:"end_line_index";i:411;s:15:"end_token_index";i:2715;}s:11:"getHtmlTags";a:20:{s:4:"name";s:11:"getHtmlTags";s:16:"start_line_index";i:429;s:17:"start_token_index";i:2721;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:1;s:8:"comments";a:2:{i:0;s:339:"/*
	 * A good example to test this method is with the $html equals to:
	 	$html = '<title>A
			<title>B
				<title>C</title>
				<title>D</title>
			W</title>
			Z
			<title>JPLPITO</title>
		</title>
		<title>JP</title>';
		
		$tags = HtmlStringHandler::getHtmlTags($html, "title");
		echo "<pre>";print_r($tags);die();
	 */";i:1;s:186:"//Do NOT use the php DomDocument class, bc the Html may be incomplete and not have closed tags. If I use the DomDocument class it will close the missing html tags. And I don't want this!";}s:25:"start_comments_line_index";i:413;s:26:"start_comments_token_index";i:2717;s:23:"end_comments_line_index";i:428;s:24:"end_comments_token_index";i:2719;s:22:"start_args_token_index";i:2728;s:20:"end_args_token_index";i:2740;s:9:"arguments";a:3:{s:5:"$html";N;s:9:"$tag_name";N;s:28:"$force_no_closing_tag_to_end";s:5:"false";}s:25:"start_brackets_line_index";i:429;s:26:"start_brackets_token_index";i:2742;s:23:"end_brackets_line_index";i:493;s:24:"end_brackets_token_index";i:3175;s:14:"end_line_index";i:493;s:15:"end_token_index";i:3175;}s:20:"getInnerHtmlPosition";a:15:{s:4:"name";s:20:"getInnerHtmlPosition";s:16:"start_line_index";i:495;s:17:"start_token_index";i:3177;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:1;s:22:"start_args_token_index";i:3184;s:20:"end_args_token_index";i:3211;s:9:"arguments";a:5:{s:5:"$html";N;s:11:"$inner_html";N;s:7:"$offset";s:1:"0";s:13:"$compare_text";s:5:"false";s:13:"&$parsed_html";s:4:"null";}s:25:"start_brackets_line_index";i:495;s:26:"start_brackets_token_index";i:3213;s:23:"end_brackets_line_index";i:601;s:24:"end_brackets_token_index";i:3994;s:14:"end_line_index";i:601;s:15:"end_token_index";i:3994;}s:24:"getInnerHtmlNodeSelector";a:15:{s:4:"name";s:24:"getInnerHtmlNodeSelector";s:16:"start_line_index";i:603;s:17:"start_token_index";i:3996;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:1;s:22:"start_args_token_index";i:4003;s:20:"end_args_token_index";i:4015;s:9:"arguments";a:3:{s:5:"$html";N;s:11:"$inner_html";N;s:6:"$index";s:1:"0";}s:25:"start_brackets_line_index";i:603;s:26:"start_brackets_token_index";i:4017;s:23:"end_brackets_line_index";i:688;s:24:"end_brackets_token_index";i:4646;s:14:"end_line_index";i:688;s:15:"end_token_index";i:4646;}s:12:"minimizeHtml";a:15:{s:4:"name";s:12:"minimizeHtml";s:16:"start_line_index";i:690;s:17:"start_token_index";i:4648;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:1;s:22:"start_args_token_index";i:4655;s:20:"end_args_token_index";i:4657;s:9:"arguments";a:1:{s:5:"$html";N;}s:25:"start_brackets_line_index";i:690;s:26:"start_brackets_token_index";i:4659;s:23:"end_brackets_line_index";i:697;s:24:"end_brackets_token_index";i:4732;s:14:"end_line_index";i:697;s:15:"end_token_index";i:4732;}s:32:"removeScriptAndStyleTagsFromHtml";a:15:{s:4:"name";s:32:"removeScriptAndStyleTagsFromHtml";s:16:"start_line_index";i:699;s:17:"start_token_index";i:4734;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:1;s:22:"start_args_token_index";i:4741;s:20:"end_args_token_index";i:4743;s:9:"arguments";a:1:{s:5:"$html";N;}s:25:"start_brackets_line_index";i:699;s:26:"start_brackets_token_index";i:4745;s:23:"end_brackets_line_index";i:796;s:24:"end_brackets_token_index";i:5473;s:14:"end_line_index";i:796;s:15:"end_token_index";i:5473;}}s:5:"props";a:3:{s:16:"single_tags_name";a:16:{s:4:"name";s:16:"single_tags_name";s:4:"type";s:6:"public";s:5:"value";s:202:"array("area", "base", "br", "col", "embed", "hr", "img", "input", "link", "meta", "param", "source", "track", "wbr", "command", "keygen", "menuitem", "frame", "iframe", "basefont", "bgsound", "isindex")";s:8:"var_type";s:0:"";s:6:"static";b:1;s:8:"abstract";b:0;s:5:"const";b:0;s:16:"start_line_index";i:8;s:17:"start_token_index";i:25;s:14:"end_line_index";i:8;s:15:"end_token_index";i:100;s:8:"comments";a:1:{i:0;s:68:"//This vars are used in the self::convertHtmlToElementsArray method.";}s:25:"start_comments_line_index";i:7;s:26:"start_comments_token_index";i:23;s:23:"end_comments_line_index";i:7;s:24:"end_comments_token_index";i:23;}s:28:"auto_close_siblings_tag_name";a:11:{s:4:"name";s:28:"auto_close_siblings_tag_name";s:4:"type";s:6:"public";s:5:"value";s:80:"array("li" => array("li"), "dd" => array("dd", "dt"), "dt" => array("dd", "dt"))";s:8:"var_type";s:0:"";s:6:"static";b:1;s:8:"abstract";b:0;s:5:"const";b:0;s:16:"start_line_index";i:10;s:17:"start_token_index";i:102;s:14:"end_line_index";i:10;s:15:"end_token_index";i:147;}s:12:"tags_to_jump";a:16:{s:4:"name";s:12:"tags_to_jump";s:4:"type";s:6:"public";s:5:"value";s:24:"array("style", "script")";s:8:"var_type";s:0:"";s:6:"static";b:1;s:8:"abstract";b:0;s:5:"const";b:0;s:16:"start_line_index";i:12;s:17:"start_token_index";i:151;s:14:"end_line_index";i:12;s:15:"end_token_index";i:166;s:8:"comments";a:1:{i:0;s:41:"//TODO: add other tags where this happens";}s:25:"start_comments_line_index";i:10;s:26:"start_comments_token_index";i:149;s:23:"end_comments_line_index";i:10;s:24:"end_comments_token_index";i:149;}}}}