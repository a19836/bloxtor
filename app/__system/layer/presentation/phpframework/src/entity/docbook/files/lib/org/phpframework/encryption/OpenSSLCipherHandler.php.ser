a:1:{s:20:"OpenSSLCipherHandler";a:1:{s:7:"methods";a:6:{s:11:"encryptText";a:20:{s:4:"name";s:11:"encryptText";s:16:"start_line_index";i:11;s:17:"start_token_index";i:9;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:1;s:12:"doc_comments";a:1:{i:0;s:372:"/**
	 * Encrypt a text with a salt into a ciphertext.
	 * Note that according with our tests we realized that the returned cipher text has a length of 108 chars. To be safe, the DB attribute where this cipher will be saved, should have a length of 150 chars, just in case.
	 * 
	 * @param mixed $text - decrypted text
	 * @param string $key - salt - can be any string
	 */";}s:25:"start_comments_line_index";i:4;s:26:"start_comments_token_index";i:7;s:23:"end_comments_line_index";i:10;s:24:"end_comments_token_index";i:7;s:22:"start_args_token_index";i:16;s:20:"end_args_token_index";i:21;s:9:"arguments";a:2:{s:5:"$text";N;s:4:"$key";N;}s:25:"start_brackets_line_index";i:11;s:26:"start_brackets_token_index";i:23;s:23:"end_brackets_line_index";i:25;s:24:"end_brackets_token_index";i:144;s:14:"end_line_index";i:25;s:15:"end_token_index";i:144;}s:15:"encryptVariable";a:20:{s:4:"name";s:15:"encryptVariable";s:16:"start_line_index";i:33;s:17:"start_token_index";i:148;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:1;s:12:"doc_comments";a:1:{i:0;s:214:"/**
	 * Encrypt a variable value with a salt into a ciphertext. If variable is array, encrypts all items
	 * 
	 * @param mixed $var - string or array or object
	 * @param string $key - salt - can be any string
	 */";}s:25:"start_comments_line_index";i:27;s:26:"start_comments_token_index";i:146;s:23:"end_comments_line_index";i:32;s:24:"end_comments_token_index";i:146;s:22:"start_args_token_index";i:155;s:20:"end_args_token_index";i:160;s:9:"arguments";a:2:{s:4:"$var";N;s:4:"$key";N;}s:25:"start_brackets_line_index";i:33;s:26:"start_brackets_token_index";i:162;s:23:"end_brackets_line_index";i:44;s:24:"end_brackets_token_index";i:248;s:14:"end_line_index";i:44;s:15:"end_token_index";i:248;}s:12:"encryptArray";a:20:{s:4:"name";s:12:"encryptArray";s:16:"start_line_index";i:52;s:17:"start_token_index";i:252;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:1;s:12:"doc_comments";a:1:{i:0;s:173:"/**
	 * Encrypt an array's items with a salt into a ciphertext
	 * 
	 * @param mixed $arr - array with decrypted items
	 * @param string $key - salt - can be any string
	 */";}s:25:"start_comments_line_index";i:46;s:26:"start_comments_token_index";i:250;s:23:"end_comments_line_index";i:51;s:24:"end_comments_token_index";i:250;s:22:"start_args_token_index";i:259;s:20:"end_args_token_index";i:264;s:9:"arguments";a:2:{s:4:"$arr";N;s:4:"$key";N;}s:25:"start_brackets_line_index";i:52;s:26:"start_brackets_token_index";i:266;s:23:"end_brackets_line_index";i:54;s:24:"end_brackets_token_index";i:281;s:14:"end_line_index";i:54;s:15:"end_token_index";i:281;}s:11:"decryptText";a:20:{s:4:"name";s:11:"decryptText";s:16:"start_line_index";i:62;s:17:"start_token_index";i:285;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:1;s:12:"doc_comments";a:1:{i:0;s:149:"/**
	 * Decrypt a cipher text with a salt
	 * 
	 * @param string $cipher_text - encrypted text
	 * @param string $key - salt - can be any string
	 */";}s:25:"start_comments_line_index";i:56;s:26:"start_comments_token_index";i:283;s:23:"end_comments_line_index";i:61;s:24:"end_comments_token_index";i:283;s:22:"start_args_token_index";i:292;s:20:"end_args_token_index";i:297;s:9:"arguments";a:2:{s:12:"$cipher_text";N;s:4:"$key";N;}s:25:"start_brackets_line_index";i:62;s:26:"start_brackets_token_index";i:299;s:23:"end_brackets_line_index";i:77;s:24:"end_brackets_token_index";i:462;s:14:"end_line_index";i:77;s:15:"end_token_index";i:462;}s:15:"decryptVariable";a:20:{s:4:"name";s:15:"decryptVariable";s:16:"start_line_index";i:85;s:17:"start_token_index";i:466;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:1;s:12:"doc_comments";a:1:{i:0;s:234:"/**
	 * Decrypt a variable with cipher text. Uses a salt string to decrypt. If variable is array, decrypts all items values
	 * 
	 * @param string $var - string or array or object
	 * @param string $key - salt - can be any string
	 */";}s:25:"start_comments_line_index";i:79;s:26:"start_comments_token_index";i:464;s:23:"end_comments_line_index";i:84;s:24:"end_comments_token_index";i:464;s:22:"start_args_token_index";i:473;s:20:"end_args_token_index";i:478;s:9:"arguments";a:2:{s:4:"$var";N;s:4:"$key";N;}s:25:"start_brackets_line_index";i:85;s:26:"start_brackets_token_index";i:480;s:23:"end_brackets_line_index";i:96;s:24:"end_brackets_token_index";i:566;s:14:"end_line_index";i:96;s:15:"end_token_index";i:566;}s:12:"decryptArray";a:20:{s:4:"name";s:12:"decryptArray";s:16:"start_line_index";i:104;s:17:"start_token_index";i:570;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:1;s:12:"doc_comments";a:1:{i:0;s:201:"/**
	 * Decrypt an array's items with cipher texts inside. Uses a salt string to decrypt.
	 * 
	 * @param string $arr - array with encrypted items
	 * @param string $key - salt - can be any string
	 */";}s:25:"start_comments_line_index";i:98;s:26:"start_comments_token_index";i:568;s:23:"end_comments_line_index";i:103;s:24:"end_comments_token_index";i:568;s:22:"start_args_token_index";i:577;s:20:"end_args_token_index";i:582;s:9:"arguments";a:2:{s:4:"$arr";N;s:4:"$key";N;}s:25:"start_brackets_line_index";i:104;s:26:"start_brackets_token_index";i:584;s:23:"end_brackets_line_index";i:106;s:24:"end_brackets_token_index";i:599;s:14:"end_line_index";i:106;s:15:"end_token_index";i:599;}}}}