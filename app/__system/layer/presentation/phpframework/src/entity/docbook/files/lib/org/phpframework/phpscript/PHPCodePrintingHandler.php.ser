a:1:{s:22:"PHPCodePrintingHandler";a:1:{s:7:"methods";a:52:{s:23:"getPHPClassesFromFolder";a:20:{s:4:"name";s:23:"getPHPClassesFromFolder";s:16:"start_line_index";i:8;s:17:"start_token_index";i:19;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:1;s:8:"comments";a:1:{i:0;s:20:"/* START: GETTERS */";}s:25:"start_comments_line_index";i:7;s:26:"start_comments_token_index";i:17;s:23:"end_comments_line_index";i:7;s:24:"end_comments_token_index";i:17;s:22:"start_args_token_index";i:26;s:20:"end_args_token_index";i:28;s:9:"arguments";a:1:{s:12:"$folder_path";N;}s:25:"start_brackets_line_index";i:8;s:26:"start_brackets_token_index";i:30;s:23:"end_brackets_line_index";i:20;s:24:"end_brackets_token_index";i:121;s:14:"end_line_index";i:20;s:15:"end_token_index";i:121;}s:34:"getPHPClassesFromFolderRecursively";a:15:{s:4:"name";s:34:"getPHPClassesFromFolderRecursively";s:16:"start_line_index";i:22;s:17:"start_token_index";i:123;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:1;s:22:"start_args_token_index";i:130;s:20:"end_args_token_index";i:132;s:9:"arguments";a:1:{s:12:"$folder_path";N;}s:25:"start_brackets_line_index";i:22;s:26:"start_brackets_token_index";i:134;s:23:"end_brackets_line_index";i:34;s:24:"end_brackets_token_index";i:225;s:14:"end_line_index";i:34;s:15:"end_token_index";i:225;}s:21:"getPHPClassesFromFile";a:15:{s:4:"name";s:21:"getPHPClassesFromFile";s:16:"start_line_index";i:36;s:17:"start_token_index";i:227;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:1;s:22:"start_args_token_index";i:234;s:20:"end_args_token_index";i:236;s:9:"arguments";a:1:{s:10:"$file_path";N;}s:25:"start_brackets_line_index";i:36;s:26:"start_brackets_token_index";i:238;s:23:"end_brackets_line_index";i:42;s:24:"end_brackets_token_index";i:284;s:14:"end_line_index";i:42;s:15:"end_token_index";i:284;}s:23:"getPHPClassesFromString";a:20:{s:4:"name";s:23:"getPHPClassesFromString";s:16:"start_line_index";i:45;s:17:"start_token_index";i:288;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:1;s:8:"comments";a:1:{i:0;s:43:"//http://es.php.net/manual/pt_BR/tokens.php";}s:25:"start_comments_line_index";i:44;s:26:"start_comments_token_index";i:286;s:23:"end_comments_line_index";i:44;s:24:"end_comments_token_index";i:286;s:22:"start_args_token_index";i:295;s:20:"end_args_token_index";i:297;s:9:"arguments";a:1:{s:9:"$php_code";N;}s:25:"start_brackets_line_index";i:45;s:26:"start_brackets_token_index";i:299;s:23:"end_brackets_line_index";i:48;s:24:"end_brackets_token_index";i:321;s:14:"end_line_index";i:48;s:15:"end_token_index";i:321;}s:23:"getPHPClassesFromTokens";a:15:{s:4:"name";s:23:"getPHPClassesFromTokens";s:16:"start_line_index";i:50;s:17:"start_token_index";i:323;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:1;s:22:"start_args_token_index";i:330;s:20:"end_args_token_index";i:332;s:9:"arguments";a:1:{s:7:"$tokens";N;}s:25:"start_brackets_line_index";i:50;s:26:"start_brackets_token_index";i:334;s:23:"end_brackets_line_index";i:559;s:24:"end_brackets_token_index";i:4967;s:14:"end_line_index";i:559;s:15:"end_token_index";i:4967;}s:29:"prepareClassNameWithNameSpace";a:15:{s:4:"name";s:29:"prepareClassNameWithNameSpace";s:16:"start_line_index";i:561;s:17:"start_token_index";i:4969;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:1;s:22:"start_args_token_index";i:4976;s:20:"end_args_token_index";i:4985;s:9:"arguments";a:2:{s:11:"$class_name";N;s:10:"$namespace";s:2:"""";}s:25:"start_brackets_line_index";i:561;s:26:"start_brackets_token_index";i:4987;s:23:"end_brackets_line_index";i:563;s:24:"end_brackets_token_index";i:5039;s:14:"end_line_index";i:563;s:15:"end_token_index";i:5039;}s:30:"decoupleClassNameWithNameSpace";a:15:{s:4:"name";s:30:"decoupleClassNameWithNameSpace";s:16:"start_line_index";i:565;s:17:"start_token_index";i:5041;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:1;s:22:"start_args_token_index";i:5048;s:20:"end_args_token_index";i:5050;s:9:"arguments";a:1:{s:11:"$class_name";N;}s:25:"start_brackets_line_index";i:565;s:26:"start_brackets_token_index";i:5052;s:23:"end_brackets_line_index";i:576;s:24:"end_brackets_token_index";i:5160;s:14:"end_line_index";i:576;s:15:"end_token_index";i:5160;}s:16:"getClassFromFile";a:15:{s:4:"name";s:16:"getClassFromFile";s:16:"start_line_index";i:634;s:17:"start_token_index";i:5760;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:1;s:22:"start_args_token_index";i:5767;s:20:"end_args_token_index";i:5772;s:9:"arguments";a:2:{s:10:"$file_path";N;s:11:"$class_name";N;}s:25:"start_brackets_line_index";i:634;s:26:"start_brackets_token_index";i:5774;s:23:"end_brackets_line_index";i:643;s:24:"end_brackets_token_index";i:5834;s:14:"end_line_index";i:643;s:15:"end_token_index";i:5834;}s:22:"getClassFromPHPClasses";a:15:{s:4:"name";s:22:"getClassFromPHPClasses";s:16:"start_line_index";i:645;s:17:"start_token_index";i:5836;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:1;s:22:"start_args_token_index";i:5843;s:20:"end_args_token_index";i:5848;s:9:"arguments";a:2:{s:8:"$classes";N;s:11:"$class_name";N;}s:25:"start_brackets_line_index";i:645;s:26:"start_brackets_token_index";i:5850;s:23:"end_brackets_line_index";i:658;s:24:"end_brackets_token_index";i:5984;s:14:"end_line_index";i:658;s:15:"end_token_index";i:5984;}s:25:"searchClassFromPHPClasses";a:15:{s:4:"name";s:25:"searchClassFromPHPClasses";s:16:"start_line_index";i:660;s:17:"start_token_index";i:5986;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:1;s:22:"start_args_token_index";i:5993;s:20:"end_args_token_index";i:5998;s:9:"arguments";a:2:{s:8:"$classes";N;s:11:"$class_name";N;}s:25:"start_brackets_line_index";i:660;s:26:"start_brackets_token_index";i:6000;s:23:"end_brackets_line_index";i:673;s:24:"end_brackets_token_index";i:6145;s:14:"end_line_index";i:673;s:15:"end_token_index";i:6145;}s:25:"getClassPathFromClassName";a:20:{s:4:"name";s:25:"getClassPathFromClassName";s:16:"start_line_index";i:676;s:17:"start_token_index";i:6149;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:1;s:8:"comments";a:1:{i:0;s:134:"//checks if the $class_name really exists in file and if not checks for the correspondent with the namespace and return the class_path";}s:25:"start_comments_line_index";i:675;s:26:"start_comments_token_index";i:6147;s:23:"end_comments_line_index";i:675;s:24:"end_comments_token_index";i:6147;s:22:"start_args_token_index";i:6156;s:20:"end_args_token_index";i:6161;s:9:"arguments";a:2:{s:10:"$file_path";N;s:11:"$class_name";N;}s:25:"start_brackets_line_index";i:676;s:26:"start_brackets_token_index";i:6163;s:23:"end_brackets_line_index";i:692;s:24:"end_brackets_token_index";i:6276;s:14:"end_line_index";i:692;s:15:"end_token_index";i:6276;}s:14:"getClassOfFile";a:20:{s:4:"name";s:14:"getClassOfFile";s:16:"start_line_index";i:695;s:17:"start_token_index";i:6280;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:1;s:8:"comments";a:1:{i:0;s:135:"//based in a file, get the correspondent class (basically based in the file name, get sthe correspondent class data inside of the file.";}s:25:"start_comments_line_index";i:694;s:26:"start_comments_token_index";i:6278;s:23:"end_comments_line_index";i:694;s:24:"end_comments_token_index";i:6278;s:22:"start_args_token_index";i:6287;s:20:"end_args_token_index";i:6289;s:9:"arguments";a:1:{s:10:"$file_path";N;}s:25:"start_brackets_line_index";i:695;s:26:"start_brackets_token_index";i:6291;s:23:"end_brackets_line_index";i:715;s:24:"end_brackets_token_index";i:6437;s:14:"end_line_index";i:715;s:15:"end_token_index";i:6437;}s:24:"getClassPropertyFromFile";a:15:{s:4:"name";s:24:"getClassPropertyFromFile";s:16:"start_line_index";i:717;s:17:"start_token_index";i:6439;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:1;s:22:"start_args_token_index";i:6446;s:20:"end_args_token_index";i:6454;s:9:"arguments";a:3:{s:10:"$file_path";N;s:11:"$class_name";N;s:10:"$prop_name";N;}s:25:"start_brackets_line_index";i:717;s:26:"start_brackets_token_index";i:6456;s:23:"end_brackets_line_index";i:727;s:24:"end_brackets_token_index";i:6546;s:14:"end_line_index";i:727;s:15:"end_token_index";i:6546;}s:19:"getFunctionFromFile";a:15:{s:4:"name";s:19:"getFunctionFromFile";s:16:"start_line_index";i:729;s:17:"start_token_index";i:6548;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:1;s:22:"start_args_token_index";i:6555;s:20:"end_args_token_index";i:6567;s:9:"arguments";a:3:{s:10:"$file_path";N;s:10:"$func_name";N;s:11:"$class_name";s:1:"0";}s:25:"start_brackets_line_index";i:729;s:26:"start_brackets_token_index";i:6569;s:23:"end_brackets_line_index";i:736;s:24:"end_brackets_token_index";i:6619;s:14:"end_line_index";i:736;s:15:"end_token_index";i:6619;}s:21:"getFunctionFromString";a:15:{s:4:"name";s:21:"getFunctionFromString";s:16:"start_line_index";i:738;s:17:"start_token_index";i:6621;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:1;s:22:"start_args_token_index";i:6628;s:20:"end_args_token_index";i:6640;s:9:"arguments";a:3:{s:9:"$contents";N;s:10:"$func_name";N;s:11:"$class_name";s:1:"0";}s:25:"start_brackets_line_index";i:738;s:26:"start_brackets_token_index";i:6642;s:23:"end_brackets_line_index";i:761;s:24:"end_brackets_token_index";i:6881;s:14:"end_line_index";i:761;s:15:"end_token_index";i:6881;}s:21:"getNamespacesFromFile";a:15:{s:4:"name";s:21:"getNamespacesFromFile";s:16:"start_line_index";i:763;s:17:"start_token_index";i:6883;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:1;s:22:"start_args_token_index";i:6890;s:20:"end_args_token_index";i:6892;s:9:"arguments";a:1:{s:10:"$file_path";N;}s:25:"start_brackets_line_index";i:763;s:26:"start_brackets_token_index";i:6894;s:23:"end_brackets_line_index";i:774;s:24:"end_brackets_token_index";i:6938;s:14:"end_line_index";i:774;s:15:"end_token_index";i:6938;}s:15:"getUsesFromFile";a:15:{s:4:"name";s:15:"getUsesFromFile";s:16:"start_line_index";i:776;s:17:"start_token_index";i:6940;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:1;s:22:"start_args_token_index";i:6947;s:20:"end_args_token_index";i:6949;s:9:"arguments";a:1:{s:10:"$file_path";N;}s:25:"start_brackets_line_index";i:776;s:26:"start_brackets_token_index";i:6951;s:23:"end_brackets_line_index";i:787;s:24:"end_brackets_token_index";i:6995;s:14:"end_line_index";i:787;s:15:"end_token_index";i:6995;}s:19:"getIncludesFromFile";a:15:{s:4:"name";s:19:"getIncludesFromFile";s:16:"start_line_index";i:789;s:17:"start_token_index";i:6997;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:1;s:22:"start_args_token_index";i:7004;s:20:"end_args_token_index";i:7006;s:9:"arguments";a:1:{s:10:"$file_path";N;}s:25:"start_brackets_line_index";i:789;s:26:"start_brackets_token_index";i:7008;s:23:"end_brackets_line_index";i:802;s:24:"end_brackets_token_index";i:7052;s:14:"end_line_index";i:802;s:15:"end_token_index";i:7052;}s:26:"getClassPropertiesFromFile";a:20:{s:4:"name";s:26:"getClassPropertiesFromFile";s:16:"start_line_index";i:885;s:17:"start_token_index";i:7446;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:1;s:8:"comments";a:1:{i:0;s:1098:"/* This is DEPRECATED bc if php is obfuscated this doesn't work.
	private static function getCodeInstructionFromFile($file_path, $types) {
		$instructions = array();
		
		if ($file_path && file_exists($file_path) && $types) {
			$types = is_array($types) ? $types : array($types);
			
			$contents = file_get_contents($file_path);
			$contents = str_replace("\r\n", "\n", $contents);
			$lines = explode("\n", $contents);
			
			$t = count($lines);
			for ($i = 0; $i < $t; $i++) {
				$line = $lines[$i];
				$trimmed = trim($line);
				
				foreach ($types as $type)
					if ($type) {
						$pos = stripos($trimmed, $type);
						
						//checks instruction at the begginning of the line
						if ($pos === 0) {
							$start_pos = $pos + strlen($type);
							$end_pos = strpos($trimmed, ";", $start_pos);
							$end_pos = $end_pos !== false ? $end_pos : strlen($end_pos);
							
							$instruction = trim( substr($trimmed, $start_pos, $end_pos - $start_pos) );
							$instructions[] = array($instruction, $type);
							
							break;
						}
					}
			}
		}
		
		return $instructions;
	}*/";}s:25:"start_comments_line_index";i:847;s:26:"start_comments_token_index";i:7444;s:23:"end_comments_line_index";i:847;s:24:"end_comments_token_index";i:7444;s:22:"start_args_token_index";i:7453;s:20:"end_args_token_index";i:7458;s:9:"arguments";a:2:{s:10:"$file_path";N;s:11:"$class_name";N;}s:25:"start_brackets_line_index";i:885;s:26:"start_brackets_token_index";i:7460;s:23:"end_brackets_line_index";i:892;s:24:"end_brackets_token_index";i:7509;s:14:"end_line_index";i:892;s:15:"end_token_index";i:7509;}s:28:"getClassPropertiesFromString";a:15:{s:4:"name";s:28:"getClassPropertiesFromString";s:16:"start_line_index";i:894;s:17:"start_token_index";i:7511;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:1;s:22:"start_args_token_index";i:7518;s:20:"end_args_token_index";i:7523;s:9:"arguments";a:2:{s:9:"$contents";N;s:11:"$class_name";N;}s:25:"start_brackets_line_index";i:894;s:26:"start_brackets_token_index";i:7525;s:23:"end_brackets_line_index";i:1037;s:24:"end_brackets_token_index";i:9012;s:14:"end_line_index";i:1037;s:15:"end_token_index";i:9012;}s:23:"getFunctionCodeFromFile";a:20:{s:4:"name";s:23:"getFunctionCodeFromFile";s:16:"start_line_index";i:1238;s:17:"start_token_index";i:9016;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:1;s:8:"comments";a:1:{i:0;s:7781:"/* This is DEPRECATED bc if php is obfuscated this doesn't work. Besides it doesn't get the values correctly if they have comments at the first line of the properties value
	public static function getClassPropertiesFromFile($file_path, $class_name) {
		$properties = array();
		
		if ($file_path && file_exists($file_path) && $class_name) {
			$contents = file_get_contents($file_path);
			
			$classes = self::getPHPClassesFromString($contents);
			$c = self::getClassFromPHPClasses($classes, $class_name);
			$class_name = $c["name"];
			$start_brackets_line = $c["start_brackets_line_index"];
			
			if (is_numeric($start_brackets_line)) {
				$contents = str_replace("\r\n", "\n", $contents);
				$lines = explode("\n", $contents);
				
				//GETTING PROPERTIES IN TEXT
				$line = $lines[ $start_brackets_line - 1 ];
				$pos = strpos($line, "{");
				$pos = $pos !== false ? $pos : strlen($line);
				
				$intervals = array();
				$t = $c["methods"] ? count($c["methods"]) : 0;
				for ($i = 0; $i < $t; $i++) {
					$sli = is_numeric($c["methods"][$i]["start_comments_line_index"]) ? $c["methods"][$i]["start_comments_line_index"] : $c["methods"][$i]["start_line_index"];
					$intervals[] = array($sli, $c["methods"][$i]["end_line_index"]);
				}
				
				$new_c = substr($line, $pos + 1);
				$idx = $start_brackets_line - 1;
				while (true) {
					++$idx;
					
					if ($idx + 1 >= $c["end_line_index"])
						break;
					
					$allowed = true;
					foreach ($intervals as $interval)
						if ($idx + 1 >= $interval[0] && $idx + 1 <= $interval[1]) {
							$allowed = false;
							break;
						}
					
					if ($allowed && trim($lines[$idx])) 
						$new_c .= "\n" . $lines[$idx];
				}
				$new_c = trim($new_c);
				
				//PARSEING PROPERTIES
				$t = strlen($new_c);
				$open_single_quotes = $open_double_quotes = $open_multiple_comments = $open_single_comments = false;
				$prop_doc_comments = $prop_comments = array();
				
				for ($i = 0; $i < $t; $i++) {
					$char = $new_c[$i];
					
					if (!$open_single_quotes && !$open_double_quotes && !$open_multiple_comments && !$open_single_comments && ($char == '$' ||
						(strtolower($char) == "c" && strtolower($new_c[$i+1]) == "o" && strtolower($new_c[$i+2]) == "n" && strtolower($new_c[$i+3]) == "s" && strtolower($new_c[$i+4]) == "t")
					)) {
						$idx = $char == '$' ? $i : $i + 5;
						
						$settings = "";
						for ($j = $idx - 1; $j >= 0; --$j) {
							$char = $new_c[$j];
							
							if ($char == ";" || $char == "{" || $char == "}" || $char == "\n")
								break;
							else if ($char != "\t") 
								$settings = $char . $settings;
						}
						
						$var_name = "";
						for ($j = $idx + 1; $j < $t; $j++) {
							$char = $new_c[$j];
							
							if ($char == " " || $char == "=" || $char == "\t" || $char == "\n" || $char == ";")
								break;
							else 
								$var_name .= $char;
						}
						
						$value = "";
						$start_value = false;
						for ($j = $j - 1; $j < $t; $j++) {
							$char = $new_c[$j];
							
							if ($start_value) {
								$value .= $char;
								
								if ($char == "'" && !$open_double_quotes && !$open_multiple_comments && !$open_single_comments && !TextSanitizer::isCharEscaped($new_c, $j)) 
									$open_single_quotes = !$open_single_quotes;
								else if ($char == '"' && !$open_single_quotes && !$open_multiple_comments && !$open_single_comments && !TextSanitizer::isCharEscaped($new_c, $j)) 
									$open_double_quotes = !$open_double_quotes;
								else if ($char == '/' && $new_c[$j + 1] == "*" && !$open_single_quotes && !$open_double_quotes && !$open_single_comments) {
									$open_multiple_comments = true;
									++$j;
								}
								else if ($open_multiple_comments && $char == '*' && $new_c[$j + 1] == "/") {
									$open_multiple_comments = false;
									++$j;
								}
								else if ($char == '/' && $new_c[$j + 1] == "/" && !$open_single_quotes && !$open_double_quotes && !$open_multiple_comments) {
									$open_single_comments = true;
									++$j;
								}
								else if ($open_single_comments && $char == "\n")
									$open_single_comments = false;
							}
							
							if (!$open_single_quotes && !$open_double_quotes && !$open_multiple_comments && !$open_single_comments) {
								if ($char == ";") {
									if ($j == $i + 1)
										$value = null;
									else
										$value = substr($value, 0, strlen($value) - 1);//remove ;
									
									break;
								}
								else if (!$start_value && $char == "=")
									$start_value = true;
							}
						}
						$value = $value ? trim($value) : $value;
						
						$i = $j;
						
						$settings = trim(strtolower($settings));
						$type = strpos($settings, "private") !== false ? "private" : (strpos($settings, "protected") !== false ? "protected" : "public");
						
						$quote_char = substr($value, 0, 1);
						$var_type = $value && ($quote_char == '"' || $quote_char == "'") ? "string" : "";
						
						if ($quote_char == '"' || $quote_char == "'") {
							$value = substr($value, 1);
							$value = substr($value, -1) == $quote_char ? substr($value, 0, -1) : $value;
							$value = $quote_char == '"' ? str_replace('\\"', '"', $value) : str_replace("\\'", "'", $value);//in case of slashes and \" or \' accorddingly. Do not add the addcslashes here. We only want to add the \\" and \\', because we are getting php code directly.
							
							if ($quote_char == "'")
								$value = str_replace('$', '\\$', $value);//$variables inside of single quotes are escaped because are simply strings and not variables.
						}
						
						//check inline comments
						$pos = strpos($new_c, "\n", $i);
						$pos = $pos !== false ? $pos : $t;
						$aux = trim(substr($new_c, $i + 1, $pos - $i));
						
						if ($aux && substr($aux, 0, 2) == "//") {
							$prop_comments[] = $aux;
							$i = $pos;
						}
						
						$properties[] = array(
							"name" => $var_name,
							"type" => $type,
							"value" => $value,
							"var_type" => $var_type,
							"static" => strpos($settings, "static") !== false,
							"const" => strpos($settings, "const") !== false,
							"doc_comments" => $prop_doc_comments ? $prop_doc_comments : null,
							"comments" => $prop_comments ? $prop_comments : null,
						);
						
						$prop_doc_comments = $prop_comments = array();
					}
					else if ($char == "'" && !$open_double_quotes && !$open_multiple_comments && !$open_single_comments && !TextSanitizer::isCharEscaped($new_c, $i)) {
						$open_single_quotes = !$open_single_quotes;
					}
					else if ($char == '"' && !$open_single_quotes && !$open_multiple_comments && !$open_single_comments && !TextSanitizer::isCharEscaped($new_c, $i)) {
						$open_double_quotes = !$open_double_quotes;
					}
					else if ($char == '/' && $new_c[$i + 1] == "*" && !$open_single_quotes && !$open_double_quotes && !$open_single_comments) {
						$pos = strpos($new_c, "*" . "/", $i); //"*" . "/" is bc this method code is commented!
						$pos = $pos !== false ? $pos + 1 : $t;
						$prop_doc_comments[] = substr($new_c, $i, $pos - $i + 1);
						
						$open_multiple_comments = true;
						++$i;
					}
					else if ($open_multiple_comments && $char == '*' && $new_c[$i + 1] == "/") {
						$open_multiple_comments = false;
						++$i;
					}
					else if ($char == '/' && $new_c[$i + 1] == "/" && !$open_single_quotes && !$open_double_quotes && !$open_multiple_comments) {
						$pos = strpos($new_c, "\n", $i);
						$pos = $pos !== false ? $pos : $t;
						$prop_comments[] = substr($new_c, $i, $pos - $i);
						
						$open_single_comments = true;
						++$i;
					}
					else if ($open_single_comments && $char == "\n") {
						$open_single_comments = false;
					}
				}
			}
		}
		
		return $properties;
	}*/";}s:25:"start_comments_line_index";i:1038;s:26:"start_comments_token_index";i:9014;s:23:"end_comments_line_index";i:1038;s:24:"end_comments_token_index";i:9014;s:22:"start_args_token_index";i:9023;s:20:"end_args_token_index";i:9042;s:9:"arguments";a:4:{s:10:"$file_path";N;s:10:"$func_name";N;s:11:"$class_name";s:1:"0";s:4:"$raw";s:5:"false";}s:25:"start_brackets_line_index";i:1238;s:26:"start_brackets_token_index";i:9044;s:23:"end_brackets_line_index";i:1245;s:24:"end_brackets_token_index";i:9097;s:14:"end_line_index";i:1245;s:15:"end_token_index";i:9097;}s:25:"getFunctionCodeFromString";a:15:{s:4:"name";s:25:"getFunctionCodeFromString";s:16:"start_line_index";i:1247;s:17:"start_token_index";i:9099;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:1;s:22:"start_args_token_index";i:9106;s:20:"end_args_token_index";i:9125;s:9:"arguments";a:4:{s:9:"$contents";N;s:10:"$func_name";N;s:11:"$class_name";s:1:"0";s:4:"$raw";s:5:"false";}s:25:"start_brackets_line_index";i:1247;s:26:"start_brackets_token_index";i:9127;s:23:"end_brackets_line_index";i:1275;s:24:"end_brackets_token_index";i:9376;s:14:"end_line_index";i:1275;s:15:"end_token_index";i:9376;}s:30:"getCodeWithoutCommentsFromFile";a:20:{s:4:"name";s:30:"getCodeWithoutCommentsFromFile";s:16:"start_line_index";i:1329;s:17:"start_token_index";i:9380;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:1;s:8:"comments";a:1:{i:0;s:1553:"/* This is DEPRECATED bc if php is obfuscated this doesn't work.
	public static function getFunctionCodeFromFile($file_path, $function_name, $class_name = 0) {
		if ($file_path && file_exists($file_path) && $function_name) {
			$f = self::getFunctionFromFile($file_path, $function_name, $class_name);
			$function_name = $f["name"];
			$start_brackets_line = $f["start_brackets_line_index"];
			$end_line = $f["end_line_index"];
			
			if (is_numeric($start_brackets_line)) {
				$contents = file_get_contents($file_path);
				$contents = str_replace("\r\n", "\n", $contents);
				$lines = explode("\n", $contents);
				
				//TODO: change this code to work with obfuscated php
				
				$code = "";
				
				$line = $lines[ $start_brackets_line - 1 ];
				$pos = strpos($line, "{");
				$pos = $pos !== false ? $pos : strlen($line);
				$new_c = trim(substr($line, $pos + 1));
				if ($new_c)
					$code .= "$new_c";
				
				$idx = $start_brackets_line - 1;
				while (true) {
					++$idx;
					
					if ($idx + 1 >= $end_line) 
						break;
					
					$l = str_replace("\n", "", $lines[$idx]);
					$l = $l[0] == "\t" ? substr($l, 1) : $l;
					if ($class_name)//it executes twice if it is a method.
						$l = $l[0] == "\t" ? substr($l, 1) : $l;
					
					$code .= "\n$l";
				}
				
				$line = $lines[ $end_line - 1 ];
				$pos = strpos($line, "}");
				$pos = $pos !== false ? $pos : strlen($line);
				$new_c = trim(substr($line, 0, $pos));
				if ($new_c) 
					$code .= "\n$new_c";
				
				return trim($code);
			}
		}
		
		return false;
	}*/";}s:25:"start_comments_line_index";i:1276;s:26:"start_comments_token_index";i:9378;s:23:"end_comments_line_index";i:1276;s:24:"end_comments_token_index";i:9378;s:22:"start_args_token_index";i:9387;s:20:"end_args_token_index";i:9389;s:9:"arguments";a:1:{s:10:"$file_path";N;}s:25:"start_brackets_line_index";i:1329;s:26:"start_brackets_token_index";i:9391;s:23:"end_brackets_line_index";i:1334;s:24:"end_brackets_token_index";i:9430;s:14:"end_line_index";i:1334;s:15:"end_token_index";i:9430;}s:22:"getCodeWithoutComments";a:15:{s:4:"name";s:22:"getCodeWithoutComments";s:16:"start_line_index";i:1336;s:17:"start_token_index";i:9432;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:1;s:22:"start_args_token_index";i:9439;s:20:"end_args_token_index";i:9441;s:9:"arguments";a:1:{s:5:"$code";N;}s:25:"start_brackets_line_index";i:1336;s:26:"start_brackets_token_index";i:9443;s:23:"end_brackets_line_index";i:1364;s:24:"end_brackets_token_index";i:9626;s:14:"end_line_index";i:1364;s:15:"end_token_index";i:9626;}s:19:"renameClassFromFile";a:20:{s:4:"name";s:19:"renameClassFromFile";s:16:"start_line_index";i:1369;s:17:"start_token_index";i:9634;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:1;s:8:"comments";a:3:{i:0;s:18:"/* END: GETTERS */";i:1;s:20:"/* START: RENAMES */";i:2;s:82:"//$old_class_name and $new_class_name must be the full class names with namespaces";}s:25:"start_comments_line_index";i:1365;s:26:"start_comments_token_index";i:9628;s:23:"end_comments_line_index";i:1368;s:24:"end_comments_token_index";i:9632;s:22:"start_args_token_index";i:9641;s:20:"end_args_token_index";i:9649;s:9:"arguments";a:3:{s:10:"$file_path";N;s:15:"$old_class_name";N;s:15:"$new_class_name";N;}s:25:"start_brackets_line_index";i:1369;s:26:"start_brackets_token_index";i:9651;s:23:"end_brackets_line_index";i:1383;s:24:"end_brackets_token_index";i:9807;s:14:"end_line_index";i:1383;s:15:"end_token_index";i:9807;}s:22:"renameFunctionFromFile";a:15:{s:4:"name";s:22:"renameFunctionFromFile";s:16:"start_line_index";i:1385;s:17:"start_token_index";i:9809;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:1;s:22:"start_args_token_index";i:9816;s:20:"end_args_token_index";i:9831;s:9:"arguments";a:4:{s:10:"$file_path";N;s:14:"$old_func_name";N;s:14:"$new_func_name";N;s:11:"$class_name";s:1:"0";}s:25:"start_brackets_line_index";i:1385;s:26:"start_brackets_token_index";i:9833;s:23:"end_brackets_line_index";i:1397;s:24:"end_brackets_token_index";i:9939;s:14:"end_line_index";i:1397;s:15:"end_token_index";i:9939;}s:17:"editClassFromFile";a:20:{s:4:"name";s:17:"editClassFromFile";s:16:"start_line_index";i:1401;s:17:"start_token_index";i:9945;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:1;s:8:"comments";a:2:{i:0;s:18:"/* END: RENAMES */";i:1;s:18:"/* START: EDITS */";}s:25:"start_comments_line_index";i:1398;s:26:"start_comments_token_index";i:9941;s:23:"end_comments_line_index";i:1400;s:24:"end_comments_token_index";i:9943;s:22:"start_args_token_index";i:9952;s:20:"end_args_token_index";i:9960;s:9:"arguments";a:3:{s:10:"$file_path";N;s:19:"$old_class_settings";N;s:19:"$new_class_settings";N;}s:25:"start_brackets_line_index";i:1401;s:26:"start_brackets_token_index";i:9962;s:23:"end_brackets_line_index";i:1478;s:24:"end_brackets_token_index";i:10791;s:14:"end_line_index";i:1478;s:15:"end_token_index";i:10791;}s:20:"editFunctionFromFile";a:20:{s:4:"name";s:20:"editFunctionFromFile";s:16:"start_line_index";i:1586;s:17:"start_token_index";i:10795;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:1;s:8:"comments";a:1:{i:0;s:4094:"/* This is DEPRECATED bc if php is obfuscated this doesn't work.
	public static function editClassFromFile($file_path, $old_class_settings, $new_class_settings) {
		$old_class_name = self::prepareClassNameWithNameSpace($old_class_settings["name"], $old_class_settings["namespace"]);
		
		if ($file_path && file_exists($file_path) && $old_class_name && $new_class_settings["name"]) {
			$c = self::getClassFromFile($file_path, $old_class_name);
			
			$old_class_name = $c["name"];
			$start_line = $c["start_line_index"];
			$start_brackets_line = $c["start_brackets_line_index"];
			
			if (is_numeric($start_line)) {
				$contents = file_get_contents($file_path);
				$contents = str_replace("\r\n", "\n", $contents);
				$lines = explode("\n", $contents);
				
				//TODO: change this code to work with obfuscated php
				
				$new_contents = implode("\n", array_slice($lines, 0, $start_line - 1) );
				
				$line = $lines[ $start_line - 1 ];
				$new_c = "";
				$parts = explode(" ", $line);
				$t = count($parts);
				for ($i = 0; $i < $t; $i++) {
					if (strtolower(trim($parts[$i])) == "class" || strtolower(trim($parts[$i])) == "abstract") 
						break;
					else 
						$new_c .= ($i > 0 ? " " : "") . $parts[$i];
				}
				
				$new_c = trim($new_c);
				if ($new_c) 
					$new_contents .= "\n$new_c";
				
				//remove namespace from $new_class_settings bc they will be take care after
				$new_namespace = $new_class_settings["namespace"];
				$new_includes = $new_class_settings["includes"];
				$new_uses = $new_class_settings["uses"];
				$new_class_settings["namespace"] = null;
				$new_class_settings["includes"] = null;
				$new_class_settings["uses"] = null;
				
				$new_contents .= "\n" . self::getClassString($new_class_settings);
				
				if ($start_brackets_line == $start_line) 
					$pos = strpos($line, "{", strpos($line, $old_class_name) + 1);
				else {
					$line = $lines[ $start_brackets_line - 1 ];
					$pos = strpos($line, "{");
				}
				
				$pos = $pos !== false ? $pos : strlen($line);
				$new_c = trim(substr($line, $pos));
				if ($new_c) 
					$new_contents .= " $new_c";
				
				$new_contents .= "\n" . implode("\n", array_slice($lines, $start_brackets_line) );
				
				$new_contents = str_replace("\n\n\n", "\n\n", str_replace("\t\n", "\n", $new_contents));
				
				if (file_put_contents($file_path, $new_contents) > 0) {
					$status = true;
					$new_class_settings["namespace"] = $new_namespace;
					
					//update namespace if different
					if ($old_class_settings["namespace"] != $new_class_settings["namespace"] && ($old_class_settings["namespace"] || $new_class_settings["namespace"])) 
						$status = self::replaceNamespaceFromFile($file_path, $old_class_settings["namespace"], $new_class_settings["namespace"]);
					
					
					//add includes and uses to the begining of file or after the first namespace
					if ($status && ($new_includes || $new_uses)) {
						$new_c = "";
						
						if ($new_includes)
							foreach ($new_includes as $include)
								if (is_array($include) && trim($include[0]))
									$new_c .= "include" . ($include[1] ? "_once" : "") . " " . $include[0] . ";\n";
								else if (!is_array($include) && trim($include))
									$new_c .= "include_once $include;\n";
						
						if ($new_uses)
							foreach ($new_uses as $use => $alias)
								if (trim($use))
									$new_c .= "use $use" . (trim($alias) ? " as $alias" : "") . ";\n";
						
						$status = self::addCodeToBeginOfFileOrAfterFirstNamespace($file_path, $new_c);
					}
					
					if ($status && isset($new_class_settings["code"])) {
						$new_class_name = self::prepareClassNameWithNameSpace($new_class_settings["name"], $new_class_settings["namespace"]);
						
						$status = self::removeClassPropertiesFromFile($file_path, $new_class_name) && self::addClassPropertiesToFile($file_path, $new_class_name, $new_class_settings["code"]);
					}
					
					//if status false, re-save the old code
					if (!$status)
						file_put_contents($file_path, $contents);
					
					return $status;
				}
			}
		}
		
		return false;
	}*/";}s:25:"start_comments_line_index";i:1479;s:26:"start_comments_token_index";i:10793;s:23:"end_comments_line_index";i:1479;s:24:"end_comments_token_index";i:10793;s:22:"start_args_token_index";i:10802;s:20:"end_args_token_index";i:10817;s:9:"arguments";a:4:{s:10:"$file_path";N;s:18:"$old_func_settings";N;s:18:"$new_func_settings";N;s:11:"$class_name";s:1:"0";}s:25:"start_brackets_line_index";i:1586;s:26:"start_brackets_token_index";i:10819;s:23:"end_brackets_line_index";i:1628;s:24:"end_brackets_token_index";i:11250;s:14:"end_line_index";i:1628;s:15:"end_token_index";i:11250;}s:25:"editClassCommentsFromFile";a:20:{s:4:"name";s:25:"editClassCommentsFromFile";s:16:"start_line_index";i:1691;s:17:"start_token_index";i:11254;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:1;s:8:"comments";a:1:{i:0;s:2214:"/* This is DEPRECATED bc if php is obfuscated this doesn't work.
	public static function editFunctionFromFile($file_path, $old_func_settings, $new_func_settings, $class_name = 0) {
		$old_func_name = $old_func_settings["name"];
		
		if ($file_path && file_exists($file_path) && $old_func_name && $new_func_settings["name"]) {
			$f = self::getFunctionFromFile($file_path, $old_func_name, $class_name);
			$old_func_name = $f["name"];
			$start_line = $f["start_line_index"];
			$start_brackets_line = $f["start_brackets_line_index"];
			$end_line = $f["end_line_index"];
			
			if (is_numeric($start_line)) {
				$contents = file_get_contents($file_path);
				$contents = str_replace("\r\n", "\n", $contents);
				$lines = explode("\n", $contents);
				
				//TODO: change this code to work with obfuscated php
				
				$new_contents = implode("\n", array_slice($lines, 0, $start_line - 1) );
				
				$line = $lines[ $start_line - 1 ];
				$new_c = "";
				$parts = explode(" ", $line);
				$available_types = array("public", "private", "protected", "abstract", "static", "function");
				$t = count($parts);
				for ($i = 0; $i < $t; $i++) {
					if (in_array(strtolower(trim($parts[$i])), $available_types)) {
						break;
					}
					else {
						$new_c .= ($i > 0 ? " " : "") . $parts[$i];
					}
				}
				$new_c = trim($new_c);
				if ($new_c) 
					$new_contents .= "\n$new_c";
				
				$new_contents .= "\n" . self::getFunctionString($new_func_settings, $class_name);
				
				$line = $lines[ $start_brackets_line - 1 ];
				$pos = strpos($line, "{");
				$pos = $pos !== false ? $pos : strlen($line);
				$new_c = trim(substr($line, $pos));
				if ($new_c) 
					$new_contents .= " $new_c";
				
				$new_contents .= "\n" . implode("\n", array_slice($lines, $start_brackets_line) );
				
				$new_contents = str_replace("\n\n\n", "\n\n", str_replace("\t\n", "\n", $new_contents));
				if (file_put_contents($file_path, $new_contents) > 0) {
					$status = true;
					if (isset($new_func_settings["code"])) 
						$status = self::replaceFunctionCodeFromFile($file_path, $new_func_settings["name"], $new_func_settings["code"], $class_name);
					
					return $status;
				}
			}
		}
		
		return false;
	}*/";}s:25:"start_comments_line_index";i:1629;s:26:"start_comments_token_index";i:11252;s:23:"end_comments_line_index";i:1629;s:24:"end_comments_token_index";i:11252;s:22:"start_args_token_index";i:11261;s:20:"end_args_token_index";i:11269;s:9:"arguments";a:3:{s:10:"$file_path";N;s:11:"$class_name";N;s:9:"$comments";N;}s:25:"start_brackets_line_index";i:1691;s:26:"start_brackets_token_index";i:11271;s:23:"end_brackets_line_index";i:1733;s:24:"end_brackets_token_index";i:11687;s:14:"end_line_index";i:1733;s:15:"end_token_index";i:11687;}s:28:"editFunctionCommentsFromFile";a:20:{s:4:"name";s:28:"editFunctionCommentsFromFile";s:16:"start_line_index";i:1743;s:17:"start_token_index";i:11691;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:1;s:8:"comments";a:1:{i:0;s:320:"/* This is DEPRECATED bc if php is obfuscated this doesn't work.
	public static function editClassCommentsFromFile($file_path, $class_name, $comments) {
		if ($class_name) {
			$c = self::getClassFromFile($file_path, $class_name);
			return self::editCommentsFromFile($file_path, $c, $comments);
		}
		return false;
	}*/";}s:25:"start_comments_line_index";i:1734;s:26:"start_comments_token_index";i:11689;s:23:"end_comments_line_index";i:1734;s:24:"end_comments_token_index";i:11689;s:22:"start_args_token_index";i:11698;s:20:"end_args_token_index";i:11713;s:9:"arguments";a:4:{s:10:"$file_path";N;s:10:"$func_name";N;s:9:"$comments";N;s:11:"$class_name";s:1:"0";}s:25:"start_brackets_line_index";i:1743;s:26:"start_brackets_token_index";i:11715;s:23:"end_brackets_line_index";i:1788;s:24:"end_brackets_token_index";i:12184;s:14:"end_line_index";i:1788;s:15:"end_token_index";i:12184;}s:24:"removeNamespacesFromFile";a:20:{s:4:"name";s:24:"removeNamespacesFromFile";s:16:"start_line_index";i:1861;s:17:"start_token_index";i:12194;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:1;s:8:"comments";a:4:{i:0;s:353:"/* This is DEPRECATED bc if php is obfuscated this doesn't work.
	public static function editFunctionCommentsFromFile($file_path, $func_name, $comments, $class_name = 0) {
		if ($func_name) {
			$f = self::getFunctionFromFile($file_path, $func_name, $class_name);
			return self::editCommentsFromFile($file_path, $f, $comments);
		}
		return false;
	}*/";i:1;s:2250:"/* This is DEPRECATED bc if php is obfuscated this doesn't work.
	private static function editCommentsFromFile($file_path, $obj_settings, $comments) {
		if ($file_path && file_exists($file_path)) {
		//echo "<pre>";print_r($obj_settings);die();
			$start_line = $obj_settings["start_comments_line_index"];
			$end_line = $obj_settings["end_comments_line_index"];
			
			if (is_numeric($start_line) || $comments) {
				if (!is_numeric($start_line)) {
					$start_line = $obj_settings["start_line_index"];
					$end_line = $obj_settings["start_line_index"];
				}
				
				$contents = file_get_contents($file_path);
				$contents = str_replace("\r\n", "\n", $contents);
				$lines = explode("\n", $contents);
				
				//TODO: change this code to work with obfuscated php
				
				$new_contents = implode("\n", array_slice($lines, 0, $start_line - 1) );
				
				$line = $lines[ $start_line - 1 ];
				$simple_comment_pos = strpos($line, "//");
				$multiple_comment_pos = strpos($line, "/*");
				
				$pos = $simple_comment_pos !== false && ($simple_comment_pos < $multiple_comment_pos || $multiple_comment_pos == false) ? $simple_comment_pos : $multiple_comment_pos;
				
				if ($pos !== false) {
					$c = substr($line, 0, $pos);
					$new_contents .= "\n" . (trim($c) ? $c : "");
					$new_contents .= trim($comments) ? "\n" . $comments : "";
					
					$line = $lines[ $end_line - 1 ];
					$simple_comment_pos = strrpos($line, "//");
					$multiple_comment_pos = strrpos($line, "*" . "/"); //"*" . "/" only bc this code is commented
					
					if ($simple_comment_pos === false && $multiple_comment_pos === false) {
						$new_contents .= trim($line) ? $line : "";
					}
					else if ($multiple_comment_pos !== false) {
						$c = substr($line, $multiple_comment_pos + 2);
						$new_contents .= trim($c) ? $c : "";
					}
				}
				else {
					$new_contents .= trim($comments) ? "\n" . $comments : "";
					$new_contents .= "\n" .  (trim($line) ? $line : "");
				}
				
				$new_contents .= "\n" . implode("\n", array_slice($lines, $end_line) );
				
				$new_contents = str_replace("\n\n\n", "\n\n", str_replace("\t\n", "\n", $new_contents));
				
				return file_put_contents($file_path, $new_contents) > 0;
			}
		}
		
		return false;
	}*/";i:2;s:16:"/* END: EDITS */";i:3;s:20:"/* START: REMOVES */";}s:25:"start_comments_line_index";i:1789;s:26:"start_comments_token_index";i:12186;s:23:"end_comments_line_index";i:1859;s:24:"end_comments_token_index";i:12192;s:22:"start_args_token_index";i:12201;s:20:"end_args_token_index";i:12203;s:9:"arguments";a:1:{s:10:"$file_path";N;}s:25:"start_brackets_line_index";i:1861;s:26:"start_brackets_token_index";i:12205;s:23:"end_brackets_line_index";i:1863;s:24:"end_brackets_token_index";i:12220;s:14:"end_line_index";i:1863;s:15:"end_token_index";i:12220;}s:18:"removeUsesFromFile";a:15:{s:4:"name";s:18:"removeUsesFromFile";s:16:"start_line_index";i:1865;s:17:"start_token_index";i:12222;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:1;s:22:"start_args_token_index";i:12229;s:20:"end_args_token_index";i:12231;s:9:"arguments";a:1:{s:10:"$file_path";N;}s:25:"start_brackets_line_index";i:1865;s:26:"start_brackets_token_index";i:12233;s:23:"end_brackets_line_index";i:1867;s:24:"end_brackets_token_index";i:12248;s:14:"end_line_index";i:1867;s:15:"end_token_index";i:12248;}s:22:"removeIncludesFromFile";a:15:{s:4:"name";s:22:"removeIncludesFromFile";s:16:"start_line_index";i:1869;s:17:"start_token_index";i:12250;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:1;s:22:"start_args_token_index";i:12257;s:20:"end_args_token_index";i:12259;s:9:"arguments";a:1:{s:10:"$file_path";N;}s:25:"start_brackets_line_index";i:1869;s:26:"start_brackets_token_index";i:12261;s:23:"end_brackets_line_index";i:1872;s:24:"end_brackets_token_index";i:12295;s:14:"end_line_index";i:1872;s:15:"end_token_index";i:12295;}s:23:"removeNamespaceFromFile";a:20:{s:4:"name";s:23:"removeNamespaceFromFile";s:16:"start_line_index";i:1950;s:17:"start_token_index";i:12695;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:1;s:8:"comments";a:1:{i:0;s:1148:"/* This is DEPRECATED bc if php is obfuscated this doesn't work.
	private static function removeInstructionsFromFile($file_path, $types) {
		if ($file_path && file_exists($file_path) && $types) {
			$types = is_array($types) ? $types : array($types);
			
			$contents = file_get_contents($file_path);
			$contents = str_replace("\r\n", "\n", $contents);
			$lines = explode("\n", $contents);
			
			//TODO: change this code to work with obfuscated php
			
			$new_contents = "";
			
			$t = count($lines);
			for ($i = 0; $i < $t; $i++) {
				$line = $lines[$i];
				$trimmed = trim($line);
				$exists = false;
				
				foreach ($types as $type) 
					if (stripos($trimmed, $type) === 0) {
						$fc = substr($trimmed, strlen($type), 1);
						
						if ($fc == " " || $fc == '$' || $fc == "'" || $fc == '"' || $fc == ";") {
							$exists = true;
							break;
						}
					}
				
				if (!$exists)
					$new_contents .= ($new_contents ? "\n" : "") . $line;
			}
			
			$new_contents = str_replace("\n\n\n", "\n\n", str_replace("\t\n", "\n", $new_contents));
			return file_put_contents($file_path, $new_contents) > 0;
		}
		
		return false;
	}*/";}s:25:"start_comments_line_index";i:1910;s:26:"start_comments_token_index";i:12693;s:23:"end_comments_line_index";i:1910;s:24:"end_comments_token_index";i:12693;s:22:"start_args_token_index";i:12702;s:20:"end_args_token_index";i:12707;s:9:"arguments";a:2:{s:10:"$file_path";N;s:10:"$namespace";N;}s:25:"start_brackets_line_index";i:1950;s:26:"start_brackets_token_index";i:12709;s:23:"end_brackets_line_index";i:1952;s:24:"end_brackets_token_index";i:12727;s:14:"end_line_index";i:1952;s:15:"end_token_index";i:12727;}s:17:"removeUseFromFile";a:15:{s:4:"name";s:17:"removeUseFromFile";s:16:"start_line_index";i:1954;s:17:"start_token_index";i:12729;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:1;s:22:"start_args_token_index";i:12736;s:20:"end_args_token_index";i:12741;s:9:"arguments";a:2:{s:10:"$file_path";N;s:4:"$use";N;}s:25:"start_brackets_line_index";i:1954;s:26:"start_brackets_token_index";i:12743;s:23:"end_brackets_line_index";i:1956;s:24:"end_brackets_token_index";i:12761;s:14:"end_line_index";i:1956;s:15:"end_token_index";i:12761;}s:21:"removeIncludeFromFile";a:15:{s:4:"name";s:21:"removeIncludeFromFile";s:16:"start_line_index";i:1958;s:17:"start_token_index";i:12763;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:1;s:22:"start_args_token_index";i:12770;s:20:"end_args_token_index";i:12775;s:9:"arguments";a:2:{s:10:"$file_path";N;s:8:"$include";N;}s:25:"start_brackets_line_index";i:1958;s:26:"start_brackets_token_index";i:12777;s:23:"end_brackets_line_index";i:1961;s:24:"end_brackets_token_index";i:12814;s:14:"end_line_index";i:1961;s:15:"end_token_index";i:12814;}s:29:"removeClassPropertiesFromFile";a:15:{s:4:"name";s:29:"removeClassPropertiesFromFile";s:16:"start_line_index";i:2008;s:17:"start_token_index";i:13279;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:1;s:22:"start_args_token_index";i:13286;s:20:"end_args_token_index";i:13291;s:9:"arguments";a:2:{s:10:"$file_path";N;s:11:"$class_name";N;}s:25:"start_brackets_line_index";i:2008;s:26:"start_brackets_token_index";i:13293;s:23:"end_brackets_line_index";i:2065;s:24:"end_brackets_token_index";i:13798;s:14:"end_line_index";i:2065;s:15:"end_token_index";i:13798;}s:19:"removeClassFromFile";a:20:{s:4:"name";s:19:"removeClassFromFile";s:16:"start_line_index";i:2123;s:17:"start_token_index";i:13802;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:1;s:8:"comments";a:1:{i:0;s:1892:"/* This is DEPRECATED bc if php is obfuscated this doesn't work.
	public static function removeClassPropertiesFromFile($file_path, $class_name) {
		if ($file_path && file_exists($file_path) && $class_name) {
			$c = self::getClassFromFile($file_path, $class_name);
			$start_brackets_line = $c["start_brackets_line_index"];
			
			if (is_numeric($start_brackets_line)) {
				$contents = file_get_contents($file_path);
				$contents = str_replace("\r\n", "\n", $contents);
				$lines = explode("\n", $contents);
				
				//TODO: change this code to work with obfuscated php
				
				$new_contents = implode("\n", array_slice($lines, 0, $start_brackets_line - 1) );
				
				$line = $lines[ $start_brackets_line - 1 ];
				$pos = strpos($line, "{");
				$pos = $pos !== false ? $pos : strlen($line);
				$new_contents .= "\n" . substr($line, 0, $pos + 1);
				
				$intervals = array();
				$t = $c["methods"] ? count($c["methods"]) : 0;
				for ($i = 0; $i < $t; $i++) {
					$method = $c["methods"][$i];
					$sl = is_numeric($method["start_comments_line_index"]) ? $method["start_comments_line_index"] : $method["start_line_index"];
					$intervals[] = array($sl, $method["end_line_index"], $method);
				}
				
				$idx = $start_brackets_line - 1;
				while (true) {
					++$idx;
					
					if ($idx + 1 >= $c["end_line_index"]) 
						break;
					
					foreach ($intervals as $interval) {
						if ($idx + 1 >= $interval[0] && $idx + 1 <= $interval[1]) {
							if ($idx + 1 == $interval[0]) {
								$new_contents .= "\n";
							}
							
							$new_contents .= "\n" . $lines[$idx];
							break;
						}
					}
				}
				
				$new_contents .= "\n" . implode("\n", array_slice($lines, $idx) );
				
				$new_contents = str_replace("\n\n\n", "\n\n", str_replace("\t\n", "\n", $new_contents));
				return file_put_contents($file_path, $new_contents) > 0;
			}
		}
		
		return false;
	}*/";}s:25:"start_comments_line_index";i:2066;s:26:"start_comments_token_index";i:13800;s:23:"end_comments_line_index";i:2066;s:24:"end_comments_token_index";i:13800;s:22:"start_args_token_index";i:13809;s:20:"end_args_token_index";i:13814;s:9:"arguments";a:2:{s:10:"$file_path";N;s:11:"$class_name";N;}s:25:"start_brackets_line_index";i:2123;s:26:"start_brackets_token_index";i:13816;s:23:"end_brackets_line_index";i:2165;s:24:"end_brackets_token_index";i:14211;s:14:"end_line_index";i:2165;s:15:"end_token_index";i:14211;}s:22:"removeFunctionFromFile";a:20:{s:4:"name";s:22:"removeFunctionFromFile";s:16:"start_line_index";i:2192;s:17:"start_token_index";i:14215;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:1;s:8:"comments";a:1:{i:0;s:1006:"/* This is DEPRECATED bc if php is obfuscated this doesn't work.
	public static function removeClassFromFile($file_path, $class_name) {
		$class_name = $class_name ? trim($class_name) : $class_name;
		
		if ($file_path && file_exists($file_path) && $class_name) {
			self::editClassCommentsFromFile($file_path, $class_name, "");
			
			$contents = file_get_contents($file_path);
			$contents = str_replace("\r\n", "\n", $contents);
			
			$c = self::getClassFromFile($file_path, $class_name);
			$start_line = $c["start_line_index"];
			$end_line = $c["end_line_index"];
			
			//TODO: change this code to work with obfuscated php
			
			$available_types = array("class", "abstract");
			$new_contents = self::removeItemFromContents($contents, $start_line, $end_line, $available_types);
			
			$new_contents = str_replace("\n\n\n", "\n\n", str_replace("\t\n", "\n", $new_contents));
			return $contents != $new_contents ? file_put_contents($file_path, $new_contents) > 0 : true;
		}
		
		return false;
	}*/";}s:25:"start_comments_line_index";i:2166;s:26:"start_comments_token_index";i:14213;s:23:"end_comments_line_index";i:2166;s:24:"end_comments_token_index";i:14213;s:22:"start_args_token_index";i:14222;s:20:"end_args_token_index";i:14234;s:9:"arguments";a:3:{s:10:"$file_path";N;s:10:"$func_name";N;s:11:"$class_name";s:1:"0";}s:25:"start_brackets_line_index";i:2192;s:26:"start_brackets_token_index";i:14236;s:23:"end_brackets_line_index";i:2234;s:24:"end_brackets_token_index";i:14634;s:14:"end_line_index";i:2234;s:15:"end_token_index";i:14634;}s:27:"replaceFunctionCodeFromFile";a:20:{s:4:"name";s:27:"replaceFunctionCodeFromFile";s:16:"start_line_index";i:2263;s:17:"start_token_index";i:14642;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:1;s:8:"comments";a:3:{i:0;s:1090:"/* This is DEPRECATED bc if php is obfuscated this doesn't work.
	public static function removeFunctionFromFile($file_path, $func_name, $class_name = 0) {
		$func_name = $func_name ? trim($func_name) : false;
		
		if ($file_path && file_exists($file_path) && $func_name) {
			self::editFunctionCommentsFromFile($file_path, $func_name, "", $class_name);
			
			$f = self::getFunctionFromFile($file_path, $func_name, $class_name);
			$start_line = $f["start_line_index"];
			$end_line = $f["end_line_index"];
			
			$contents = file_get_contents($file_path);
			$contents = str_replace("\r\n", "\n", $contents);
			
			//TODO: change this code to work with obfuscated php
			
			$available_types = array("public", "private", "protected", "abstract", "static", "function");
			$new_contents = self::removeItemFromContents($contents, $start_line, $end_line, $available_types);
	
			$new_contents = str_replace("\n\n\n", "\n\n", str_replace("\t\n", "\n", $new_contents));
			return $contents != $new_contents ? file_put_contents($file_path, $new_contents) > 0 : true;
		}
		
		return false;
	}*/";i:1;s:18:"/* END: REMOVES */";i:2;s:21:"/* START: REPLACES */";}s:25:"start_comments_line_index";i:2235;s:26:"start_comments_token_index";i:14636;s:23:"end_comments_line_index";i:2262;s:24:"end_comments_token_index";i:14640;s:22:"start_args_token_index";i:14649;s:20:"end_args_token_index";i:14664;s:9:"arguments";a:4:{s:10:"$file_path";N;s:10:"$func_name";N;s:5:"$code";N;s:11:"$class_name";s:1:"0";}s:25:"start_brackets_line_index";i:2263;s:26:"start_brackets_token_index";i:14666;s:23:"end_brackets_line_index";i:2303;s:24:"end_brackets_token_index";i:15132;s:14:"end_line_index";i:2303;s:15:"end_token_index";i:15132;}s:24:"replaceNamespaceFromFile";a:20:{s:4:"name";s:24:"replaceNamespaceFromFile";s:16:"start_line_index";i:2350;s:17:"start_token_index";i:15136;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:1;s:8:"comments";a:1:{i:0;s:1724:"/* This is DEPRECATED bc if php is obfuscated this doesn't work.
	public static function replaceFunctionCodeFromFile($file_path, $function_name, $code, $class_name = 0) {
		if ($file_path && file_exists($file_path) && $function_name) {
			$f = self::getFunctionFromFile($file_path, $function_name, $class_name);
			$function_name = $f["name"];
			$start_brackets_line = $f["start_brackets_line_index"];
			$end_line = $f["end_line_index"];
			
			if (is_numeric($start_brackets_line)) {
				$contents = file_get_contents($file_path);
				$contents = str_replace("\r\n", "\n", $contents);
				$lines = explode("\n", $contents);
				
				//TODO: change this code to work with obfuscated php
				
				$prefix = $class_name ? "\t" : "";
				
				$new_contents = implode("\n", array_slice($lines, 0, $start_brackets_line - 1) );
				
				$line = $lines[ $start_brackets_line - 1 ];
				$pos = strpos($line, "{");
				$pos = $pos !== false ? $pos : strlen($line);
				$new_c = trim(substr($line, 0, $pos + 1));
				if ($new_c)
					$new_contents .= "\n$prefix$new_c";
				
				$code = $code ? $code : "";
				$new_contents .= $class_name ? "\n$prefix$prefix" . str_replace("\n", "\n$prefix$prefix", $code) : "\n\t" . str_replace("\n", "\n\t", $code);
				
				$line = $lines[ $end_line - 1 ];
				$pos = strpos($line, "}");
				$pos = $pos !== false ? $pos : 0;
				$new_c = trim(substr($line, $pos));
				if ($new_c)
					$new_contents .= "\n$prefix$new_c";
				
				$new_contents .= "\n" . implode("\n", array_slice($lines, $end_line) );
			
				$new_contents = str_replace("\n\n\n", "\n\n", str_replace("\t\n", "\n", $new_contents));
				return file_put_contents($file_path, $new_contents) > 0;
			}
		}
		
		return false;
	}*/";}s:25:"start_comments_line_index";i:2304;s:26:"start_comments_token_index";i:15134;s:23:"end_comments_line_index";i:2304;s:24:"end_comments_token_index";i:15134;s:22:"start_args_token_index";i:15143;s:20:"end_args_token_index";i:15151;s:9:"arguments";a:3:{s:10:"$file_path";N;s:14:"$old_namespace";N;s:14:"$new_namespace";N;}s:25:"start_brackets_line_index";i:2350;s:26:"start_brackets_token_index";i:15153;s:23:"end_brackets_line_index";i:2370;s:24:"end_brackets_token_index";i:15358;s:14:"end_line_index";i:2370;s:15:"end_token_index";i:15358;}s:19:"addNamespacesToFile";a:20:{s:4:"name";s:19:"addNamespacesToFile";s:16:"start_line_index";i:2374;s:17:"start_token_index";i:15364;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:1;s:8:"comments";a:2:{i:0;s:19:"/* END: REPLACES */";i:1;s:17:"/* START: ADDS */";}s:25:"start_comments_line_index";i:2371;s:26:"start_comments_token_index";i:15360;s:23:"end_comments_line_index";i:2373;s:24:"end_comments_token_index";i:15362;s:22:"start_args_token_index";i:15371;s:20:"end_args_token_index";i:15376;s:9:"arguments";a:2:{s:10:"$file_path";N;s:11:"$namespaces";N;}s:25:"start_brackets_line_index";i:2374;s:26:"start_brackets_token_index";i:15378;s:23:"end_brackets_line_index";i:2389;s:24:"end_brackets_token_index";i:15504;s:14:"end_line_index";i:2389;s:15:"end_token_index";i:15504;}s:13:"addUsesToFile";a:15:{s:4:"name";s:13:"addUsesToFile";s:16:"start_line_index";i:2391;s:17:"start_token_index";i:15506;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:1;s:22:"start_args_token_index";i:15513;s:20:"end_args_token_index";i:15518;s:9:"arguments";a:2:{s:10:"$file_path";N;s:5:"$uses";N;}s:25:"start_brackets_line_index";i:2391;s:26:"start_brackets_token_index";i:15520;s:23:"end_brackets_line_index";i:2403;s:24:"end_brackets_token_index";i:15614;s:14:"end_line_index";i:2403;s:15:"end_token_index";i:15614;}s:17:"addIncludesToFile";a:15:{s:4:"name";s:17:"addIncludesToFile";s:16:"start_line_index";i:2405;s:17:"start_token_index";i:15616;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:1;s:22:"start_args_token_index";i:15623;s:20:"end_args_token_index";i:15628;s:9:"arguments";a:2:{s:10:"$file_path";N;s:9:"$includes";N;}s:25:"start_brackets_line_index";i:2405;s:26:"start_brackets_token_index";i:15630;s:23:"end_brackets_line_index";i:2419;s:24:"end_brackets_token_index";i:15765;s:14:"end_line_index";i:2419;s:15:"end_token_index";i:15765;}s:20:"addCodeToBeginOfFile";a:15:{s:4:"name";s:20:"addCodeToBeginOfFile";s:16:"start_line_index";i:2421;s:17:"start_token_index";i:15767;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:1;s:22:"start_args_token_index";i:15774;s:20:"end_args_token_index";i:15779;s:9:"arguments";a:2:{s:10:"$file_path";N;s:5:"$code";N;}s:25:"start_brackets_line_index";i:2421;s:26:"start_brackets_token_index";i:15781;s:23:"end_brackets_line_index";i:2434;s:24:"end_brackets_token_index";i:15915;s:14:"end_line_index";i:2434;s:15:"end_token_index";i:15915;}s:41:"addCodeToBeginOfFileOrAfterFirstNamespace";a:15:{s:4:"name";s:41:"addCodeToBeginOfFileOrAfterFirstNamespace";s:16:"start_line_index";i:2436;s:17:"start_token_index";i:15917;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:1;s:22:"start_args_token_index";i:15924;s:20:"end_args_token_index";i:15929;s:9:"arguments";a:2:{s:10:"$file_path";N;s:5:"$code";N;}s:25:"start_brackets_line_index";i:2436;s:26:"start_brackets_token_index";i:15931;s:23:"end_brackets_line_index";i:2463;s:24:"end_brackets_token_index";i:16167;s:14:"end_line_index";i:2463;s:15:"end_token_index";i:16167;}s:14:"addClassToFile";a:15:{s:4:"name";s:14:"addClassToFile";s:16:"start_line_index";i:2465;s:17:"start_token_index";i:16169;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:1;s:22:"start_args_token_index";i:16176;s:20:"end_args_token_index";i:16181;s:9:"arguments";a:2:{s:10:"$file_path";N;s:15:"$class_settings";N;}s:25:"start_brackets_line_index";i:2465;s:26:"start_brackets_token_index";i:16183;s:23:"end_brackets_line_index";i:2495;s:24:"end_brackets_token_index";i:16488;s:14:"end_line_index";i:2495;s:15:"end_token_index";i:16488;}s:24:"addClassPropertiesToFile";a:15:{s:4:"name";s:24:"addClassPropertiesToFile";s:16:"start_line_index";i:2497;s:17:"start_token_index";i:16490;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:1;s:22:"start_args_token_index";i:16497;s:20:"end_args_token_index";i:16505;s:9:"arguments";a:3:{s:10:"$file_path";N;s:11:"$class_name";N;s:5:"$code";N;}s:25:"start_brackets_line_index";i:2497;s:26:"start_brackets_token_index";i:16507;s:23:"end_brackets_line_index";i:2525;s:24:"end_brackets_token_index";i:16784;s:14:"end_line_index";i:2525;s:15:"end_token_index";i:16784;}s:17:"addFunctionToFile";a:20:{s:4:"name";s:17:"addFunctionToFile";s:16:"start_line_index";i:2563;s:17:"start_token_index";i:16788;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:1;s:8:"comments";a:1:{i:0;s:1338:"/* This is DEPRECATED bc if php is obfuscated this doesn't work.
	public static function addClassPropertiesToFile($file_path, $class_name, $code) {
		if ($file_path && file_exists($file_path) && $class_name && $code) {
			$c = self::getClassFromFile($file_path, $class_name);
			$start_brackets_line = $c["start_brackets_line_index"];
			
			if (is_numeric($start_brackets_line)) {
				$contents = file_get_contents($file_path);
				$contents = str_replace("\r\n", "\n", $contents);
				$lines = explode("\n", $contents);
				
				//TODO: change this code to work with obfuscated php
				
				$new_contents = implode("\n", array_slice($lines, 0, $start_brackets_line - 1) );
				
				$line = $lines[ $start_brackets_line - 1 ];
				$pos = strpos($line, "{");
				$pos = $pos !== false ? $pos : strlen($line);
				$new_contents .= "\n" . substr($line, 0, $pos + 1);
				
				$new_contents .= "\n\t" . str_replace("\n", "\n\t", $code) . "\n\t";
				
				$new_c = trim( substr($line, $pos + 1) );
				if ($new_c) {
					$new_contents .= "\n" . $new_c;
				}
				
				$new_contents .= "\n" . implode("\n", array_slice($lines, $start_brackets_line) );
				
				$new_contents = str_replace("\n\n\n", "\n\n", str_replace("\t\n", "\n", $new_contents));
				return file_put_contents($file_path, $new_contents) > 0;
			}
		}
		
		return false;
	}*/";}s:25:"start_comments_line_index";i:2526;s:26:"start_comments_token_index";i:16786;s:23:"end_comments_line_index";i:2526;s:24:"end_comments_token_index";i:16786;s:22:"start_args_token_index";i:16795;s:20:"end_args_token_index";i:16807;s:9:"arguments";a:3:{s:10:"$file_path";N;s:18:"$function_settings";N;s:11:"$class_name";s:1:"0";}s:25:"start_brackets_line_index";i:2563;s:26:"start_brackets_token_index";i:16809;s:23:"end_brackets_line_index";i:2614;s:24:"end_brackets_token_index";i:17360;s:14:"end_line_index";i:2614;s:15:"end_token_index";i:17360;}s:14:"getClassString";a:20:{s:4:"name";s:14:"getClassString";s:16:"start_line_index";i:2688;s:17:"start_token_index";i:17368;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:1;s:8:"comments";a:3:{i:0;s:2354:"/* This is DEPRECATED bc if php is obfuscated this doesn't work.
	public static function addFunctionToFile($file_path, $function_settings, $class_name = 0) {
		$name = trim($function_settings["name"]);
		
		if ($file_path && $name) {
			//PREPARING FUNCTION STRING
			$str = self::getFunctionString($function_settings, $class_name);
			
			$code = $function_settings["code"];
			$code = $code ? ($class_name ? "\t\t" . str_replace("\n", "\n\t\t", $code) : str_replace("\n", "\n\t", $code)) : "";
			$str .= " {\n$code\n}\n";
			
			//SAVING FUNCTION STRING TO CLASS
			if ($class_name) {
				if (file_exists($file_path)) {
					$c = self::getClassFromFile($file_path, $class_name);
					$end_line = $c["end_line_index"];
					
					if (is_numeric($end_line)) {
						$contents = file_get_contents($file_path);
						$contents = str_replace("\r\n", "\n", $contents);
						$lines = explode("\n", $contents);
					
						//TODO: change this code to work with obfuscated php
						
						$new_contents = implode("\n", array_slice($lines, 0, $end_line - 1) );
					
						$line = $lines[ $end_line - 1 ];
						$pos = strpos($line, "}");
						$pos = $pos !== false ? $pos : 0;
					
						$new_c = trim(substr($line, 0, $pos));
						if ($new_c) 
							$new_contents .= "\n$new_c";
					
						$new_contents .= "\n\n$str";
					
						$new_c = trim(substr($line, $pos));
						if ($new_c) 
							$new_contents .= "\n$new_c";
					
						$new_contents .= "\n" . implode("\n", array_slice($lines, $end_line) );
					
						$new_contents = str_replace("\n\n\n", "\n\n", str_replace("\t\n", "\n", $new_contents));
						return file_put_contents($file_path, $new_contents) > 0;
					}
				}
			}
			//SAVING FUNCTION STRING AS A GENERIC FUNCTION
			else {
				if (file_exists($file_path)) {
					$contents = file_get_contents($file_path);
					$contents = str_replace("\r\n", "\n", $contents);
					$pos = strrpos($contents, "?>");
			
					if ($pos !== false) 
						$contents = substr($contents, 0, $pos) . "\n\n$str\n" . substr($contents, $pos);
					else 
						$contents .= (empty($contents) ? "<?php" : "\n") . "\n$str?>";
				}
				else 
					$contents = "<?php\n$str\n?>";
				
				$contents = str_replace("\n\n\n", "\n\n", str_replace("\t\n", "\n", $contents));
				return file_put_contents($file_path, $contents) > 0;
			}
		}
		
		return false;
	}*/";i:1;s:15:"/* END: ADDS */";i:2;s:18:"/* START: UTILS */";}s:25:"start_comments_line_index";i:2615;s:26:"start_comments_token_index";i:17362;s:23:"end_comments_line_index";i:2687;s:24:"end_comments_token_index";i:17366;s:22:"start_args_token_index";i:17375;s:20:"end_args_token_index";i:17377;s:9:"arguments";a:1:{s:15:"$class_settings";N;}s:25:"start_brackets_line_index";i:2688;s:26:"start_brackets_token_index";i:17379;s:23:"end_brackets_line_index";i:2762;s:24:"end_brackets_token_index";i:18214;s:14:"end_line_index";i:2762;s:15:"end_token_index";i:18214;}s:17:"getFunctionString";a:15:{s:4:"name";s:17:"getFunctionString";s:16:"start_line_index";i:2764;s:17:"start_token_index";i:18216;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:1;s:22:"start_args_token_index";i:18223;s:20:"end_args_token_index";i:18232;s:9:"arguments";a:2:{s:18:"$function_settings";N;s:11:"$class_name";s:5:"false";}s:25:"start_brackets_line_index";i:2764;s:26:"start_brackets_token_index";i:18234;s:23:"end_brackets_line_index";i:2834;s:24:"end_brackets_token_index";i:19063;s:14:"end_line_index";i:2834;s:15:"end_token_index";i:19063;}s:22:"getClassPropertyString";a:15:{s:4:"name";s:22:"getClassPropertyString";s:16:"start_line_index";i:2836;s:17:"start_token_index";i:19065;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:1;s:22:"start_args_token_index";i:19072;s:20:"end_args_token_index";i:19074;s:9:"arguments";a:1:{s:18:"$property_settings";N;}s:25:"start_brackets_line_index";i:2836;s:26:"start_brackets_token_index";i:19076;s:23:"end_brackets_line_index";i:2865;s:24:"end_brackets_token_index";i:19464;s:14:"end_line_index";i:2865;s:15:"end_token_index";i:19464;}}}}