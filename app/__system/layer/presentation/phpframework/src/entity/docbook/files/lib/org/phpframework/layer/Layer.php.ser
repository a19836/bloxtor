a:1:{s:5:"Layer";a:2:{s:7:"methods";a:21:{s:19:"getLayerPathSetting";a:14:{s:4:"name";s:19:"getLayerPathSetting";s:16:"start_line_index";i:32;s:17:"start_token_index";i:185;s:4:"type";s:6:"public";s:8:"abstract";b:1;s:6:"static";b:0;s:22:"start_args_token_index";i:192;s:20:"end_args_token_index";i:193;s:25:"start_brackets_line_index";i:32;s:26:"start_brackets_token_index";i:194;s:23:"end_brackets_line_index";i:32;s:24:"end_brackets_token_index";i:194;s:14:"end_line_index";i:32;s:15:"end_token_index";i:194;}s:17:"setIsDefaultLayer";a:15:{s:4:"name";s:17:"setIsDefaultLayer";s:16:"start_line_index";i:34;s:17:"start_token_index";i:196;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:0;s:22:"start_args_token_index";i:201;s:20:"end_args_token_index";i:203;s:9:"arguments";a:1:{s:17:"$is_default_layer";N;}s:25:"start_brackets_line_index";i:34;s:26:"start_brackets_token_index";i:205;s:23:"end_brackets_line_index";i:34;s:24:"end_brackets_token_index";i:218;s:14:"end_line_index";i:34;s:15:"end_token_index";i:218;}s:14:"isDefaultLayer";a:14:{s:4:"name";s:14:"isDefaultLayer";s:16:"start_line_index";i:35;s:17:"start_token_index";i:220;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:0;s:22:"start_args_token_index";i:225;s:20:"end_args_token_index";i:226;s:25:"start_brackets_line_index";i:35;s:26:"start_brackets_token_index";i:228;s:23:"end_brackets_line_index";i:35;s:24:"end_brackets_token_index";i:235;s:14:"end_line_index";i:35;s:15:"end_token_index";i:235;}s:13:"setCacheLayer";a:15:{s:4:"name";s:13:"setCacheLayer";s:16:"start_line_index";i:37;s:17:"start_token_index";i:237;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:0;s:22:"start_args_token_index";i:242;s:20:"end_args_token_index";i:244;s:9:"arguments";a:1:{s:11:"$CacheLayer";N;}s:25:"start_brackets_line_index";i:37;s:26:"start_brackets_token_index";i:246;s:23:"end_brackets_line_index";i:37;s:24:"end_brackets_token_index";i:255;s:14:"end_line_index";i:37;s:15:"end_token_index";i:255;}s:13:"getCacheLayer";a:14:{s:4:"name";s:13:"getCacheLayer";s:16:"start_line_index";i:38;s:17:"start_token_index";i:257;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:0;s:22:"start_args_token_index";i:262;s:20:"end_args_token_index";i:263;s:25:"start_brackets_line_index";i:38;s:26:"start_brackets_token_index";i:265;s:23:"end_brackets_line_index";i:38;s:24:"end_brackets_token_index";i:272;s:14:"end_line_index";i:38;s:15:"end_token_index";i:272;}s:13:"isCacheActive";a:14:{s:4:"name";s:13:"isCacheActive";s:16:"start_line_index";i:39;s:17:"start_token_index";i:274;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:0;s:22:"start_args_token_index";i:279;s:20:"end_args_token_index";i:280;s:25:"start_brackets_line_index";i:39;s:26:"start_brackets_token_index";i:282;s:23:"end_brackets_line_index";i:39;s:24:"end_brackets_token_index";i:297;s:14:"end_line_index";i:39;s:15:"end_token_index";i:297;}s:27:"getModuleCachedLayerDirPath";a:14:{s:4:"name";s:27:"getModuleCachedLayerDirPath";s:16:"start_line_index";i:40;s:17:"start_token_index";i:299;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:0;s:22:"start_args_token_index";i:304;s:20:"end_args_token_index";i:305;s:25:"start_brackets_line_index";i:40;s:26:"start_brackets_token_index";i:307;s:23:"end_brackets_line_index";i:40;s:24:"end_brackets_token_index";i:334;s:14:"end_line_index";i:40;s:15:"end_token_index";i:334;}s:19:"getModuleCacheLayer";a:14:{s:4:"name";s:19:"getModuleCacheLayer";s:16:"start_line_index";i:42;s:17:"start_token_index";i:336;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:0;s:22:"start_args_token_index";i:341;s:20:"end_args_token_index";i:342;s:25:"start_brackets_line_index";i:42;s:26:"start_brackets_token_index";i:344;s:23:"end_brackets_line_index";i:42;s:24:"end_brackets_token_index";i:351;s:14:"end_line_index";i:42;s:15:"end_token_index";i:351;}s:15:"getErrorHandler";a:14:{s:4:"name";s:15:"getErrorHandler";s:16:"start_line_index";i:44;s:17:"start_token_index";i:353;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:0;s:22:"start_args_token_index";i:358;s:20:"end_args_token_index";i:359;s:25:"start_brackets_line_index";i:44;s:26:"start_brackets_token_index";i:361;s:23:"end_brackets_line_index";i:48;s:24:"end_brackets_token_index";i:373;s:14:"end_line_index";i:48;s:15:"end_token_index";i:373;}s:15:"setPHPFrameWork";a:15:{s:4:"name";s:15:"setPHPFrameWork";s:16:"start_line_index";i:50;s:17:"start_token_index";i:375;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:0;s:22:"start_args_token_index";i:380;s:20:"end_args_token_index";i:382;s:9:"arguments";a:1:{s:13:"$PHPFrameWork";N;}s:25:"start_brackets_line_index";i:50;s:26:"start_brackets_token_index";i:384;s:23:"end_brackets_line_index";i:50;s:24:"end_brackets_token_index";i:396;s:14:"end_line_index";i:50;s:15:"end_token_index";i:396;}s:15:"getPHPFrameWork";a:14:{s:4:"name";s:15:"getPHPFrameWork";s:16:"start_line_index";i:51;s:17:"start_token_index";i:398;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:0;s:22:"start_args_token_index";i:403;s:20:"end_args_token_index";i:404;s:25:"start_brackets_line_index";i:51;s:26:"start_brackets_token_index";i:406;s:23:"end_brackets_line_index";i:51;s:24:"end_brackets_token_index";i:417;s:14:"end_line_index";i:51;s:15:"end_token_index";i:417;}s:22:"setPHPFrameWorkObjName";a:15:{s:4:"name";s:22:"setPHPFrameWorkObjName";s:16:"start_line_index";i:53;s:17:"start_token_index";i:419;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:0;s:22:"start_args_token_index";i:424;s:20:"end_args_token_index";i:426;s:9:"arguments";a:1:{s:22:"$phpframework_obj_name";N;}s:25:"start_brackets_line_index";i:53;s:26:"start_brackets_token_index";i:428;s:23:"end_brackets_line_index";i:53;s:24:"end_brackets_token_index";i:438;s:14:"end_line_index";i:53;s:15:"end_token_index";i:438;}s:22:"getPHPFrameWorkObjName";a:14:{s:4:"name";s:22:"getPHPFrameWorkObjName";s:16:"start_line_index";i:54;s:17:"start_token_index";i:440;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:0;s:22:"start_args_token_index";i:445;s:20:"end_args_token_index";i:446;s:25:"start_brackets_line_index";i:54;s:26:"start_brackets_token_index";i:448;s:23:"end_brackets_line_index";i:54;s:24:"end_brackets_token_index";i:459;s:14:"end_line_index";i:54;s:15:"end_token_index";i:459;}s:20:"getModulePathGeneric";a:15:{s:4:"name";s:20:"getModulePathGeneric";s:16:"start_line_index";i:56;s:17:"start_token_index";i:461;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:0;s:22:"start_args_token_index";i:466;s:20:"end_args_token_index";i:481;s:9:"arguments";a:4:{s:10:"$module_id";N;s:18:"$modules_file_path";N;s:11:"$layer_path";N;s:10:"$is_folder";s:4:"true";}s:25:"start_brackets_line_index";i:56;s:26:"start_brackets_token_index";i:483;s:23:"end_brackets_line_index";i:67;s:24:"end_brackets_token_index";i:592;s:14:"end_line_index";i:67;s:15:"end_token_index";i:592;}s:24:"prepareModulePathAFolder";a:20:{s:4:"name";s:24:"prepareModulePathAFolder";s:16:"start_line_index";i:97;s:17:"start_token_index";i:596;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:0;s:8:"comments";a:1:{i:0;s:2611:"/*
		Module_id can be a folder or a xml/php file with extension or without extension, like:
		- Ibatis:
			$this->getBroker()->callQuerySQL("TEST", "insert", "insert_item_not_registered"); //modules.xml has an alias TEST => test
			$this->getBroker()->callQuery("test", "insert", "insert_item_not_registered"); //test is a folder
			$this->getBroker()->callQuery("test.item.xml", "insert", "insert_item_not_registered");
			$this->getBroker()->callQuery("test/item.xml", "insert", "insert_item_not_registered");
			$this->getBroker()->callQuery("test.item", "insert", "insert_item_not_registered"); //default_extension will be added. item is a xml file.
			$this->getBroker()->callQuery("test/item", "insert", "insert_item_not_registered"); //default_extension will be added. item is a xml file.
		
		- Hibernate:
			$this->getBroker()->callObject("TEST", "ItemObjNotRegistered")); //modules.xml has an alias TEST => test
			$this->getBroker()->callObject("test", "ItemObjNotRegistered"));
			$this->getBroker()->callObject("test/item_subitem.xml", "ItemObjNotRegistered"));
			$this->getBroker()->callObject("test.item_subitem.xml", "ItemObjNotRegistered"));
			$this->getBroker()->callObject("test/item_subitem", "ItemObjNotRegistered")); //default_extension will be added. item is a xml file.
			$this->getBroker()->callObject("test.item_subitem", "ItemObjNotRegistered")); //default_extension will be added. item is a xml file.
			
		- Business logic:
			$EVC->getBroker()->callBusinessLogic("TEST", "get_obj", array(...)); //modules.xml has an alias TEST => test
			$EVC->getBroker()->callBusinessLogic("test/subtest", "foo", "value xxx"); //test/subtest is a folder
			$EVC->getBroker()->callBusinessLogic("test.subtest.IndependentFunctionsServices.php", "foo", "value xxx");
			$EVC->getBroker()->callBusinessLogic("test/subtest/IndependentFunctionsServices.php", "foo", "value xxx");
			$EVC->getBroker()->callBusinessLogic("test/subtest/IndependentFunctionsServices", "foo", "value xxx"); //default_extension will be added. IndependentFunctionsServices is a php file.
			$EVC->getBroker()->callBusinessLogic("test.subtest.IndependentFunctionsServices", "foo", "value xxx"); //default_extension will be added. IndependentFunctionsServices is a php file.
			$xxx->callBusinessLogic("test.subtest.SubTestService.php", "SubTestService.executeBusinessLogicSubTest", null, array("no_cache" => false, "no_annotations" => true));
			$xxx->callBusinessLogic("test/subtest", "SubTestService.executeBusinessLogicSubTest", null, array("no_cache" => false, "no_annotations" => true)); //test/subtest is a folder
	*/";}s:25:"start_comments_line_index";i:69;s:26:"start_comments_token_index";i:594;s:23:"end_comments_line_index";i:96;s:24:"end_comments_token_index";i:594;s:22:"start_args_token_index";i:601;s:20:"end_args_token_index";i:618;s:9:"arguments";a:4:{s:10:"$module_id";N;s:11:"&$is_folder";N;s:15:"&$new_module_id";N;s:18:"$default_extension";s:4:"null";}s:25:"start_brackets_line_index";i:97;s:26:"start_brackets_token_index";i:620;s:23:"end_brackets_line_index";i:148;s:24:"end_brackets_token_index";i:973;s:14:"end_line_index";i:148;s:15:"end_token_index";i:973;}s:15:"getModulesAlias";a:20:{s:4:"name";s:15:"getModulesAlias";s:16:"start_line_index";i:151;s:17:"start_token_index";i:977;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:1;s:8:"comments";a:1:{i:0;s:36:"/********* MODULES ALIASES ********/";}s:25:"start_comments_line_index";i:150;s:26:"start_comments_token_index";i:975;s:23:"end_comments_line_index";i:150;s:24:"end_comments_token_index";i:975;s:22:"start_args_token_index";i:984;s:20:"end_args_token_index";i:986;s:9:"arguments";a:1:{s:18:"$modules_file_path";N;}s:25:"start_brackets_line_index";i:151;s:26:"start_brackets_token_index";i:988;s:23:"end_brackets_line_index";i:172;s:24:"end_brackets_token_index";i:1294;s:14:"end_line_index";i:172;s:15:"end_token_index";i:1294;}s:9:"addBroker";a:20:{s:4:"name";s:9:"addBroker";s:16:"start_line_index";i:175;s:17:"start_token_index";i:1298;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:0;s:8:"comments";a:1:{i:0;s:27:"/********* BROKER ********/";}s:25:"start_comments_line_index";i:174;s:26:"start_comments_token_index";i:1296;s:23:"end_comments_line_index";i:174;s:24:"end_comments_token_index";i:1296;s:22:"start_args_token_index";i:1303;s:20:"end_args_token_index";i:1312;s:9:"arguments";a:2:{s:7:"$broker";N;s:12:"$broker_name";s:5:"false";}s:25:"start_brackets_line_index";i:175;s:26:"start_brackets_token_index";i:1314;s:23:"end_brackets_line_index";i:180;s:24:"end_brackets_token_index";i:1357;s:14:"end_line_index";i:180;s:15:"end_token_index";i:1357;}s:9:"getBroker";a:20:{s:4:"name";s:9:"getBroker";s:16:"start_line_index";i:186;s:17:"start_token_index";i:1367;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:0;s:8:"comments";a:4:{i:0;s:74:"//If $broker_name is empty, the $broker_name = $this->default_broker_name.";i:1;s:84:"//If $this->default_broker_name is empty too, get the first elm from $this->brokers.";i:2;s:87:"//If $broker_name is numeric, get the correspondent key, based in the array_keys index.";i:3;s:112:"//If $broker_name is numeric, gets $this->brokers[ $broker_name -1 ], which means the $broker_name should be +1.";}s:25:"start_comments_line_index";i:182;s:26:"start_comments_token_index";i:1359;s:23:"end_comments_line_index";i:186;s:24:"end_comments_token_index";i:1365;s:22:"start_args_token_index";i:1372;s:20:"end_args_token_index";i:1385;s:9:"arguments";a:2:{s:12:"$broker_name";s:5:"false";s:13:"$return_false";s:5:"false";}s:25:"start_brackets_line_index";i:186;s:26:"start_brackets_token_index";i:1387;s:23:"end_brackets_line_index";i:206;s:24:"end_brackets_token_index";i:1596;s:14:"end_line_index";i:206;s:15:"end_token_index";i:1596;}s:10:"getBrokers";a:14:{s:4:"name";s:10:"getBrokers";s:16:"start_line_index";i:208;s:17:"start_token_index";i:1598;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:0;s:22:"start_args_token_index";i:1603;s:20:"end_args_token_index";i:1604;s:25:"start_brackets_line_index";i:208;s:26:"start_brackets_token_index";i:1606;s:23:"end_brackets_line_index";i:210;s:24:"end_brackets_token_index";i:1615;s:14:"end_line_index";i:210;s:15:"end_token_index";i:1615;}s:20:"setDefaultBrokerName";a:20:{s:4:"name";s:20:"setDefaultBrokerName";s:16:"start_line_index";i:213;s:17:"start_token_index";i:1619;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:0;s:8:"comments";a:1:{i:0;s:338:"//only set default_broker_name if exists, otherwise ignore it. $return_false must be true otherwise if we have multiple DBData Layers with different DBDrivers and the $default_broker_name is == to $GLOBALS[default_db_driver], it will give an exception. So by default the $return_false should be true, in order to don't give any exception.";}s:25:"start_comments_line_index";i:212;s:26:"start_comments_token_index";i:1617;s:23:"end_comments_line_index";i:213;s:24:"end_comments_token_index";i:1617;s:22:"start_args_token_index";i:1624;s:20:"end_args_token_index";i:1633;s:9:"arguments";a:2:{s:20:"$default_broker_name";N;s:13:"$return_false";s:4:"true";}s:25:"start_brackets_line_index";i:213;s:26:"start_brackets_token_index";i:1635;s:23:"end_brackets_line_index";i:230;s:24:"end_brackets_token_index";i:1733;s:14:"end_line_index";i:230;s:15:"end_token_index";i:1733;}s:20:"getDefaultBrokerName";a:14:{s:4:"name";s:20:"getDefaultBrokerName";s:16:"start_line_index";i:232;s:17:"start_token_index";i:1735;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:0;s:22:"start_args_token_index";i:1740;s:20:"end_args_token_index";i:1741;s:25:"start_brackets_line_index";i:232;s:26:"start_brackets_token_index";i:1743;s:23:"end_brackets_line_index";i:234;s:24:"end_brackets_token_index";i:1752;s:14:"end_line_index";i:234;s:15:"end_token_index";i:1752;}}s:5:"props";a:2:{s:8:"settings";a:11:{s:4:"name";s:8:"settings";s:4:"type";s:6:"public";s:5:"value";s:0:"";s:8:"var_type";s:0:"";s:6:"static";b:0;s:8:"abstract";b:0;s:5:"const";b:0;s:16:"start_line_index";i:18;s:17:"start_token_index";i:91;s:14:"end_line_index";i:18;s:15:"end_token_index";i:94;}s:12:"modules_path";a:11:{s:4:"name";s:12:"modules_path";s:4:"type";s:6:"public";s:5:"value";s:7:"array()";s:8:"var_type";s:0:"";s:6:"static";b:0;s:8:"abstract";b:0;s:5:"const";b:0;s:16:"start_line_index";i:19;s:17:"start_token_index";i:96;s:14:"end_line_index";i:19;s:15:"end_token_index";i:105;}}}}