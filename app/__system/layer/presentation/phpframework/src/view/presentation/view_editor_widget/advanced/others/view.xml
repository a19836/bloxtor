<?xml version="1.0" encoding="UTF-8"?>
<widget>
	<label>Call View</label>
	<tag>call-view</tag>
	<settings>
		<create_widget_class>TemplateCallViewWidget</create_widget_class>
	</settings>
	<menu_widget></menu_widget>
	<!-- Note that the template_widget must be the same than the entity/presentation/edit_simple_template_layout.php -->
	<template_widget><![CDATA[
		<div class="template_view_item">
			<div class="template_view_item_header">
				Call view <span class="view_name"></span><span class="view_project"> in <span></span> project.</span>
			</div>
			
			<input class="block hidden" type="text" value="" />
			<select class="region_block_type hidden">
				<option value>default</option>
				<option>string</option>
				<option>variable</option>
			</select>
			<div class="block_simulated_html"></div>
		</div>
	]]></template_widget>
	<properties></properties>
	<menu_css><![CDATA[
		.layout-ui-editor > .menu-widgets .menu-widget.menu-widget-call-view:before,
		  body > .menu-widget.menu-widget-call-view.ui-draggable-dragging:before {
			background-image:url('#widget_webroot_url#logo.svg');
		}
		
		.layout-ui-editor > .template-widgets > .widget-header.widget-header-call-view .options .props,
		   .layout-ui-editor > .template-widgets > .widget-header.widget-header-call-view .options .toggle {
			display:none !important;
		}
		
		.layout-ui-editor > .menu-settings.menu-settings-call-view .settings-id,
		   .layout-ui-editor > .menu-settings.menu-settings-call-view .settings-classes,
		   .layout-ui-editor > .menu-settings.menu-settings-call-view .settings-properties,
		   .layout-ui-editor > .menu-settings.menu-settings-call-view .settings-widget,
		   .layout-ui-editor > .menu-settings.menu-settings-call-view .settings-general,
		   .layout-ui-editor > .menu-settings.menu-settings-call-view .settings-dimension,
		   .layout-ui-editor > .menu-settings.menu-settings-call-view .settings-typography,
		   .layout-ui-editor > .menu-settings.menu-settings-call-view .settings-decorations,
		   .layout-ui-editor > .menu-settings.menu-settings-call-view .settings-events,
		   .layout-ui-editor > .menu-settings.menu-settings-call-view .settings-others,
		   .layout-ui-editor > .menu-settings.menu-settings-call-view .settings-extra,
			.layout-ui-editor > .menu-settings.menu-settings-call-view li.settings-tabs > ul > li.settings-tab-properties,
			.layout-ui-editor > .menu-settings.menu-settings-call-view li.settings-tabs > ul > li.settings-tab-widget,
			.layout-ui-editor > .menu-settings.menu-settings-call-view li.settings-tabs > ul > li.settings-tab-style,
			.layout-ui-editor > .menu-settings.menu-settings-call-view li.settings-tabs > ul > li.settings-tab-events,
			.layout-ui-editor > .menu-settings.menu-settings-call-view li.settings-tabs > ul > li.settings-tab-extra {
			display:none;
		}
		.layout-ui-editor > .menu-settings.menu-settings-call-view li.settings-tabs {
			margin-top:35px;
		}
		
		.layout-ui-editor > .menu-layers .group.group-call-view > ul {
			display:none !important;
		}
	]]></menu_css>
	<template_css><![CDATA[
		.main-droppable .template-widget.template-widget-call-view {
			width:100% !important;
			box-sizing:border-box !important;
		}
		.main-droppable.borders .template-widget.template-widget-call-view {
			width:calc(100% - var(--html-element-left-spacing) - var(--html-element-right-spacing)) !important;
			padding-top:0 !important;
		}
		.template-widget.template-widget-call-view:before {
			height:auto !important;
			margin-top:0 !important;
			background:none !important;
		}
		
		.template-widget.template-widget-call-view .template_view_item > .block,
		  .template-widget.template-widget-call-view .template_view_item > .region_block_type {
			display:none !important;
		}
		.template-widget.template-widget-call-view .template_view_item > .template_view_item_header {
			padding:5px !important;
			display:block !important;
			background:#000 !important;
			color:#fff !important;
			vertical-align:top !important;
			text-align:left !important;
			font-weight:normal !important;
			font-size:12px !important;
			font-family:-apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, "Noto Sans", sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji" !important;
		}
		.template-widget.template-widget-call-view > .template_view_item > .template_view_item_header > .view_name {
			cursor:pointer !important;
		}
		.template-widget.template-widget-call-view > .template_view_item > .template_view_item_header > .view_name:focus-visible {
			outline:1px solid #000;
			outline-offset:1px;
			border-radius:1px;
		}
		.template-widget.template-widget-call-view > .template_view_item > .template_view_item_header > .view_name:empty {
			width:100px;
			display:inline-block;
			background: linear-gradient(180deg, rgba(0,0,0,0) calc(100% - 1px), rgba(192,192,192,1) calc(100%), rgba(0,0,0,0) calc(100% + 1px));
		}
		.template-widget.template-widget-call-view > .template_view_item:not(.with_project) > .template_view_item_header > .view_project {
			display:none;
		}
	]]></template_css>
	<menu_js><![CDATA[
		function TemplateCallViewWidget(ui_creator, menu_widget) {
			var me = this;
			
			me.init = function() {
				menu_widget.attr({
					"data-on-parse-template-widget-html-func": ui_creator.obj_var_name + ".menu_widgets_objs['call-view'].parseHtml",
					"data-on-clean-template-widget-html-func": ui_creator.obj_var_name + ".menu_widgets_objs['call-view'].cleanHtml",
					"data-on-create-template-widget-func": ui_creator.obj_var_name + ".menu_widgets_objs['call-view'].onCreateTemplateWidget",
				});
				
				menu_widget.removeAttr("data-on-clone-menu-widget-func");
			};
			
			me.parseHtml = function(html_element) {
				if (html_element && html_element.nodeType == Node.ELEMENT_NODE && html_element.classList.contains("template_view_item"))
					return true;
			};
			
			me.cleanHtml = function(html_element) {
				var widget = $(html_element);
				var template_view_item = widget.children(".template_view_item");
				var view_id = template_view_item.children(".block").val();
				var view_id_type = template_view_item.children(".region_block_type").val();
				var project = template_view_item.find(" > .template_view_item_header > .view_project > span").text();
				project = project.replace(/&lt;/g, "<").replace(/&gt;/g, ">").replace(/<br>/g, "\n").replace(/&emsp;/g, "\t").replace(/&nbsp;/g, " ").replace(/&amp;/g, "&");
				
				var view_id_str = getArgumentCode(view_id, view_id_type);
				
				var p = project.replace(/"/g, "");
				var project_str = p && p != selected_project_id ? ', ' + project : '';
				
				var code = "<? \n"
					+ 'include $EVC->getViewPath(' + view_id_str + project_str + ');' + "\n"
					+ 'echo $EVC->getCMSLayer()->getCMSViewLayer()->getView(' + view_id_str + ');' + "\n"
					+ "?>";
				//console.log(code);
				
				return code;
			};
			
			me.onCreateTemplateWidget = function(widget, html_element) {
				me.prepareCreatedTemplateWidget(widget, html_element);
				
				if (!html_element) {
					if (typeof onIncludeViewTaskChooseFile == "function")
						me.onIncludeViewTaskChooseFile(widget);
					else {
						var new_view_id = prompt("View");
						
						if (new_view_id) {
							var template_view_item = widget.children(".template_view_item");
							template_view_item.find(" > .template_view_item_header > .view_name").text(new_view_id);
					  		me.updateViewName(widget);
						}
					}
				}
				else 
					me.simulateHtml(widget);
			};
			
			me.prepareCreatedTemplateWidget = function(widget, html_element) {
				var template_view_item = widget.children(".template_view_item");
				
				//prepare template_view_item to be the same than the default html in this widget
				if (html_element) {
					widget.html("");
					widget.append(html_element); //This is very important so we don't loose the events previously set in the children.
					
					template_view_item = widget.children(".template_view_item");
				}
				
				//prepare template_view_item
				var view_name = template_view_item.find(" > .template_view_item_header > .view_name");
				var project = template_view_item.find(" > .template_view_item_header > .view_project > span").text();
				var project = project.replace(/"/g, "");
				var with_project = project && project != selected_project_id;
				
				if (with_project)
					template_view_item.addClass("with_project");
				
				//prepare editable box
				widget.attr("contenteditable", "false");
				
				//prepare view name with editable name
				view_name.attr("contenteditable", "true")
				  .mouseup(function(e) {
					//prevents that the TextSelection open the inline menu
					e.preventDefault();
					e.stopPropagation();
					
					ui_creator.TextSelection.hideMenu(); //we need this in case the TextSelection menu is open.
				  })
				  .keyup(function(e) {
				  	me.updateViewName(widget);
				  })
				  .blur(function(e) {
				  	me.updateViewName(widget);
				  })
				  .click(function(e) {
				  	if (typeof onIncludeViewTaskChooseFile == "function")
						me.onIncludeViewTaskChooseFile(widget, true);
					else {
					  	var old_view_id = view_name.text();
					  	var new_view_id = prompt("View", old_view_id);
					  	
					  	if (new_view_id) {
					  		view_name.text(new_view_id);
					  		me.updateViewName(widget);
					  	}
					}
				  });
			};
			
			/* UTILS */
			
			me.updateViewName = function(widget) {
				//because this method is called in key pressed, we should give a timeout in case the user wants to write a word
				if (widget[0].timeout_id)
		  			clearTimeout(widget[0].timeout_id);
		  		
			  	widget[0].timeout_id = setTimeout(function() {
			  		if (widget[0].timeout_id) {
			  			clearTimeout(widget[0].timeout_id);
			  			widget[0].timeout_id = null;
			  		}
			  		
					var template_view_item = widget.children(".template_view_item");
					var span = template_view_item.find(" > .template_view_item_header > .view_name");
					
					var old_view_id = template_view_item.children(".block").val();
					var old_view_id_type = template_view_item.children(".region_block_type").val();
					var view_id = span.text();
					var view_id = ("" + view_id).replace(/^\s/g, "").replace(/\s$/g, ""); //trim
					var first_char = view_id[0];
					var last_char = view_id[view_id.length - 1];
					var view_id_type = "";
					var view_id_str = "";
					
					if (first_char == '$') { //if: $a"... or $a'...
						view_id = view_id_str = view_id.replace(/["']/g, "");
						view_id_type = "variable";
					}
					else {
						view_id_type = getArgumentType(view_id);
						view_id_type = view_id_type == "text" ? "string" : view_id_type;
						
						if (view_id_type == "string") {
							view_id = view_id.replace(/"/g, "");
							
							if (view_id)
								view_id_str = '"' + view_id + '"';
						}
					}
					
					template_view_item.children(".block").val(view_id);
					template_view_item.children(".region_block_type").val(view_id_type);
					
					//set new view_id if is different and set cursor caret where it was before.
					if (view_id_str != span.text()) {
						var doc = span[0].ownerDocument || span[0].document;
						var win = doc.defaultView || doc.parentWindow;
						var selection = win.getSelection();
						
						var range = selection.getRangeAt(0);
						var offset = range.endOffset > 0 ? range.endOffset - 1 : 0;
						
						span.text(view_id_str);
						
						try {
							var range = doc.createRange();
							range.setStart(span[0].childNodes[0], offset);
							range.collapse(true);
							selection.removeAllRanges();
							selection.addRange(range);
						}
						catch(e) {
							if (console && console.log)
								console.log(e);
						}
					}
					
					if (old_view_id != view_id || old_view_id_type != view_id_type)
						me.simulateHtml(widget);
			  	}, 1000);
			};
			
			me.updateWidgetWithViewId = function(widget, view_id, project) {
				//preparing view id
				view_id = ("" + view_id).replace(/^\s/g, "").replace(/\s$/g, ""); //trim
				
				//by default the view_id is always the name of a file, so it should be taken care and convert to a string.
				var view_id_quotes = getArgumentCode(view_id, "string"); 
				var project_quotes = getArgumentCode(project, "string");
				
				var with_project = project && project != selected_project_id;
				
				//preparing widget
				var template_view_item = widget.children(".template_view_item");
				
				if (with_project)
					template_view_item.addClass("with_project");
				else
					template_view_item.removeClass("with_project");
				
				template_view_item.find(" > .template_view_item_header > .view_name").text(view_id_quotes);
				template_view_item.find(" > .template_view_item_header > .view_project > span").text(project_quotes);
				template_view_item.children(".block").val(view_id);
				template_view_item.children(".region_block_type").val("string");
				
				//call simulate view
				//me.simulateHtml(widget); //Doesn't make sense to call it here because this function is only called when the widget is code, this is, on edit_view_advanced and edit_entity_advanced.
			};
			
			me.simulateHtml = function(widget) {
				var template_view_item = widget.children(".template_view_item");
				
				if (template_view_item[0]) {
					var view_id = template_view_item.children(".block").val();
					var doc = widget[0].ownerDocument || widget[0].document;
					var win = doc.defaultView || doc.parentWindow;
					
					//call simulate view
					if (view_id && typeof win.prepareRegionBlockSimulatedHtml == "function")
						win.prepareRegionBlockSimulatedHtml(template_view_item[0]);
					else {
						var block_simulated_html = template_view_item.children(".block_simulated_html");
						block_simulated_html.html("");
						block_simulated_html[0].setAttribute("contenteditable", "false");
						block_simulated_html[0].setAttribute("spellcheck", "false");
					}
				}
			};
			
			me.onIncludeViewTaskChooseFile = function(widget, do_not_delete_widget) {
				var popup = $("#choose_view_from_file_manager");
				var dummy = $('<div>'
						+ '<div class="view">'
							+ '<input class="view" value="" />'
						+ '</div>'
					+ '</div>');
				
				MyFancyPopup.init({
					elementToShow: popup,
					parentElement: document,
					
					targetField: dummy,
					updateFunction: function(elm) {
						chooseIncludeView(elm);
						
						var view_id = dummy.find("input").val();
						var project = "";
						
						if (view_id) {
							var node = chooseViewFromFileManagerTree.getSelectedNodes();
							node = node[0];
							
							var project_path = getNodeProjectPath(node);
							project_path = project_path && project_path.substr(project_path.length - 1) == "/" ? project_path.substr(0, project_path.length - 1) : project_path;
							project = project_path == selected_project_id ? "" : project_path;
						}
						
						var template_region = widget.parent().closest(".template_region");
						
						if (!template_region[0])
							me.updateWidgetWithViewId(widget, view_id, project);
						else {
							template_region.find(" > .template_region_name > .template_region_name_link").trigger("click"); //add new region-block item
			    				var new_item = template_region.children(".template_region_items").children(".template_region_item").last(); //get last inserted item
			    				
			    				if (new_item) {
			    					widget.after(new_item);
			    					
			    					//change to view
			    					var type = new_item.children(".type");
			    					type.val(4);
			    					type.trigger("change");
			    					
			    					//add new block to available block list
						    		addBlockToAvailableBlocksList(new_item, view_id, project ? project : selected_project_id);
						    		
						    		//set block_options from new item
						    		var block_options = new_item.children(".block_options");
						    		setRegionBlockOption(block_options, view_id, project ? project : selected_project_id);
			    				}
			    				
			    				//remove widget
			    				widget.remove();
						}
						
						dummy.remove();
					},
					onClose: function() {
						if (!do_not_delete_widget) {
							var template_region = widget.parent().closest(".template_region");
							
							if (template_region[0])
								ui_creator.deleteTemplateWidget(widget); //update menu layer from layout ui editor
						}
					},
				});
				
				MyFancyPopup.showPopup();
			};
		}
	]]></menu_js>
</widget>
