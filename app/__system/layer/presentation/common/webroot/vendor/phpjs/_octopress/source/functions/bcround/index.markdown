---
layout: page
title: "JavaScript bcround function"
comments: true
sharing: true
footer: true
sidebar: false
alias:
- /functions/view/bcround:873
- /functions/view/bcround
- /functions/view/873
- /functions/bcround:873
- /functions/873
---
<!-- Generated by Rakefile:build -->
A JavaScript equivalent of PHP's bcround

{% codeblock bc/bcround.js lang:js https://raw.github.com/kvz/phpjs/master/functions/bc/bcround.js raw on github %}
function bcround (val, precision) {
  // http://kevin.vanzonneveld.net
  // +   original by: lmeyrick (https://sourceforge.net/projects/bcmath-js/)
  // -    depends on: _phpjs_shared_bc
  // *     example 1: bcround(1, 2);
  // *     returns 1: 3
  //  @todo: implement these testcases
  //        bcscale(0);
  //
  //        bcmath.test.result('bcround', 1, '-2', bcround('-1.5', 0));
  //        bcmath.test.result('bcround', 2, '-1.1235', bcround('-1.1234567', 4));
  //        bcmath.test.result('bcround', 3, '2', bcround('1.5', 0));
  //        bcmath.test.result('bcround', 4, '1.1235', bcround('1.1234567', 4));
  //        bcmath.test.result('bcround', 5, '1', bcround('1.499999999', 0));
  //        bcmath.test.result('bcround', 6, '2', bcround('1.5555555555555555555', 0));
  //        bcmath.test.result('bcround', 7, '1.44', bcround('1.444999', 2));
  //        bcmath.test.result('bcround', 8, '-1.44', bcround('-1.444999', 2));
  var libbcmath = this._phpjs_shared_bc();

  var temp, result, digit;
  var right_operand;

  // create number
  temp = libbcmath.bc_init_num();
  temp = libbcmath.php_str2num(val.toString());

  // check if any rounding needs
  if (precision >= temp.n_scale) {
    // nothing to round, just add the zeros.
    while (temp.n_scale < precision) {
      temp.n_value[temp.n_len + temp.n_scale] = 0;
      temp.n_scale++;
    }
    return temp.toString();
  }

  // get the digit we are checking (1 after the precision)
  // loop through digits after the precision marker
  digit = temp.n_value[temp.n_len + precision];

  right_operand = libbcmath.bc_init_num();
  right_operand = libbcmath.bc_new_num(1, precision);

  if (digit >= 5) {
    //round away from zero by adding 1 (or -1) at the "precision".. ie 1.44999 @ 3dp = (1.44999 + 0.001).toString().substr(0,5)
    right_operand.n_value[right_operand.n_len + right_operand.n_scale - 1] = 1;
    if (temp.n_sign == libbcmath.MINUS) {
      // round down
      right_operand.n_sign = libbcmath.MINUS;
    }
    result = libbcmath.bc_add(temp, right_operand, precision);
  } else {
    // leave-as-is.. just truncate it.
    result = temp;
  }

  if (result.n_scale > precision) {
    result.n_scale = precision;
  }
  return result.toString();
}
{% endcodeblock %}

 - [view on github](https://github.com/kvz/phpjs/blob/master/functions/bc/bcround.js)
 - [edit on github](https://github.com/kvz/phpjs/edit/master/functions/bc/bcround.js)

### Example 1
This code
{% codeblock lang:js example %}
bcround(1, 2);
{% endcodeblock %}

Should return
{% codeblock lang:js returns %}
3
{% endcodeblock %}


### Other PHP functions in the bc extension
{% render_partial _includes/custom/bc.html %}
